(function () {
    'use strict';

    const stylesheet = new CSSStyleSheet();
    stylesheet.replaceSync(`.ring {
    fill: #a7aac3;
    stroke: none;
}
.ring:hover {
    fill: #4b4e6e;
}
.inner-ring {
    fill: #7c80a1;
}
.inner-ring:hover {
    fill: #4b4e6e;
}
#pointer {
    stroke: #0f112f;
    stroke-width: 6;
    stroke-linecap: round;
}
#dial-container {
    max-width: 100px;
}`);

    var html = "<div id=\"dial-container\">\n    <svg id=\"dial-svg\" version=\"1.1\" viewBox=\"0 0 100 100\">\n      <circle class=\"inner-ring\" cx=\"50\" cy=\"50\" r=\"50\"/>\n      <circle class=\"ring\" cx=\"50\" cy=\"50\" r=\"45\"/>\n      <line id=\"pointer\" x1=\"50\" y1=\"50\" x2=\"50\" y2=\"95\"/>\n    </svg>\n</div>";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    class Dial extends HTMLElement {
        constructor() {
            super();
            this.angle = Math.PI / 2.0;
            this.root = this.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(stylesheet);
            this.root.innerHTML = html;
            this.ring = this.root.querySelector('.ring');
            this.line = this.root.querySelector('#pointer');
        }
        connectedCallback() {
            let down = false;
            let downY = -1;
            this.ring.addEventListener('pointerdown', (e) => {
                down = true;
                downY = e.clientY;
                console.log('down', downY);
            });
            document.addEventListener('pointermove', (e) => {
                if (down) {
                    const deltaY = downY - e.clientY;
                    downY = e.clientY;
                    console.log('move', deltaY);
                    this.angle += deltaY / 200.0;
                    const newX = 50 + 45 * Math.cos(this.angle);
                    const newY = 50 - 45 * Math.sin(this.angle);
                    this.line.setAttribute('y2', `${newY}`);
                    this.line.setAttribute('x2', `${newX}`);
                }
            });
            document.addEventListener('pointerup', (e) => {
                if (down) {
                    down = false;
                    console.log('up');
                }
            });
        }
        disconnectedCallback() {
        }
        attributeChangedCallback(name, oldValue, newValue) {
        }
    }
    Dial.ELEMENT = "example-dial";
    Dial.observedAttributes = [
        'min-value',
        'max-value',
        'value'
    ];

    customElements.define(Dial.ELEMENT, Dial);

})();
//# sourceMappingURL=example.min.js.map
