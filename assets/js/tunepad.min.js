(function () {
    'use strict';

    var _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;
    const sheet$f = new CSSStyleSheet();sheet$f.replaceSync(".cell-block {\n    min-width: 300px;\n    padding-bottom: 2rem;\n}\n\n.cell-wrapper {\n    border-radius: 10px;\n    padding: 0 8px;\n    background-color: #946161;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n}\n\nheader {\n    background-color: var(--cell-header-bg-color);\n    height: 60px;\n    border-top: 2px solid #667;\n    border-bottom: 2px solid #667;\n    border-left: 2px solid #414252;\n    border-right: 2px solid #414252;\n    padding: 10px 10px 10px 15px;\n    box-sizing: border-box;\n    display: flex;\n}\n\n.gadget-icon {\n    width: 35px;\n    height: 35px;\n    background-color: var(--piano-color);\n    border-radius: 50%;\n    margin-right: 10px;\n    background-image: url(/assets/images/instruments/synth.svg);\n    background-size: 70%;\n    background-repeat: no-repeat;\n    background-position: center;\n}\n\n.definitions .gadget-icon {\n    background-color: var(--definitions-color);\n    background-image: url(/assets/images/instruments/definitions.svg);\n}\n.piano .gadget-icon {\n    background-color: var(--piano-color);\n    background-image: url(/assets/images/instruments/synth.svg);\n}\n.bass .gadget-icon {\n    background-color: var(--bass-color);\n    background-image: url(/assets/images/instruments/bass.svg);\n}\n.guitar .gadget-icon {\n    background-color: var(--guitar-color);\n    background-image: url(/assets/images/instruments/guitar.svg);\n}\n.marimba .gadget-icon {\n    background-color: var(--marimba-color);\n    background-image: url(/assets/images/instruments/marimba.svg);\n}\n.drums .gadget-icon, .drumkit .gadget-icon {\n    background-color: var(--drum-color);\n    background-image: url(/assets/images/instruments/drumkit.svg);\n}\n.sampler .gadget-icon {\n    background-color: var(--sound-color);\n    background-image: url(/assets/images/instruments/voxel.svg);\n}\n.sound .gadget-icon {\n    background-color: var(--sound-color);\n    background-image: url(/assets/images/instruments/sampler.svg);\n}\n\nheader .gadget-name {\n    width: 100%;\n    max-width: 450px;\n    color: white;\n    font-weight: bold;\n    font-family: var(--main-font);\n    font-size: 15px;\n    border: 1px solid transparent;\n    outline: none;\n    background-color: transparent;\n    padding: 2px 5px;\n    position: relative;\n    top: -5px;\n    border-radius: 3px;\n}\nheader .gadget-name:hover {\n    background-color: #fff2;\n    border: 1px solid #fff6;\n}\nheader .gadget-name:focus {\n    background-color: #fffd;\n    color: #333;\n    font-weight: normal;\n    border: 1px solid black;\n}\nheader .gadget-info {\n    color: #fff8;\n    font-size: 11px;\n    font-weight: normal;\n    padding-left: 7px;\n    position: relative;\n    top: -8px;\n}\n#uncompiled {\n    color: white;\n    font-weight: bold;\n    font-size: 120%;\n}\n\n.badges {\n    display: flex;\n    align-items: center;\n}\n.badge {\n    min-width: 30px;\n    text-align: center;\n    margin: 0 0.25rem;\n}\n.badge svg { \n    width: 25px;\n    height: 25px;\n    vertical-align: middle;\n}\n.badge#error-badge svg { fill: var(--error-badge-color); }\n.badge#warning-badge svg { fill: var(--warn-badge-color); }\n.badge#pass-badge svg,\n.badge#fail-badge svg { \n    fill: white; \n    width: 15px; height: 15px;\n    position: relative;\n    top: -1px;\n}\n.badge#pass-badge {\n    background-color: var(--pass-badge-color);\n    border-radius: 0.75em;\n    padding: 0.2em 0.4em;\n    color: white;\n}\n.badge#fail-badge {\n    background-color: var(--fail-badge-color);\n    border-radius: 0.75em;\n    padding: 0.2em 0.4em;\n    color: white;\n}\n.badge#output-badge { \n    background-color: var(--output-badge-color);\n    color: white;\n    border-radius: 0.75em;\n    min-width: 1.5em;\n    padding: 0.2em 0.4em;\n}\n.badge.hidden { display: none; }\n\nfooter, .toolbar {\n    display: flex;\n    background-color: #535563;\n    border-left: 2px solid #414252;\n    border-right: 2px solid #414252;\n    color: #fffc;\n}\n.toolbar {\n    padding: 8px 10px;\n    line-height: 34px;\n}\n\n.expander { flex: 1; }\n\n.toolbar button {\n    outline: none;\n    border: 2px solid #9194A1;\n    color: rgba(255, 255, 255, 0.75);\n    background-color: #fff2;\n    box-shadow: 2px 2px 3px rgba(0, 0, 0, 0.1);\n    width: 40px;\n    height: 35px;\n    border-radius: 5px;\n    margin: 3px;\n    font-size: 14px;\n    text-align: center;\n    white-space: nowrap;\n    transition: all 100ms ease-out;\n}\n.toolbar button svg { \n    width: 15px;\n    height: 15px; \n    fill: rgba(255, 255, 255, 0.75);; \n    vertical-align: middle;\n}\n.toolbar button:active { background-color: rgba(255, 255, 255, 0.45); }\n.toolbar button:hover { border: 2px solid #DDD; }\n.toolbar button.hidden { display: none; }\n.toolbar button:disabled svg { fill: #fff3; }\n.toolbar button:disabled:hover { border: 2px solid #9194A1; }\n.toolbar button:disabled:active { background-color: #fff2; }\n\n.toolbar button.combo {\n    width: 48px;\n    position: relative;\n    text-align: left;\n}\n.toolbar button.combo::after {\n    content: \"▼\";\n    font-size: 70%;\n    position: absolute;\n    right: 3px;\n    bottom: 8px;\n}\n.toolbar button.combo tunepad-icon {\n    position: relative;\n    left: -5px;\n}\n\n#copy-code-button { display: none; }\n\n#loader svg {\n    animation: spin-animation 2s infinite;\n    animation-timing-function: linear;\n}\n\n.cell-contents, .timeline-wrapper {\n    padding: 0 12px;\n    border-left: 2px solid #414252;\n    border-right: 2px solid #414252;\n    background-color: #535563;\n    position: relative;\n}\n\n.cell-contents { \n    flex: 1;\n    overflow: hidden;\n}\n\n.timeline-wrapper {\n    padding-bottom: 1em;\n    height: 115px;\n}\n\n.timeline-wrapper tunepad-timeline {\n    display: block;\n    width: 100%;\n    height: 100%;\n}\n\n.timeline-wrapper:has(tunepad-timeline[view=\"hidden\"]) {\n    display: none;\n}\n\n.definitions tunepad-instrument {\n    display: none;\n}\n\n/* Hide menu options for definitions cells */\n.definitions context-menu-item#midi-in { display: none; }\n.definitions context-menu-item#midi-out { display: none; }\n\ntunepad-instrument {\n    background-color: #535563;\n    border-left: 2px solid #414252;\n    border-right: 2px solid #414252;\n}\n\n:host([show-instrument=\"false\"]) tunepad-instrument {\n    display: none;\n}\n\n#loader-background {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 100;\n    background-color: #000a;\n    display: none;\n    align-items: center;\n    border-radius: 10px;\n}\n#loader-background.show {\n    display: flex;\n}\n.loader-text {\n    color: white;\n    text-align: center;\n    flex: 1;\n    font-size: 110%;\n}\n#loader-background img {\n    display: block;\n    margin: 1rem auto;\n    width: 90px;\n}\n\n\nfooter {\n    padding: 4px 15px;\n    box-sizing: border-box;\n    color: #fffa;\n    font-size: 10px;\n    user-select: none;\n}\n\nfooter button {\n    outline: none;\n    border: none;\n    color: rgba(255, 255, 255, 0.75);\n    width: 40px;\n    height: 30px;\n    font-size: 14px;\n    background-color: transparent;\n}\nfooter button svg { \n    width: 16px;\n    height: 16px; \n    fill: rgba(255, 255, 255, 0.7);\n    vertical-align: middle;\n}\nfooter button:hover svg { fill: rgba(255, 255, 255, 0.8); }\nfooter button:active svg { fill: rgba(255, 255, 255, 0.9); }\n\n#info-bar {\n    padding: 4px 15px;\n    box-sizing: border-box;\n    font-size: 11px;\n    user-select: none;\n    display: none;\n    color: #666;\n}\n\n#info-bar div {\n    margin: 0 0.75rem;\n}\n#info-name {\n    flex: 1;\n}\n\n#info-instrument:hover,\n#info-time:hover,\n#info-key:hover,\n#info-bpm:hover {\n    text-decoration: underline;\n}\n\n#info-instrument:active,\n#info-time:active,\n#info-key:active,\n#info-bpm:active {\n    opacity: 0.75;\n}\n\n.module-name {\n    font-family: monospace;\n    font-weight: normal;\n    font-size: 10px;\n    text-align: left;\n    display: none;\n    flex: 1;\n}\n.definitions .module-name { display: block; }\n\n.autocompile-status {\n    flex: 1;\n    text-align: center;\n}\n\n#last-saved {\n    flex: 1;\n    text-align: right;\n}\n\n@media print {\n    .buttons { display: none; }\n}\n\n@keyframes spin-animation {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(359deg);\n    }\n}\n");

    const sheet$e = new CSSStyleSheet();sheet$e.replaceSync("/* minimal cell class */\n\n:host(.minimal) header { display: none; }\n\n:host(.minimal) .cell-wrapper {\n    border-radius: 0;\n    padding: 0;\n    background-color: transparent;\n}\n\n:host(.minimal) #transport-tools {\n/*:host(.minimal) tunepad-instrument::part(toolbar) { */\n    background-color: rgb(205, 205, 205);\n    border-top: 1px solid black;\n    border-right: 1px solid black;\n    border-left: 1px solid black;\n    padding: 2px 10px;\n    order: 2;\n}\n\n:host(.minimal) #transport-tools button {\n    color: black;\n    box-shadow: none;\n    border: 1px solid black;\n    background-color: white;\n}\n\n:host(.minimal) #transport-tools button:hover {\n    background-color: #fff2;\n}\n\n:host(.minimal) #transport-tools button:active {\n    background-color: #fff4;\n}\n\n:host(.minimal) #transport-tools button svg {\n    fill: black;\n}\n\n:host(.minimal) .cell-contents {\n    padding: 0;\n    border: 1px solid black;\n    background-color: transparent;\n    order: 3;\n    margin-bottom: 1rem;\n}\n\n:host(.minimal) .timeline-wrapper {\n    padding: 0;\n    border: 1px solid black;\n    order: 1;\n    margin-bottom: 1rem;\n}\n\n:host(.minimal) tunepad-instrument {\n    border: none;\n    order: 4;\n    padding: 0.5rem;\n}\n\n:host(.minimal) #midi-button {\n    display: none;\n}\n\n:host(.minimal) #loader-background {\n    border-radius: 0;\n}\n\n:host(.minimal) footer {\n    order: 5;\n}\n\n:host(.minimal) python-editor::part(messages) {\n    border-top: 1px solid #555;\n}\n\n/*\n#last-saved {\n    text-align: right;\n    font-size: 11px;\n    margin-top: 0.25rem;\n    color: #444;\n    user-select: none;\n}\n.toolbar button.instrument-menu-button {\n    width: 16rem;\n    text-align: left;\n    text-transform: uppercase;\n    display: flex;\n    align-items: center;\n    font-size: 90%;\n}\n.patch-name { flex: 1; }\n\n@media print {\n    .buttons { display: none; }\n}\n\n@keyframes spin-animation {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(359deg);\n    }\n}\n*/\n");

    const sheet$d = new CSSStyleSheet();sheet$d.replaceSync("/* tutorial cell class */\n\n:host(.tutorial) header { display: none; }\n\n:host {\n    padding-bottom: 0.5rem;\n}\n\n:host(.tutorial) .toolbar {\n    border: none;\n    padding: 0 1rem;\n    background-color: #4c4d52;\n    border-bottom: 1px solid #fff2;\n    border-top-left-radius: 1rem;\n    border-top-right-radius: 1rem;\n}\n:host(.tutorial[theme=\"dark\"]) .toolbar {\n    background-color: #4c4d52;\n    border-bottom: 1px solid #fff2;\n}\n:host(.tutorial[theme=\"light\"]) .toolbar {\n    background-color: rgb(230, 236, 253);\n    border-bottom: 1px solid #a3c9ff;\n}\n\n\n:host(.tutorial) .toolbar button {\n    border: none;\n    color: #ccc;\n    fill: #ccc;\n    background-color: transparent;\n    box-shadow: none;\n}\n:host(.tutorial[theme=\"dark\"]) .toolbar button {\n    color: #ccc;\n    fill: #ccc;\n}\n:host(.tutorial[theme=\"light\"]) .toolbar button {\n    color: #333;\n    fill: #333;\n}\n:host(.tutorial) .toolbar button:hover {\n    opacity: 0.5;\n}\n:host(.tutorial) .toolbar button svg {\n    color: #ccc;\n    fill: #ccc;\n}\n\n:host(.tutorial) .toolbar button:active svg {\n    color: rgb(39,85,200) !important;\n    fill: rgb(39,85,200) !important;\n}\n\n:host(.tutorial[theme=\"dark\"]) .toolbar button svg {\n    color: #ccc;\n    fill: #ccc;\n}\n:host(.tutorial[theme=\"light\"]) .toolbar button svg {\n    color: #333;\n    fill: #333;\n}\n\n:host(.tutorial) #copy-code-button { display: block; }\n\n:host(.tutorial) .cell-wrapper {\n    padding: 0;\n    background-color: transparent;\n    border: 1px solid #888;\n    border-radius: 1rem;\n}\n:host(.tutorial[theme=\"dark\"]) .cell-wrapper { border: 1px solid #888; }\n:host(.tutorial[theme=\"light\"]) .cell-wrapper { border: 1px solid #a3c9ff; }\n\n\n:host(.tutorial) .cell-contents {\n    padding: 0;\n    border: none;\n    background-color: transparent;\n}\n\n:host(.tutorial.errors) python-editor::part(editor) {\n    border-color: var(--error-badge-color);\n    border-style: solid;\n    border-width: 2px;\n}\n\n:host(.tutorial) .timeline-wrapper {\n    border: none;\n    padding: 0;\n    border-bottom: 1px solid #fff2;\n    height: 100px;\n    background-color: rgb(65, 66, 80);\n}\n:host(.tutorial[theme=\"dark\"]) .timeline-wrapper {\n    border-bottom: 1px solid #fff2;\n    background-color: rgb(65, 66, 80);\n}\n:host(.tutorial[theme=\"light\"]) .timeline-wrapper {\n    border-bottom: 1px solid #a3c9ff;\n    background-color: rgb(247, 249, 255);\n}\n\n\n:host(.tutorial) tunepad-instrument {\n    background-color: #4c4d52;\n    border: none;\n    padding: 0.5rem;\n}\n:host(.tutorial[theme=\"light\"]) tunepad-instrument {\n    background-color: #59739c;\n}\n\n:host(.tutorial) footer { display: none; }\n\n:host(.tutorial) #info-bar {\n    display: flex;\n    background-color: #4c4d52;\n    border-bottom: 1px solid #fff2;\n    color: #ccc;\n    border-bottom-left-radius: 1rem;\n    border-bottom-right-radius: 1rem;\n}\n\n:host(.tutorial[theme=\"light\"]) #info-bar {\n    background-color: rgb(247, 249, 255);\n    border-top: 1px solid #a3c9ff;\n    color: #666;\n}\n:host(.tutorial[theme=\"dark\"]) #info-bar {\n    background-color: #4c4d52;\n    border-bottom: 1px solid #fff2;\n    color: #ccc;\n}\n\n");

    const sheet$c = new CSSStyleSheet();sheet$c.replaceSync("/*\n * TunePad\n * Northwestern University\n * michael-horn@northwestern.edu\n *\n * This project was funded by the National Science Foundation (grant DRL-1612619).\n * Any opinions, findings and conclusions or recommendations expressed in this\n * material are those of the author(s) and do not necessarily reflect the views\n * of the National Science Foundation (NSF).\n */\n:host {\n    --error-red: #da575d;\n    --error-red-bg: #f9e4e5;\n    --fail-red: #da575d;\n    --fail-red-bg: #f9e4e5;\n    --info-blue: #4b90d7;\n    --pass-green: green;\n    --pass-green-bg: #ded;\n    --warn-yellow: orange;\n    --warn-yellow-bg: #fed;\n    --output-badge-color: #87c44e;\n    --error-badge-color: #da575d;\n    --warn-badge-color: orange;\n    --fail-badge-color: #da575d;\n    --pass-badge-color: green;\n    --piano-color: #2f9aef;\n    --guitar-color: #f0c229;\n    --marimba-color: #f6843f;\n    --sequencer-color: #f6843f;\n    --bass-color: #ec5eb2;\n    --drum-color: #86c44e;\n    --sound-color: lightseagreen;\n    --text-color: #30acac;\n    --definitions-color: #996dd9;\n    --cell-header-bg-color: #2e303f;\n}\n");

    const sheet$6$1 = new CSSStyleSheet();sheet$6$1.replaceSync("#ring {\n    fill: #3e3e3c;\n    stroke: none;\n}\n.track {\n    fill: #181818;\n    stroke: black;\n    stroke-width: 1.5;\n}\n#arc {\n    stroke: #7ff;\n    stroke-width: 7;\n    fill: none;\n}\n.active #arc {\n    stroke: white;\n}\n#pointer {\n    stroke: #ddd;\n    stroke-width: 6;\n    pointer-events: none;\n}\n#container {\n    max-width: 100px;\n    user-select: none;\n}\n.tick {\n    fill: #999;\n}\n.cover {\n    fill: #fff2;\n    stroke: #fff1;\n    stroke-width: 4;\n    pointer-events: none;\n}");

    var html$6$1 = "<div id=\"container\">\n    <svg version=\"1.1\" viewBox=\"-50 -50 100 100\">\n        <g transform=\"rotate(135, 0, 0)\">\n            <circle class=\"track\" cx=\"0\" cy=\"0\" r=\"49\"/>\n            <path id=\"arc\" d=\"\"/>\n            <circle id=\"ring\" cx=\"0\" cy=\"0\" r=\"36\"/>\n            <line id=\"pointer\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"46\"/>\n            <circle class=\"cover\" cx=\"0\" cy=\"0\" r=\"27\"/>\n            <circle class=\"tick\" cx=\"55\" cy=\"0\" r=\"4\"/>\n            <circle class=\"tick\" cx=\"0\" cy=\"-55\" r=\"4\"/>\n        </g>\n    </svg>\n</div>\n";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    class Dial extends HTMLElement {
        /** current value between [ min, max ] */
        get value() {
            const range = this.maxValue - this.minValue;
            return this.minValue + this._value * range;
        }
        /** set the value of the dial (clamped between min and max) */
        set value(v) {
            const range = this.maxValue - this.minValue;
            v = Math.min(this.maxValue, Math.max(this.minValue, v));
            this._value = (v - this.minValue) / range;
            this._redraw();
        }
        // which direction is the dial pointing (radians)?
        get angle() {
            const sweep = this.maxAngle - this.minAngle;
            return this._value * sweep + this.minAngle;
        }
        constructor() {
            super();
            // minimum angle of the dial
            this.minAngle = 0.0;
            // maximum angle of the dial
            this.maxAngle = Math.PI * 1.5;
            // minimum possible value of the dial
            this.minValue = 0.0;
            // maximum possible value of the dial
            this.maxValue = 1.0;
            // current value between [ 0.0, 1.0 ]
            this._value = 0.0;
            this._startVal = 0.0;
            this.root = this.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(sheet$6$1);
            this.root.innerHTML = html$6$1;
            this.container = this.root.querySelector('#container');
            this.ring = this.root.querySelector('#ring');
            this.line = this.root.querySelector('#pointer');
            this.arc = this.root.querySelector('#arc');
            this._value = 1;
        }
        connectedCallback() {
            this.value = this._startVal;
            this._redraw();
            let down = false;
            let downY = -1;
            this.ring.addEventListener('pointerdown', (e) => {
                down = true;
                downY = e.clientY;
                this.container.classList.add('active');
            });
            document.addEventListener('pointermove', (e) => {
                if (down) {
                    const deltaY = downY - e.clientY;
                    downY = e.clientY;
                    this._value = Math.max(0, Math.min(1.0, this._value + deltaY / 100.0));
                    this._redraw();
                    this.emitEvent('adjusted');
                }
            });
            document.addEventListener('pointerup', (e) => {
                if (down) {
                    down = false;
                    this.container.classList.remove('active');
                    this.emitEvent('changed');
                }
            });
        }
        disconnectedCallback() { }
        /**
         * When an attribute is changed on our custom component, this gets fired...
         */
        attributeChangedCallback(name, oldValue, newValue) {
            if (name === 'min') {
                this.minValue = parseFloat(newValue);
            }
            else if (name === 'max') {
                this.maxValue = parseFloat(newValue);
            }
            else if (name === 'value') {
                // if we're not connected yet, just hold on to this initial value
                // because it's possible that the min and max attributes haven't been set
                if (!this.isConnected) {
                    this._startVal = parseFloat(newValue);
                }
                // otherwise directly change the property
                else {
                    this.value = parseFloat(newValue);
                }
            }
        }
        /**
         * Fire custom events whenever the value is changed by the user
         */
        emitEvent(name) {
            this.dispatchEvent(new CustomEvent(name, {
                bubbles: true,
                composed: true,
                detail: {
                    origin: this,
                    value: this.value
                }
            }));
        }
        _redraw() {
            const cos = Math.cos(this.angle);
            const sin = Math.sin(this.angle);
            const r1 = 15, r2 = 33, r3 = 43;
            this.line.setAttribute('x1', `${r1 * cos}`);
            this.line.setAttribute('y1', `${r1 * sin}`);
            this.line.setAttribute('x2', `${r2 * cos}`);
            this.line.setAttribute('y2', `${r2 * sin}`);
            this.arc.setAttribute('d', this._describeArc(r3));
        }
        _describeArc(r) {
            const sx = r * Math.cos(this.angle);
            const sy = r * Math.sin(this.angle);
            const ex = r * Math.cos(0);
            const ey = r * Math.sin(0);
            const large = (this.angle >= Math.PI) ? 1 : 0;
            return ["M", ex, ey, "A", r, r, 0, large, 1, sx, sy].join(" ");
        }
    }
    Dial.ELEMENT = "range-dial";
    Dial.observedAttributes = [
        'min',
        'max',
        'value'
    ];

    const sheet$5$1 = new CSSStyleSheet();sheet$5$1.replaceSync(".menu-container {\n  position: relative;\n}\n\ncontext-menu {\n    position: absolute;\n    background-color: white;\n    border: 1px solid #0001;\n    border-radius: 8px;\n    padding: 8px 0;\n    z-index: 100;\n    display: flex;\n    flex-direction: column;\n    min-width: 200px;\n    box-shadow: 0px 3px 5px #0005;\n    -webkit-touch-callout: none;\n    user-select: none;\n    margin: 0;\n}\ncontext-menu.hidden { display: none; }\ncontext-menu:hover { cursor: pointer; }\ncontext-menu.terminal {\n    max-height: 70vh;\n    overflow-y: auto !important;\n}\ncontext-menu.open-up {\n  bottom: 30px;\n}\ncontext-menu-item {\n    line-height: 140%;\n    display: flex;\n    align-items: center;\n    font-size: 14px;\n    font-weight: normal;\n    color: #3C4E60;\n    outline: none;\n    border: none;\n    padding: 5px 20px 5px 10px;\n    white-space: nowrap;\n    position: relative;\n    text-align: left;\n}\ncontext-menu-item:hover { background: rgba(0, 0, 0, 0.15); }\ncontext-menu-item:active { background: rgba(0, 0, 0, 0.2); }\ncontext-menu-item.highlight { background: rgba(0, 0, 0, 0.085); }\ncontext-menu-item.disabled { color: #aaa; }\ncontext-menu-item.disabled:hover { background-color: transparent; }\ncontext-menu-item.disabled:active { background-color: transparent; }\ncontext-menu-item.disabled .icon { opacity: 0.3; }\ncontext-menu-item.hidden { display: none; }\ncontext-menu-item > context-menu { left: 98%; top: -10px; }\n\ncontext-menu-item .icon {\n    width: 1.1rem;\n    height: 1.1rem;\n    margin: 0 1rem 0 0.1rem;\n    opacity: 1.0;\n}\ncontext-menu-item .expand {\n  text-align: right;\n  position: relative;\n  left: 5px;\n  font-size: 90%;\n  width: 2em;\n  flex: 1;\n}\ncontext-menu-item .checkmark {\n  width: 1.1rem;\n  height: 1.1rem;\n  margin: 0;\n  display: none;\n}\ncontext-menu-item[checked=\"true\"] .checkmark {\n  display: block;\n}\ncontext-menu-item:has(context-menu-item[checked=\"true\"]) {\n  background-color: #0002;\n}\ncontext-menu-item .name {\n  flex: 1;\n}\ncontext-menu-item .expand::before {\n  content: \"▸\";\n  font-size: 17px;\n  color: rgba(0,0,0,0.6);\n  font-weight: 600;\n}\n.menu-separator {\n    border-top: 1px solid #0005;\n    margin: 10px;\n    height: 2px;\n}");

    var iconCheck = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     * Copyright 2024, Michael S. Horn
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * ## Creates a dropdown context menu.
     *
     * ```html
     * <context-menu>
     *     <context-menu-item action="export" icon="export.svg" disabled="true" name="Export"></context-menu-item>
     *     <div class="menu-separator"></div>
     *     <context-menu-item name="Options">
     *         <context-menu>
     *             <context-menu-item action="theme" name="Dark Mode"><context-menu-item>
     *             <div class="menu-separator"></div>
     *             <context-menu-item radio-group="view" action="piano-roll" name="Show Piano Roll"><context-menu-item>
     *             <context-menu-item radio-group="view" action="waveform" name="Show Waveform"><context-menu-item>
     *             <context-menu-item radio-group="view" action="notes" name="Show Music Notation"><context-menu-item>
     *        </context-menu>
     *    </context-menu-item>
     * </context-menu>
     * ```
     */
    const ContextMenuStyles = sheet$5$1;
    class ContextMenu extends HTMLElement {
        constructor() {
            super();
            this.classList.add('hidden');
        }
        emitEvent(name) {
            this.dispatchEvent(new CustomEvent(name, { bubbles: true, composed: true, detail: { origin: this } }));
        }
        async connectedCallback() {
            const container = this.parentElement;
            container.addEventListener('pointerdown', (e) => {
                this.classList.toggle('hidden');
                e.stopPropagation();
                this.emitEvent('context-menu-open');
            });
            document.addEventListener('pointerdown', (e) => {
                this.classList.add('hidden');
            });
            document.addEventListener('context-menu-open', (e) => {
                const origin = e.detail.origin;
                if (origin !== this)
                    this.classList.add('hidden');
            });
            this.addEventListener('context-menu-action', (e) => {
                this.classList.add('hidden');
            });
        }
    }
    ContextMenu.ELEMENT = "context-menu";
    class ContextMenuItem extends HTMLElement {
        get checked() { return this.getAttribute('checked') === 'true'; }
        get action() { return this.getAttribute('action'); }
        constructor() {
            super();
            this.disabled = false;
            this.name = document.createElement('div');
            this.name.classList.add('name');
            this.icon = document.createElement('div');
            this.icon.classList.add('icon');
            this.expand = document.createElement('div');
            this.expand.classList.add('expand');
            this.checkmark = document.createElement('div');
            this.checkmark.classList.add('checkmark');
        }
        emitEvent(name) {
            this.dispatchEvent(new CustomEvent(name, {
                bubbles: true,
                composed: true,
                detail: {
                    origin: this,
                    action: this.action,
                    checked: this.checked
                }
            }));
        }
        async connectedCallback() {
            this.appendChild(this.icon);
            this.appendChild(this.name);
            const submenu = this.querySelector('context-menu');
            if (submenu) {
                this.appendChild(this.expand);
            }
            else {
                this.appendChild(this.checkmark);
                this.checkmark.innerHTML = iconCheck;
            }
            this.addEventListener('pointerdown', (e) => e.stopImmediatePropagation());
            this.addEventListener('pointerup', (e) => {
                if (submenu) {
                    this.parentElement?.querySelectorAll('context-menu').forEach(menu => menu.classList.add('hidden'));
                    submenu.classList.remove('hidden');
                }
                else if (!this.disabled && !submenu) {
                    this.toggleChecked();
                    setTimeout(() => this.emitEvent('context-menu-action'), 100);
                }
            });
        }
        attributeChangedCallback(name, oldValue, newValue) {
            if (name === 'name') {
                this.name.innerHTML = newValue;
            }
            else if (name === 'icon') {
                this.icon.innerHTML = `<tunepad-icon icon="${newValue}"></tunepad-icon>`;
            }
            else if (name === 'disabled') {
                this.disabled = (newValue === 'true');
                this.classList.toggle('disabled', this.disabled);
            }
            else if (name === 'checked' && newValue === 'true') {
                this.setChecked();
            }
        }
        /**
         * Recursively uncheck any context menu item with the same radio-group attribute
         */
        uncheckSiblings(radioGroup) {
            let ancestor = this.parentElement;
            let p = ancestor;
            while (p instanceof ContextMenu || p instanceof ContextMenuItem) {
                p = p.parentElement;
                if (p instanceof ContextMenu)
                    ancestor = p;
            }
            ancestor?.querySelectorAll(`context-menu-item[radio-group=${radioGroup}]`)
                .forEach(item => {
                if (item instanceof ContextMenuItem && item !== this) {
                    item.setAttribute('checked', 'false');
                }
            });
        }
        setChecked() {
            if (this.hasAttribute('radio-group')) {
                const grp = this.getAttribute('radio-group');
                this.uncheckSiblings(grp);
            }
        }
        toggleChecked() {
            if (this.hasAttribute('checked')) {
                this.setAttribute('checked', `${!this.checked}`);
            }
        }
    }
    ContextMenuItem.ELEMENT = "context-menu-item";
    ContextMenuItem.observedAttributes = ["name", "icon", "action", "disabled", "checked"];

    const sheet$4$1 = new CSSStyleSheet();sheet$4$1.replaceSync(":host {\n    width: 370px;\n    height: 370px;\n    display: block;\n}\n\n.container svg {\n    width: 100%;\n    height: auto;\n}\n\ncircle {\n    stroke-width: 3;\n    stroke: black;\n    fill: none;\n}\n\ncircle.center {\n    fill: white;\n}\n\ncircle.major {\n    fill: #eee;\n}\n\ncircle.minor {\n    fill: white;\n}\n\nline.arc {\n    stroke-width: 3;\n    stroke: black;\n}\n\ntext {\n    text-anchor: middle;\n    dominant-baseline: central;\n    font-family: sans-serif;\n    font-size: 34px;\n    font-weight: bold;\n    user-select: none;\n    pointer-events: none;\n}\n\ntext.minor {\n    font-size: 25px;\n    font-weight: bold;\n}\n\ntext.selection {\n    font-size: 34px;\n}\n\n.accidental {\n    font-size: 60%;\n}\n\npath {\n    fill: rgba(255, 255, 255, 0);\n    stroke: none;\n}\n\npath:hover {\n    fill: rgba(0, 200, 255, 0.5);\n}\n\npath:active, path.highlight {\n    fill: rgba(0, 200, 255, 1.0);\n}\n\npath.minor:hover {\n    fill: rgba(255, 165, 0, 0.5);    \n}\n\npath.minor:active, path.minor.highlight {\n    fill: orange  \n}\n\n");

    var html$5$1 = "<div class=\"container\">\n    <svg version=\"1.1\" viewBox=\"-250 -250 500 500\" xmlns=\"http://www.w3.org/2000/svg\">\n    </svg>\n</div>\n";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * Circle of fifths selection component:
     *
     * <circle-of-fifths selected="C major"></circle-of-fifths>
     */
    const MAJOR_KEYS = ['C', 'F', 'B♭', 'E♭', 'A♭', 'C♯/D♭', 'F♯/G♭', 'B/C♭', 'E', 'A', 'D', 'G'];
    const MINOR_KEYS = ['A', 'D', 'G', 'C', 'F', 'A♯/B♭', 'D♯/E♭', 'A♭/G♯', 'C♯', 'F♯', 'B', 'E'];
    const R1 = 250 - 5;
    const R2 = 175 - 5;
    const R3 = 100 - 5;
    class CircleOfFifths extends HTMLElement {
        constructor() {
            super();
            this.root = this.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(sheet$4$1);
            this.root.innerHTML = html$5$1;
            this.svg = this.root.querySelector('svg');
        }
        connectedCallback() {
            this._redraw();
        }
        disconnectedCallback() { }
        /**
         * When an attribute is changed on our custom component, this gets fired...
         */
        attributeChangedCallback(name, oldValue, newValue) { }
        /**
         * Fire custom events whenever the value is changed by the user
         */
        emitEvent(name, value) {
            this.dispatchEvent(new CustomEvent(name, {
                bubbles: true,
                composed: true,
                detail: { origin: this, value: value
                }
            }));
        }
        _redraw() {
            this.svg.append(this.circle(0, 0, R1, 'major'));
            this.svg.append(this.circle(0, 0, R2, 'minor'));
            let current = this.getAttribute('selected') || '';
            const selection = this.text(0, 0, '', 'selection');
            const arc = Math.PI / 6;
            let theta = Math.PI / -2;
            for (let i = 0; i < 12; i++) {
                const majorKey = MAJOR_KEYS[i];
                const minorKey = MINOR_KEYS[i].split('/')[0];
                const majSelector = this.arc(theta + arc / 2, theta - arc / 2, R1, R2);
                const minSelector = this.arc(theta + arc / 2, theta - arc / 2, R2, R3, 'minor');
                this.svg.append(majSelector);
                this.svg.append(minSelector);
                majSelector.classList.add('selector');
                minSelector.classList.add('selector');
                if ((MAJOR_KEYS[i] + " major") === current)
                    majSelector.classList.add('highlight');
                if ((MINOR_KEYS[i] + " minor") === current)
                    minSelector.classList.add('highlight');
                majSelector.addEventListener('click', e => {
                    current = MAJOR_KEYS[i] + " major";
                    this.emitEvent('selected', current);
                    this.setAttribute('selected', current);
                    this.root.querySelectorAll('.selector').forEach(s => s.classList.remove('highlight'));
                    majSelector.classList.add('highlight');
                });
                minSelector.addEventListener('click', e => {
                    current = MINOR_KEYS[i] + " minor";
                    this.emitEvent('selected', current);
                    this.setAttribute('selected', current);
                    this.root.querySelectorAll('.selector').forEach(s => s.classList.remove('highlight'));
                    minSelector.classList.add('highlight');
                });
                majSelector.addEventListener('pointerenter', e => {
                    selection.innerHTML = majorKey.split('/')[0] + " Major";
                });
                majSelector.addEventListener('pointerleave', e => {
                    selection.innerHTML = '';
                });
                minSelector.addEventListener('pointerenter', e => {
                    selection.innerHTML = minorKey + " minor";
                });
                minSelector.addEventListener('pointerleave', e => {
                    selection.innerHTML = '';
                });
                this.svg.append(this.text((R1 - 40) * Math.cos(theta), (R1 - 40) * Math.sin(theta), majorKey, 'major'));
                this.svg.append(this.text((R2 - 40) * Math.cos(theta), (R2 - 40) * Math.sin(theta), minorKey, 'minor'));
                this.svg.append(this.line(0, 0, R1 * Math.cos(theta + arc / 2), R1 * Math.sin(theta + arc / 2), 'arc'));
                theta -= arc;
            }
            this.svg.append(this.circle(0, 0, R3, 'center'));
            this.svg.append(selection);
        }
        circle(cx, cy, r, className) {
            const circ = document.createElementNS("http://www.w3.org/2000/svg", 'circle');
            circ.setAttribute('cx', `${cx}`);
            circ.setAttribute('cy', `${cy}`);
            circ.setAttribute('r', `${r}`);
            if (className)
                circ.classList.add(className);
            return circ;
        }
        line(x1, y1, x2, y2, className) {
            const line = document.createElementNS("http://www.w3.org/2000/svg", 'line');
            line.setAttribute('x1', `${x1}`);
            line.setAttribute('y1', `${y1}`);
            line.setAttribute('x2', `${x2}`);
            line.setAttribute('y2', `${y2}`);
            if (className)
                line.classList.add(className);
            return line;
        }
        text(x, y, s, className) {
            const text = document.createElementNS("http://www.w3.org/2000/svg", 'text');
            text.setAttribute('x', `${x}`);
            text.setAttribute('y', `${y}`);
            const lines = s.split('/');
            for (let i = 0; i < lines.length; i++) {
                const line = lines[i];
                if (line.length > 0) {
                    text.append(this.tspan(0, i * 20, line.substring(0, 1)));
                    text.append(this.tspan(-2, 0, line.substring(1), 'accidental'));
                }
                else {
                    text.append(this.tspan(0, i * 20, line));
                }
            }
            if (className)
                text.classList.add(className);
            return text;
        }
        tspan(dx, dy, s, className) {
            const span = document.createElementNS("http://www.w3.org/2000/svg", 'tspan');
            span.setAttribute('dx', `${dx}`);
            span.setAttribute('dy', `${dy}`);
            span.innerHTML = s;
            if (className)
                span.classList.add(className);
            return span;
        }
        arc(a0, a1, r0, r1, className) {
            const path = document.createElementNS("http://www.w3.org/2000/svg", 'path');
            const segs = [
                'M', r0 * Math.cos(a0), r0 * Math.sin(a0),
                'A', r0, r0, (a1 - a0), 0, 0, r0 * Math.cos(a1), r0 * Math.sin(a1),
                'L', r1 * Math.cos(a1), r1 * Math.sin(a1),
                'A', r1, r1, (a0 - a1), 0, 1, r1 * Math.cos(a0), r1 * Math.sin(a0),
                'Z'
            ];
            path.setAttribute('d', segs.join(' '));
            if (className)
                path.classList.add(className);
            return path;
        }
        _describeArc(r, angle) {
            const sx = r * Math.cos(angle);
            const sy = r * Math.sin(angle);
            const ex = r * Math.cos(0);
            const ey = r * Math.sin(0);
            const large = (angle >= Math.PI) ? 1 : 0;
            return ["M", ex, ey, "A", r, r, 0, large, 1, sx, sy].join(" ");
        }
    }
    CircleOfFifths.ELEMENT = "circle-of-fifths";
    CircleOfFifths.observedAttributes = ["selected"];

    const sheet$3$1 = new CSSStyleSheet();sheet$3$1.replaceSync("dialog[is=\"pass-phrase\"]::backdrop {\n    background-color: #eee;\n}\n\ndialog[is=\"pass-phrase\"] {\n    width: fit-content;\n    height: 430px;\n    padding: 1em;\n    font-size: 30px;\n    outline: none;\n    border: none;\n    box-shadow: 3px 3px 3px 3px #0003;\n    border-radius: 8px;\n    position: relative;\n}\n\ndialog[is=\"pass-phrase\"] h1 {\n    font-family: sans-serif;\n    margin: 0.5em;\n    font-size: 22px;\n}\n\ndialog[is=\"pass-phrase\"] .digits {\n    text-align: center;\n}\n\ndialog[is=\"pass-phrase\"] .digit {\n    display: inline-block;\n    width: 80px;\n    height: 80px;\n    border-radius: 8px;\n    border: 2px solid rgb(210, 210, 210);\n    margin: 1rem;\n    box-shadow: inset 0px 3px 3px #0001;\n    background-color: #eee;\n    color: #bbb;\n    font-family: sans-serif;\n    font-weight: bold;\n    text-align: center;\n    line-height: 80px;\n    font-size: 200%;\n    user-select: none;\n}\n\ndialog[is=\"pass-phrase\"] .digit:hover {\n    background-color: #aaa;\n    animation: blinky 1s linear infinite;\n}\n\ndialog[is=\"pass-phrase\"] .digit.active {\n    border: 2px solid black;\n    background-color: white;\n    animation: blinky 1s linear infinite;\n    filter: grayscale(85%);\n}\n\ndialog[is=\"pass-phrase\"] .emojis {\n    display: flex;\n    flex-direction: column;\n    margin: 0 auto;\n    border: 1px solid #888;\n    width: fit-content;\n    border-radius: 20px;\n    padding: 10px;\n    box-sizing: border-box;\n    box-shadow: 2px 2px 4px #0003;\n    user-select: none;\n}\n\ndialog[is=\"pass-phrase\"] .row { display: flex; }\n\ndialog[is=\"pass-phrase\"] .emoji {\n    margin: 0 0.5rem 1rem 0.5rem;\n    padding: 0.4rem;\n    font-size: 150%;\n    width: 54px;\n    height: 54px;\n    box-sizing: border-box;\n    transition: font-size 100ms;\n    text-align: center;\n}\ndialog[is=\"pass-phrase\"] .emoji:hover { font-size: 200%; }\n\ndialog[is=\"pass-phrase\"] #success,\ndialog[is=\"pass-phrase\"] #fail {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    text-align: center;\n    background-color: white;\n    line-height: 300px;\n    font-size: 80px;\n    z-index: 100;\n    display: none;\n}\n\ndialog[is=\"pass-phrase\"] .container.success #success { display: block; }\ndialog[is=\"pass-phrase\"] .container.fail #fail { display: block; }\n\n@keyframes blinky {\n  0% {\n    color: transparent;\n  }\n  50% {\n    color: #bbb;\n  }\n  100% {\n    color: transparent;\n  }\n}");

    var html$4$1 = "<h1 class=\"welcome\">Welcome! Please enter your passphrase.</h1>\n<div class=\"container\">\n    <div id=\"success\">✅</div>\n    <div id=\"fail\">❌</div>\n    <div class=\"digits\"></div>\n    <div class=\"emojis\"></div>\n</div>\n";

    const sheet$2$1 = new CSSStyleSheet();sheet$2$1.replaceSync("* {\n    box-sizing: border-box;\n}\n\n.instrument {\n    display: grid;\n    grid-template-columns: repeat(8, 1fr);\n}\n\n.wrapper {\n    margin: 0 3px 3px 0;\n    color: white;\n    flex: 1;\n    border-radius: 4px;\n    border: 2px solid #fff1;\n    box-shadow: 3px 3px 3px #0002;\n}\n\n.drum-pad {\n    min-width: 58px;\n    height: 72px;\n    text-align: center;\n    border-radius: 1px;\n    background-color: #fff2;\n    display: flex;\n    flex-direction: column;\n    border: 1px solid #fff5;\n    position: relative;\n}\n.drum-pad:hover { \n    background-color: #fff5;\n    border: 1px solid #fff7;\n}\n.drum-pad.pressed {\n    background-color: #fff7;\n    border: 1px solid #fff7;\n}\n.drum-name {\n    color: #fffa;\n    font-weight: bold;\n    text-transform: uppercase;\n    font-size: 10px;\n    user-select: none;\n    flex: 1;\n    align-content: center;\n}\n.drum-pad:hover .drum-name { color: white; }\n\n.pad-name, .key-hint {\n    font-size: 10px;\n    pointer-events: none;\n    user-select: none;\n    position: absolute;\n    bottom: 3px;\n    color: #fff6;\n}\n.pad-name {\n    font-weight: bold;\n    color: #fffd;\n    left: 3px;\n}\n.key-hint { \n    right: 3px;\n    display: none;\n}\n.key-hint.show {\n    display: block;\n}\n\n.wrapper:has(.drum-pad.pressed[data-note=\"0\"]) {\n    background-color: hsl(0 90 50);\n    box-shadow: 0px 0px 5px hsl(0 90 50);\n}\n.wrapper:has(.drum-pad.pressed[data-note=\"1\"]) {\n    background-color: hsl(22 90 50);\n    box-shadow: 0px 0px 5px hsl(22 90 50);\n}\n.wrapper:has(.drum-pad.pressed[data-note=\"2\"]) {\n    background-color: hsl(44 90 50);\n    box-shadow: 0px 0px 5px hsl(44 90 50);\n}\n.wrapper:has(.drum-pad.pressed[data-note=\"3\"]) {\n    background-color: hsl(66 90 50);\n    box-shadow: 0px 0px 5px hsl(66 90 50);\n}\n.wrapper:has(.drum-pad.pressed[data-note=\"4\"]) {\n    background-color: hsl(88 90 50);\n    box-shadow: 0px 0px 5px hsl(88 90 50);\n}\n.wrapper:has(.drum-pad.pressed[data-note=\"5\"]) {\n    background-color: hsl(110 90 50);\n    box-shadow: 0px 0px 5px hsl(110 90 50);\n}\n.wrapper:has(.drum-pad.pressed[data-note=\"6\"]) {\n    background-color: hsl(132 90 50);\n    box-shadow: 0px 0px 5px hsl(132 90 50);\n}\n.wrapper:has(.drum-pad.pressed[data-note=\"7\"]) {\n    background-color: hsl(154 90 50);\n    box-shadow: 0px 0px 5px hsl(154 90 50);\n}\n.wrapper:has(.drum-pad.pressed[data-note=\"8\"]) {\n    background-color: hsl(176 90 50);\n    box-shadow: 0px 0px 5px hsl(176 90 50);\n}\n.wrapper:has(.drum-pad.pressed[data-note=\"9\"]) {\n    background-color: hsl(198 90 50);\n    box-shadow: 0px 0px 5px hsl(198 90 50);\n}\n.wrapper:has(.drum-pad.pressed[data-note=\"10\"]) {\n    background-color: hsl(220 90 50);\n    box-shadow: 0px 0px 5px hsl(220 90 50);\n}\n.wrapper:has(.drum-pad.pressed[data-note=\"11\"]) {\n    background-color: hsl(242 90 50);\n    box-shadow: 0px 0px 5px hsl(242 90 50);\n}\n.wrapper:has(.drum-pad.pressed[data-note=\"12\"]) {\n    background-color: hsl(264 90 50);\n    box-shadow: 0px 0px 5px hsl(264 90 50);\n}\n.wrapper:has(.drum-pad.pressed[data-note=\"13\"]) {\n    background-color: hsl(286 90 50);\n    box-shadow: 0px 0px 5px hsl(286 90 50);\n}\n.wrapper:has(.drum-pad.pressed[data-note=\"14\"]) {\n    background-color: hsl(308 90 50);\n    box-shadow: 0px 0px 5px hsl(308 90 50);\n}\n.wrapper:has(.drum-pad.pressed[data-note=\"15\"]) {\n    background-color: hsl(330 90 50);\n    box-shadow: 0px 0px 5px hsl(330 90 50);\n}\n\n@media screen and (max-width: 650px) {\n    .instrument {\n        grid-template-columns: repeat(4, 1fr);\n    }\n}");

    var html$3$1 = "<div class=\"instrument\"></div>\n";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * MPC-style drum pad interface
     *
     *       <drums-instrument armed = "false"></drums-instrument>
     *
     * Generates custom events "note-on", "note-off", "pitch-bend"
     */
    class DrumPad extends HTMLElement {
        constructor() {
            super();
            this.armed = false;
            this.keys = 'qwertyuiasdfghjk';
            this.root = this.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(sheet$2$1);
            this.root.innerHTML = html$3$1;
        }
        connectedCallback() {
            document.addEventListener("keydown", e => this.onKeyDown(e));
            document.addEventListener("keyup", e => this.onKeyUp(e));
            for (let i = 0; i < 16; i++) {
                const pad = document.createElement('div');
                pad.classList.add('wrapper');
                pad.innerHTML = `
                <div class="drum-pad" data-hint="${this.keys[i]}" data-note="${i}">
                    <div class="drum-name"></div>
                    <div class="key-hint">${this.keys[i]}</div>
                    <div class="pad-name">${i}</div>
                </div>`;
                this.root.querySelector('.instrument')?.append(pad);
            }
            this.root.querySelectorAll('.drum-pad').forEach((p) => {
                let down = false;
                p.addEventListener('pointerdown', (e) => {
                    p.classList.add('pressed');
                    this.emitNoteOn(this.getPadNote(p), "pointer");
                    down = true;
                });
                p.addEventListener('pointerup', (e) => {
                    if (down) {
                        p.classList.remove('pressed');
                        this.emitNoteOff(this.getPadNote(p), "pointer");
                        down = false;
                    }
                });
                p.addEventListener('pointerenter', (e) => {
                    if (e.buttons > 0) {
                        p.classList.add('pressed');
                        this.emitNoteOn(this.getPadNote(p), "pointer");
                        down = true;
                    }
                });
                p.addEventListener('pointerleave', (e) => {
                    p.classList.remove('pressed');
                    this.emitNoteOff(this.getPadNote(p), "pointer");
                    down = true;
                });
            });
        }
        disconnectedCallback() { }
        attributeChangedCallback(name, oldValue, newValue) {
            if (name === 'armed' && newValue !== oldValue) {
                (newValue === 'true') ? this.armKeyboard() : this.disarmKeyboard();
            }
        }
        emitNoteOn(note, source, velocity = 90) {
            if (note < 0)
                return;
            const nameEl = this.root.querySelector(`.drum-pad[data-note="${note}"] .drum-name`);
            const name = nameEl ? nameEl.innerHTML : '';
            const e = new CustomEvent('note-on', {
                bubbles: true,
                composed: true,
                detail: {
                    note: note,
                    source: source,
                    velocity: velocity,
                    drum: name
                }
            });
            this.dispatchEvent(e);
        }
        emitNoteOff(note, source) {
            if (note < 0)
                return;
            const e = new CustomEvent('note-off', {
                bubbles: true,
                composed: true,
                detail: {
                    note: note,
                    source: source,
                    velocity: 0
                }
            });
            this.dispatchEvent(e);
        }
        emitPitchBend(value, source) {
            const e = new CustomEvent('pitch-bend', {
                bubbles: true,
                composed: true,
                detail: {
                    source: source,
                    value: value
                }
            });
            this.dispatchEvent(e);
        }
        /**
         * Show note being played
         */
        noteOn(note, velocity = 90) {
            this.root.querySelector(`.drum-pad[data-note="${note}"]`)?.classList.add('pressed');
        }
        /**
         * Hide note being played
         */
        noteOff(note) {
            this.root.querySelector(`.drum-pad[data-note="${note}"]`)?.classList.remove('pressed');
        }
        allNotesOff() {
            this.root.querySelectorAll('.drum-pad')?.forEach(p => p.classList.remove('pressed'));
        }
        /**
         * Is note currently pressed?
         */
        isNoteOn(note) {
            const pad = this.root.querySelector(`.drum-pad[data-note="${note}"]`);
            return (pad !== null && pad.classList.contains('pressed'));
        }
        /**
         * Should the piano respond to keyboard events?
         */
        armKeyboard() {
            this.armed = true;
            this.setAttribute('armed', 'true');
            this.root.querySelectorAll(".key-hint").forEach(e => { e.classList.add("show"); });
        }
        disarmKeyboard() {
            this.armed = false;
            this.setAttribute('armed', 'false');
            this.root.querySelectorAll(".key-hint").forEach(e => { e.classList.remove("show"); });
        }
        get isKeyboardArmed() { return this.armed; }
        /**
         * Set the names of the drum pads
         */
        setPatch(patch) {
            if (Array.isArray(patch.nodes)) {
                for (let node of patch.nodes) {
                    if (node.type === 'drums' && Array.isArray(node.samples)) {
                        for (let samp of node.samples) {
                            if (typeof samp.step === 'number' && typeof samp.name === 'string') {
                                const name = this.root.querySelector(`.drum-pad[data-note="${samp.step}"] .drum-name`);
                                if (name)
                                    name.innerHTML = samp.name;
                            }
                        }
                        return;
                    }
                }
            }
        }
        /**
         * Process a computer key down event ... possibly play a note
         */
        onKeyDown(e) {
            if (e.ctrlKey || e.metaKey || e.shiftKey || e.repeat == true)
                return;
            if (this.isKeyboardArmed) {
                const key = e.key.toLowerCase();
                this.root.querySelector(`.drum-pad[data-hint="${key}"]`)?.classList.add('pressed');
                const note = this.keys.indexOf(key);
                if (note >= 0) {
                    this.emitNoteOn(note, "keyboard");
                }
                else if (e.key == "ArrowDown") {
                    this.emitPitchBend(-200, "keyboard");
                }
                else if (e.key == "ArrowUp") {
                    this.emitPitchBend(200, "keyboard");
                }
            }
        }
        /**
         * Process a computer key up event ... possibly release a note
         */
        onKeyUp(e) {
            if (e.key == "ArrowUp" || e.key == "ArrowDown") {
                this.emitPitchBend(0, "keyboard");
            }
            else {
                const key = e.key.toLowerCase();
                this.root.querySelector(`.drum-pad[data-hint="${key}"]`)?.classList.remove('pressed');
                const note = this.keys.indexOf(key);
                if (note >= 0)
                    this.emitNoteOff(note, "keyboard");
            }
        }
        getPadNote(pad) {
            return parseInt(pad?.getAttribute('data-note') ?? '-1');
        }
    }
    DrumPad.observedAttributes = ["armed"];
    DrumPad.ELEMENT = "drums-instrument";

    const sheet$1$1 = new CSSStyleSheet();sheet$1$1.replaceSync("/*\n@keyframes fade-out {\n    0% {\n        opacity: 1.0;\n    }\n\n    100% {\n        opacity: 0.0;\n    }\n}\n*/\n.instrument {\n    position: relative;\n    box-sizing: border-box;\n    display: flex;\n    background-color: #222;\n    overflow: hidden;\n    flex-direction: column;\n}\n\n.instrument.armed {\n    outline: 1px solid gold;\n}\n\n.naturals, .accidentals {\n    width: 100%;\n    display: flex;\n}\n.accidentals {\n    height: 50px;\n    position: relative;\n    top: 10px;\n    left: -20px;\n}\n.marimba-key, .spacer {\n    border: 2px solid #fff2;\n    flex: 1;\n    margin: 3px;\n    box-sizing: border-box;\n    min-width: 34px;\n}\n\n.marimba-key {\n    background-color: burlywood;\n    background-image: url('/assets/images/marimba-key.png');\n    background-position: center;\n    background-size: cover;\n    border-radius: 0.25rem;\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n    height: 160px;\n    font-size: 12px;\n    padding-top: 20px;\n    color: #fff9;\n    user-select: none;\n    box-shadow: 0 0 6px #000b;\n}\n\n.spacer {\n    pointer-events: none;\n    opacity: 0;\n}\n\n.marimba-key.accidental {\n    height: 70px;\n    padding-top: 10px;\n    position: relative;\n    top: -20px;\n}\n\n.accidental .note-name { display: none; }\n\n.marimba-key:hover {\n    border: 2px solid #fff7;\n    color: white;\n}\n\n.marimba-key.pressed {\n    border: 2px solid white;\n}\n/*\n.marimba-key.white.pressed.step-0 { fill: rgb(229, 76, 78); }\n.marimba-key.white.pressed.step-2 { fill: rgb(228, 171, 81); }\n.marimba-key.white.pressed.step-4 { fill: rgb(223, 228, 78); }\n.marimba-key.white.pressed.step-5 { fill: rgb(174, 215, 71); }\n.marimba-key.white.pressed.step-7 { fill: rgb(63, 169, 180); }\n.marimba-key.white.pressed.step-9 { fill: rgb(78, 69, 179); }\n.marimba-key.white.pressed.step-11 { fill: rgb(202, 69, 147); }\n*/\n\n.note-name { flex: 1; }\n.key-hint { margin-bottom: 1rem; display: none; }\n.armed .key-hint { display: block; }\n");

    var html$2$1 = "<div class=\"instrument\"></div>";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * Marimba custom element
     *
     * <marimba-instrument armed="false">
     * </marimba-instrument>
     *
     * Generates custom events "note-on", "note-off", "pitch-bend"
     */
    class Marimba extends HTMLElement {
        get minKey() { return 48; }
        get maxKey() { return 77; }
        constructor() {
            super();
            this.armed = false;
            /// mapping from computer keys to instrument keys
            this.key_map = "awsedftgyhujkolp;']";
            this.root = this.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(sheet$1$1);
            this.root.innerHTML = html$2$1;
            this.container = this.root.querySelector('.instrument');
        }
        connectedCallback() {
            const naturals = document.createElement('div');
            const accidentals = document.createElement('div');
            naturals.classList.add('naturals');
            accidentals.classList.add('accidentals');
            // generate each key
            for (let n = this.minKey; n <= this.maxKey; n++) {
                const key = this._buildKey(n);
                if (this.isAccidental(n)) {
                    accidentals.append(key);
                }
                else {
                    naturals.append(key);
                }
                if ([5, 11].includes(n % 12) || n == this.maxKey || n == this.minKey) {
                    const spacer = document.createElement('div');
                    spacer.classList.add('spacer');
                    accidentals.append(spacer);
                }
                this.container.append(accidentals);
                this.container.append(naturals);
            }
            // listen to keyboard events
            document.addEventListener("keydown", e => this.onKeyDown(e));
            document.addEventListener("keyup", e => this.onKeyUp(e));
        }
        /**
         * Each key is just a div element
         */
        _buildKey(n) {
            const step = n % 12;
            const octave = Math.floor(n / 12) - 1;
            const name = Marimba.NOTES[step];
            const index = n - this.minKey;
            const key = document.createElement('div');
            const hint = document.createElement('div');
            const noteName = document.createElement('div');
            const midiValue = document.createElement('div');
            key.classList.add('marimba-key');
            hint.classList.add('key-hint');
            noteName.classList.add('note-name');
            midiValue.classList.add('midi-value');
            key.setAttribute('data-note', `${n}`);
            if (this.isAccidental(n)) {
                key.classList.add('accidental');
            }
            else {
                key.style.height = `${145 - index * 2}px`;
            }
            if (index >= 0 && index < this.key_map.length) {
                key.setAttribute('data-trigger', `${this.key_map[index]}`);
                hint.innerHTML = `${this.key_map[index]}`;
            }
            noteName.innerHTML = `${name}${octave}`;
            midiValue.innerHTML = `${n}`;
            key.append(midiValue);
            key.append(noteName);
            key.append(hint);
            // set up mouse events
            let down = false;
            key.addEventListener('pointerdown', (e) => {
                this.emitNoteOn(n, "pointer");
                down = true;
                key.classList.add('pressed');
                e.stopPropagation();
            });
            key.addEventListener('pointerup', (e) => {
                down = false;
                this.emitNoteOff(n, "pointer");
                key.classList.remove('pressed');
            });
            key.addEventListener('pointerleave', (e) => {
                if (down) {
                    this.emitNoteOff(n, "pointer");
                    key.classList.remove('pressed');
                    down = false;
                }
            });
            key.addEventListener('pointerenter', (e) => {
                if (e.buttons > 0) {
                    this.emitNoteOn(n, "pointer");
                    key.classList.add('pressed');
                    down = true;
                }
            });
            return key;
        }
        disconnectedCallback() {
            //console.log("Custom element removed from page.");
        }
        attributeChangedCallback(name, oldValue, newValue) {
            switch (name) {
                case 'armed':
                    (newValue == "false") ? this.disarmKeyboard() : this.armKeyboard();
                    break;
            }
        }
        /**
         * Add note events to the event stream
         */
        emitNoteOn(note, source, velocity = 90) {
            const e = new CustomEvent('note-on', {
                bubbles: true,
                composed: true,
                detail: {
                    note: note,
                    source: source,
                    velocity: velocity
                }
            });
            this.dispatchEvent(e);
        }
        emitNoteOff(note, source) {
            const e = new CustomEvent('note-off', {
                bubbles: true,
                composed: true,
                detail: {
                    note: note,
                    source: source,
                    velocity: 0
                }
            });
            this.dispatchEvent(e);
        }
        emitPitchBend(value, source) {
            const e = new CustomEvent('pitch-bend', {
                bubbles: true,
                composed: true,
                detail: {
                    source: source,
                    value: value
                }
            });
            this.dispatchEvent(e);
        }
        isAccidental(note) {
            return [1, 3, 6, 8, 10].includes(note % 12);
        }
        /**
         * Show note being played
         */
        noteOn(note, velocity = 90) {
            const key = this.root.querySelector(`.marimba-key[data-note="${note}"]`);
            key?.classList.add('pressed');
        }
        /**
         * Hide note being played
         */
        noteOff(note) {
            const key = this.root.querySelector(`.marimba-key[data-note="${note}"]`);
            key?.classList.remove('pressed');
        }
        allNotesOff() {
            this.root.querySelectorAll('.marimba-key')
                .forEach((key) => key.classList.remove('pressed'));
        }
        /**
         * Is note currently pressed?
         */
        isNoteOn(note) {
            const key = this.root.querySelector(`.marimba-key[data-note="${note}"]`);
            if (key)
                return key.classList.contains('pressed');
            return false;
        }
        /**
         * Should the instrument respond to keyboard events?
         */
        armKeyboard() {
            this.armed = true;
            this.container.classList.add('armed');
        }
        disarmKeyboard() {
            this.armed = false;
            this.container.classList.remove('armed');
        }
        get isKeyboardArmed() { return this.armed; }
        getArmedKey(char) {
            return this.root.querySelector(`.marimba-key[data-trigger="${char}"]`);
        }
        setPatch(patch) { }
        /**
         * Process a computer key down event ... possibly play a note
         */
        onKeyDown(e) {
            if (e.ctrlKey || e.metaKey || e.shiftKey || e.repeat == true)
                return;
            if (e.key == "ArrowDown") {
                this.emitPitchBend(-200, "keyboard");
            }
            else if (e.key == "ArrowUp") {
                this.emitPitchBend(200, "keyboard");
            }
            else if (this.isKeyboardArmed) {
                const key = this.getArmedKey(e.key.toLowerCase());
                key?.classList.add('pressed');
                const note = toInt$1(key?.getAttribute('data-note'), -1);
                if (note > 0)
                    this.emitNoteOn(note, "keyboard");
            }
        }
        /**
         * Process a computer key up event ... possibly release a note
         */
        onKeyUp(e) {
            if (e.key == "ArrowUp" || e.key == "ArrowDown") {
                this.emitPitchBend(0, "keyboard");
            }
            else {
                const key = this.getArmedKey(e.key.toLowerCase());
                key?.classList.remove('pressed');
                const note = toInt$1(key?.getAttribute('data-note'), -1);
                if (note > 0)
                    this.emitNoteOff(note, "keyboard");
            }
        }
    }
    /// musical notes (in half steps) in the 12-note chromatic scale
    Marimba.NOTES = ["C", "C♯", "D", "D♯", "E", "F", "F♯", "G", "G♯", "A", "A♯", "B"];
    Marimba.observedAttributes = [
        "armed", // accepts keyboard input ("true" | "false")
    ];
    Marimba.ELEMENT = "marimba-instrument";
    function toInt$1(d, defaultValue = 0) {
        const n = parseInt(d);
        return isNaN(n) ? defaultValue : n;
    }

    const sheet$b = new CSSStyleSheet();sheet$b.replaceSync("/*\n@keyframes fade-out {\n    0% {\n        opacity: 1.0;\n    }\n\n    100% {\n        opacity: 0.0;\n    }\n}\n*/\n.wrapper {\n    display: flex;\n}\n\n.instrument {\n    flex: 1;\n    position: relative;\n    box-sizing: border-box;\n    display: flex;\n}\n.instrument:focus-within {\n    outline: 2px solid gold;\n}\n\n.backdrop {\n    fill: #30303f;\n}\n\n.container {\n    width: 100%;\n}\n\n.piano-key.black {\n    fill: #1d1e1f;\n    stroke: #222;\n    stroke-width: 1.5;\n    rx: 1.5;\n}\n\n.piano-key.black .black-top {\n    fill: #444;\n}\n\n.piano-key.black:hover .black-top {\n    fill: #777;\n}\n\n.piano-key.black.pressed .black-top {\n    fill: #222;\n}\n\n.piano-key.white {\n    fill: #ecedee;\n    stroke: #f7f7f8;\n    stroke-width: 1.5;\n    rx: 1.4;\n}\n\n.piano-key.white:hover {\n    fill: #ccc;\n}\n\n.piano-key.white.pressed {\n    fill: #aaa;\n    stroke: #777;\n}\n/*\n.piano-key.white.pressed.step-0 { fill: rgb(229, 76, 78); }\n.piano-key.white.pressed.step-2 { fill: rgb(228, 171, 81); }\n.piano-key.white.pressed.step-4 { fill: rgb(223, 228, 78); }\n.piano-key.white.pressed.step-5 { fill: rgb(174, 215, 71); }\n.piano-key.white.pressed.step-7 { fill: rgb(63, 169, 180); }\n.piano-key.white.pressed.step-9 { fill: rgb(78, 69, 179); }\n.piano-key.white.pressed.step-11 { fill: rgb(202, 69, 147); }\n*/\n.note-hint,\n.midi-hint,\n.key-hint {\n    stroke: none;\n    font: 9pt sans-serif;\n    fill: #0006;\n    text-anchor: middle;\n    opacity: 0.0;\n    pointer-events: none;\n    user-select: none;\n}\n\n.midi-hint.black, .note-hint.black, .key-hint.black {\n    fill: #ccc;\n}\n.show {\n    opacity: 1.0;\n}\n\n.note-hint.always-show {\n    opacity: 1.0;\n}\n\n.felt {\n    fill: #a00;\n    fill: #0009;\n}\n\n.animated-slide {\n    transition: transform 0.5s ease-in-out;\n}\n\n.mini-piano {\n    opacity: 0.0;\n    transition: opacity 0.25s;\n}\n\n.mini-piano.show {\n    opacity: 1.0;\n}\n\n.octave-button {\n    background-color: transparent;\n    border: none;\n    outline: none;\n    color: #fffa;\n    font-size: 20px;\n    user-select: none;\n    width: 15px;\n    padding: 0;\n    min-height: 100%;\n}\n.octave-button:hover { color: white; }\n.octave-button:active { color: rgb(121, 216, 245); }\n");

    var html$1$1 = "<div class=\"wrapper\">\n    <button id=\"down-octave\" class=\"octave-button\" title=\"Lower Octave\" part=\"octave-down\">❮</button>\n    <div class=\"instrument\"><svg class=\"container\" version=\"1.1\"></svg></div>\n    <button id=\"up-octave\" class=\"octave-button\" title=\"Higher Octave\" part=\"octave-up\">❯</button>\n</div>";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    class Piano extends HTMLElement {
        get minKey() { return this.props.minNote; }
        get maxKey() { return this.props.maxNote; }
        get minOctave() { return Math.floor(this.minKey / 12) - 1; }
        get maxOctave() {
            const maxOctave = Math.floor(this.maxKey / 12) - 1;
            const focusNote = maxOctave * 12 + 12;
            return (this.maxKey - focusNote < this.key_map.length) ? maxOctave - 1 : maxOctave;
        }
        constructor() {
            super();
            /// attribute set
            this.props = {
                noteHints: true,
                midiHints: true,
                armed: false,
                minNote: 12,
                maxNote: 107,
                keyRange: 21,
                focusOctave: 2
            };
            /// <svg> tag that contains the instrument
            this.container = null;
            /// group that contains all of the visual elements
            this.parent = document.createElementNS("http://www.w3.org/2000/svg", 'g');
            /// group that contains all the keys
            this.allKeys = document.createElementNS("http://www.w3.org/2000/svg", 'g');
            /// array of piano keys
            this.keys = [];
            /// size of the containing element
            this.width = 700;
            this.height = 190;
            /// mini piano that shows where we are left-to-right
            //late MiniPiano mini;
            /// mapping from computer keys to piano keys
            this.key_map = "awsedftgyhujkolp;']";
            this.root = this.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(sheet$b);
            //this.mini = MiniPiano(this);
        }
        connectedCallback() {
            const template = document.createElement('template');
            template.innerHTML = html$1$1;
            // Create a shadow root
            this.root.appendChild(template.content.cloneNode(true));
            // load the container <svg> element from the shadow dom
            this.container = this.root.querySelector("svg.container");
            this.container?.append(this.parent);
            this.container?.setAttribute('viewBox', `0 0 ${this.props.keyRange * PianoKey.width} 190`);
            // render SVG content
            this.render();
            // listen to keyboard events
            document.addEventListener("keydown", e => this.onKeyDown(e));
            document.addEventListener("keyup", e => this.onKeyUp(e));
            this.root.querySelector('#down-octave')?.addEventListener('click', (e) => {
                this.setFocusOctave(this.props.focusOctave - 1);
            });
            this.root.querySelector('#up-octave')?.addEventListener('click', (e) => {
                this.setFocusOctave(this.props.focusOctave + 1);
            });
        }
        disconnectedCallback() {
            //console.log("Custom element removed from page.");
        }
        attributeChangedCallback(name, oldValue, newValue) {
            switch (name) {
                case 'note-hints':
                    this.setNoteHints(newValue == "true");
                    break;
                case 'midi-hints':
                    this.setMidiHints(newValue == "true");
                    break;
                case 'armed':
                    (newValue == "true") ? this.armKeyboard() : this.disarmKeyboard();
                    break;
                case 'key-range':
                    this.setKeyRange(parseInt(newValue));
                    break;
                case 'min-octave':
                    this.setMinOctave(parseInt(newValue));
                    break;
                case 'max-octave':
                    this.setMaxOctave(parseInt(newValue));
                    break;
                case 'min-note':
                    this.setMinNote(parseInt(newValue));
                    break;
                case 'max-note':
                    this.setMaxNote(parseInt(newValue));
                    break;
                case 'focus-octave':
                    this.setFocusOctave(parseInt(newValue));
                    break;
            }
        }
        /**
         * Add note events to the event stream
         */
        emitNoteOn(note, source, velocity = 90) {
            const e = new CustomEvent('note-on', {
                bubbles: true,
                composed: true,
                detail: {
                    note: note,
                    source: source,
                    velocity: velocity
                }
            });
            this.dispatchEvent(e);
        }
        emitNoteOff(note, source) {
            const e = new CustomEvent('note-off', {
                bubbles: true,
                composed: true,
                detail: {
                    note: note,
                    source: source,
                    velocity: 0
                }
            });
            this.dispatchEvent(e);
        }
        emitPitchBend(value, source) {
            const e = new CustomEvent('pitch-bend', {
                bubbles: true,
                composed: true,
                detail: {
                    source: source,
                    value: value
                }
            });
            this.dispatchEvent(e);
        }
        /**
         * Show note being played
         */
        noteOn(note, velocity = 90) {
            const key = this._noteToKey(note);
            key?.press();
        }
        /**
         * Hide note being played
         */
        noteOff(note) {
            let key = this._noteToKey(note);
            key?.release();
        }
        allNotesOff() {
            this.keys.forEach((key) => key.release());
        }
        /**
         * Is note currently pressed?
        */
        isNoteOn(note) {
            const key = this._noteToKey(note);
            return (key != null && key.isPressed());
        }
        /**
         * How many white keys to show at one time
         */
        setKeyRange(count) {
            if (!isNaN(count)) {
                this.props.keyRange = Math.max(7, Math.min(count, 56));
                this.container?.setAttribute('viewBox', `0 0 ${this.props.keyRange * PianoKey.width} 190`);
            }
        }
        setMinOctave(octave) {
            if (!isNaN(octave))
                this.setMinNote(octave * 12 + 12);
        }
        setMaxOctave(octave) {
            if (!isNaN(octave))
                this.setMaxNote(octave * 12 + 23);
        }
        setMinNote(note) {
            if (isNaN(note))
                return;
            note = Math.max(0, Math.min(96, note));
            if (note != this.props.minNote) {
                this.props.minNote = note;
                this.render();
            }
        }
        setMaxNote(note) {
            if (isNaN(note))
                return;
            note = Math.max(12, Math.min(108, note));
            if (note != this.props.maxNote) {
                this.props.maxNote = note;
                this.render();
            }
        }
        /**
         * Should the piano respond to keyboard events?
         */
        armKeyboard() {
            this.props.armed = true;
            this.root.querySelectorAll(".key-hint").forEach(e => { e.classList.add("show"); });
        }
        disarmKeyboard() {
            this.props.armed = false;
            this.root.querySelectorAll(".key-hint").forEach(e => { e.classList.remove("show"); });
        }
        get isKeyboardArmed() { return this.props.armed; }
        getArmedKey(char) {
            let focusNote = this.props.focusOctave * 12 + 12;
            if (focusNote < this.props.minNote) {
                focusNote += 12;
            }
            const ki = this.key_map.indexOf(char.toLowerCase());
            return (ki >= 0) ? this._noteToKey(focusNote + ki) : null;
        }
        setPatch(patch) {
            if ('min-note' in patch) {
                this.setMinNote(toInt(patch['min-note'], this.props.minNote));
            }
            if ('max-note' in patch) {
                this.setMaxNote(toInt(patch['max-note'], this.props.maxNote));
            }
            if ('key-range' in patch) {
                this.setKeyRange(toInt(patch['key-range'], this.props.keyRange));
            }
            if ('focus-octave' in patch) {
                this.setFocusOctave(toInt(patch['focus-octave'], this.props.focusOctave));
            }
        }
        /**
         * Process a computer key down event ... possibly play a note
         */
        onKeyDown(e) {
            if (e.ctrlKey || e.metaKey || e.shiftKey || e.repeat == true)
                return;
            if (this.isKeyboardArmed) {
                const key = this.getArmedKey(e.key.toLowerCase());
                if (key) {
                    this.emitNoteOn(key.note, "keyboard");
                    key.press();
                }
                else if (e.key == "ArrowLeft") {
                    this.setFocusOctave(this.props.focusOctave - 1);
                }
                else if (e.key == "ArrowRight") {
                    this.setFocusOctave(this.props.focusOctave + 1);
                }
                else if (e.key == "ArrowDown") {
                    this.emitPitchBend(-200, "keyboard");
                }
                else if (e.key == "ArrowUp") {
                    this.emitPitchBend(200, "keyboard");
                }
            }
        }
        /**
         * Process a computer key up event ... possibly release a note
         */
        onKeyUp(e) {
            if (e.key == "ArrowUp" || e.key == "ArrowDown") {
                this.emitPitchBend(0, "keyboard");
            }
            else {
                const key = this.getArmedKey(e.key.toLowerCase());
                if (key) {
                    this.emitNoteOff(key.note, "keyboard");
                    key.release();
                }
            }
        }
        /**
         * Convert a midi note to piano key number
         */
        _noteToKey(midi) {
            for (let key of this.keys) {
                if (key.note === midi)
                    return key;
            }
            return null;
        }
        render() {
            if (this.container == null)
                return; // only render once mounted
            this.parent.innerHTML = "";
            this.keys = [];
            const backdrop = document.createElementNS("http://www.w3.org/2000/svg", 'rect');
            backdrop.classList.add("backdrop");
            backdrop.setAttribute("width", "100%");
            backdrop.setAttribute("height", "100%");
            this.parent.append(backdrop);
            this.allKeys.classList.add("animated-slide");
            const whiteKeys = document.createElementNS("http://www.w3.org/2000/svg", 'g');
            const blackKeys = document.createElementNS("http://www.w3.org/2000/svg", 'g');
            // generate piano keys
            for (let i = this.minKey; i <= this.maxKey; i++) {
                const key = new PianoKey(i, this);
                this.keys.push(key);
                if (key.black) {
                    blackKeys.append(key.el);
                }
                else {
                    whiteKeys.append(key.el);
                }
            }
            this.allKeys.innerHTML = '';
            this.allKeys.append(whiteKeys);
            this.allKeys.append(blackKeys);
            this.parent.append(this.allKeys);
            /*
                    const shelf = document.createElementNS("http://www.w3.org/2000/svg", 'rect');
                    shelf.setAttribute("width", "100%");
                    shelf.setAttribute("height", "6");
                    shelf.setAttribute("x", "0");
                    shelf.setAttribute("y", "1");
                    shelf.setAttribute("fill", "black");
                    shelf.setAttribute("fill-opacity", "0.2");
                    this.parent.append(shelf);
            */
            const felt = document.createElementNS("http://www.w3.org/2000/svg", 'rect');
            felt.classList.add("felt");
            felt.setAttribute("width", "100%");
            felt.setAttribute("height", "1.5");
            felt.setAttribute("x", "0");
            felt.setAttribute("y", "0");
            this.parent.append(felt);
            // set up minified piano
            //this.mini.render();
            this.setFocusOctave(this.props.focusOctave);
            //this.mini.hide();
            //this.parent.append(mini.el);
        }
        setFocusOctave(octave) {
            if (isNaN(octave) || this.container == null)
                return;
            this.props.focusOctave = Math.max(this.minOctave, Math.min(this.maxOctave, octave));
            let focusNote = this.props.focusOctave * 12 + 12;
            if (focusNote < this.props.minNote) {
                focusNote += 12;
            }
            const focusKey = this._noteToKey(focusNote);
            this.keys.forEach((key) => key.autoRelease());
            if (focusKey) {
                const dx = focusKey.x;
                this.allKeys.style.transform = `translateX(${-dx}px)`;
                // update keyboard hints
                this.keys.forEach((key) => key.clearKeymap());
                for (let i = 0; i < this.key_map.length; i++) {
                    const key = this._noteToKey(focusNote + i);
                    if (key)
                        key.setKeymap(this.key_map[i]);
                }
                //this.mini.show();
                //this.mini.slide(dx);
            }
        }
        /**
         * Show note name hints
         */
        setNoteHints(on) {
            this.props.noteHints = on;
            this.root.querySelectorAll(".note-hint").forEach(e => { e.classList.toggle("show", on); });
        }
        get showNoteHints() { return this.props.noteHints; }
        /**
         * Show midi number hints
         */
        setMidiHints(on) {
            this.props.midiHints = on;
            this.root.querySelectorAll(".midi-hint").forEach(e => { e.classList.toggle("show", on); });
        }
        get showMidiHints() { return this.props.midiHints; }
    }
    Piano.observedAttributes = [
        "note-hints", // show note names ("true" | "false")
        "midi-hints", // show midi note numbers ("true" | "false")
        "armed", // accepts keyboard input ("true" | "false")
        "min-octave", // lowest octave (0)
        "max-octave", // highest octave (7)
        "min-note", // lowest note available (21 optional overrides min-octave)
        "max-note", // highest note available (108 optional overrides min-octave)
        "key-range", // how many keys to show at one time
        "focus-octave" // left-most octave showing
    ];
    Piano.ELEMENT = "piano-instrument";
    /**
     * Represents a black or white key on the piano keyboard
     */
    class PianoKey {
        /// half step value (0 - 12)
        get step() { return this.note % 12; }
        /// note octave
        get octave() { return Math.floor(this.note / 12) - 1; }
        /// note name
        get name() { return `${PianoKey.NOTES[this.step]}`; }
        /// index x-coordinate on the keyboard
        get offset() {
            const oct = this.octave - this.piano.minOctave;
            return oct * 7 + this._key_offsets[this.step];
        }
        /// pixel x-coordinate on the keyboard
        get x() { return this.offset * PianoKey.width; }
        /// is this a black key or white key?
        get black() { return [1, 3, 6, 8, 10].includes(this.step); }
        /// is this a white key
        get white() { return !this.black; }
        /// height of key
        get height() { return this.black ? 130 : 195; }
        constructor(note, piano) {
            /// key map hint
            this.keyHint = document.createElementNS("http://www.w3.org/2000/svg", 'text');
            /// key offset arrangement starting with C
            /// this helps us render black keys at off-center positions
            this._key_offsets = [0, 0.45, 1, 1.55, 2, 3, 3.4, 4, 4.5, 5, 5.6, 6];
            this._hint_offsets = [-8, 0, 0, 0, 8, -8, 0, 0, 0, 0, 0, 8];
            /// visual element for SVG
            this.el = document.createElementNS("http://www.w3.org/2000/svg", 'g');
            /// main key rectangle
            this.rect = document.createElementNS("http://www.w3.org/2000/svg", 'rect');
            /// is the key currently pressed?
            this._down = false;
            this.note = note;
            this.piano = piano;
            this.el.setAttribute("transform", `translate(${this.x}, 0)`);
            this.el.classList.add("piano-key", `step-${this.step}`);
            this.el.classList.add(this.black ? "black" : "white");
            const pad = this.black ? 10 : 1.5;
            let x0 = pad;
            let w = PianoKey.width - (pad * 2);
            this.rect.setAttribute("x", `${x0}`);
            this.rect.setAttribute("y", "-8");
            this.rect.setAttribute("width", `${w}`);
            this.rect.setAttribute("height", `${this.height}`);
            this.rect.setAttribute("rx", "3");
            this.el.append(this.rect);
            if (this.black) {
                x0 += 3;
                w -= 6;
                const r = document.createElementNS("http://www.w3.org/2000/svg", 'rect');
                r.classList.add("black-top");
                r.setAttribute("x", `${x0}`);
                r.setAttribute("y", "-5");
                r.setAttribute("width", `${w}`);
                r.setAttribute("height", `${this.height - 20}`);
                r.setAttribute("pointer-events", "none");
                this.el.append(r);
            }
            else {
                const noteHint = document.createElementNS("http://www.w3.org/2000/svg", 'text');
                noteHint.classList.add("note-hint");
                noteHint.setAttribute("x", `${x0 + w / 2}`);
                noteHint.setAttribute("y", `${this.height - 17}`);
                noteHint.innerHTML = `${this.name}${this.octave}`;
                if (this.piano.showNoteHints)
                    noteHint.classList.add("show");
                // always show C notes
                if (this.step == 0)
                    noteHint.classList.add('always-show');
                this.el.append(noteHint);
            }
            const midiHint = document.createElementNS("http://www.w3.org/2000/svg", 'text');
            midiHint.classList.add("midi-hint");
            if (this.black)
                midiHint.classList.add("black");
            midiHint.setAttribute("x", `${x0 + w / 2}`);
            midiHint.setAttribute("y", `${this.height - 35}`);
            midiHint.innerHTML = `${this.note}`;
            if (this.piano.showMidiHints)
                midiHint.classList.add("show");
            this.el.append(midiHint);
            let hx = x0 + w / 2 + this._hint_offsets[this.step];
            this.keyHint.classList.add("key-hint");
            if (this.black)
                this.keyHint.classList.add("black");
            this.keyHint.setAttribute("x", `${hx}`);
            this.keyHint.setAttribute("y", this.black ? "45" : "60");
            //this.keyHint.setAttribute("y", `${this.height - 57}`);
            if (this.piano.isKeyboardArmed)
                this.keyHint.classList.add("show");
            this.el.append(this.keyHint);
            // set up mouse events
            this.el.addEventListener('pointerdown', (e) => {
                this.piano.emitNoteOn(this.note, "pointer");
                this.press();
                e.stopPropagation();
            });
            this.el.addEventListener('pointerup', (e) => {
                this.piano.emitNoteOff(this.note, "pointer");
                this.release();
            });
            this.el.addEventListener('pointerleave', (e) => {
                if (this._down) {
                    this.piano.emitNoteOff(this.note, "pointer");
                    this.release();
                }
            });
            this.el.addEventListener('pointerenter', (e) => {
                if (e.buttons > 0) {
                    this.piano.emitNoteOn(this.note, "pointer");
                    this.press();
                }
            });
        }
        press() {
            this._down = true;
            this.el.classList.add("pressed");
        }
        release() {
            if (this._down) {
                this._down = false;
                this.el.classList.remove("pressed");
            }
        }
        isPressed() {
            return this.el.classList.contains("pressed");
        }
        autoRelease() {
            if (this._down) {
                this.piano.emitNoteOff(this.note, "system");
                this._down = false;
                this.el.classList.remove("pressed");
            }
        }
        setKeymap(k) {
            this.keyHint.innerHTML = k;
        }
        clearKeymap() {
            this.keyHint.innerHTML = "";
        }
    }
    /// musical notes (in half steps) in the 12-note chromatic scale
    PianoKey.NOTES = ["C", "C♯", "D", "D♯", "E", "F", "F♯", "G", "G♯", "A", "A♯", "B"];
    /// pixel width of white key (in SVG coords system)
    PianoKey.width = 45;
    /**
     * Parses an int from an object (usually a string)
     * @param d - The input value to be parsed
     * @param defaultValue - The default value to return if the parsing fails
     * @returns The parsed integer value
     */
    function toInt(d, defaultValue = 0) {
        const n = parseInt(d);
        return isNaN(n) ? defaultValue : n;
    }

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * Passphrase authenticator using emoji selections. Extends HTML dialog element
     * ```html
     * <dialog is="pass-phrase" digits="5" auth_token="fe9a3" username="blueberry"></dialog>
     * ```
     * Javascript will need to call passphrase.openModal();
     */
    const EMOJIS = [
        '😀', '🦕', '🤩', '🥶', '🐷', '🐶', '🌹', '🌎',
        '😈', '🔥', '👽', '🤖', '🦊', '🐼', '🌻', '☃️'
    ];
    class Passphrase extends HTMLDialogElement {
        constructor() {
            super();
            this.innerHTML = html$4$1;
            document.adoptedStyleSheets.push(sheet$3$1);
        }
        connectedCallback() {
            this.render();
        }
        disconnectedCallback() { }
        /**
         * When an attribute is changed on our custom component, this gets fired...
         */
        attributeChangedCallback(name, oldValue, newValue) { }
        render() {
            const digits = toInt(this.getAttribute('digits'), 5);
            this.querySelector('h1.welcome');
            //message.innerHTML = message.innerHTML.replace('{{username}}', this.getAttribute('username') || 'back');
            const container = this.querySelector('.digits');
            container.innerHTML = '';
            for (let i = 0; i < digits; i++) {
                const digit = document.createElement('div');
                digit.classList.add('digit');
                digit.setAttribute('tabindex', `${i}`);
                digit.addEventListener('click', e => { this.setFocus(i); });
                digit.innerHTML = '?';
                container.append(digit);
                if (i === 0)
                    digit.classList.add('active');
            }
            const emojis = this.querySelector('.emojis');
            let row = document.createElement('div');
            row.classList.add('row');
            for (let i = 0; i < 16; i++) {
                const emoji = document.createElement('div');
                emoji.classList.add('emoji');
                emoji.addEventListener('pointerenter', e => {
                    this.setHTML('.digit.active', EMOJIS[i]);
                });
                emoji.addEventListener('pointerleave', e => {
                    this.setHTML('.digit.active', '?');
                });
                emoji.addEventListener('click', e => {
                    this.setHTML('.digit.active', EMOJIS[i]);
                    this.advanceFocus();
                });
                emoji.innerHTML = EMOJIS[i];
                row.append(emoji);
                if (i === 7 || i === 15)
                    emojis.append(row);
                if (i === 7) {
                    row = document.createElement('div');
                    row.classList.add('row');
                }
            }
        }
        reset() {
            this.querySelectorAll('.digit').forEach(d => d.innerHTML = '?');
            this.setFocus(0);
        }
        async advanceFocus() {
            const digits = this.querySelectorAll('.digit').length;
            const el = this.querySelector('.digit.active');
            const index = toInt(el?.getAttribute('tabindex'), 0);
            if (this.isComplete()) {
                const success = await this.success();
                if (success) {
                    this.emitEvent('passed', 'true');
                    this.querySelector('.container')?.classList.add('success');
                }
                else {
                    this.emitEvent('passed', 'false');
                    this.querySelector('.container')?.classList.add('fail');
                }
                setTimeout(() => {
                    this.querySelector('.container')?.classList.remove('success', 'fail');
                    this.reset();
                    if (success)
                        this.close();
                }, 700);
            }
            (index + 1 >= digits) ? this.setFocus(0) : this.setFocus(index + 1);
        }
        setFocus(index) {
            this.querySelectorAll('.digit').forEach(d => { d.classList.remove('active'); });
            const el = this.querySelector(`.digit[tabindex="${index}"]`);
            el?.classList.add('active');
            if (el)
                el.innerHTML = '?';
        }
        setHTML(selector, content) {
            const el = this.querySelector(selector);
            if (el)
                el.innerHTML = content;
        }
        isComplete() {
            let complete = true;
            this.querySelectorAll('.digit').forEach(d => {
                if (d.innerHTML === '?') {
                    complete = false;
                    return;
                }
            });
            return complete;
        }
        async success() {
            let code = '';
            this.querySelectorAll('.digit').forEach(el => {
                const emoji = el.innerHTML;
                let digit = EMOJIS.indexOf(emoji);
                code += digit.toString(16);
            });
            return (code === this.getAttribute('auth_token'));
        }
        /**
         * Fire custom events whenever the value is changed by the user
         */
        emitEvent(name, value) {
            this.dispatchEvent(new CustomEvent(name, {
                bubbles: true,
                composed: true,
                detail: { origin: this, value: value }
            }));
        }
    }
    Passphrase.ELEMENT = "pass-phrase";
    Passphrase.observedAttributes = ["auth_token", "username", "digits"];

    var html$f = "<div class=\"icon\"></div>";

    var iconAutocompile = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 512 512\">\n  <!-- Generator: Adobe Illustrator 29.6.1, SVG Export Plug-In . SVG Version: 2.1.1 Build 9)  -->\n  <path d=\"M95.87,199.35c8.17-23.14,21.44-44.9,40.13-63.48,66.35-66.35,173.88-66.35,240.23,0l18.15,18.26h-36.41c-18.79,0-33.97,15.18-33.97,33.97s15.18,33.97,33.97,33.97h118.79c18.79,0,33.97-15.18,33.97-33.97v-118.89c0-18.79-15.18-33.97-33.97-33.97s-33.97,15.18-33.97,33.97v37.37l-18.58-18.68C331.32-4.99,180.79-4.99,87.91,87.89c-25.9,25.9-44.58,56.37-56.05,88.96-6.26,17.73,3.08,37.05,20.7,43.31,17.62,6.26,37.05-3.08,43.31-20.7v-.11ZM25.7,291.39c-5.31,1.59-10.4,4.46-14.54,8.7-4.25,4.25-7.11,9.34-8.6,14.86-.32,1.27-.64,2.65-.85,4.03-.32,1.8-.42,3.61-.42,5.41v118.47c0,18.79,15.18,33.97,33.97,33.97s33.97-15.18,33.97-33.97v-37.26l18.68,18.58h0c92.88,92.78,243.41,92.78,336.19,0,25.9-25.9,44.69-56.37,56.16-88.85,6.26-17.73-3.08-37.05-20.7-43.31-17.62-6.26-37.05,3.08-43.31,20.7-8.17,23.14-21.44,44.9-40.13,63.48-66.35,66.35-173.88,66.35-240.23,0l-.11-.11-18.15-18.15h36.52c18.79,0,33.97-15.18,33.97-33.97s-15.18-33.97-33.97-33.97H35.68c-1.7,0-3.4.11-5.1.32s-3.29.53-4.88,1.06Z\"/>\n  <circle cx=\"256\" cy=\"256\" r=\"68.18\"/>\n</svg>";

    var iconCopy = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 512 512\">\n  <!-- Generator: Adobe Illustrator 29.6.1, SVG Export Plug-In . SVG Version: 2.1.1 Build 9)  -->\n  <path d=\"M416,336.01h-192c-8.8,0-16-7.2-16-16V64.01c0-8.8,7.2-16,16-16h140.1l67.9,67.9v204.1c0,8.8-7.2,16-16,16h0ZM224,384.02h192c35.3,0,64-28.7,64-64V115.91c0-12.7-5.1-24.9-14.1-33.9L398.11,14.1c-9-9-21.2-14.1-33.9-14.1h-140.2c-35.3,0-64,28.7-64,64v256c0,35.3,28.7,64,64,64v.02ZM96,128.01c-35.3,0-64,28.7-64,64v256c0,35.3,28.7,64,64,64h192c35.3,0,64-28.7,64-64v-32h-48v32c0,8.8-7.2,16-16,16H96c-8.8,0-16-7.2-16-16V192c0-8.8,7.2-16,16-16h32v-48h-32,0Z\"/>\n</svg>";

    var iconCrossCircle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n    <!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->\n    <path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z\"/>\n</svg>";

    var iconError = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n    <circle cx=\"256\" cy=\"256\" r=\"250\" fill=\"white\"/>\n    <path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/>\n</svg>";

    var iconGear = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n    <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->\n    <path d=\"M495.9 166.6c3.2 8.7 .5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4L83.1 425.9c-8.8 2.8-18.6 .3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4C64.6 273.1 64 264.6 64 256s.6-17.1 1.7-25.4L22.4 191.2c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336a80 80 0 1 0 0-160 80 80 0 1 0 0 160z\"/>\n</svg>";

    var iconHistory = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 24 24\">\n  <!-- Generator: Adobe Illustrator 29.6.1, SVG Export Plug-In . SVG Version: 2.1.1 Build 9)  -->\n  <path d=\"M10.5,17c-.7,0-1.29-.24-1.78-.73s-.73-1.08-.73-1.78.24-1.29.73-1.78,1.08-.73,1.78-.73c.28,0,.55.04.8.13s.48.21.7.38v-5.5h4v2h-3v5.5c0,.7-.24,1.29-.73,1.78s-1.08.73-1.78.73ZM12,22c-1.38,0-2.68-.26-3.9-.79s-2.28-1.24-3.18-2.14-1.61-1.96-2.14-3.18-.79-2.52-.79-3.9h2c0,1.1.21,2.14.63,3.11s.99,1.83,1.71,2.55,1.58,1.3,2.55,1.73,2.01.64,3.11.64c2.23,0,4.13-.78,5.68-2.33s2.33-3.44,2.33-5.68-.78-4.13-2.33-5.68-3.44-2.33-5.68-2.33c-1.48,0-2.83.36-4.04,1.09s-2.16,1.69-2.86,2.89h2.9v2H2V4h2v2c.92-1.22,2.07-2.19,3.45-2.91,1.38-.73,2.9-1.09,4.55-1.09,1.38,0,2.68.26,3.9.79s2.28,1.24,3.18,2.14,1.61,1.96,2.14,3.18.79,2.52.79,3.9-.26,2.68-.79,3.9-1.24,2.28-2.14,3.18-1.96,1.61-3.18,2.14-2.52.79-3.9.79Z\"/>\n</svg>";

    var iconInsert = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--><path d=\"M246.6 41.4c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L224 109.3 361.4 246.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-160-160zm160 352l-160-160c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L224 301.3 361.4 438.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3z\"/></svg>";

    var iconLibrary = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"svg8\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" version=\"1.1\" viewBox=\"0 0 100 100\">\n  <!-- Generator: Adobe Illustrator 29.6.1, SVG Export Plug-In . SVG Version: 2.1.1 Build 9)  -->\n  <sodipodi:namedview id=\"namedview6\" bordercolor=\"#666666\" borderopacity=\"1\" gridtolerance=\"10\" guidetolerance=\"10\" inkscape:current-layer=\"svg8\" inkscape:cx=\"44.144952\" inkscape:cy=\"27.876892\" inkscape:pageopacity=\"0\" inkscape:pageshadow=\"2\" inkscape:window-height=\"643\" inkscape:window-maximized=\"0\" inkscape:window-width=\"1002\" inkscape:window-x=\"332\" inkscape:window-y=\"43\" inkscape:zoom=\"2.5781733\" objecttolerance=\"10\" pagecolor=\"#ffffff\" showgrid=\"false\"/>\n  <path id=\"path2\" d=\"M16.64.49v9.95h66.4V.49H16.64ZM5.61,14.97l3.08,14.29h25.51c4.34-2.89,9.59-4.52,15.56-4.52s11.22,1.81,15.56,4.52h25.51l3.08-14.29H5.61ZM0,33.6l16.28,66.4h66.94l16.28-66.4H0ZM49.75,43.37c18.64,0,31.3,13.03,28.95,26.78-2.17,11.94-15.02,20.26-28.95,20.26s-26.78-8.32-28.95-20.26c-2.53-13.75,10.31-26.78,28.95-26.78Z\" inkscape:connector-curvature=\"0\" sodipodi:nodetypes=\"ccccccccscccccccccscscs\"/>\n  <g id=\"flowRoot812\">\n    <path id=\"path820\" d=\"M43.86,54.49l16.22-5.05v22.57c.12,2.75-.91,3.72-2.83,5.09-1.02.56-2.17.84-3.46.84-2.62-.19-4.84-1.67-4.87-4,0-1.36.52-2.25,1.57-3.22,1.05-.99,2.4-1.49,4.05-1.49.54,0,1.02.05,1.43.14.42.1,1.1.34,2.04.73v-14.75l-12.12,3.77v17.03c.11,2.79-.92,3.53-2.89,4.91-1.06.54-2.21.81-3.46.81-2.39-.19-4.78-1.96-4.81-3.82,0-1.43.52-2.2,1.55-3.17,1.03-.98,2.38-1.47,4.05-1.47,1.06,0,2.24.31,3.54.94v-19.86Z\" inkscape:connector-curvature=\"0\" sodipodi:nodetypes=\"cccccccscccccccccscc\"/>\n  </g>\n</svg>";

    var iconLock = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 512 512\">\n  <!-- Generator: Adobe Illustrator 29.5.1, SVG Export Plug-In . SVG Version: 2.1.0 Build 141)  -->\n  <path d=\"M180.11,149.75v45.54h151.79v-45.54c0-41.93-33.96-75.89-75.89-75.89s-75.89,33.96-75.89,75.89ZM119.39,195.29v-45.54c0-75.42,61.19-136.61,136.61-136.61s136.61,61.19,136.61,136.61v45.54h15.18c33.49,0,60.71,27.23,60.71,60.71v182.14c0,33.49-27.23,60.71-60.71,60.71H104.21c-33.49,0-60.71-27.23-60.71-60.71v-182.14c0-33.49,27.23-60.71,60.71-60.71h15.18Z\"/>\n</svg>";

    var iconMidiRoll = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 512 512\">\n  <!-- Generator: Adobe Illustrator 29.5.1, SVG Export Plug-In . SVG Version: 2.1.0 Build 141)  -->\n  <path d=\"M412,223\"/>\n  <rect y=\"8\" width=\"510.85\" height=\"68.04\"/>\n  <rect y=\"150.42\" width=\"398.17\" height=\"68.04\"/>\n  <rect x=\"212.7\" y=\"292.84\" width=\"298.15\" height=\"68.04\"/>\n  <rect y=\"435.26\" width=\"510.85\" height=\"68.04\"/>\n</svg>";

    var iconMinus = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 512 512\">\n  <!-- Generator: Adobe Illustrator 29.6.1, SVG Export Plug-In . SVG Version: 2.1.1 Build 9)  -->\n  <path d=\"M502,256c0,21.06-17.02,38.08-38.08,38.08H45.08c-21.06,0-38.08-17.02-38.08-38.08s17.02-38.08,38.08-38.08h418.85c21.06,0,38.08,17.02,38.08,38.08Z\"/>\n</svg>";

    var iconMusic = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n    <!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->\n    <path d=\"M499.1 6.3c8.1 6 12.9 15.6 12.9 25.7v72V368c0 44.2-43 80-96 80s-96-35.8-96-80s43-80 96-80c11.2 0 22 1.6 32 4.6V147L192 223.8V432c0 44.2-43 80-96 80s-96-35.8-96-80s43-80 96-80c11.2 0 22 1.6 32 4.6V200 128c0-14.1 9.3-26.6 22.8-30.7l320-96c9.7-2.9 20.2-1.1 28.3 5z\"/>\n</svg>";

    var iconPause = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 512 512\">\n  <!-- Generator: Adobe Illustrator 29.6.1, SVG Export Plug-In . SVG Version: 2.1.1 Build 9)  -->\n  <path d=\"M106.67,0C71.33,0,42.67,28.67,42.67,64v384c0,35.33,28.67,64,64,64h42.67c35.33,0,64-28.67,64-64V64C213.33,28.67,184.67,0,149.33,0h-42.67ZM362.67,0c-35.33,0-64,28.67-64,64v384c0,35.33,28.67,64,64,64h42.67c35.33,0,64-28.67,64-64V64c0-35.33-28.67-64-64-64h-42.67Z\"/>\n</svg>";

    var iconPiano = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"svg2\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" version=\"1.1\" viewBox=\"0 0 100 100\">\n  <!-- Generator: Adobe Illustrator 29.5.1, SVG Export Plug-In . SVG Version: 2.1.0 Build 141)  -->\n  <defs>\n    <style>\n      .st0 {\n        fill: #fff;\n      }\n\n      .st1 {\n        display: none;\n      }\n    </style>\n  </defs>\n  <sodipodi:namedview id=\"namedview12\" bordercolor=\"#666666\" borderopacity=\"1\" gridtolerance=\"10\" guidetolerance=\"10\" inkscape:current-layer=\"svg2\" inkscape:cx=\"57.141381\" inkscape:cy=\"50\" inkscape:pageopacity=\"0\" inkscape:pageshadow=\"2\" inkscape:window-height=\"480\" inkscape:window-maximized=\"0\" inkscape:window-width=\"770\" inkscape:window-x=\"43\" inkscape:window-y=\"1\" inkscape:zoom=\"2.6457812\" objecttolerance=\"10\" pagecolor=\"#ffffff\" showgrid=\"false\"/>\n  <g id=\"g4\" class=\"st1\">\n    <rect id=\"rect6\" x=\"-728\" y=\"-227\" width=\"1158\" height=\"397\"/>\n  </g>\n  <path id=\"path4506\" class=\"st0\" d=\"M93.4,94h0V5.55h-18.43v52.87h-7.16v35.59h25.59ZM64.64,94v-35.59h-8.29V5.55h-11.23v52.87h-7.2v35.59h26.73ZM34.78,94h0v-35.59h-8.29V5.55H8.06v88.45h26.72Z\" inkscape:connector-curvature=\"0\" sodipodi:nodetypes=\"ccccccccccccccccccccccccc\"/>\n</svg>";

    var iconPlay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 512 512\">\n  <!-- Generator: Adobe Illustrator 29.6.1, SVG Export Plug-In . SVG Version: 2.1.1 Build 9)  -->\n  <path d=\"M120.02,8.06c-16.91-10.4-38.16-10.74-55.42-1.03-17.25,9.71-28,28-28,47.88v402.21c0,19.88,10.74,38.16,28,47.88s38.51,9.26,55.42-1.03l329.08-201.11c16.34-9.94,26.28-27.65,26.28-46.85s-9.94-36.79-26.28-46.85L120.02,8.06Z\"/>\n</svg>";

    var iconPlus = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 512 512\">\n  <!-- Generator: Adobe Illustrator 29.6.1, SVG Export Plug-In . SVG Version: 2.1.1 Build 9)  -->\n  <path d=\"M463.92,217.92h-175.85V46.58c0-21.06-17.02-38.08-38.08-38.08s-38.08,17.02-38.08,38.08v171.35H45.08c-21.06,0-38.08,17.02-38.08,38.08s17.02,38.08,38.08,38.08h166.85v171.35c0,21.06,17.02,38.08,38.08,38.08s38.08-17.02,38.08-38.08v-171.35h175.85c21.06,0,38.08-17.02,38.08-38.08s-17.02-38.08-38.08-38.08Z\"/>\n</svg>";

    var iconRecompile = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 512 512\">\n  <!-- Generator: Adobe Illustrator 29.6.1, SVG Export Plug-In . SVG Version: 2.1.1 Build 9)  -->\n  <path d=\"M95.87,199.35c8.17-23.14,21.44-44.9,40.13-63.48,66.35-66.35,173.88-66.35,240.23,0l18.15,18.26h-36.41c-18.79,0-33.97,15.18-33.97,33.97s15.18,33.97,33.97,33.97h118.79c18.79,0,33.97-15.18,33.97-33.97v-118.89c0-18.79-15.18-33.97-33.97-33.97s-33.97,15.18-33.97,33.97v37.37l-18.58-18.68C331.32-4.99,180.79-4.99,87.91,87.89c-25.9,25.9-44.58,56.37-56.05,88.96-6.26,17.73,3.08,37.05,20.7,43.31,17.62,6.26,37.05-3.08,43.31-20.7v-.11ZM25.7,291.39c-5.31,1.59-10.4,4.46-14.54,8.7-4.25,4.25-7.11,9.34-8.6,14.86-.32,1.27-.64,2.65-.85,4.03-.32,1.8-.42,3.61-.42,5.41v118.47c0,18.79,15.18,33.97,33.97,33.97s33.97-15.18,33.97-33.97v-37.26l18.68,18.58h0c92.88,92.78,243.41,92.78,336.19,0,25.9-25.9,44.69-56.37,56.16-88.85,6.26-17.73-3.08-37.05-20.7-43.31-17.62-6.26-37.05,3.08-43.31,20.7-8.17,23.14-21.44,44.9-40.13,63.48-66.35,66.35-173.88,66.35-240.23,0l-.11-.11-18.15-18.15h36.52c18.79,0,33.97-15.18,33.97-33.97s-15.18-33.97-33.97-33.97H35.68c-1.7,0-3.4.11-5.1.32s-3.29.53-4.88,1.06Z\"/>\n</svg>";

    var iconSpinner = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n  <path d=\"M304 48a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zm0 416a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM48 304a48 48 0 1 0 0-96 48 48 0 1 0 0 96zm464-48a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM142.9 437A48 48 0 1 0 75 369.1 48 48 0 1 0 142.9 437zm0-294.2A48 48 0 1 0 75 75a48 48 0 1 0 67.9 67.9zM369.1 437A48 48 0 1 0 437 369.1 48 48 0 1 0 369.1 437z\"/>\n</svg>";

    var iconStop = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 512 512\">\n  <!-- Generator: Adobe Illustrator 29.6.1, SVG Export Plug-In . SVG Version: 2.1.1 Build 9)  -->\n  <rect x=\"13.82\" y=\"13.82\" width=\"484.36\" height=\"484.36\" rx=\"29.9\" ry=\"29.9\"/>\n</svg>";

    var iconTrash = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 512 512\">\n  <!-- Generator: Adobe Illustrator 29.5.1, SVG Export Plug-In . SVG Version: 2.1.0 Build 141)  -->\n  <path d=\"M174.93,38.44l-6.57,13.06h-87.64c-16.16,0-29.21,13.06-29.21,29.21s13.06,29.21,29.21,29.21h350.57c16.16,0,29.21-13.06,29.21-29.21s-13.06-29.21-29.21-29.21h-87.64l-6.57-13.06c-4.93-9.95-15.06-16.16-26.11-16.16h-109.92c-11.05,0-21.18,6.21-26.11,16.16ZM431.29,139.14H80.71l19.35,309.49c1.46,23.1,20.63,41.08,43.73,41.08h224.4c23.1,0,42.27-17.99,43.73-41.08l19.35-309.49Z\"/>\n</svg>";

    var iconWaveform = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 512 512\">\n  <!-- Generator: Adobe Illustrator 29.5.1, SVG Export Plug-In . SVG Version: 2.1.0 Build 141)  -->\n  <path d=\"M412,219\"/>\n  <path d=\"M496.28,249.3h-97.77l-23-73.41c-2.2-8.17-10-13.78-18.55-13.46-8.64.29-15.93,6.4-17.54,14.7l-37.82,194.58L261.7,16.11c-1.02-9.07-8.79-15.97-18.14-16.11h-.28c-9.22,0-17.06,6.64-18.33,15.59l-37.32,261.48-17.26-149.22c-1.02-8.82-8.43-15.61-17.5-16.04-9.08-.35-17.13,5.63-19,14.3l-23.72,109-4.56-25.33c-1.4-7.84-7.91-13.87-16-14.82-8.06-.92-15.88,3.37-19.17,10.65l-21.12,46.71h-30.78c-10.22,0-18.51,8.1-18.51,18.08s8.29,18.08,18.51,18.08h42.83c7.34,0,13.97-4.23,16.94-10.78l1.37-3.04,10.53,58.48c1.54,8.53,9.05,14.8,17.91,14.95,8.79.36,16.6-5.84,18.44-14.31l19.84-91.16,20.93,180.97c1.04,9.06,8.84,15.93,18.15,16.05,9.24.12,17.29-6.56,18.58-15.59l37.06-259.57,37.17,331.43c1,8.9,8.52,15.76,17.68,16.11h.74c8.85,0,16.51-6.15,18.18-14.72l44.69-229.88v.86c0,8.5,7.05,15.37,15.74,15.37h120.98c8.7,0,15.74-6.89,15.74-15.37v-3.6c0-8.5-7.05-15.37-15.74-15.37h.02Z\"/>\n</svg>";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * ```html
     * <tunepad-icon icon="trash"></tunepad-icon>
     * ```
     * ### Available Icons
     * * autocompile
     * * checkmark
     * * copy
     * * cross-circle
     * * error
     * * gear
     * * insert
     * * history
     * * library
     * * lock
     * * midi
     * * midiroll
     * * minus
     * * music
     * * pause
     * * piano
     * * play
     * * plus
     * * recompile
     * * score
     * * spinner
     * * stop
     * * trash
     * * waveform
     */
    class TunePadIcon extends HTMLElement {
        constructor() {
            super();
            this.innerHTML = html$f;
            this.div = this.querySelector('div.icon');
        }
        connectedCallback() { }
        disconnectedCallback() { }
        attributeChangedCallback(name, oldValue, newValue) {
            if (name === 'icon' && newValue != oldValue) {
                switch (newValue) {
                    case 'autocompile':
                        this.div.innerHTML = iconAutocompile;
                        break;
                    case 'checkmark':
                        this.div.innerHTML = iconCheck;
                        break;
                    case 'copy':
                        this.div.innerHTML = iconCopy;
                        break;
                    case 'cross-circle':
                        this.div.innerHTML = iconCrossCircle;
                        break;
                    case 'error':
                        this.div.innerHTML = iconError;
                        break;
                    case 'gear':
                        this.div.innerHTML = iconGear;
                        break;
                    case 'history':
                        this.div.innerHTML = iconHistory;
                        break;
                    case 'insert':
                        this.div.innerHTML = iconInsert;
                        break;
                    case 'library':
                        this.div.innerHTML = iconLibrary;
                        break;
                    case 'lock':
                        this.div.innerHTML = iconLock;
                        break;
                    case 'midi':
                        this.div.innerHTML = iconMidiRoll;
                        break;
                    case 'midiroll':
                        this.div.innerHTML = iconMidiRoll;
                        break;
                    case 'minus':
                        this.div.innerHTML = iconMinus;
                        break;
                    case 'music':
                        this.div.innerHTML = iconMusic;
                        break;
                    case 'pause':
                        this.div.innerHTML = iconPause;
                        break;
                    case 'piano':
                        this.div.innerHTML = iconPiano;
                        break;
                    case 'play':
                        this.div.innerHTML = iconPlay;
                        break;
                    case 'plus':
                        this.div.innerHTML = iconPlus;
                        break;
                    case 'recompile':
                        this.div.innerHTML = iconRecompile;
                        break;
                    case 'score':
                        this.div.innerHTML = iconMusic;
                        break;
                    case 'spinner':
                        this.div.innerHTML = iconSpinner;
                        break;
                    case 'stop':
                        this.div.innerHTML = iconStop;
                        break;
                    case 'trash':
                        this.div.innerHTML = iconTrash;
                        break;
                    case 'waveform':
                        this.div.innerHTML = iconWaveform;
                        break;
                    default: this.div.innerHTML = '';
                }
                const svg = this.div.querySelector('svg');
                if (svg)
                    svg.style.width = '100%';
            }
        }
    }
    TunePadIcon.observedAttributes = ["icon"];
    TunePadIcon.ELEMENT = "tunepad-icon";

    customElements.define(Dial.ELEMENT, Dial);

    var html$e = "<div class=\"cell-block\">\n    <div class=\"cell-wrapper definitions\">\n        <header>\n            <div class=\"gadget-icon\"></div>\n            <div style=\"flex: 1;\">\n                <input class=\"gadget-name\">\n                <div class=\"gadget-info\">\n                    <span id=\"beat-count\"></span>\n                    <span id=\"line-count\"></span>\n                    <span id=\"uncompiled\"></span>\n                    <!-- <span id=\"readonly\"></span> -->\n                </div>\n            </div>\n            <div class=\"badges\">\n                <div id=\"error-badge\" class=\"badge hidden\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                        <circle cx=\"256\" cy=\"256\" r=\"250\" fill=\"white\"/>\n                        <path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/>\n                    </svg>\n                </div>\n                <div id=\"warning-badge\" class=\"badge hidden\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 512 512\">\n                        <path fill=\"white\" d=\"M258,108c10.5,0,20.3,5.6,25.6,14.7l160.3,273.1c5.4,9.2,5.4,20.6.1,29.8s-15.1,14.9-25.8,14.9H97.7c-10.6,0-20.5-5.7-25.8-14.9s-5.2-20.6.1-29.8L232.4,122.7c5.3-9.1,15.1-14.7,25.6-14.7Z\"/>\n                        <path d=\"M256,32c14.2,0,27.3,7.5,34.5,19.8l216,368c7.3,12.4,7.3,27.7.2,40.1s-20.4,20.1-34.7,20.1H40c-14.3,0-27.6-7.7-34.7-20.1s-7-27.8.2-40.1L221.5,51.8c7.2-12.3,20.3-19.8,34.5-19.8ZM256,160c-13.3,0-24,10.7-24,24v112c0,13.3,10.7,24,24,24s24-10.7,24-24v-112c0-13.3-10.7-24-24-24ZM288,384c0-17.7-14.3-32-32-32s-32,14.3-32,32,14.3,32,32,32,32-14.3,32-32Z\"/>\n                    </svg>\n                </div>\n                <div id=\"pass-badge\" class=\"badge hidden\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                        <path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z\"/>\n                    </svg>\n                    <span id=\"pass-count\"></span>\n                </div>\n                <div id=\"fail-badge\" class=\"badge hidden\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                        <path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z\"/>\n                    </svg>\n                    <span id=\"fail-count\"></span>\n                </div>\n                <div id=\"output-badge\" class=\"badge hidden\"></div>\n            </div>\n        </header>\n        <div class=\"toolbar\" id=\"transport-tools\">\n            <button id=\"play-button\" title=\"Play Audio\">\n                <tunepad-icon icon=\"play\"></tunepad-icon>\n            </button>\n            <button id=\"pause-button\" class=\"hidden\">\n                <tunepad-icon icon=\"pause\"></tunepad-icon>\n            </button>\n            <button id=\"stop-button\">\n                <tunepad-icon icon=\"stop\"></tunepad-icon>\n            </button>\n            <button id=\"compile-button\" title=\"Compile\">\n                <tunepad-icon icon=\"recompile\"></tunepad-icon>\n            </button>\n            <button id=\"loader\" title=\"Recompiling\" disabled=\"disabled\">\n                <tunepad-icon icon=\"spinner\"></tunepad-icon>\n            </button>\n            <div class=\"expander\"></div>\n            <div class=\"menu-container\">\n                <button id=\"timeline-mode-button\" title=\"Change timeline mode\" class=\"combo\" part=\"timeline-mode-button\">\n                    <tunepad-icon icon=\"waveform\"></tunepad-icon>\n                </button>\n                <context-menu style=\"right: 0;\">\n                    <context-menu-item action=\"timeline-midi\" name=\"Piano Roll\" icon=\"midiroll\" radio-group=\"view\"></context-menu-item>\n                    <context-menu-item action=\"timeline-waveform\" name=\"Waveform\" icon=\"waveform\" radio-group=\"view\"></context-menu-item>\n                    <context-menu-item action=\"timeline-score\" name=\"Sheet Music\" icon=\"music\" radio-group=\"view\"></context-menu-item>\n                    <div class=\"menu-separator\"></div>\n                    <context-menu-item action=\"timeline-hidden\" name=\"Hide Timeline\" icon=\"minus\" radio-group=\"view\"></context-menu-item>\n                </context-menu>\n            </div>\n            <button id=\"theme-button\" title=\"Toggle Dark Mode\" part=\"theme-button\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                    <path d=\"M448 256c0-106-86-192-192-192V448c106 0 192-86 192-192zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256z\"/>\n                </svg>\n            </button>\n            <button id=\"copy-code-button\" title=\"Copy Code\" part=\"copy-code-button\">\n                <tunepad-icon icon=\"copy\"></tunepad-icon>\n            </button>\n            <div class=\"menu-container\" part=\"cell-menu\">\n                <button id=\"menu-trigger\" title=\"Cell Menu...\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                        <path d=\"M8 256a56 56 0 1 1 112 0A56 56 0 1 1 8 256zm160 0a56 56 0 1 1 112 0 56 56 0 1 1 -112 0zm216-56a56 56 0 1 1 0 112 56 56 0 1 1 0-112z\"/>\n                    </svg>\n                </button>\n                <context-menu style=\"right: 0;\">\n                    <context-menu-item action=\"copy-cell\" name=\"Duplicate Cell\" icon=\"copy\"></context-menu-item>\n                    <context-menu-item action=\"delete\" name=\"Delete Cell\" icon=\"trash\"></context-menu-item>\n                    <div class=\"menu-separator\"></div>\n                    <context-menu-item action=\"autocomp\" checked=\"false\" name=\"Autocompile\" id=\"autocomp\"></context-menu-item>\n                    <context-menu-item action=\"readonly\" checked=\"false\" name=\"Readonly\" icon=\"lock\" id=\"readonly\"></context-menu-item>\n                    <div class=\"menu-separator\"></div>\n                    <context-menu-item action=\"midi-in\" checked=\"false\" name=\"MIDI Input\" id=\"midi-in\"></context-menu-item>\n                    <context-menu-item action=\"midi-out\" checked=\"false\" name=\"MIDI Output\" id=\"midi-out\"></context-menu-item>\n                </context-menu>\n            </div>\n        </div>\n        <div class=\"timeline-wrapper\"></div>\n        <div class=\"cell-contents\"></div>\n        <tunepad-instrument></tunepad-instrument>\n        <footer>\n            <div class=\"patch-credit\"></div>\n            <div class=\"module-name\">\n                <span id=\"import-text\"></span>\n                <button id=\"copy-button\" title=\"Copy to Clipboard\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                        <path d=\"M384 336H192c-8.8 0-16-7.2-16-16V64c0-8.8 7.2-16 16-16l140.1 0L400 115.9V320c0 8.8-7.2 16-16 16zM192 384H384c35.3 0 64-28.7 64-64V115.9c0-12.7-5.1-24.9-14.1-33.9L366.1 14.1c-9-9-21.2-14.1-33.9-14.1H192c-35.3 0-64 28.7-64 64V320c0 35.3 28.7 64 64 64zM64 128c-35.3 0-64 28.7-64 64V448c0 35.3 28.7 64 64 64H256c35.3 0 64-28.7 64-64V416H272v32c0 8.8-7.2 16-16 16H64c-8.8 0-16-7.2-16-16V192c0-8.8 7.2-16 16-16H96V128H64z\"/>\n                    </svg>\n                </button>\n            </div>\n            <div id=\"last-saved\"></div>\n        </footer>\n\n        <div id=\"info-bar\">\n            <div id=\"info-name\"></div>\n            <div id=\"info-instrument\"></div>\n            <div id=\"info-beat-count\"></div>\n            <div id=\"info-time\"></div>\n            <div id=\"info-key\"></div>\n            <div id=\"info-bpm\"></div>\n        </div>\n        <div id=\"loader-background\">\n            <div style=\"width: 100%;\">\n                <img src=\"/assets/images/animated_bars.svg\" alt=\"\">\n                <div class=\"loader-text\"></div>\n            </div>\n        </div>\n    </div>\n</div>";

    const e$1=16.3516,t$2=["C","C♯","D","D♯","E","F","F♯","G","G♯","A","A♯","B"],s$1=["rgb(229, 76, 78)","rgb(223, 132, 74)","rgb(228, 171, 81)","rgb(227, 199, 73)","rgb(223, 228, 78)","rgb(174, 215, 71)","rgb(63, 188, 70)","rgb(63, 169, 180)","rgb(64, 124, 180)","rgb(78, 69, 179)","rgb(141, 69, 183)","rgb(202, 69, 147)"];let i$1 = class i{get note(){return this._note}set note(e){this._note=e;}get end(){return this.start+this.duration}get octave(){return Math.floor(this.note/12)}set octave(e){this.note=12*e+this.step;}get step(){return this.note%12}set step(e){this.note=12*this.octave+e;}get cents(){return Math.round(100*(this.note-Math.floor(this.note)))}get velocity(){return this._velocity}set velocity(e){this._velocity=a(e,0,127);}get gain(){return this.velocity*this.velocity/16129}set gain(e){this.velocity=Math.sqrt(127*e*127);}get name(){return `${t$2[Math.floor(this.step)]}`}get accidental(){return this.name.substring(1)}get nameWithOctave(){return `${t$2[Math.round(this.step)]}${this.octave-1}`}get stepColor(){return s$1[Math.round(this.step)%s$1.length]}get detune(){return this._detune}set detune(e){this._detune=e;}get rate(){return Math.pow(2,(this.note+this.detune/100)/12-1)}get frequency(){return e$1*this.rate}set frequency(t){t>0&&(this.note=12*Math.log(t/e$1)/Math.LN2);}constructor(e){this._note=60,this.start=0,this.duration=1,this._velocity=90,this._detune=0,this.note=e;}isEqual(e){return this.note===e.note&&this.start===e.start&&this.duration===e.duration&&this.velocity===e.velocity}clone(){let e=new i(this.note);return e.start=this.start,e.duration=this.duration,e.velocity=this.velocity,e.detune=this.detune,e}static fromName(e){const t=new i(60);return t.octave=i.nameToOctave(e),t.step=i.nameToStep(e),t}static fromFrequency(e){const t=new i(60);return t.frequency=e,t}static nameToOctave(e){if(2==e.length){let t=e.codePointAt(1);if(t)return a(t-48,0,8)}else if(e.length>2){let t=e.codePointAt(2);if(t)return a(t-48,0,8)}return 0}static nameToStep(e){return null==e||""==e?0:(e=e.length<=2?e[0].toUpperCase():e.substring(0,2).toUpperCase(),Math.max(0,t$2.indexOf(e)))}static nameToNote(e){if(e.length<2||e.length>3)return  -1;e=e.replaceAll("#","♯");for(let s=0;s<12;s++)if(e.startsWith(t$2[s])){const i=e.substring(t$2[s].length);if(["0","1","2","3","4","5","6","7","8"].includes(i)){let e=i.codePointAt(0);return 12*((e||48)-48)+s}}return  -1}};function a(e,t,s){return Math.max(t,Math.min(s,e))}const n=["C","F","B♭","E♭","A♭","C♯/D♭","F♯/G♭","B/C♭","E","A","D","G"],r=["A","D","G","C","F","A♯/B♭","D♯/E♭","A♭/G♯","C♯","F♯","B","E"],o=[0,5,10,3,8,1,6,11,4,9,2,7],h=[9,2,7,0,5,10,3,8,1,6,11,4],u=new Map([["C",["C","D♭","D","E♭","E","F","F♯","G","A♭","A","B♭","B"]],["F",["C","D♭","D","E♭","E","F","G♭","G","A♭","A","B♭","B"]],["B♭",["C","D♭","D","E♭","E","F","G♭","G","A♭","A","B♭","B"]],["E♭",["C","D♭","D","E♭","E","F","G♭","G","A♭","A","B♭","B"]],["A♭",["C","D♭","D","E♭","E","F","G♭","G","A♭","A","B♭","B"]],["C♯/D♭",["C","D♭","D","E♭","E","F","G♭","G","A♭","A","B♭","B"]],["F♯/G♭",["C","D♭","D","E♭","E","F","G♭","G","A♭","A","B♭","B"]],["B/C♭",["C","C♯","D","D♯","E","F","F♯","G","G♯","A","A♯","B"]],["E",["C","C♯","D","D♯","E","F","F♯","G","G♯","A","A♯","B"]],["A",["C","C♯","D","D♯","E","F","F♯","G","G♯","A","A♯","B"]],["D",["C","C♯","D","D♯","E","F","F♯","G","G♯","A","A♯","B"]],["G",["C","C♯","D","D♯","E","F","F♯","G","G♯","A","A♯","B"]]]),l=[0,2,4,5,7,9,11,12],d=[0,2,3,5,7,8,10,12];class m{get name(){return `${this.key} ${this.mode}`}get shortName(){return this.key.split("/")[0]+" "+this.mode}get isMajor(){return "major"===this.mode}get isMinor(){return "minor"===this.mode}get signature(){const e=this.relativeMajor.key.split("/")[0].replace("♭","b").replace("♯","#");return e.length>2?e.substring(0,2):e}constructor(e){this.key="C",this.mode="major",this.base=0;const t=e.split(" ");2===t.length&&("major"===t[1].toLowerCase()&&n.includes(t[0])?(this.key=t[0],this.mode="major",this.base=o[n.indexOf(t[0])]):"minor"===t[1].toLowerCase()&&r.includes(t[0])&&(this.key=t[0],this.mode="minor",this.base=h[r.indexOf(t[0])]));}get relativeMajor(){return "minor"===this.mode?new m(n[r.indexOf(this.key)]+" major"):this}get relativeMinor(){return "major"===this.mode?new m(r[n.indexOf(this.key)]+" minor"):this}getNoteName(e,t=true){const s=this.relativeMajor,i=u.get(s.key),a=i?i[e.step]:e.name;return t?a:this.stripAccidental(a)}getAccidental(e){const t=this.getNoteName(e);return this.containsNote(e)?"":1===t.length?"♮":t.endsWith("♯")?"♯":t.endsWith("♭")?"♭":""}getChordRoman(e){switch(e){case 1:default:return this.isMajor?"I":"i";case 2:return this.isMajor?"ii":"ii°";case 3:return this.isMajor?"iii":"III";case 4:return this.isMajor?"IV":"iv";case 5:return "V";case 6:return this.isMajor?"vi":"VI";case 7:return "vii°"}}getChordName(e){e=Math.max(1,Math.min(7,e));let t=this.base+24;t+=this.isMajor?l[e-1]:d[e-1];const s=this.getNoteName(new i$1(t));switch(e){case 1:case 4:default:return s+(this.isMajor?"maj":"min");case 2:return s+(this.isMajor?"min":"dim");case 3:case 6:return s+(this.isMajor?"min":"maj");case 5:return s+"maj";case 7:return s+"dim"}}getDiatonicTriad(e,t=4){e=Math.max(1,Math.min(7,e));let s=this.base+12*t;s+=this.isMajor?l[e-1]:d[e-1];const i=[s,s+4,s+7],a=[s,s+3,s+7],n=[s,s+3,s+6];switch(e){case 1:case 4:default:return this.isMajor?i:a;case 2:return this.isMajor?a:n;case 3:case 6:return this.isMajor?a:i;case 5:return i;case 7:return n}}containsNote(e){const t=(e.step+12-this.base)%12;return this.isMajor?l.includes(t):d.includes(t)}stripAccidental(e){return e.endsWith("♯")||e.endsWith("#")||e.endsWith("♭")||e.endsWith("b")||e.endsWith("♮")||e.endsWith("n")?e.substring(0,e.length-1):e}}function p(e,t=0){const s=parseInt(e);return isNaN(s)?t:s}function f(e,t=0){const s=parseFloat(e);return isNaN(s)?t:s}function y(e,t=false){if(null==e)return t;if("boolean"==typeof e)return e;{const t=e.toString().toLowerCase();if("true"===t||"t"===t)return  true;if("false"===t||"f"===t)return  false}return t}function v(e,t=""){return e?e.toString():t}function b(e){return Math.max(0,Math.pow(10,e/20))}function N(e,t,s){return Math.max(t,Math.min(s,e))}class q{get bpm(){return this._bpm}set bpm(e){this.setTempo(e);}get meter(){return this._meter}set meter(e){this.setTimeSignature(e);}get beatsPerMeasure(){return this._beatsPerMeasure}get beatValue(){return this._beatValue}get key(){return this._key}set key(e){this._key=e,this._subscribers.forEach((e=>e.onKeyChange()));}get contextTime(){return this.context.currentTime}get time(){return this.isPaused?this._start:this.contextTime-this._start}get timeString(){let e=""+Math.floor(this.time/60)%60,t=""+Math.round(this.time)%60,s=""+Math.floor(100*this.time)%100;return 1==e.length&&(e=`0${e}`),1==t.length&&(t=`0${t}`),1==s.length&&(s=`0${s}`),`${e}:${t}.${s}`}get beats(){return this.time*this.bpm/60+this._elapsedBeats}get isPaused(){return 0===this._playing.size}static init(){return null==q._instance&&(q._instance=new q),q._instance}constructor(){this._start=0,this._elapsedBeats=0,this._bpm=90,this._meter="4/4",this._beatsPerMeasure=4,this._beatValue=4,this._key=new m("C major"),this.voices="/assets/sounds/voices",this._playing=new Set,this._subscribers=new Set,this.context=new AudioContext,this._metronomes=new Set,this._timer=-1;}addSubscriber(e){this._subscribers.add(e);}removeSubscriber(e){this._subscribers.delete(e);}isPlaying(e){return this._playing.has(e)}play(e){this.isPaused&&(this._start=this.contextTime-this._start),this._playing.add(e),this._subscribers.add(e);}pause(e){this._subscribers.add(e),this.isPlaying(e)&&(this._playing.delete(e),this.isPaused&&(this._start=this.contextTime-this._start));}stopAll(){this._elapsedBeats=0,this._start=0,this._playing.clear(),this._subscribers.forEach((e=>e.onClockReset()));}setTime(e){this._elapsedBeats=e,this._start=0,this._playing.clear(),this._subscribers.forEach((e=>e.onClockTimeChange()));}setTempo(e){if(isNaN(e))return;const t=this.beats;e!=this._bpm&&(this._bpm=Math.max(5,e),this._start=this.contextTime-60*t/this._bpm,this._subscribers.forEach((e=>e.onTempoChange())));}setTimeSignature(e){2!=e.split("/").length&&(e="4/4"),this._beatsPerMeasure=p(e.split("/")[0],-1),this._beatValue=p(e.split("/")[1],-1),(this._beatsPerMeasure<0||this._beatValue<0)&&(this._beatsPerMeasure=4,this._beatValue=4),[1,2,4,8,16,32,64].includes(this._beatValue)||(this._beatValue=4),this._beatsPerMeasure>32&&(this._beatsPerMeasure=32);const t=`${this._beatsPerMeasure}/${this._beatValue}`;this._meter!=t&&(this._meter=t,this._subscribers.forEach((e=>e.onTimeSignatureChange())));}startMetronome(e){if(this._metronomes.add(e),-1==this._timer){const e=this.contextTime;let t=0;this._metronomes.forEach((e=>e.pulse(0))),this._timer=window.setInterval((()=>{if(0==this._metronomes.size)window.clearInterval(this._timer),this._timer=-1;else {const s=60/this.bpm,i=this.contextTime-e,a=Math.floor(i/s)%this.beatsPerMeasure;a!=t&&(t=a,this._metronomes.forEach((e=>e.pulse(t))));}}),30);}}stopMetronome(e){this._metronomes.delete(e);}isMetronomePlaying(e){return this._metronomes.has(e)}}class P{constructor(e,t,s){this.value=1,this.gain=new GainNode(e),this.name=t,this.value=s,this.gain.gain.value=s;}connect(e,t){return t==this.name&&(e.level.connect(this.gain),true)}destroy(){this.gain.disconnect();}updateParameter(e,t){return e==`${this.name}-mod}`&&(this.value=f(t,this.value),this.gain.gain.value=this.value,true)}}class D{constructor(e,t){this.id=0,this.modulators=new Array,this.connectors=new Array,this.context=e,this.id=parseInt(t.id),this.level=e.createGain();const s=f(t.level,0);this.level.gain?.setValueAtTime(b(s),0),this.level.gain.value=b(s),this.addModulator("gain",f(t["gain-mod"],1),this.level.gain);}connect(e,t){for(let s of this.modulators)if(s.connect(e,t))return;"level"==t?e.level.connect(this.level.gain):e.level.connect(this.level);}addConnector(e){this.connectors.push(e),this.level?.connect(e.level);}addModulator(e,t,s){const i=new P(this.context,e,t);i.gain.connect(s),this.modulators.push(i);}playNote(e){}releaseNote(){}scheduleNote(e,t,s,i){}cancelNotes(){}destroy(){this.level.disconnect(),this.modulators.forEach((e=>e.destroy())),this.connectors.forEach((e=>e.destroy()));}pitchBend(e){}schedulePitchBend(e,t){}updateParameter(e,t){for(let s of this.modulators)if(s.updateParameter(e,t))return;if("level"==e){const e=f(t,0);this.level.gain?.setValueAtTime(b(e),0),this.level.gain.value=b(e);}}updateConnectorLevel(e,t){this.connectors.forEach((s=>{s.id==e&&s.updateLevel(t);}));}attachAnalyzer(e,t,s){for(let i of this.connectors)i.id==e&&i.attachAnalyzer(t,s);}detachAnalyzer(e){this.connectors.forEach((t=>{t.id==e&&t.detachAnalyzer();}));}getFloatTimeDomainData(e,t,s){this.connectors.forEach((i=>{i.id==e&&i.getFloatTimeDomainData(t,s);}));}}class B extends D{constructor(e,t){super(e,t),this.A=.1,this.D=.1,this.S=1,this.R=.2,this.aShape=5,this.dShape=2,this.rShape=2,this.attackCurve=[],this.decayCurve=[],this.releaseCurve=[],this.A=f(t.A,this.A),this.D=f(t.D,this.D),this.S=f(t.S,this.S),this.R=f(t.R,this.R),this.R=Math.max(this.R,.01),this.aShape=f(t["a shape"],this.aShape),this.dShape=f(t["d shape"],this.dShape),this.rShape=f(t["r shape"],this.rShape),this._attack=e.createGain(),this._decay=e.createGain(),this._release=e.createGain(),this._attack.gain.value=0,this._decay.gain.value=1,this._release.gain.value=1,this._attack.connect(this._decay),this._decay.connect(this._release),this._release.connect(this.level),this._buildCurves();}connect(e,t){e.level.connect(this._attack);}playNote(e){let t=this.context.currentTime;try{this._attack.gain?.cancelScheduledValues(0),this._decay.gain?.cancelScheduledValues(0),this._release.gain?.cancelScheduledValues(0),this.A>0?this._attack.gain?.setValueAtTime(0,t):this._attack.gain?.setValueAtTime(1,t),this._decay.gain?.setValueAtTime(1,t),this._release.gain?.setValueAtTime(1,t),t=this.context.currentTime+.01,this.A>0?this._attack.gain?.setValueCurveAtTime(this.attackCurve,t,this.A):this._attack.gain?.setValueAtTime(1,t),this.D>0?this._decay.gain?.setValueCurveAtTime(this.decayCurve,t+this.A,this.D):this._decay.gain?.setValueAtTime(this.S,t+this.A);}catch(e){console.log("Exception in ADSR playNote $x.");}}releaseNote(){const e=this.context.currentTime;this.R>0?(this._attack.gain?.cancelScheduledValues(e),this._decay.gain?.cancelScheduledValues(e),this._release.gain?.setValueCurveAtTime(this.releaseCurve,e,this.R)):this._release.gain?.setValueAtTime(0,e);}scheduleNote(e,t,s,i){const a=t<0?-t:0;let n=(t=t<0?0:t)+this.context.currentTime;if(this.A>0?this._attack.gain?.setValueAtTime(0,n):this._attack.gain?.setValueAtTime(1,n),this._decay.gain?.setValueAtTime(1,n),this._release.gain?.setValueAtTime(1,n),n+=.01,this.A>0&&this.A>a){const e=this.A-a;this._attack.gain?.setValueCurveAtTime(this.attackCurve,n,e);}else this._attack.gain?.setValueAtTime(1,n);if(this.D>0&&this.A+this.D>a&&s>this.A){const e=a>=this.A?this.D-(a-this.A):this.D,t=a>=this.A?n:n+this.A-a;this._decay.gain?.setValueCurveAtTime(this.decayCurve,t,e),this.A+this.D>s&&this._decay.gain?.cancelScheduledValues(n+s-a);}else this._decay.gain?.setValueAtTime(this.S,Math.max(0,n+this.A+this.D-a));if(s+this.R>a){const e=a>=s?this.R-(a-s):this.R;this._release.gain?.setValueCurveAtTime(this.releaseCurve,n+s-a,e);}else this._release.gain?.setValueAtTime(0,n);}cancelNotes(){super.cancelNotes();const e=this.context.currentTime;this._release.gain?.cancelScheduledValues(e),this._attack.gain?.cancelScheduledValues(e),this._decay.gain?.cancelScheduledValues(e);}destroy(){super.destroy(),this._attack.disconnect(),this._decay.disconnect(),this._release.disconnect();}updateParameter(e,t){switch(super.updateParameter(e,t),e){case "A":this.A=f(t,this.A);break;case "D":this.D=f(t,this.D);break;case "S":this.S=f(t,this.S);break;case "R":this.R=f(t,this.R);break;case "a shape":this.aShape=f(t,this.aShape);break;case "d shape":this.dShape=f(t,this.dShape);break;case "r shape":this.rShape=f(t,this.rShape);}this.R=Math.max(this.R,.01),this._buildCurves();}_buildCurves(){this._buildAttackCurve(this.aShape),this._buildDecayCurve(this.dShape),this._buildReleaseCurve(this.rShape);}_buildAttackCurve(e){e=N(e,.001,8),this.attackCurve=[];const t=Math.ceil(B.samplesPerSecond*this.A);if(t>0)for(let s=0;s<=t;s++){let i=s/t;i=Math.pow(i,e),this.attackCurve.push(i);}}_buildDecayCurve(e){e=N(e,.001,4),this.decayCurve=[];const t=Math.ceil(B.samplesPerSecond*this.D);if(t>0)for(let s=0;s<=t;s++){let i=s/t;i=1-Math.pow(i,e),this.decayCurve.push((1-this.S)*i+this.S);}}_buildReleaseCurve(e){e=N(e,.001,4),this.releaseCurve=[];const t=Math.ceil(B.samplesPerSecond*this.R);if(t>0)for(let s=0;s<=t;s++){let i=s/t;i=1-Math.pow(i,e),this.releaseCurve.push(i);}}}B.samplesPerSecond=300;class R extends D{constructor(e,t){super(e,t),this.compressor=e.createDynamicsCompressor(),this.compressor.connect(this.level),this.compressor.threshold.value=f(t.threshold,-24),this.compressor.knee.value=f(t.knee,30),this.compressor.ratio.value=f(t.ratio,12),this.compressor.attack.value=f(t.attack,.003),this.compressor.release.value=f(t.release,.25);}connect(e,t){"audio"===t?e.level.connect(this.compressor):super.connect(e,t);}destroy(){super.destroy(),this.compressor.disconnect();}updateParameter(e,t){super.updateParameter(e,t),"threshold"===e?this.compressor.threshold.value=N(f(t,-24),-100,0):"knee"==e?this.compressor.knee.value=N(f(t,30),0,40):"ratio"==e?this.compressor.ratio.value=N(f(t,12),1,20):"release"==e?this.compressor.release.value=N(f(t,.25),0,1):"attack"==e&&(this.compressor.attack.value=N(f(t,.003),0,1));}}class G{get context(){return this.source.context}constructor(e,t){this.id=0,this.dB=0,this._pre=null,this._analyzers=new Array,this._splitter=null,this._merger=null,this._buffer=null,this.type="",this.source=e,this.id=p(t.id,-1),this.level=new GainNode(this.context),this.dB=f(t.level,0),this.level.gain?.setValueAtTime(b(this.dB),0),this.type=v(t.type,"");}updateLevel(e){this.dB=e,(this._pre??this.level).gain?.setValueAtTime(b(e),0);}destroy(){this.level.disconnect();}attachAnalyzer(e,t,s=-60,i=5){t=N(t,1,6),this._pre=new GainNode(this.context),this._splitter=this.context.createChannelSplitter(t),this._merger=this.context.createChannelMerger(t),this._pre.gain?.setValueAtTime(b(this.dB),0),this.level.gain?.setValueAtTime(1,0),this.source.level.disconnect(this.level),this.source.level.connect(this._pre),this._pre?.connect(this._splitter),this._merger?.connect(this.level);for(let a=0;a<t;a++){let t=new AnalyserNode(this.level.context);this._analyzers.push(t),t.fftSize=e,t.minDecibels=s,t.maxDecibels=i,this._splitter?.connect(t,a,0),t.connect(this._merger,0,a),0==a&&(this._buffer=new Float32Array(t.frequencyBinCount));}}detachAnalyzer(){if(null!=this._pre){this.level.gain?.setValueAtTime(b(this.dB),0),this.source.level.disconnect(this._pre),this._pre?.disconnect(),this._splitter?.disconnect(),this._merger?.disconnect();for(let e of this._analyzers)e.disconnect();this.source.level.connect(this.level),this._pre=null,this._buffer=null,this._splitter=null,this._merger=null,this._analyzers=[];}}getFloatTimeDomainData(e,t){if(e<this._analyzers.length){const s=this._analyzers[e];if(null!=this._buffer&&t.length==this._buffer.length){s.getFloatTimeDomainData(this._buffer);for(let e=0;e<t.length;e++)t[e]+=this._buffer[e];}}}}class I extends D{constructor(e,t){super(e,t),this.csn=e.createConstantSource(),this.csn.offset.value=f(t.signal,1),this.csn.connect(this.level),this.csn.start();}destroy(){super.destroy(),this.csn.stop(),this.csn.disconnect();}updateParameter(e,t){super.updateParameter(e,t),"signal"===e&&this.csn.offset.setValueAtTime(f(t,1),this.context.currentTime);}}class F extends D{constructor(e,t){super(e,t),this.gates=new Array,this.delayTime=.1,this.delayTime=f(t.delay,.1),this.audioIn=e.createGain(),this.delayIn=e.createGain(),this.addModulator("delay",f(t["delay-mod"],.5),this.delayIn.gain);}connect(e,t){"audio"==t?e.level.connect(this.audioIn):"delay"==t?e.level.connect(this.delayIn):super.connect(e,t);}updateParameter(e,t){"delay"==e?(this.delayTime=f(t,this.delayTime),this.gates.forEach((e=>{e.delay.delayTime.linearRampToValueAtTime(this.delayTime,this.context.currentTime+.1);}))):super.updateParameter(e,t);}playNote(e){const t=this.context.createGain();t.gain.value=1,t.gain.setValueAtTime(1,0);const s=this.context.createDelay();s.delayTime.setValueAtTime(this.delayTime,0),this.audioIn.connect(t),this.delayIn.connect(s.delayTime),t.connect(s),s.connect(this.level),this.gates.push({free:-1,gate:t,delay:s}),this._freeGates();}releaseNote(){this._freeGates(),this.gates.forEach((e=>{e.free<0&&(e.free=this.level.context.currentTime);}));}_freeGates(){const e=this.context.currentTime;this.gates=this.gates.filter((t=>!(t.free>=0&&t.free<e)||(t.gate.disconnect(),t.delay.disconnect(),false)));}scheduleNote(e,t,s,i){const a=this.context.currentTime,n=a+t+s+i,r=this.context.createGain();r.gain.value=0,r.gain.setValueAtTime(0,0),r.gain.setValueAtTime(1,Math.max(a,a+t)),r.gain.setValueAtTime(0,n);const o=this.context.createDelay();o.delayTime.setValueAtTime(this.delayTime,a),this.audioIn.connect(r),this.delayIn.connect(o.delayTime),r.connect(o),o.connect(this.level),this.gates.push({free:n,gate:r,delay:o}),this._freeGates();}destroy(){super.destroy(),this.gates.forEach((e=>{e.gate.disconnect(),e.delay.disconnect();})),this.gates=[],this.audioIn.disconnect(),this.delayIn.disconnect();}cancelNotes(){this.gates.forEach((e=>{e.gate.disconnect(),e.delay.disconnect();})),this.gates=[];}}class O extends D{constructor(e,t){super(e,t),this.param=0,this.curve="tanh",this.param=f(t.param,this.param),this.curve=v(t.curve,this.curve),this.dist=new WaveShaperNode(e),this.dist.curve=this._makeCurve(),this.dist.oversample="4x",this.gain=new GainNode(e),this.gain.gain.value=f(t["pre-gain"],1),this.gain.connect(this.dist),this.dist.connect(this.level);}connect(e,t){"audio"===t?e.level.connect(this.gain):super.connect(e,t);}destroy(){super.destroy(),this.gain.disconnect(),this.dist.disconnect();}updateParameter(e,t){super.updateParameter(e,t),"param"===e?(this.param=f(t,this.param),this.dist.curve=this._makeCurve()):"curve"===e?(this.curve=v(t,this.curve),this.dist.curve=this._makeCurve()):"pre-gain"===e&&(this.gain.gain.value=f(t,1));}_makeCurve(){const e=new Float32Array(512),t=this._curve(this.curve);for(let s=0;s<e.length;s++){const i=L$m(-1,1,s/(e.length-1));e[s]=t(i,this.param);}return e}_curve(e){switch(e){case "tanh":default:return W;case "sigmoid":return $;case "sin":case "sine":return j;case "steep sin":case "steep sine":return z}}}function W(e,t){const s=6-5*t,i=Math.pow(Math.E,s*e);return (i-1)/(i+1)}function $(e,t){const s=50*t;return (3+s)*e*20*(Math.PI/180)/(Math.PI+s*Math.abs(e))}function j(e,t){const s=1+5*t;return Math.sin(e*(19.8*s)/(2*Math.PI))}function z(e,t){const s=9.9*Math.PI;return L$m(Math.pow(Math.sin(e*s),5),Math.sin(e*s),t)}function L$m(e,t,s){return e+s*(t-e)}class Q extends D{constructor(e,t){super(e,t),this.tracking=true,this.ratio=1,this.frequency=350,this.Q=1,this.gain=0,this.detune=0,this.type="lowpass",this.filter=e.createBiquadFilter(),this.filter.connect(this.level),this.Q=N(f(t.Q,1),1e-4,1e3),this.gain=N(f(t.gain,0),-40,40),this.type=v(t["filter type"],"lowpass"),this.detune=f(t.detune,0),this.frequency=N(f(t.frequency,350),0,16700),this.tracking=y(t.tracking,true),this.ratio=f(t["tracking ratio"],1),this.addModulator("Q",f(t["Q-mod"],1),this.filter.Q),this.addModulator("gain",f(t["gain-mod"],5),this.filter.gain),this.addModulator("frequency",f(t["frequency-mod"],1e3),this.filter.frequency),this.filter.Q.value=this.Q,this.filter.gain.value=this.gain,this.filter.type=this.type,this.filter.detune.value=this.detune,this.filter.frequency.value=this.frequency;}playNote(e){const t=this.tracking?e.frequency*this.ratio+this.frequency:this.frequency,s=this.context.currentTime;this.filter.Q?.setValueAtTime(this.Q,s),this.filter.gain?.setValueAtTime(this.gain,s),this.filter.detune?.setValueAtTime(this.detune,s),this.filter.frequency?.setValueAtTime(t,s);}scheduleNote(e,t,s,i){t=t<0?0:t;const a=this.context.currentTime,n=this.tracking?e.frequency*this.ratio+this.frequency:this.frequency;this.filter.Q?.setValueAtTime(this.Q,t+a),this.filter.gain?.setValueAtTime(this.gain,t+a),this.filter.detune?.setValueAtTime(this.detune,t+a),this.filter.frequency?.setValueAtTime(n,t+a);}cancelNotes(){super.cancelNotes(),this.filter.Q?.cancelScheduledValues(0),this.filter.gain?.cancelScheduledValues(0),this.filter.detune?.cancelScheduledValues(0),this.filter.frequency?.cancelScheduledValues(0);}destroy(){super.destroy(),this.filter.disconnect();}connect(e,t){"audio"===t?e.level.connect(this.filter):super.connect(e,t);}updateParameter(e,t){const s=this.context.currentTime;"filter type"===e&&Q.FILTERS.includes(t)?(this.type=v(t,"lowpass"),this.filter.type=this.type):"Q"===e?(this.Q=N(f(t,this.Q),1e-4,1e3),this.filter.Q.cancelScheduledValues(0),this.filter.Q.setValueAtTime(this.Q,s),this.filter.Q.value=this.Q):"gain"===e?(this.gain=N(f(t,this.gain),-40,40),this.filter.gain.cancelScheduledValues(0),this.filter.gain.setValueAtTime(this.gain,s),this.filter.gain.value=this.gain):"detune"===e?(this.detune=f(t,this.detune),this.filter.detune?.cancelScheduledValues(0),this.filter.detune?.setValueAtTime(this.detune,s)):"frequency"===e?(this.frequency=N(f(t,this.frequency),0,16700),this.filter.frequency?.cancelScheduledValues(0),this.filter.frequency?.setValueAtTime(this.frequency,s),this.filter.frequency.value=this.frequency):"tracking"===e?this.tracking=y(t,this.tracking):"ratio"===e?this.ratio=f(t,this.ratio):super.updateParameter(e,t);}}Q.FILTERS=["lowpass","highpass","bandpass","allpass","lowshelf","highshelf","peaking","notch","allpass"];class U extends D{constructor(e,t){super(e,t),this.inverter=e.createGain(),this.inverter.gain.value=-1,this.inverter.gain.setValueAtTime(-1,0),this.inverter.connect(this.level);}connect(e,t){e.level.connect(this.inverter);}destroy(){super.destroy(),this.inverter.disconnect();}}class X extends D{get buffer(){switch(this.noise){case "pink":return this.pink;case "brown":return this.brown;default:return this.white}}constructor(e,t){super(e,t),this.noise="white",this.noise=v(t.noise,this.noise);const s=e.sampleRate,i=2*s;this.white=e.createBuffer(1,i,s),this.pink=e.createBuffer(1,i,s),this.brown=e.createBuffer(1,i,s);const a=this.white.getChannelData(0),n=this.pink.getChannelData(0),r=this.brown.getChannelData(0);let o=0,h=0,c=0,u=0,l=0,d=0,m=0,p=0;for(let e=0;e<i;e++){a[e]=2*Math.random()-1;let t=Math.random();o=.99886*o+.0555179*t,h=.99332*h+.0750759*t,c=.969*c+.153852*t,u=.8665*u+.3104856*t,l=.55*l+.5329522*t,d=-0.7616*d-.016898*t,n[e]=o+h+c+u+l+d+m+.5362*t,n[e]*=.11,m=.115926*t,r[e]=(p+.02*t)/1.02,p=r[e],r[e]*=3.5;}this.gain=new GainNode(e),this.gain.gain.value=.3,this.gain.connect(this.level),this.source=new AudioBufferSourceNode(e),this.source.buffer=this.buffer,this.source.loop=true,this.source.start(),this.source.connect(this.gain);}destroy(){super.destroy(),this.source.stop(),this.source.disconnect(),this.gain.disconnect();}updateParameter(e,t){super.updateParameter(e,t),"noise"===e&&(this.noise=v(t,this.noise),this.source.disconnect(),this.source=new AudioBufferSourceNode(this.context),this.source.buffer=this.buffer,this.source.loop=true,this.source.start(),this.source.connect(this.gain));}}X.NOISE_TYPES=["white","pink","brown"];class Y extends D{constructor(e,t){super(e,t),this.frequency=440,this.multiplier=1,this.detune=0,this.relative=true,this.waveform="sine",this.waveform=v(t.waveform,"sine"),this.frequency=f(t.frequency,this.frequency),this.detune=f(t.detune,0),this.relative=y(t.relative,true),this.multiplier=f(t.multiplier,this.multiplier),this.osc=e.createOscillator(),this.gain=new GainNode(e),this.shaper=e.createWaveShaper(),this.addModulator("detune",f(t["detune-mod"],500),this.osc.detune),this.addModulator("frequency",f(t["frequency-mod"],1e3),this.osc.frequency),this.addModulator("amplitude",f(t["amplitude-mod"],1),this.level.gain),this.gain.gain.value=.3,Y.Waveforms.includes(this.waveform)||(this.waveform="sine"),this.osc.frequency.setValueAtTime(90,0),this.osc.type="sine",this.osc.start(),this.osc.connect(this.gain),this.shaper.connect(this.gain),this.gain.connect(this.level),this._updateWaveform(this.waveform);}_updateWaveform(e){Y.Waveforms.includes(e)&&(this.waveform=e),this.osc.type="sine",Y.BasicWaveforms.includes(e)?(this.osc.type=e,this.osc.disconnect(),this.osc.connect(this.gain)):Y.PeriodicWaveforms.includes(e)?(this.osc.setPeriodicWave(this._createPeriodicWave(e)),this.osc.disconnect(),this.osc.connect(this.gain)):Y.ShaperWaveforms.includes(e)&&(this.shaper.curve=this._createWaveShaper(e),this.osc.disconnect(),this.osc.connect(this.shaper),this.osc.type="pitched noise"===e?"sawtooth":"sine");}_createWaveShaper(e){var t,s=new Float32Array(256);switch(e){case "exp sin":t=e=>Math.pow(e,5);break;case "hump":t=e=>(e<0?0:e)-.5;break;default:t=e=>2*Math.random()-1;}for(let e=0;e<s.length;e++)s[e]=t(2*e/s.length-1);return s}_createPeriodicWave(e){let t=new Array;switch(e){case "cello":t=[0,1,.5,.3,.5,.35,.2,.2,.1,.15,.15,.15];break;case "flute":t=[0,.5,.05,.3,.1];break;case "reed":t=[-0.15,.5,1,.4,.6,.3,.25,.2];break;case "brass":t=[0,.8,.8,.85,.9,.8,.85,.7,.6,.4,.3,.25,.2,.1];break;case "glass":t=[0,1,0,.25,0,.5,0,.75,0,.8];break;case "vibraphone":t=[0,6,19,.8,13,3];break;case "camel":t.push(0);for(let e=1;e<20;e++)t.push(1/Math.pow(e,2));break;case "soft saw":t.push(-0.1);for(let e=1;e<20;e++)t.push(1/e);break;case "soft square":t.push(0);for(let e=1;e<50;e++)t.push(1/e*(e%2));break;case "organ 1":t=[-0.1,1,1,1];break;case "organ 2":t=[-0.1,1,1,1,0,0,0,0,0,.8];break;case "organ 3":t=[0,1,0,0,0,0,.8,.8,.8,.8];break;case "buzz 1":t.push(0);let e=1;for(let s=1;s<100;s++)s%3==0||s%4==0?(t.push(1/e),e++):t.push(0);break;default:t.push(0),e=1;for(let s=1;s<100;s++)s%5==0||s%2==0?(t.push(.5/e),e++):t.push(0);}return this.osc.context.createPeriodicWave(t,new Float32Array(t.length))}playNote(e){let t=this.relative?e.frequency*this.multiplier:this.frequency;t=N(t,0,23999),this.osc.frequency?.setValueAtTime(t,this.context.currentTime),this.osc.detune?.setValueAtTime(this.detune,this.context.currentTime);}scheduleNote(e,t,s,i){t=t<0?0:t;let a=this.relative?e.frequency*this.multiplier:this.frequency;a=N(a,0,23999),this.osc.frequency?.setValueAtTime(a,t+this.context.currentTime),this.osc.detune?.setValueAtTime(this.detune,t+this.context.currentTime);}cancelNotes(){super.cancelNotes(),this.osc.frequency?.cancelScheduledValues(0),this.osc.detune?.cancelScheduledValues(0);}destroy(){super.destroy(),this.osc.stop(),this.osc.disconnect(),this.gain.disconnect(),this.shaper.disconnect();}pitchBend(e){const t=this.context.currentTime;this.osc.detune?.setTargetAtTime(this.detune+e,t,.1);}schedulePitchBend(e,t){t.apply(this.osc.detune,e,this.context,this.detune);}updateParameter(e,t){if("waveform"===e)this._updateWaveform(t);else if("relative"==e)this.relative=y(t,true);else if("frequency"==e)this.frequency=f(t,this.frequency),this.osc.frequency?.setValueAtTime(this.frequency,this.context.currentTime);else if("multiplier"==e)if(this.relative){let e=this.osc.frequency.value/this.multiplier;this.multiplier=f(t,this.multiplier),this.multiplier>0&&(e*=this.multiplier),e=N(e,0,23999),this.osc.frequency?.setValueAtTime(e,this.context.currentTime);}else this.multiplier=f(t,this.multiplier);else "detune"==e?(this.detune=f(t,this.detune),this.osc.detune?.setValueAtTime(this.detune,this.context.currentTime)):super.updateParameter(e,t);}}Y.BasicWaveforms=["sine","square","triangle","sawtooth"],Y.PeriodicWaveforms=["cello","flute","reed","brass","glass","vibraphone","camel","organ 1","organ 2","organ 3","soft saw","soft square","buzz 1","buzz 2"],Y.ShaperWaveforms=["pitched noise","exp sin","hump"],Y.Waveforms=[...Y.BasicWaveforms,...Y.PeriodicWaveforms,...Y.ShaperWaveforms];class H extends B{constructor(e,t){super(e,t);}}class J extends D{constructor(e,t){super(e,t),this.panner=new StereoPannerNode(e),this.panner.pan.setValueAtTime(f(t.pan,0),0),this.panner.connect(this.level),this.addModulator("pan",f(t["pan-mod"],.5),this.panner.pan);}connect(e,t){"audio"===t?e.level.connect(this.panner):super.connect(e,t);}destroy(){super.destroy(),this.panner.disconnect();}updateParameter(e,t){super.updateParameter(e,t),"pan"===e&&this.panner.pan.setValueAtTime(f(t,0),0);}}class K extends D{constructor(e,t){super(e,t),this.frequency=220,this.multiplier=1,this.detune=0,this.relative=true;var s=new Float32Array(512);for(let e=0;e<s.length/2;e++)s[e]=-1,s[e+Math.floor(s.length/2)]=1;this.driver=new OscillatorNode(e),this.driver.type="sawtooth",this.gain=new GainNode(e),this.shaper=new WaveShaperNode(e),this.shaper.curve=s,this.csn=new ConstantSourceNode(e),this.addModulator("pulse width",1,this.csn.offset),this.addModulator("detune",f(t["detune-mod"],400),this.driver.detune),this.addModulator("frequency",f(t["frequency-mod"],100),this.driver.frequency),this.addModulator("amplitude",f(t["amplitude-mod"],1),this.level.gain),this.driver.connect(this.shaper),this.csn.connect(this.shaper),this.shaper.connect(this.gain),this.gain.connect(this.level),this.csn.offset.value=f(t["pulse width"],0),this.frequency=f(t.frequency,this.frequency),this.detune=f(t.detune,this.detune),this.relative=y(t.relative,this.relative),this.gain.gain.value=.3,this.driver.frequency.value=this.frequency,this.driver.detune.value=this.detune,this.csn.start(),this.driver.start();}playNote(e){let t=this.relative?e.frequency*this.multiplier:this.frequency;t=N(t,0,23999),this.driver.frequency.setValueAtTime(t,this.context.currentTime),this.driver.detune.setValueAtTime(this.detune,this.context.currentTime);}scheduleNote(e,t,s,i){t=t<0?0:t;let a=this.relative?e.frequency*this.multiplier:this.frequency;a=N(a,0,23999),this.driver.frequency.setValueAtTime(a,t+this.context.currentTime),this.driver.detune.setValueAtTime(this.detune,t+this.context.currentTime);}cancelNotes(){super.cancelNotes(),this.driver.frequency.cancelScheduledValues(0),this.driver.detune.cancelScheduledValues(0);}destroy(){super.destroy(),this.csn.stop(),this.csn.disconnect(),this.driver.stop(),this.driver.disconnect(),this.gain.disconnect(),this.shaper.disconnect();}pitchBend(e){const t=this.context.currentTime;this.driver.detune.setTargetAtTime(this.detune+e,t,.1);}schedulePitchBend(e,t){t.apply(this.driver.detune,e,this.context,this.detune);}updateParameter(e,t){if("relative"===e)this.relative=y(t,true);else if("frequency"==e)this.frequency=f(t,this.frequency),this.driver.frequency.setValueAtTime(this.frequency,this.context.currentTime);else if("multiplier"===e)if(this.relative){let e=this.driver.frequency.value/this.multiplier;this.multiplier=f(t,this.multiplier),this.multiplier>0&&(e*=this.multiplier),e=N(e,0,23999),this.driver.frequency.setValueAtTime(e,this.context.currentTime);}else this.multiplier=f(t,this.multiplier);else "detune"===e?(this.detune=f(t,this.detune),this.driver.detune.setValueAtTime(this.detune,this.context.currentTime)):"pulse width"===e?this.csn.offset.value=f(t,0):super.updateParameter(e,t);}}class Z extends D{constructor(e,t){super(e,t),this.csn=new ConstantSourceNode(e),this.csn.offset.value=2*Math.random()-1,this.csn.connect(this.level),this.csn.start();}playNote(e){const t=2*Math.random()-1;this.csn.offset.setValueAtTime(t,this.context.currentTime);}scheduleNote(e,t,s,i){const a=2*Math.random()-1;t=t<0?0:t,this.csn.offset.setValueAtTime(a,t+this.context.currentTime);}destroy(){super.destroy(),this.csn.stop(),this.csn.disconnect();}}class ee{constructor(){}static hasSound(e){return ee.sounds.has(e)}static getAudioBuffer(e){return ee.sounds.get(e)}static async loadAudioBuffer(e){const t=ee.context;if(ee.hasSound(e))return ee.getAudioBuffer(e);let s=e;s=s.endsWith(".ogg")||s.endsWith(".wav")?e:ee.supportsAudioType("audio/ogg")?`${e}.ogg`:`${e}.wav`;try{let i=await fetch(s),a=await i.arrayBuffer(),n=await t.decodeAudioData(a);return ee.sounds.set(e,n),n}catch(e){console.log(e);}}static async loadCustomSound(e){if(ee.hasSound(e))return  true;const t=ee.context;try{let s=await fetch(e),i=await s.arrayBuffer(),a=await t.decodeAudioData(i);return ee.sounds.set(e,a),console.log("Loaded "+e),!0}catch(e){return console.log(e),false}}static supportsAudioType(e){if(ee._supports.has(e))return ee._supports.get(e);let t=false;const s=document.createElement("audio");return s.id="test-audio-node",document.body.append(s),"probably"!=s.canPlayType(e)&&"maybe"!=s.canPlayType(e)||(t=true,document.querySelector("#test-audio-node")?.remove()),ee._supports.set(e,t),t}}function te(e){return "object"==typeof e&&"sample"in e&&"string"==typeof e.sample&&"step"in e&&"number"==typeof e.step}ee.sounds=new Map,ee.context=q.init().context,ee._supports=new Map;class se extends D{constructor(e,t){super(e,t),this.sources=new Array,this.playback=1,this.detune=0,this.sample_pack="piano",this.samples=new Array,this._rate=1,this.drumkit=false,this.playback=f(t.playback,this.playback),this.detune=f(t.detune,this.detune),this.sample_pack=v(t["sample-pack"],this.sample_pack),this.dIn=new GainNode(e),this.pIn=new GainNode(e),this.dIn.gain.value=f(t["detune-mod"],1),this.pIn.gain.value=f(t["playback-mod"],1),"samples"in t&&Array.isArray(t.samples)&&this.loadSamplePack(t.samples);}loadSamplePack(e){this.samples=e.filter((e=>te(e))).sort(((e,t)=>e.step-t.step)),this.samples.forEach((e=>ee.loadAudioBuffer(e.sample)));}static loadAudioBuffers(e,t){e.forEach((e=>ee.loadAudioBuffer(e.sample)));}playNote(e){this.scheduleNote(e,0,0,0);}findBestSample(e){let t;if(this.drumkit)t=this.samples.find((t=>t.step===Math.round(e.note)));else {let s=1e5;for(const i of this.samples){if(i.step==e.note)return i;if(i.step>e.note){return i.step-e.note+3<s?i:t}{const a=e.note-i.step;a<s&&(t=i,s=a);}}}return t}scheduleNote(e,t,s,i){const a=t<0?-t:0;t=Math.max(0,t);const n=this.findBestSample(e);if(n){const r=ee.getAudioBuffer(n.sample);if(r){const o=e.note-n.step+e.detune/100,h=this.context.currentTime,c=Math.pow(2,o/12),u=new AudioBufferSourceNode(this.context);u.connect(this.level),this.sources.push(u),this.dIn.connect(u.detune),this.pIn.connect(u.playbackRate),u.buffer=r,u.playbackRate.value=c*this.playback,u.start(t+h,a),s>0&&u.stop(t+h+s+i),u.addEventListener("ended",(e=>{this.sources=this.sources.filter((e=>e!==u)),u.disconnect();})),r.duration,this.playback,this._rate=c;}}}cancelNotes(){super.cancelNotes(),this.sources.forEach((e=>{e.stop(),e.disconnect();})),this.sources=new Array,this._rate=1;}destroy(){super.destroy(),this.sources.forEach((e=>{e.stop(),e.disconnect();})),this.sources=new Array,this._rate=1;}pitchBend(e){const t=this.context.currentTime;this.sources.forEach((s=>{s.detune?.setTargetAtTime(this.detune+e,t,.1);}));}schedulePitchBend(e,t){if(this.sources.length>0){const s=this.sources[this.sources.length-1];t.apply(s.detune,e,this.context,this.detune);}}connect(e,t){"detune"==t?e.level.connect(this.dIn):"playback"==t&&e.level.connect(this.pIn);}updateParameter(e,t){"playback"==e?(this.playback=f(t,this.playback),this.sources.forEach((e=>{e.playbackRate?.setValueAtTime(this._rate*this.playback,this.context.currentTime);}))):"detune"==e?(this.detune=f(t,this.detune),this.sources.forEach((e=>{e.detune?.setValueAtTime(this.detune,this.context.currentTime);}))):"sample-pack"==e||("playback-mod"==e?this.pIn.gain.value=f(t,1):"detune-mod"==e?this.dIn.gain.value=f(t,1):super.updateParameter(e,t));}}let ie$2 = class ie extends D{constructor(e,t){super(e,t),this.merger=e.createChannelMerger(2),this.leftGain=new GainNode(e),this.rightGain=new GainNode(e);let s=f(t["left-level"],0);this.leftGain.gain.setValueAtTime(b(s),0),s=f(t["right-level"],0),this.rightGain.gain?.setValueAtTime(b(s),0),this.leftGain.connect(this.merger,0,0),this.rightGain.connect(this.merger,0,1),this.merger.connect(this.level),this.addModulator("left-level",f(t["left-level-mod"],.5),this.leftGain.gain),this.addModulator("right-level",f(t["right-level-mod"],.5),this.rightGain.gain);}connect(e,t){"left"===t?e.level.connect(this.leftGain):"right"===t?e.level.connect(this.rightGain):super.connect(e,t);}destroy(){super.destroy(),this.merger.disconnect(),this.leftGain.disconnect(),this.rightGain.disconnect();}updateParameter(e,t){if(super.updateParameter(e,t),"left-level"===e){let e=f(t,0);this.leftGain.gain.setValueAtTime(b(e),0);}else if("right-level"==e){let e=f(t,0);this.rightGain.gain.setValueAtTime(b(e),0);}}};class ae{constructor(e){this.id=0,this.free=0,this.nodes=new Map,this.release=0,this.gates=new Array,this.context=e,this.id=ae._CHAIN_ID++,this.loadPatch(ae._sine_patch);}playNote(e,t){const s=t.context.currentTime;this.free=31536e3,this.disconnect();const i=new GainNode(t.context);i.connect(t),i.gain.value=e.gain,i.gain.setValueAtTime(e.gain,s),this.out?.level.connect(i),this.gates.push({free:this.free,node:i}),this.nodes.forEach(((t,s,i)=>t.playNote(e)));}releaseNote(){this.nodes.forEach(((e,t,s)=>e.releaseNote()));}scheduleNote(e,t,s,i){const a=i.context.currentTime;this.free=a+t+s+this.release+.05;const n=new GainNode(i.context);n.connect(i),n.gain.value=0,n.gain?.setValueAtTime(0,0),n.gain?.setValueAtTime(e.gain,Math.max(a,a+t)),n.gain?.setValueAtTime(0,Math.max(a,a+t+s+this.release)),this.out?.level.connect(n),this.gates.push({free:this.free,node:n});try{this.nodes.forEach(((i,a,n)=>{i.scheduleNote(e,t,s,this.release);}));}catch(e){console.log("Note scheduling exception: $x");}for(let e=0;e<this.gates.length;e++)this.gates[e].free<a&&(this.gates[e].node?.disconnect(),this.out?.level.disconnect(this.gates[e].node),delete this.gates[e]);return this.gates=this.gates.filter((e=>void 0!==e)),this.release}disconnect(){this.out?.level.disconnect(),this.gates.forEach((e=>{e.node?.disconnect();})),this.gates=[];}cancelNotes(){this.disconnect(),this.nodes.forEach((e=>e.cancelNotes())),this.free=0;}destroy(){this.disconnect(),this.nodes.forEach((e=>e.destroy())),this.nodes.clear();}pitchBend(e){this.nodes.forEach((t=>t.pitchBend(e)));}schedulePitchBend(e,t){this.nodes.forEach((s=>s.schedulePitchBend(e,t)));}loadSoundPatch(e){const t=ae._custom_patch.replaceAll("<SOUNDURL>",e);this.loadPatch(JSON.parse(t));}loadPatch(e){if(this.nodes.clear(),this.out=void 0,this.release=0,Array.isArray(e.nodes))for(let t of e.nodes){let e=this.createSynthNode(this.context,t);e instanceof H&&(this.out=e),this.nodes.set(e.id,e);}this._updateReleaseValue();for(let t of e.routing){let e=this.nodes.get(t.source),s=this.nodes.get(t.dest);if(e&&s){let i=new G(e,t);e.addConnector(i),s.connect(i,v(t.type,""));}}}createSynthNode(e,t){switch(t.type){case "compressor":return new R(e,t);case "const":return new I(e,t);case "distortion":return new O(e,t);case "gain":return new D(e,t);case "inverter":return new U(e,t);case "lfo":const s=new Y(e,t);return s.gain.gain.value=1,s;case "fm":case "osc":return new Y(e,t);case "noise":return new X(e,t);case "panner":return new J(e,t);case "pwm":return new K(e,t);case "delay":return new F(e,t);case "adsr":return new B(e,t);case "filter":return new Q(e,t);case "out":return new H(e,t);case "rand":return new Z(e,t);case "sample":case "drums":return new se(e,t);case "stereo":return new ie$2(e,t);default:return console.log(`Node not found: ${t.type}`),new D(e,t)}}getNodeById(e){return this.nodes.get(e)}updateParameter(e,t,s){let i=this.nodes.get(e);i?.updateParameter(t,s),this._updateReleaseValue();}updateConnectorLevel(e,t,s){let i=this.nodes.get(e);i?.updateConnectorLevel(t,s);}attachAnalyzer(e,t,s,i){let a=this.nodes.get(e);a?.attachAnalyzer(t,s,i);}detachAnalyzer(e,t){let s=this.nodes.get(e);s?.detachAnalyzer(t);}getFloatTimeDomainData(e,t,s,i){let a=this.nodes.get(e);a?.getFloatTimeDomainData(t,s,i);}_updateReleaseValue(){this.release=0,this.nodes.forEach((e=>{e instanceof B&&(this.release=Math.max(Math.max(e.A+e.D,e.R),this.release));}));}}ae._CHAIN_ID=0,ae._sine_patch={nodes:[{type:"out",A:.1,D:.1,S:.8,R:.15,id:0},{type:"osc",waveform:"sine",relative:"true",frequency:1,id:1,level:.1}],routing:[{source:1,dest:0,type:"out"}]},ae._custom_patch='{\n      "nodes": [\n        {\n          "type": "out",\n          "id": 0,\n          "A": 0.0,\n          "D": 0.1,\n          "S": 1,\n          "R": 0.3,\n          "level": 0\n        },\n        {\n          "type": "sample",\n          "sample-pack": "custom",\n          "samples": [\n            {\n              "sample": "<SOUNDURL>",\n              "step": 60\n            }\n          ],\n          "id": 1,\n          "level": 0\n        }\n      ],\n      "routing": [\n        { "id": 2, "source": 1, "dest": 0, "type": "audio", "level": 0 }\n      ]\n    }';class ne{get waveRate(){return this.sampleRate/this.blockSize}get isEmpty(){return 0==this.waveform.length}get duration(){return this.waveform.length/this.waveRate}constructor(){this.waveform=new Array,this.sampleRate=44100,this.blockSize=128,this.stride=8,this._top_path=new Array,this._bottom_path=new Array;}appendSample(e){function t(e){return Math.sin(e*Math.PI*.5)}this.waveform.push(e);const s=this.duration,i=N(t(e.wmax),0,1),a=N(t(e.wmin),-1,0);this._top_path.push("L",s,i+.01),this._bottom_path.unshift("L",s,a-.01);}appendBuffer(e){const t=e.getChannelData(0),s=e.numberOfChannels>1?e.getChannelData(1):t,i=this.blockSize*this.stride;let a=0,n=0,r=0;for(let o=0;o<e.length;o++)if(a=Math.min(a,Math.min(t[o],s[o])),n=Math.max(n,Math.max(t[o],s[o])),r+=(t[o]+s[o])/2,(o+1)%i==0){const e=r/i;this.appendSample({wmin:a,wmax:n,wavg:e}),n=0,a=0,r=0;}}static fromBuffer(e){const t=new ne;return t.appendBuffer(e),t}get wavepath(){const e=document.createElementNS("http://www.w3.org/2000/svg","path"),t=["M",0,0,...this._top_path,...this._bottom_path,"Z"].join(" ");return e.setAttribute("d",t),e}}class oe{constructor(){this.queue=new Array,this.cache=new Map,setTimeout((()=>this._processReqest()),100);}static init(){return oe.instance||(oe.instance=new oe),oe.instance}static requestWaveform(e){const t=oe.init();return new Promise((s=>{const i=t.cache.get(e.uuid),a=true===e.force;i&&!a?s(i):(e._callback=s,t.queue.push(e));}))}static cancelRequest(e){const t=oe.init();t.queue=t.queue.filter((t=>t.uuid!==e));}static clearCache(){oe.instance?.cache.clear();}static clearCacheEntry(e){oe.instance?.cache.delete(e);}async _processReqest(){const e=this.queue.shift();if(e){const t=true===e.force,s=e.start?e.start:0,i=this.cache.get(e.uuid);!t&&i&&e._callback?e._callback(i):(e.waveform||(e.waveform=new ne),e.beats>0&&(await this.renderNextSegment(e),e.progress(),e.start=s+e.increment,e.beats-=e.increment),e.beats<=0?(this.cache.set(e.uuid,e.waveform),e._callback&&e._callback(e.waveform)):this.queue.push(e));}setTimeout((()=>this._processReqest()),100);}async renderNextSegment(e){return new Promise((async t=>{const s=e.start?e.start:0,i=e.increment*(60/e.synth.bpm),a=Math.round(44100*i),n=new OfflineAudioContext(2,a,44100);await n.audioWorklet.addModule("/assets/js/AudioWorklets.js");const r=new AudioWorkletNode(n,"progress-monitor");r.port.onmessage=t=>{e.waveform?.appendSample(t.data);},r.connect(n.destination),e.synth.scheduleNotes(e.trace,r,-s),await n.startRendering(),t();}))}}class he{get velocity(){return this._velocity}set velocity(e){this._velocity=e,0===e&&9===this.code&&(this.code=8,this.message="note-off");}constructor(e){switch(this.code=0,this.note=-1,this._velocity=0,this.value=0,this.channel=0,this.code=e,e){case 9:this.message="note-on";break;case 8:this.message="note-off";break;case 14:this.message="pitch-bend";break;default:this.message="unknown";}}}class ce{static init(){ce.instance||(ce.instance=new ce);}static addListener(e){ce.listeners.add(e);}static removeListener(e){ce.listeners.delete(e);}static get ready(){return ce.init(),void 0!==ce.instance?.access}static get outputs(){return ce.init(),ce.instance?ce.instance._outputs:void 0}get _outputs(){return this.access?this.access.outputs:void 0}static get inputs(){return ce.init(),ce.instance?ce.instance._inputs:void 0}get _inputs(){return this.access?this.access.inputs:void 0}constructor(){navigator.requestMIDIAccess().then((e=>{this.access=e,console.log("Connected to MIDI."),e.addEventListener("statechange",(e=>this._midiConnection(e))),e.outputs.forEach((e=>e.open())),e.inputs.forEach((e=>e.onmidimessage=this._midiEvent));}),(()=>{console.log("Failed to initialize web MIDI.");}));}_midiConnection(e){const t=e.port;t&&("input"==t.type&&"connected"==t.state?t.onmidimessage=this._midiEvent:"output"==t.type&&"connected"==t.state&&t.open());}_midiEvent(e){if(e.data&&e.data.length>=2){const t=new he(e.data[0]>>4);t.channel=15&e.data[0],t.note=e.data[1],e.data.length>=3&&(t.velocity=e.data[2]),"pitch-bend"===t.message&&e.data.length>=3&&(t.value=(e.data[2]<<7|127&e.data[1])-8192),ce.listeners.forEach((e=>e.onMidiInput(t)));}}}ce.listeners=new Set;class me{*[Symbol.iterator](){for(const e of this.trace)yield e;}get length(){return this.trace.length}get isEmpty(){return 0===this.length}get beats(){return this._beats}get minNote(){return this._minNote}get minOctave(){return Math.max(0,Math.floor(this._minNote/12))}get maxNote(){return this._maxNote}get maxOctave(){return Math.max(0,Math.floor(this._maxNote/12))}get noteRange(){return this.maxNote-this.minNote}get octaveRange(){return this.maxOctave-this.minOctave}get noteCount(){return this._noteCount}get messages(){return this.trace.filter((e=>"message"===e.params.get("type")))}get warnings(){return this.trace.filter((e=>"warning"===e.params.get("type")))}get unitTests(){return this.trace.filter((e=>["pass","fail"].includes(e.params.get("type"))))}get passes(){return this.trace.filter((e=>"pass"===e.params.get("type")))}get fails(){return this.trace.filter((e=>"fail"===e.params.get("type")))}filter(e){return me.fromTrace(this.trace.filter(e),this.patch)}sort(e){return this.trace.sort(e),this}slice(e){return this.trace.filter((t=>t.time<=e&&t.end>e))}constructor(e){this.trace=new Array,this._beats=0,this._playhead=0,this._minNote=-1,this._maxNote=-1,this._noteCount=0,this.voices=new Set,this.patch=e;}static emptyTrace(e){return new me(e)}static fromPython(e,t){const s=new me(t);for(const t of e)s.addTraceEvent(pe.fromMap(t));return s}static fromTrace(e,t){const s=new me(t);for(const t of e)s.addTraceEvent(t.clone());return s}join(e){const t=new me(this.patch);for(const e of this.trace)t.addTraceEvent(e.clone());for(const s of e)t.addTraceEvent(s.clone());return t.sort(((e,t)=>e.time-t.time)),t}subtrace(e,t){const s=new me(this.patch),i=1e-6;e-=i,t-=i;for(const i of this.trace)i.time>=e&&i.time<t&&s.addTraceEvent(i.clone());return s}ofType(e){const t=new me(this.patch);for(const s of this.trace)e.includes(s.command)&&t.addTraceEvent(s.clone());return t}isEquivalent(e){if(this.length!==e.length)return  false;for(let t=0;t<this.length;t++)if(!this.trace[t].isEquivalent(e.trace[t]))return  false;return  true}addTraceEvent(e){switch(this.trace.push(e),e.command){case pe.PLAY:this._beats=Math.max(e.end,this._beats),this._playhead=e.end,(this._minNote<0||e.note.note<this._minNote)&&(this._minNote=e.note.note),this._maxNote=Math.max(this._maxNote,e.note.note),this._noteCount++;break;case pe.SOUND:this._beats=Math.max(e.end,this._beats),this._playhead=e.end,this._noteCount++;break;case pe.REST:this._beats=Math.max(e.end,this._beats),this._playhead=e.end;}this.voices.add(e.voice);}getTraceGroup(e){return this.trace.filter((t=>t.trace_group===e))}}class pe{get end(){return this.time+this.duration}constructor(e,t,s){this.time=0,this.duration=1,this.line=-1,this.note=new i$1(60),this.trace_group=-1,this.voice=0,this.params=new Map,this.id=void 0===s?pe._TRACE_ID++:s,this.command=e,this.time=t;}clone(){let e=new pe(this.command,this.time,this.id);e.line=this.line,e.duration=this.duration,e.note=this.note.clone(),e.trace_group=this.trace_group,e.voice=this.voice;for(let[t,s]of this.params)e.params.set(t,s);return e}static fromMap(e){let t=new pe(String(e.get("command")),Math.max(0,Number(e.get("time"))));t.duration=Number(e.get("duration")),t.note.duration=t.duration;for(let[s,i]of e)if("note"===s&&"number"==typeof i)t.note.note=i;else if("pitch"===s&&"number"==typeof i)t.note.detune=100*i;else if("velocity"===s&&"number"==typeof i)t.note.velocity=i;else if("sustain"===s&&"number"==typeof i)t.note.duration=Math.max(t.note.duration,i);else if("line"===s&&"number"==typeof i)t.line=i;else if("trace"===s)t.trace_group=p(i,0);else if("voice"===s)t.voice=p(i,0);else {if(["command","time","duration"].includes(s))continue;t.params.set(s,i);}return t}isEquivalent(e){if(this.command===e.command&&this.time===e.time&&this.duration===e.duration&&this.note.isEqual(e.note)){for(let[t,s]of this.params)if("line"!==t&&e.params.get(t)!==s)return  false;return  true}return  false}}pe.PLAY="play",pe.SOUND="sound",pe.REST="rest",pe.PUSH_FX="push_fx",pe.POP_FX="pop_fx",pe.MESSAGE="message",pe._TRACE_ID=0;class fe{constructor(e,t){this.released=false,this.canceled=false,this.note=e,this.chain=t;}}class ge{get isAssigned(){return this.nodeId>=0}get value(){return N(this._value,this.minValue,this.maxValue)}set value(e){this._value=N(e,this.minValue,this.maxValue);}get percentValue(){return (this.value-this.minValue)/this.range}set percentValue(e){this.value=e*this.range+this.minValue;}get range(){return this.maxValue-this.minValue}constructor(){this._value=1,this.nodeId=-1,this.name="",this.label="",this.slot=0,this.minValue=0,this.maxValue=1;}static fromJSON(e){const t=new ge;return t.nodeId=p(e.node,-1),t.name=v(e.name,""),t.label=v(e.label,""),t.slot=p(e.slot,0),t.minValue=f(e.min,0),t.maxValue=f(e.max,1),t._value=N(f(e.value,1),t.minValue,t.maxValue),t}toJSON(){return {node:this.nodeId,name:this.name,label:this.label,slot:this.slot,min:this.minValue,max:this.maxValue,value:this.value}}}const ye={nodes:[{type:"out",A:.05,D:.1,S:.8,R:.25,level:0,id:0},{type:"osc",waveform:"sine",relative:"true",frequency:1,id:1,level:.1}],routing:[{source:1,dest:0,type:"audio",level:0,id:1}],parameters:[],name:"Simple Sine",description:"",instrument:"piano",submenu:"",version:"2.0",format:"tunepad-patch",created:"2024-03-08 16:15:54.384",modified:"2024-03-08 16:15:54.385"},ve={patch_id:280,nodes:[{type:"out",A:.05,D:.1,S:.8,R:.25,level:0,id:0},{type:"osc",waveform:"sawtooth",relative:"true",frequency:1,id:1,level:.1}],routing:[{source:1,dest:0,type:"audio",level:0,id:1}],parameters:[],name:"Simple Saw",description:"",instrument:"piano",submenu:"",version:"2.0",format:"tunepad-patch",created:"2024-03-08 16:15:54.384",modified:"2024-03-08 16:15:54.385"},_e={nodes:[{type:"out",A:.05,D:.1,S:.8,R:.25,level:0,id:0},{type:"osc",waveform:"square",relative:"true",frequency:1,id:1,level:.1}],routing:[{source:1,dest:0,type:"audio",level:0,id:1}],parameters:[],name:"Simple Square",description:"",instrument:"piano",submenu:"",version:"2.0",format:"tunepad-patch",created:"2024-03-08 16:15:54.384",modified:"2024-03-08 16:15:54.385"},be={nodes:[{type:"out",A:.05,D:.1,S:.8,R:.25,level:0,id:0},{type:"osc",waveform:"triangle",relative:"true",frequency:1,id:1,level:.1}],routing:[{source:1,dest:0,type:"audio",level:0,id:1}],parameters:[],name:"Simple Tri",description:"",instrument:"piano",submenu:"",version:"2.0",format:"tunepad-patch",created:"2024-03-08 16:15:54.384",modified:"2024-03-08 16:15:54.385"},we={nodes:[{id:0,type:"out",A:0,D:.3,S:.5,R:.2,"a shape":3.4,"d shape":2,"r shape":2,level:0},{id:7,type:"osc",waveform:"sawtooth",relative:true,frequency:440,multiplier:1,"frequency-mod":1e3,detune:0,"detune-mod":2,"amplitude-mod":.5,level:.1},{id:8,type:"filter","filter type":"lowpass",tracking:true,frequency:980,"frequency-mod":100,Q:3,"Q-mod":10,gain:0,"gain-mod":250,"tracking ratio":1,level:0}],routing:[{id:26,source:7,dest:8,type:"audio",level:0},{id:25,source:8,dest:0,type:"audio",level:0}],parameters:[{node:8,name:"frequency",label:"FREQUENCY",slot:1,min:32,max:15e3,value:7e3},{node:8,name:"Q",label:"RESONANCE (Q)",slot:2,min:1e-4,max:50,value:50}],name:"Filtered Saw",instrument:"piano",version:"2.0",format:"tunepad-patch",created:"2024-05-30 17:44:15.448",modified:"2024-05-30 17:44:15.449"},Ae={nodes:[{id:0,type:"out",cx:116.38970947265625,cy:86.873046875,A:.011363636363636362,D:.1,S:1,R:.005681818181818182,"a shape":4.000000000000001,"d shape":2,"r shape":2,level:0},{id:2,type:"osc",cx:13.176898002624512,cy:87.11394500732422,waveform:"square",relative:true,frequency:440.00000000000034,multiplier:1,"frequency-mod":1e3,detune:0,"detune-mod":10,"amplitude-mod":.5,level:-5},{id:3,type:"lfo",cx:-87.84600448608398,cy:87.11394500732422,waveform:"sine",relative:false,frequency:6.900000000000002,"frequency-mod":30,detune:0,"detune-mod":20,"amplitude-mod":.5,level:4.950595879501315}],routing:[{id:2,source:2,dest:0,type:"audio",level:0},{id:5,source:3,dest:2,type:"detune",level:5}],parameters:[],name:"Wobbly Square",description:"Created in patchworks",instrument:"piano",version:"2.0",format:"tunepad-patch",created:"2022-03-01 16:37:48.199",modified:"2022-03-01 17:34:23.146"};function Te(e){return "string"==typeof e.name&&Array.isArray(e.nodes)&&Array.isArray(e.routing)&&"2.0"===e.version&&"tunepad-patch"===e.format}class Me{get bpm(){return this._bpm}set bpm(e){isNaN(e)||(this._bpm=N(e,5,300));}get voice(){return this.patch.name}constructor(e){this._bpm=90,this.notes=new Array,this.patch=ye,this.bank=new Array,this.sound_gens=new Array,this.parameters=new Array,this._analyzers=new Map,this._effects=new Array,e&&this.loadPatch(e);}get isPlaying(){if(0===this.bank.length)return  false;{const e=this.bank[0].context.currentTime;for(const t of this.bank)if(t.free>e)return  true;return  false}}playNote(e,t){if(!t){t=q.init().context.destination;}const s="number"==typeof e?new i$1(e):e;let a=this._allocateGenerator(t.context,t.context.currentTime);a&&(a.cancelNotes(),a.playNote(s,t),this.notes.push(new fe(s,a)));}releaseNote(e){const t="number"==typeof e?e:e.note;this.notes.forEach((e=>{e.note.note===t&&this._release(e);}));}releaseAll(){this.notes.forEach((e=>{this._release(e);}));}_release(e){if(e.released)return;e.released=true,e.chain.releaseNote();const t=Math.ceil(1e3*e.chain.release)+100;setTimeout((()=>{this.notes=this.notes.filter((t=>t!==e)),e.chain.disconnect(),this._releaseGenerator(e.chain);}),t);}playSound(e,t,s){if(!s){s=q.init().context.destination;}const i=new ae(s.context);i.loadSoundPatch(t),i.playNote(e,s),this.notes.push(new fe(e,i));}scheduleNote(e,t,s=0,a){if(!a){a=q.init().context.destination;}const n="number"==typeof e?new i$1(e):e,r=a.context.currentTime,o=n.duration*(60/this.bpm);t=(t+s)*(60/this.bpm);const h=this._allocateGenerator(a.context,r+t);return h?.scheduleNote(n,t,o,a),h}scheduleSound(e,t,s,a=0,n){if(!n){n=q.init().context.destination;}const r="number"==typeof e?new i$1(e):e;n.context.currentTime;const o=r.duration*(60/this.bpm);s=(s+a)*(60/this.bpm);const h=new ae(n.context);return h.loadSoundPatch(t),h.scheduleNote(r,s,o,n),h}scrubAudio(e,t,s,i){if(e){const a=q.init();i||(i=a.context.destination);const n=i.context.currentTime;t*=60/a.bpm,s*=60/a.bpm;const r=Math.max(.01,s-t),o=i.context.createGain();o.connect(i),o.gain.setValueAtTime(0,n),o.gain.linearRampToValueAtTime(.5,n+r/2),o.gain.linearRampToValueAtTime(0,n+r);const h=i.context.createBufferSource();h.connect(o),h.buffer=e,h.start(0,t,r),h.onended=e=>{h.disconnect(),o.disconnect();};}}cancelAllNotes(){for(const e of this.bank)this._releaseGenerator(e);for(const e of this.sound_gens)e.cancelNotes();this.sound_gens=[];}scheduleNotes(e,t,s){const i=t.context.currentTime,a=Math.max(0,-s);for(let e=0;e<this.sound_gens.length;e++){this.sound_gens[e].free<i&&delete this.sound_gens[e];}this.sound_gens=this.sound_gens.filter((e=>void 0!==e));for(const i of e)if(i.command==pe.PLAY&&i.end>=a){const e=this.scheduleNote(i.note,i.time,s,t);e&&this.sound_gens.push(e);}else if(i.command==pe.SOUND&&i.end>=a&&i.params.has("sound-url")){const e=this.scheduleSound(i.note,i.params.get("sound-url"),i.time,s,t);e&&this.sound_gens.push(e);}}scheduleMidiNotes(e,t,s,i=1){const a=window.performance.now(),n=Math.max(0,-t);for(const r of e)if(r.command===pe.PLAY&&r.end>=n){const e=r.note.clone();e.gain*=i;const n=r.note.duration*(60/this.bpm)*1e3,o=a+(r.time+t)*(60/this.bpm)*1e3,h=[144,Math.round(e.note),e.velocity],c=[128,Math.round(e.note),0];s.send(h,o),s.send(c,o+n);}}playMidiNote(e,t){const s="number"==typeof e?new i$1(e):e,a=[144,Math.round(s.note),s.velocity];t.send(a,window.performance.now());}releaseMidiNote(e,t){const s="number"==typeof e?new i$1(e):e,a=[128,Math.round(s.note),0];t.send(a,window.performance.now());}setMidiProgram(e,t){t>=0&&t<=127&&e.send([192,t]);}cancelAllMidiNotes(e){const t=window.performance.now();for(let s=0;s<=127;s++)e.send([128,s,0],t);"clear"in e&&"function"==typeof e.clear&&e.clear();}pitchBend(e){this.notes.forEach((t=>t.chain.pitchBend(e)));}async loadPatch(e){if(Te(e))return await this._loadPatchData(e);if(e instanceof URL)return await this._loadPatchURL(e);switch(e){case "simple-saw":return await this._loadPatchData(ve);case "simple-sine":default:return await this._loadPatchData(ye);case "simple-square":return await this._loadPatchData(_e);case "simple-tri":return await this._loadPatchData(be);case "filtered-saw":return await this._loadPatchData(we);case "wobbly-square":return await this._loadPatchData(Ae)}}async _loadPatchURL(e){const t=await fetch(e),s=await t.json();return Te(s)?await this._loadPatchData(s,e.toString()):(this._loadPatchData(ye),false)}async _loadPatchData(e,t="./"){const s=t.split("/").slice(0,-1).join("/")+"/";this.patch=e,this.parameters=[],this._destroyAllGenerators(),this.sound_gens=[];for(const e of this.patch.nodes)if(Array.isArray(e.samples)){const t=e.samples.filter((e=>te(e))).sort(((e,t)=>e.step-t.step));t.forEach((e=>{e.sample.startsWith("http")||e.sample.startsWith("//")||e.sample.startsWith("./")||(e.sample=s+e.sample),ee.loadAudioBuffer(e.sample);})),e.samples=t;}else "reverb"===e.type?await ee.loadCustomSound(e.impulse):"buffer source"===e.type&&await ee.loadCustomSound(e.buffer);if(Array.isArray(this.patch.parameters))for(const e of this.patch.parameters)this.parameters.push(ge.fromJSON(e));return  true}updateParameter(e,t){let s=-1;for(let t of this.parameters)if(t.name===e){s=t.nodeId;break}if(!(s<0)){this.bank.forEach((i=>{i.updateParameter(s,e,t);}));for(const i of this.patch.nodes)i.id==s&&(i[e]=t);}}set attack(e){this.bank.forEach((t=>{t.out&&(t.out.A=Math.max(0,e));})),this.patch.nodes.filter((e=>"out"===e.type)).forEach((t=>t.A=Math.max(0,e)));}set decay(e){this.bank.forEach((t=>{t.out&&(t.out.D=Math.max(0,e));})),this.patch.nodes.filter((e=>"out"===e.type)).forEach((t=>t.D=Math.max(0,e)));}set sustain(e){this.bank.forEach((t=>{t.out&&(t.out.S=N(e,0,1));})),this.patch.nodes.filter((e=>"out"===e.type)).forEach((t=>t.S=N(e,0,1)));}set release(e){this.bank.forEach((t=>{t.out&&(t.out.R=Math.max(0,e));})),this.patch.nodes.filter((e=>"out"===e.type)).forEach((t=>t.R=Math.max(0,e)));}set volume(e){this.bank.forEach((t=>{t.out?.updateParameter("level",N(e,-50,5));})),this.patch.nodes.filter((e=>"out"===e.type)).forEach((t=>t.level=N(e,-50,5)));}_allocateGenerator(e,t){this.bank.length>0&&this.bank[0].context!=e&&this._destroyAllGenerators();for(const s of this.bank)if(s.free<t&&s.context==e)return this._analyzers.forEach((e=>{0==s.free&&s.attachAnalyzer(e.nodeId,e.connectorId,e.fftSize,e.channels);})),s;if(this.bank.length<Me.MAX_GENERATORS){const t=new ae(e);return t.loadPatch(this.patch),this.bank.push(t),this._analyzers.forEach((e=>{t.attachAnalyzer(e.nodeId,e.connectorId,e.fftSize,e.channels);})),t}}_releaseGenerator(e){e.cancelNotes(),this._analyzers.forEach((t=>{e.detachAnalyzer(t.nodeId,t.connectorId);}));}_destroyAllGenerators(){this.bank.forEach((e=>{e.destroy();})),this.bank=[];}}Me.MAX_GENERATORS=24;

    var html$d = "<style>\n* {\n    box-sizing: border-box;\n}\n\ndialog.bpm-dialog {\n    width: fit-content;\n    min-width: unset;\n    min-height: unset;\n    padding: 1rem 3rem 2rem 3rem;\n    user-select: none;\n    color: #414251;\n}\n\nh1 {\n    font-weight: 600;\n    font-size: 110%;\n    margin: 0 0 10px 0;\n}\n\n.tempo-up, .tempo-down {\n    background-color: transparent;\n    border: none;\n    outline: none;\n    width: 35px;\n    height: 35px;\n    cursor: pointer;\n    background-color: #E4E4E4;\n    border-radius: 50%;\n    padding: 10px;\n}\n\n.tempo-up:hover, .tempo-down:hover {\n    opacity: 0.8;\n}\n.tempo-up:active, .tempo-down:active {\n    background-color: #2f9af0;\n}\n\n.tempo {\n    width: 5em;\n    height: 2.5em;\n    border-radius: 7px;\n    outline: none;\n    border: 2px solid #ccc;\n    font-size: 120%;\n    padding: 0.5em;\n    text-align: center;\n    margin: 0 0.5em;\n}\n\n</style>\n<div>\n  <h1>Tempo (BPM)</h1>\n  <button class=\"tempo-down\"><tunepad-icon icon=\"minus\"></tunepad-icon></button>\n  <input class=\"tempo\" value=\"120\" type=\"text\" title=\"Beats Per Minute\">\n  <button class=\"tempo-up\"><tunepad-icon icon=\"plus\"></tunepad-icon></button>\n</div>\n";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * Tempo Dialog (extends HTMLDialogElement)
     * ```html
     * <dialog is="bpm-dialog" tempo="90"></dialog>
     * ```
     */
    class BPMDialog extends HTMLDialogElement {
        static show(tempo) {
            const dialog = document.createElement('dialog', { is: BPMDialog.ELEMENT });
            dialog.setAttribute('tempo', `${tempo}`);
            dialog.classList.add('bpm-dialog');
            document.body.append(dialog);
            dialog.showModal();
            dialog.addEventListener('click', (event) => {
                const r = dialog.getBoundingClientRect();
                const cx = event.clientX;
                const cy = event.clientY;
                if (cy < r.top || cy > r.bottom || cx < r.left || cx > r.right) {
                    dialog.close();
                    dialog.remove();
                }
            });
            return dialog;
        }
        constructor() {
            super();
            this.bpm = 90;
            this.innerHTML = html$d;
        }
        connectedCallback() {
            const bpmField = this.querySelector('.tempo');
            bpmField.addEventListener('keypress', e => {
                if (e.key === "Enter") {
                    bpmField.blur();
                    this.close();
                    this.remove();
                }
            });
            bpmField.addEventListener('input', e => {
                bpmField.value = bpmField.value.replaceAll(/[^0-9]/g, '');
            });
            bpmField.addEventListener('blur', e => {
                this.setTempo(toInt(bpmField.value, 100));
                this.emitUpdateEvent('tempo', this.bpm);
            });
            this.bindSpinnerButton('.tempo-up', () => { this.adjustTempo(1); }, () => { this.emitUpdateEvent('tempo', this.bpm); });
            this.bindSpinnerButton('.tempo-down', () => { this.adjustTempo(-1); }, () => { this.emitUpdateEvent('tempo', this.bpm); });
        }
        disconnectedCallback() { }
        /**
         * When an attribute is changed on our custom component, this gets fired...
         */
        attributeChangedCallback(name, oldValue, newValue) {
            if (name === 'tempo') {
                this.setTempo(toInt(newValue, this.bpm));
            }
        }
        setTempo(newBPM) {
            this.bpm = Math.max(5, Math.min(999, newBPM));
            const bpmField = this.querySelector('.tempo');
            if (bpmField)
                bpmField.value = `${this.bpm}`;
        }
        adjustTempo(delta) {
            this.setTempo(this.bpm + delta);
        }
        /**
         * SPINNER +/- BUTTONS
         * events for the tempo buttons. we implement press and hold
         * to rapidly increase the tempo by holding the button down.
         */
        bindSpinnerButton(selector, spinAction, releaseAction) {
            const button = this.querySelector(selector);
            let down = false;
            let hold = undefined;
            let release = undefined;
            let trigger = undefined;
            button?.addEventListener('pointerup', e => {
                clearInterval(hold);
                clearTimeout(release);
                clearTimeout(trigger);
                down = false;
                release = setTimeout(releaseAction, 1500);
            });
            button?.addEventListener('pointerdown', e => {
                clearInterval(hold);
                clearTimeout(release);
                spinAction();
                down = true;
                trigger = setTimeout(() => {
                    hold = setInterval(() => { down ? spinAction() : clearInterval(hold); }, 50);
                }, 700);
            });
            button?.addEventListener('click', e => { e.stopImmediatePropagation(); });
        }
        /**
         * Fire custom events whenever the value is changed by the user
         */
        emitUpdateEvent(name, value) {
            this.dispatchEvent(new CustomEvent(name, {
                bubbles: true,
                composed: true,
                detail: { value }
            }));
        }
    }
    BPMDialog.ELEMENT = "bpm-dialog";
    BPMDialog.observedAttributes = ["tempo"];

    var html$c = "<style>\n* {\n    box-sizing: border-box;\n}\n\ndialog.time-signature-dialog {\n    width: fit-content;\n    min-width: unset;\n    min-height: unset;\n    padding: 1rem 3rem 2rem 3rem;\n    user-select: none;\n    color: #414251;\n}\n\nh1 {\n    font-weight: 600;\n    font-size: 110%;\n    margin: 0 0 10px 0;\n}\n\n.numerator, .denominator {\n    width: 5em;\n    height: 2.5em;\n    border-radius: 7px;\n    outline: none;\n    border: 2px solid #ccc;\n    font-size: 120%;\n    padding: 0.5em;\n    text-align: center;\n    margin: 0 0.5em;\n}\n\n.numerator, .denominator { width: 3em; }\n\n</style>\n<div>\n  <h1>Time Signature</h1>\n  <input class=\"numerator\" value=\"4\" type=\"text\">\n  <span style=\"font-size: 130%;\">/</span>\n  <input class=\"denominator\" value=\"4\" type=\"text\" title=\"Beats per measure\">\n</div>\n";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * Time Signature Dialog (extends HTMLDialogElement)
     * ```html
     * <dialog is="time-signature-dialog" time="4/4"></dialog>
     * ```
     */
    class TimeSignatureDialog extends HTMLDialogElement {
        static show(numerator, denominator) {
            const dialog = document.createElement('dialog', { is: TimeSignatureDialog.ELEMENT });
            dialog.setTimeSignature(numerator, denominator);
            dialog.classList.add('time-signature-dialog');
            document.body.append(dialog);
            dialog.showModal();
            dialog.addEventListener('click', (event) => {
                const r = dialog.getBoundingClientRect();
                const cx = event.clientX;
                const cy = event.clientY;
                if (cy < r.top || cy > r.bottom || cx < r.left || cx > r.right) {
                    dialog.close();
                    dialog.remove();
                }
            });
            return dialog;
        }
        constructor() {
            super();
            this.innerHTML = html$c;
        }
        connectedCallback() {
            const numField = this.querySelector('.numerator');
            const denField = this.querySelector('.denominator');
            numField?.addEventListener('keypress', e => { if (e.key === 'Enter') {
                numField.blur();
            } });
            denField?.addEventListener('keypress', e => { if (e.key === 'Enter') {
                denField.blur();
            } });
            numField?.addEventListener('input', e => {
                numField.value = numField.value.replaceAll(/[^0-9]/g, '');
            });
            denField?.addEventListener('input', e => {
                denField.value = denField.value.replaceAll(/[^0-9]/g, '');
            });
            numField?.addEventListener('blur', e => {
                this.setTimeSignature(this.getNumerator(), this.getDenominator());
                this.emitUpdateEvent();
            });
            denField?.addEventListener('blur', e => {
                this.setTimeSignature(this.getNumerator(), this.getDenominator());
                this.emitUpdateEvent();
            });
        }
        disconnectedCallback() { }
        /**
         * When an attribute is changed on our custom component, this gets fired...
         */
        attributeChangedCallback(name, oldValue, newValue) { }
        setTimeSignature(numer, denom) {
            numer = Math.max(1, Math.min(32, numer));
            denom = [1, 2, 4, 8, 16, 32, 64].includes(denom) ? denom : 4;
            this.querySelector('.numerator').value = `${numer}`;
            this.querySelector('.denominator').value = `${denom}`;
        }
        getNumerator() {
            return toInt(this.querySelector('.numerator').value, 4);
        }
        getDenominator() {
            return toInt(this.querySelector('.denominator').value, 4);
        }
        /**
         * Fire custom events whenever the value is changed by the user
         */
        emitUpdateEvent() {
            const numerator = this.getNumerator();
            const denominator = this.getDenominator();
            this.dispatchEvent(new CustomEvent('time-signature', {
                bubbles: true,
                composed: true,
                detail: { numerator, denominator }
            }));
        }
    }
    TimeSignatureDialog.ELEMENT = "time-signature-dialog";
    TimeSignatureDialog.observedAttributes = [];

    var html$b = "<style>\n* {\n    box-sizing: border-box;\n}\n\ndialog.key-dialog {\n    width: fit-content;\n    min-width: unset;\n    min-height: unset;\n    padding: 1rem 3rem 2rem 3rem;\n    user-select: none;\n    color: #414251;\n}\n\ndialog.key-dialog circle-of-fifths {\n    width: 300px;\n    height: 300px;\n}\n\nh1 {\n    font-weight: 600;\n    font-size: 110%;\n    margin: 0 0 10px 0;\n}\n</style>\n<div>\n  <h1>Key</h1>\n  <circle-of-fifths></circle-of-fifths>\n</div>\n";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * Key Dialog (extends HTMLDialogElement)
     *
     * ```javascript
     * KeyDialog.show('C major');
     * ```
     */
    class KeyDialog extends HTMLDialogElement {
        static show(key) {
            const dialog = document.createElement('dialog', { is: KeyDialog.ELEMENT });
            dialog.classList.add('key-dialog');
            dialog.setAttribute('key', key);
            document.body.append(dialog);
            dialog.showModal();
            dialog.addEventListener('click', (event) => {
                const r = dialog.getBoundingClientRect();
                const cx = event.clientX;
                const cy = event.clientY;
                if (cy < r.top || cy > r.bottom || cx < r.left || cx > r.right) {
                    dialog.close();
                    dialog.remove();
                }
            });
            return dialog;
        }
        constructor() {
            super();
            this.innerHTML = html$b;
        }
        connectedCallback() {
            this.querySelector('circle-of-fifths')?.addEventListener('selected', e => {
                this.emitUpdateEvent('key', e.detail.value);
                this.close();
                this.remove();
            });
        }
        disconnectedCallback() { }
        /**
         * When an attribute is changed on our custom component, this gets fired...
         */
        attributeChangedCallback(name, oldValue, newValue) {
            this.querySelector('circle-of-fifths')?.setAttribute('selected', newValue);
        }
        /**
         * Fire custom events whenever the value is changed by the user
         */
        emitUpdateEvent(name, value) {
            this.dispatchEvent(new CustomEvent(name, {
                bubbles: true,
                composed: true,
                detail: { value }
            }));
        }
    }
    KeyDialog.ELEMENT = "key-dialog";
    KeyDialog.observedAttributes = ['key'];

    class e{static init(t="/assets/js/PythonWorker.js",s="/assets/python"){return null===e.instance&&(e.instance=new e(t,s)),e.instance}constructor(t,i){this.queue=new Array,this.cache=new Map,this.modules=new Map,this.active=null,this.warnings=new Array,this.listeners=new Map,this.interruptBuffer=new Uint8Array(1),this.worker=new Worker(t),this.worker.postMessage({action:"init",pythonPath:i}),this.worker.postMessage({action:"setInterruptBuffer",buffer:this.interruptBuffer}),setTimeout(()=>{e.instance?.processQueue();},50),this.worker.onmessage=e=>{const t=e.data,i=this.active;if("preload"===i?.action&&t)i.callback(new s(i));else if(i&&i.uuid===t.uuid){for(let e of this.queue)if(e.uuid===i.uuid&&e.action===i.action&&e.code!==i.code)return void(this.active=null);let e=new s(i);e.output=t.output,e.globals=t.globals,e.errors=t.errors,e.dependencies=t.dependencies,this.warnings=this.warnings.filter(t=>t.target!==e.uuid&&t.source!==e.uuid);for(const[t,s]of this.cache)t!==e.uuid&&s.dependencies.includes(e.name)&&this.warnings.push({name:"Dependency Warning",message:`Cell '${e.name}' has been updated.`,details:"",line:-1,target:s.uuid,source:e.uuid});for(let[t,s]of this.cache)if(t!==e.uuid)for(let i of s.dependencies){let n=i===e.name;for(let[e,s]of this.cache)t!==e&&s.name===i&&(n=true);n||this.warnings.push({name:"Dependency Warning",message:`Cell '${i}' does not exist.`,details:"",line:-1,target:s.uuid,source:e.uuid});}e.globals.has("__tunepad_trace")&&(e.trace=e.globals.get("__tunepad_trace").value),e.hasNoErrors&&this.cache.set(e.uuid,e),i.callback(e),this.listeners.forEach((e,t)=>{e(this.warnings.filter(e=>e.target===t));});}this.active=null;};}static destroy(){if(e.instance){const t=e.instance;t.worker.terminate(),t.active=null,t.cache.clear(),t.modules.clear();}}static compile(s,i=false){return new Promise(n=>{e.instance?.queue.push(new t$1(s,"compile",n,i));})}static renameCell(t){return e.compile(t,true)}static run(s){return new Promise(i=>{e.instance?.queue.push(new t$1(s,"run",i));})}static preload(s){return new Promise(i=>{e.instance?.queue.push(new t$1(s,"preload",i));})}static preloadAll(s){const i=e.instance;return new Promise(async e=>{for(const e of s)i?.queue.push(new t$1(e,"preload",e=>{console.log("preload response for "+e.name);}));e(true);})}static addWarningListener(t,s){e.instance?.listeners.set(t,s);}static removeWarningListener(t){e.instance?.listeners.delete(t);}static playCell(t){e.instance?.worker.postMessage({...t,action:"play"});}static pauseCell(t){e.instance?.worker.postMessage({...t,action:"pause"});}static deleteCell(t){const s=e.instance;if(s){s.modules.delete(t.uuid),s.cache.delete(t.uuid),s.worker.postMessage({uuid:t.uuid,name:t.name,code:"",action:"delete"});for(const[e,i]of s.cache)e!==t.uuid&&i.dependencies.includes(t.name)&&s.warnings.push({name:"Dependency Warning",message:`Cell '${t.name}' was deleted.`,details:"",line:-1,target:e,source:t.uuid});}}static getWarnings(){return e.instance.warnings}hasWarnings(e){return void 0!==this.warnings.find(t=>t.target===e)}equivalentCode(e,t){function s(e){return e.split("\n").filter(e=>""!==e&&!e.startsWith("#")).join("\n")}return s(e)===s(t)}equivalent(e,t){return !e.force&&e.name===t.name&&e.action===t.action&&this.equivalentCode(e.code,t.code)}async processQueue(){if(this.queue.length>0&&null===this.active){let e=this.queue.shift();this.modules.set(e.uuid,e.cell);let t=this.cache.get(e.uuid);t&&t.code&&!this.hasWarnings(e.uuid)&&this.equivalent(e,t)?e.callback(t):(this.active=e,this.interruptBuffer[0]=0,this.active.initiatedTime=Date.now(),this.removeFromCache(e.uuid),this.worker.postMessage({uuid:e.uuid,name:e.name,action:e.action,code:e.code}));}else if(this.active&&this.active.initiatedTime>0&&"compile"===this.active.action){const e=Date.now()-this.active.initiatedTime;e>1e4&&e<11e3&&(this.interruptBuffer[0]=2);}setTimeout(()=>{e.instance?.processQueue();},50);}removeFromCache(e){this.cache.get(e)?.close(),this.cache.delete(e);}static makePythonSafe(t,s){let i="";for(const e of t){let t=e.charCodeAt(0);t>=48&&t<=57||t>=97&&t<=199||t>=65&&t<=90||95===t?i+=e:32===t&&(i+="_");}""===i&&(i="new_cell"),i.charCodeAt(0)>=48&&i.charCodeAt(0)<=57&&(i="_"+i),this._python_keywords.includes(i)&&(i="_"+i);let n=i,a=2;for(;e.instance?.duplicateName(i,s);)i=n+"_"+a,a++;return i}duplicateName(e,t){for(const[s,i]of this.modules)if(t!==s&&i.name===e)return  true;return  false}}e.instance=null,e._python_keywords=["and","as","assert","break","class","continue","def","del","elif","else","except","exec","False","finally","for","from","global","if","import","in","is","lambda","None","nonlocal","not","or","pass","raise","return","True","try","while","with","yield"];let t$1 = class t{constructor(e,t,s,i=false){this.force=false,this.initiatedTime=-1,this.cell=e,this.action=t,this.callback=s,this.force=i;}get uuid(){return this.cell.uuid}get name(){return this.cell.name}get code(){return this.cell.code}};class s{constructor(e){this.output=[],this.errors=[],this.dependencies=[],this.uuid=e.uuid,this.code=e.code,this.name=e.name,this.action=e.action;}get hasErrors(){return this.errors.length>0}get hasNoErrors(){return 0===this.errors.length}close(){}}

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /** Timeline has three different view options */
    const TimelineViews = ["midi", "waveform", "score", "hidden"];
    /**
     * Timeline can show midi piano roll or waveform view of audio
     *
     * <tunepad-timeline
     *     playhead = "0"           // location of the playhead in beats
     *     theme = "dark | light"   // default is dark
     *     instrument = "piano"     // changes the color of the visualization
     *     view = "waveform">       // visualization "midi", "waveform", "score", "hidden"
     */
    class Timeline extends HTMLElement {
        get isWaveform() { return this.view && this.view.ELEMENT === 'timeline-waveform'; }
        get isMidiRoll() { return this.view && this.view.ELEMENT === 'timeline-midi'; }
        get isScore() { return this.view && this.view.ELEMENT === 'timeline-score'; }
        constructor() {
            super();
            this.trace = me.emptyTrace();
        }
        connectedCallback() {
            if (!this.view)
                this.switchView('midi');
        }
        disconnectedCallback() { }
        attributeChangedCallback(name, oldValue, newValue) {
            if (oldValue === newValue)
                return;
            if (['playhead', 'theme', 'instrument'].includes(name)) {
                this.view?.setAttribute(name, newValue);
            }
            else if (name === 'view' && TimelineViews.includes(newValue)) {
                this.switchView(newValue);
            }
        }
        setTrace(t, force = false) {
            this.trace = t;
            this.view?.setTrace(t, force);
        }
        switchView(v) {
            if (v === 'midi' && !this.isMidiRoll) {
                this.view = document.createElement('timeline-midi');
            }
            else if (v === 'waveform' && !this.isWaveform) {
                this.view = document.createElement('timeline-waveform');
            }
            else if (v === 'score' && !this.isScore) {
                this.view = document.createElement('timeline-score');
            }
            else if (v === 'hidden') {
                this.innerHTML = '';
                this.view = undefined;
                return;
            }
            else if (this.view) {
                return;
            }
            else {
                this.view = document.createElement('timeline-midi');
            }
            if (this.hasAttribute('playhead'))
                this.view.setAttribute('playhead', this.getAttribute('playhead'));
            if (this.hasAttribute('instrument'))
                this.view.setAttribute('instrument', this.getAttribute('instrument'));
            if (this.hasAttribute('theme'))
                this.view.setAttribute('theme', this.getAttribute('theme'));
            this.innerHTML = '';
            this.appendChild(this.view);
            this.view.setTrace(this.trace);
        }
    }
    Timeline.ELEMENT = "tunepad-timeline";
    Timeline.observedAttributes = [
        "playhead", // location of the playhead in beats
        "theme", // "dark" | "light"
        "instrument", // changes the color of the waveform or trace (TimelineInstruments)
        "view" // "midi", "waveform", "score", "hidden"
    ];

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * ## TunePad code cell.
     * ```html
     * <tunepad-cell
     *    uuid = "{{ database UUID }}"
     *    name = "{{ python file name }}"
     *    saved = "{{ date }}"
     *    readonly = "false"
     *    autocompile = "false"
     *    theme = "dark | light"
     *    timeline = "midi" | "waveform" | "score" | ""
     *    instrument = "piano"
     *    patch = "grand-piano"
     *    host = "https://api.tunepad.space"
     *    midi-out = "false"
     *    mini-in = "false"
     *    show-instrument = "true">
     * playNote(30)  # default Python code here...
     * </tunepad-cell>
     * ```
     */
    class TunePadCell extends HTMLElement {
        /** contents of the code editor */
        get code() { return this.editor.code; }
        /** audio scheduling helpers */
        get currentBeat() { return this.audio.beats % this.duration; }
        get cummulativeBeats() { return this.elapsedBeats + this.startBeat; }
        get beatsPerMeasure() { return this.audio.beatsPerMeasure; }
        get currentMeasure() { return Math.floor(this.currentBeat / this.beatsPerMeasure); }
        get cummulativeMeasure() { return Math.floor(this.cummulativeBeats / this.beatsPerMeasure); }
        get remainingBeats() { return this.duration - this.currentBeat; }
        get percentBeats() { return (this.currentBeat / this.duration); }
        get clockTime() { return this.audio.contextTime; }
        get startTime() { return this._start_time; }
        get startBeat() { return this._start_beat; }
        get elapsedTime() { return this.clockTime - this.startTime; }
        get beatsPerSec() { return this.audio.bpm / 60.0; }
        get secsPerBeat() { return 60.0 / this.audio.bpm; }
        get elapsedBeats() { return this.elapsedTime * this.beatsPerSec; }
        get durationMeasures() { return Math.ceil(this.duration / this.beatsPerMeasure); }
        constructor() {
            super();
            /** unique database identifier */
            this.uuid = self.crypto.randomUUID();
            /** python "file" name. should be a legal and unique python identifier */
            this.name = 'tunepad_cell';
            /** automatically compile after line edits */
            this.autocompile = false;
            /** generate midi output from the keyboard */
            this.midiOut = false;
            /** listen for incoming midi events */
            this.midiIn = false;
            /** is the instrument UI visible */
            this.showInstrument = true;
            /** code changed */
            this.codeChanged = false;
            /** which virtual instrument to show (piano, bass, guitar, drums) */
            this.instrument = 'definitions';
            /** patch name (e.g. 'grand-piano', '808-drums') */
            this.patch = '';
            /** audio synthesizer */
            this.synth = new Me();
            /** duration of the audio loop in beats (rounded up to nearest measure) */
            this.duration = 4;
            /** datastore host url for loading custom sounds */
            this.host = "https://api.tunepad.space";
            this._start_time = 0;
            this._start_beat = 0;
            this._last_measure = -1;
            this._preloaded = false;
            /**
             * Used to cue up one measure of audio at a time ...
             */
            this.audioTimer = () => {
                const beat = this.cummulativeBeats;
                const measure = this.cummulativeMeasure;
                const remainingBeats = ((measure + 1) * this.beatsPerMeasure) - beat;
                const remainingTime = remainingBeats * this.secsPerBeat;
                if (measure > this._last_measure && remainingTime < 0.3) {
                    this._last_measure = measure;
                    this.cueMeasure((measure + 1) % this.durationMeasures, remainingBeats);
                }
            };
            this._timer = -1;
            this.root = this.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(sheet$c);
            this.root.adoptedStyleSheets.push(ContextMenuStyles);
            this.root.adoptedStyleSheets.push(sheet$f);
            this.root.adoptedStyleSheets.push(sheet$e);
            this.root.adoptedStyleSheets.push(sheet$d);
            this.root.innerHTML = html$e;
            this.editor = document.createElement("python-editor");
            this.nameField = this.root.querySelector('.gadget-name');
            this.timeline = document.createElement("tunepad-timeline");
            this.trace = me.emptyTrace();
            // these are both singleton objects and it's safe to call init() multiple times
            e.init();
            this.audio = q.init();
            this.audio.addSubscriber(this);
        }
        async connectedCallback() {
            this.showLoader('Loading cell data...');
            await this.waitForWindowLoad();
            const defaultCode = this.innerHTML
                .trim()
                .split('\n')
                .map((line) => line.startsWith('/') ? line.substring(1) : line) // ugly markdown hack
                .join('\n');
            // insert timeline
            this.root.querySelector('.timeline-wrapper')?.appendChild(this.timeline);
            if (!this.hasAttribute('timeline'))
                this.setTimelineView('midi');
            // insert codemirror editor
            this.editor.innerHTML = defaultCode;
            this.root.querySelector('.cell-contents')?.appendChild(this.editor);
            // initial code compile (it takes a moment to load pyodide)
            this.setHTML('#line-count', 'LOADING PYTHON...');
            this.setHTML('#uncompiled', '');
            await this.recompile();
            this.hideLoader();
            // listen for warnings from the compiler
            e.addWarningListener(this.uuid, (warns) => {
                this.setClass('#warning-badge', 'hidden', warns.length === 0);
                this.editor.warnings = warns;
            });
            this._bindUserEvents();
            // make sure the synth is in sync
            this.synth.bpm = this.audio.bpm;
        }
        disconnectedCallback() {
            e.removeWarningListener(this.uuid);
            e.deleteCell(this);
            this.audio.removeSubscriber(this);
        }
        setName(name) {
            if (name === this.name)
                return;
            this.name = e.makePythonSafe(name, this.uuid);
            e.renameCell(this);
            this.nameField.value = this.name;
            this.setHTML('#import-text', `from ${this.name} import *`);
            this.setAttribute('name', this.name);
        }
        getEditor() {
            return this.editor;
        }
        setAutoCompile(on) {
            if (on === this.autocompile)
                return;
            this.autocompile = on;
            this.root.querySelector('#autocomp')?.setAttribute('checked', `${on}`);
            this.setAttribute('autocompile', `${on}`);
            this.root.querySelector('#compile-button tunepad-icon')?.setAttribute('icon', on ? 'autocompile' : 'recompile');
        }
        setReadOnly(ro) {
            this.setAttribute('readonly', `${ro}`);
            this.editor.setAttribute('readonly', `${ro}`);
            this.nameField.readOnly = ro;
            this.root.querySelector('#readonly')?.setAttribute('checked', `${ro}`);
            //this.setHTML('#readonly', ro ? '(readonly)' : '');
        }
        setMidiOut(on) {
            if (on === this.midiOut)
                return;
            this.midiOut = on;
            this.setAttribute('midi-out', `${on}`);
            this.root.querySelector('tunepad-instrument')?.setAttribute('midi-out', `${on}`);
            this.root.querySelector('#midi-out')?.setAttribute('checked', `${on}`);
            if (on)
                ce.init();
        }
        setMidiIn(on) {
            if (on === this.midiIn)
                return;
            this.midiIn = on;
            this.setAttribute('midi-in', `${on}`);
            this.root.querySelector('tunepad-instrument')?.setAttribute('midi-in', `${on}`);
            this.root.querySelector('#midi-in')?.setAttribute('checked', `${on}`);
        }
        setShowInstrument(show) {
            if (show === this.showInstrument)
                return;
            this.showInstrument = show;
            this.setAttribute('show-instrument', `${show}`);
        }
        setTheme(theme) {
            if (['light', 'dark'].includes(theme)) {
                this.setAttribute('theme', theme);
                this.editor.setAttribute('theme', theme);
                this.timeline.setAttribute('theme', theme);
            }
        }
        setTimelineView(view) {
            if (TimelineViews.includes(view)) {
                this.timeline.setAttribute('view', view);
                this.setAttribute('timeline', view);
                this.root.querySelector(`context-menu-item[action="timeline-${view}"]`)?.
                    setAttribute('checked', 'true');
                this.root.querySelector('#timeline-mode-button tunepad-icon')?.
                    setAttribute('icon', view === 'hidden' ? 'minus' : view);
            }
        }
        setInstrument(instrument) {
            if (instrument != this.instrument) {
                this.removeClass('.cell-wrapper', this.instrument);
                this.instrument = instrument;
                this.addClass('.cell-wrapper', instrument);
                this.setAttribute('instrument', instrument);
            }
        }
        async setPatch(patch) {
            if (patch === this.patch) {
                this.root.querySelector('tunepad-instrument').setPatch(this.synth.patch, patch);
                return;
            }
            this.patch = patch;
            this.setAttribute('patch', patch);
            if (patch.startsWith('@')) {
                await this.synth.loadPatch(patch.substring(1));
            }
            else {
                const path = `${this.audio.voices}/${this.patch}/`;
                const url = new URL(path + 'patch.json', (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('tunepad.min.js', document.baseURI).href));
                await this.synth.loadPatch(url);
            }
            // set the instrument patch
            this.root.querySelector('tunepad-instrument')?.setPatch(this.synth.patch, patch);
            // possibly trigger timeline to be re-rendered
            this.timeline.setTrace(me.fromTrace(this.trace, this.synth.patch));
            this.setHTML('.patch-credit', this.synth.patch.credit ?? '');
            this.setHTML('#info-instrument', this.synth.patch.name);
            if ('instrument' in this.synth.patch) {
                this.setInstrument(this.synth.patch.instrument);
                this.timeline.setAttribute('instrument', `${this.synth.patch.instrument}`);
            }
        }
        attributeChangedCallback(name, oldValue, newValue) {
            if (newValue === oldValue) {
                return;
            }
            else if (name === 'uuid') {
                this.uuid = newValue;
            }
            else if (name === 'name') {
                this.setName(newValue);
            }
            else if (name === 'readonly') {
                this.setReadOnly(newValue === 'true');
            }
            else if (name === 'theme') {
                this.setTheme(newValue);
            }
            else if (name === 'autocompile') {
                this.setAutoCompile(newValue === 'true');
            }
            else if (name === 'instrument') {
                this.setInstrument(newValue);
            }
            else if (name === 'patch' && newValue) {
                this.setPatch(newValue);
            }
            else if (name === 'host') {
                this.host = newValue;
            }
            else if (name === 'midi-out') {
                this.setMidiOut(newValue === 'true');
            }
            else if (name === 'midi-in') {
                this.setMidiIn(newValue === 'true');
            }
            else if (name === 'show-instrument') {
                this.setShowInstrument(newValue === 'true');
            }
            else if (name === 'saved') {
                this.setHTML('#last-saved', `Last saved: ${newValue}`);
            }
            else if (name === 'timeline') {
                this.setTimelineView(newValue);
            }
        }
        /**
         * FIXME. Eventually this gets replaced by Y.js bind editor logic
         * @param code
         */
        replaceCode(code) {
            if (this.isConnected) {
                if (this.code === code) ;
                else {
                    this.editor.replaceCode(code);
                    this.recompile(true);
                }
            }
        }
        /**
         * Trigger a python compile and display any errors, warnings, messages, or print outputs
         * that result.
         */
        async recompile(force = false) {
            this.addClass('#compile-button', 'hidden');
            this.removeClass('#loader', 'hidden');
            this.disable('#play-button');
            this.disable('#stop-button');
            // compile the python code
            // preload the python module filesystem
            if (!this._preloaded) {
                await e.preload(this);
                this._preloaded = true;
            }
            // compile the python code
            const resp = await e.compile(this, force);
            // compute the new duration
            this.trace;
            if (resp.trace) {
                this.trace = me.fromPython(resp.trace, this.synth.patch);
            }
            else {
                this.trace = me.emptyTrace(this.synth.patch);
            }
            // load any custom sounds
            await this.loadCustomSounds(this.trace);
            this.duration = Math.ceil(this.trace.beats / this.audio.beatsPerMeasure) * this.audio.beatsPerMeasure;
            // redraw the timeline if the trace has changed
            this.timeline.setTrace(this.trace, force);
            // show errors, messages, unit tests, and python print output
            // note that warnings can also come from an external listener set on PythonRuntime
            this.editor.errors = resp.errors;
            this.editor.output = resp.output;
            this.editor.messages = this.trace.messages.map(t => v(t.params.get('message'), ''));
            this.editor.unitTests = this.trace.unitTests.map(t => {
                return {
                    message: v(t.params.get('message'), ''),
                    pass: (t.params.get('type') === 'pass')
                };
            });
            this.editor.warnings = this.trace.warnings.map(t => {
                return {
                    name: t.params.get('name'),
                    message: t.params.get('message'),
                    details: t.params.get('details'),
                    line: t.line,
                    target: this.uuid,
                    source: this.uuid
                };
            });
            // turn on badges
            this.setHTML('#output-badge', `${resp.output.length}`);
            this.setHTML('#fail-count', `${this.trace.fails.length}`);
            this.setHTML('#pass-count', `${this.trace.passes.length}`);
            this.setClass('#output-badge', 'hidden', resp.output.length === 0);
            this.setClass('#error-badge', 'hidden', resp.hasNoErrors);
            this.setClass('#fail-badge', 'hidden', this.trace.fails.length === 0);
            this.setClass('#pass-badge', 'hidden', this.trace.passes.length === 0);
            this.setClass('#warning-badge', 'hidden', this.trace.warnings.length === 0);
            this.classList.toggle('errors', resp.hasErrors);
            this.classList.toggle('warnings', this.trace.warnings.length > 0);
            // reactivate compile button
            this.enable('#play-button');
            this.enable('#stop-button');
            this.removeClass('#compile-button', 'hidden');
            this.addClass('#loader', 'hidden');
            this.setHTML('#uncompiled', '');
            this.codeChanged = false;
            // update line count
            this.setHTML('#line-count', `${this.editor.code.split('\n').length} LINES`);
            this.setHTML('#beat-count', `${this.duration} BEATS — `);
            // info bar
            this.setHTML('#info-name', this.name);
            this.setHTML('#info-beat-count', `${this.duration} beats`);
            this.setHTML('#info-key', this.audio.key.name);
            this.setHTML('#info-bpm', `${this.audio.bpm} bpm`);
            this.setHTML('#info-time', `${this.audio.meter} time`);
        }
        showLoader(message) {
            this.setHTML('.loader-text', message);
            this.addClass('#loader-background', 'show');
        }
        hideLoader() {
            this.setHTML('.loader-text', '');
            this.removeClass('#loader-background', 'show');
        }
        playNote(note) {
            this.synth.playNote(note);
            if (this.midiOut) {
                ce.outputs?.forEach(port => {
                    //this.synth.setMidiProgram(port, MIDI_PROGRAM);
                    this.synth.playMidiNote(note, port);
                });
            }
        }
        releaseNote(note) {
            this.synth.releaseNote(note);
            if (this.midiOut) {
                ce.outputs?.forEach(port => this.synth.releaseMidiNote(note, port));
            }
        }
        instrumentAtPlayhead(ph) {
            this.trace
                .filter(e => e.command === pe.PLAY)
                .slice(ph)
                .forEach(e => this.instrumentNoteOn(e.note));
        }
        instrumentNoteOn(note) {
            const el = this.root.querySelector('tunepad-instrument');
            if (el) {
                el.showNoteOn(note);
            }
        }
        instrumentNoteOff(note) {
            const el = this.root.querySelector('tunepad-instrument');
            if (el) {
                el.showNoteOff(note);
            }
        }
        instrumentAllNotesOff() {
            const el = this.root.querySelector('tunepad-instrument');
            if (el) {
                el.allNotesOff();
            }
        }
        cueMeasure(measure, delta = 0) {
            const start = measure * this.beatsPerMeasure;
            const trace = this.trace.subtrace(start, start + this.beatsPerMeasure);
            delta = (measure === 0) ? delta : delta - start;
            this.synth.scheduleNotes(trace, this.audio.context.destination, delta);
            if (this.midiOut) {
                ce.outputs?.forEach(port => {
                    this.synth.scheduleMidiNotes(trace, delta, port);
                });
            }
        }
        /**
         * Animate the playhead
         */
        animation() {
            if (this.audio.isPlaying(this)) {
                const ph = this.currentBeat;
                this.timeline.setAttribute('playhead', `${ph.toFixed(2)}`);
                this.instrumentAllNotesOff();
                this.instrumentAtPlayhead(ph);
                this.clearTrace();
                this.traceAtPlayhead(ph);
                requestAnimationFrame((t) => { this.animation(); });
            }
        }
        playAudio() {
            this.audio.play(this); // tell the audio engine that this cell is playing
            this._start_time = this.clockTime;
            this._start_beat = this.currentBeat;
            this._last_measure = this.currentMeasure - 1;
            this._timer = setInterval(this.audioTimer, 20);
            this.animation(); // moves the playhead
            this.cueMeasure(this.currentMeasure, this.currentMeasure * this.beatsPerMeasure - this.currentBeat);
            this.root.querySelector('#play-button')?.classList.add('hidden');
            this.root.querySelector('#pause-button')?.classList.remove('hidden');
        }
        pauseAudio() {
            this.synth.cancelAllNotes();
            this.audio.pause(this);
            if (this._timer >= 0)
                clearInterval(this._timer);
            if (this.midiOut) {
                ce.outputs?.forEach(port => {
                    this.synth.cancelAllMidiNotes(port);
                });
            }
            this.root.querySelector('#play-button')?.classList.remove('hidden');
            this.root.querySelector('#pause-button')?.classList.add('hidden');
        }
        blockDropped(pointerX, pointerY, code) {
            this.editor.blockDropped(pointerX, pointerY, code);
            if (this.codeChanged) {
                this.emitUpdateEvent('content', this.code);
                this.recompile();
            }
        }
        onClockReset() {
            this.pauseAudio();
            this.clearTrace();
            this.instrumentAllNotesOff();
            this.timeline.setAttribute('playhead', '0');
        }
        onClockTimeChange() {
            this.timeline.setAttribute('playhead', `${this.currentBeat}`);
        }
        onTempoChange() {
            this.pauseAudio();
            this.synth.bpm = this.audio.bpm;
            this.timeline.setTrace(this.trace);
            this.setHTML('#info-bpm', `${this.audio.bpm} bpm`);
        }
        onTimeSignatureChange() {
            this.recompile(true);
        }
        onKeyChange() {
            this.setHTML('#info-key', this.audio.key.name);
        }
        /**
         * Called when the cell is first loaded into the page.
         * Bind all button clicks, codemirror events, etc.
         */
        _bindUserEvents() {
            //---------------------------------------------------------
            // listen for codemirror editor change events
            //---------------------------------------------------------
            this.editor.addEventListener('codemirror-event', (e) => {
                switch (e.detail.event) {
                    case 'lines-inserted':
                    case 'lines-removed':
                        if (this.autocompile)
                            this.recompile();
                        break;
                    case 'cursor-moved':
                        if (this.autocompile && this.codeChanged)
                            this.recompile();
                        break;
                    case 'editor-blur':
                        if (this.codeChanged) {
                            this.emitUpdateEvent('content', this.code);
                            if (this.autocompile)
                                this.recompile();
                        }
                        break;
                    case 'content-changed':
                        this.setHTML('#uncompiled', '*');
                        this.codeChanged = true;
                        break;
                }
            });
            //---------------------------------------------------------
            // copy the python import statement to the clipboard
            //---------------------------------------------------------
            this.root.querySelector('#copy-button')?.addEventListener('click', e => {
                navigator.clipboard.writeText(`from ${this.name} import *`);
            });
            //---------------------------------------------------------
            // toggle dark / light mode
            //---------------------------------------------------------
            this.root.querySelector('#theme-button')?.addEventListener('click', e => {
                const theme = (this.getAttribute('theme') === 'light') ? 'dark' : 'light';
                this.setTheme(theme);
                this.emitUpdateEvent('theme', theme);
            });
            //---------------------------------------------------------
            // copy python code to the clipboard
            //---------------------------------------------------------
            this.root.querySelector('#copy-code-button')?.addEventListener('click', e => {
                const code = this.editor.code;
                navigator.clipboard.writeText(code);
            });
            //---------------------------------------------------------        
            // context menu events
            //---------------------------------------------------------
            this.root.addEventListener('context-menu-action', (e) => {
                const action = e.detail.action;
                const checked = e.detail.checked;
                if (action === 'autocomp') {
                    this.setAutoCompile(checked);
                    this.emitUpdateEvent('autocompile', this.autocompile);
                }
                else if (action === 'readonly') {
                    this.setReadOnly(checked);
                    this.emitUpdateEvent('readonly', checked);
                }
                else if (action === 'midi-in') {
                    this.setMidiIn(checked);
                    this.emitUpdateEvent('midi-in', checked);
                }
                else if (action === 'midi-out') {
                    this.setMidiOut(checked);
                    this.emitUpdateEvent('midi-out', checked);
                }
                else if (action === 'timeline-midi') {
                    this.setTimelineView('midi');
                    this.emitUpdateEvent('timeline', 'midi');
                }
                else if (action === 'timeline-waveform') {
                    this.setTimelineView('waveform');
                    this.emitUpdateEvent('timeline', 'waveform');
                }
                else if (action === 'timeline-score') {
                    this.setTimelineView('score');
                    this.emitUpdateEvent('timeline', 'score');
                }
                else if (action === 'timeline-hidden') {
                    this.setTimelineView('hidden');
                    this.emitUpdateEvent('timeline', 'hidden');
                }
                else if (action === 'delete') {
                    this.remove();
                    this.emitDeleteEvent();
                }
                else if (action === 'copy-cell') {
                    this.emitCopyEvent();
                }
            });
            //---------------------------------------------------------
            // cell name field
            //---------------------------------------------------------
            this.nameField.addEventListener('blur', (e) => {
                this.setName(this.nameField.value);
                this.emitUpdateEvent('name', this.name);
            });
            this.nameField.addEventListener('keypress', (e) => {
                if (e.key === "Enter") {
                    this.nameField.blur();
                }
            });
            //---------------------------------------------------------
            // hook up our button event handlers
            //---------------------------------------------------------
            this.root.querySelector('#play-button')?.addEventListener('click', async (e) => {
                if (this.codeChanged)
                    await this.recompile();
                this.playAudio();
            });
            this.root.querySelector('#pause-button')?.addEventListener('click', e => this.pauseAudio());
            this.root.querySelector('#stop-button')?.addEventListener('click', e => this.audio.stopAll());
            //---------------------------------------------------------
            // fire recompile when the compile button is pressed...
            //---------------------------------------------------------
            this.root.querySelector('#compile-button')?.addEventListener('click', e => {
                this.setHTML('#beat-count', 'COMPILING...');
                this.setHTML('#line-count', '');
                //this.state?.set('modified', Date.now());
                //this.pauseAudio();
                this.recompile(true);
            });
            //---------------------------------------------------------
            // timeline events
            //---------------------------------------------------------
            this.timeline.addEventListener('playhead-reposition', (e) => {
                this.pauseAudio();
                this.synth.releaseAll();
                const ph = e.detail.playhead;
                this.audio.setTime(ph);
                this.clearTrace();
                this.traceAtPlayhead(ph);
                this.instrumentAllNotesOff();
                this.instrumentAtPlayhead(ph);
            });
            this.timeline.addEventListener('playhead-down', (e) => {
                this.pauseAudio();
                const ph = e.detail.playhead;
                this.clearTrace();
                this.traceAtPlayhead(ph);
                this.instrumentAllNotesOff();
                this.instrumentAtPlayhead(ph);
            });
            this.timeline.addEventListener('playhead-up', (e) => {
                this.pauseAudio();
                this.synth.releaseAll();
                this.clearTrace();
                const ph = e.detail.playhead;
                this.audio.setTime(ph);
            });
            this.timeline.addEventListener('note-enter', e => {
                e.detail.playhead;
                const t = e.detail.note;
                this.clearTrace();
                this.instrumentAllNotesOff();
                this.instrumentNoteOn(t.note);
                if (t.line >= 0)
                    this.addTrace(t.line);
            });
            this.timeline.addEventListener('note-leave', e => {
                this.clearTrace();
                this.instrumentAllNotesOff();
                this.synth.releaseAll();
            });
            this.timeline.addEventListener('note-down', e => {
                e.detail.playhead;
                const t = e.detail.note;
                this.clearTrace();
                this.instrumentAllNotesOff();
                this.instrumentNoteOn(t.note);
                if (t.line >= 0)
                    this.addTrace(t.line);
                this.synth.playNote(t.note);
            });
            this.timeline.addEventListener('note-up', e => {
                this.clearTrace();
                this.instrumentAllNotesOff();
                this.synth.releaseAll();
            });
            //---------------------------------------------------------
            // when the user drags the playhead, preview the audio and
            // highlight the python code that generated notes
            //---------------------------------------------------------
            let _last_slice = [];
            this.timeline.addEventListener('playhead-drag', (evt) => {
                // current playhead location
                const ph = evt.detail.playhead;
                // notes intersecting playhead
                const slice = this.trace.slice(ph);
                // add trace markers
                this.clearTrace();
                this.traceAtPlayhead(ph);
                // play instrument
                this.instrumentAllNotesOff();
                this.instrumentAtPlayhead(ph);
                // release old notes
                const released = _last_slice.filter(l => slice.findIndex(e => e.id === l.id) < 0);
                released.forEach(e => { if (e.command === pe.PLAY)
                    this.synth.releaseNote(e.note); });
                // play new notes 
                const pressed = slice.filter(e => _last_slice.findIndex(l => l.id === e.id) < 0);
                pressed.forEach(e => { if (e.command === pe.PLAY)
                    this.synth.playNote(e.note); });
                // scrub playSounds snippets
                slice.forEach(e => {
                    if (e.command === pe.SOUND) {
                        const start = ph - e.time;
                        const buffer = ee.getAudioBuffer(e.params.get('sound-url'));
                        this.synth.scrubAudio(buffer, start, start + 0.05);
                    }
                });
                _last_slice = slice;
            });
            //---------------------------------------------------------
            // instrument events
            //---------------------------------------------------------
            const instrument = this.root.querySelector('tunepad-instrument');
            instrument?.addEventListener('note-on', e => {
                const { note, velocity, source } = e.detail;
                const n = new i$1(note);
                n.velocity = velocity;
                this.playNote(n);
            });
            instrument?.addEventListener('note-off', e => {
                const { note, source } = e.detail;
                this.releaseNote(note);
            });
            instrument?.addEventListener('update', e => {
                const { property, value } = e.detail;
                if (property === 'patch') {
                    this.setPatch(value);
                    this.emitUpdateEvent('patch', value);
                }
            });
            instrument?.addEventListener('action', e => {
                const { property, value } = e.detail;
                if (property === 'hint-insert') {
                    this.editor.insertCodeInNewLine(value);
                }
            });
            //---------------------------------------------------------
            // info bar
            //---------------------------------------------------------
            this.root.querySelector('#info-bpm')?.addEventListener('click', e => {
                const dialog = BPMDialog.show(this.audio.bpm);
                dialog.addEventListener('tempo', e => {
                    this.audio.setTempo(e.detail.value);
                    //this.emitUpdateEvent('tempo', `${this.bpm}` );
                });
            });
            this.root.querySelector('#info-key')?.addEventListener('click', e => {
                const dialog = KeyDialog.show(this.audio.key.name);
                dialog.addEventListener('key', e => {
                    this.audio.key = new m(e.detail.value);
                    //this.emitUpdateEvent('tempo', `${this.bpm}` );
                });
            });
            this.root.querySelector('#info-time')?.addEventListener('click', e => {
                const dialog = TimeSignatureDialog.show(this.audio.beatsPerMeasure, this.audio.beatValue);
                dialog.addEventListener('time-signature', e => {
                    const n = e.detail.numerator;
                    const d = e.detail.denominator;
                    this.audio.setTimeSignature(`${n}/${d}`);
                    //this.emitUpdateEvent('tempo', `${this.bpm}` );
                });
            });
        }
        traceAtPlayhead(ph) {
            const slice = this.trace.slice(ph).map(t => t.line);
            const unique = [...new Set(slice)];
            unique.forEach(line => this.addTrace(line));
        }
        addTrace(line) {
            this.editor.setMarker({ line }, 'trace');
        }
        clearTrace() {
            this.editor.clearMarkers('trace');
        }
        emitUpdateEvent(property, value) {
            const uuid = this.uuid;
            this.dispatchEvent(new CustomEvent("update-cell", {
                bubbles: false,
                composed: true,
                detail: { uuid, property, value }
            }));
        }
        emitDeleteEvent() {
            this.dispatchEvent(new CustomEvent("delete-cell", {
                bubbles: false,
                composed: true,
                detail: { uuid: this.uuid }
            }));
        }
        emitCopyEvent() {
            this.dispatchEvent(new CustomEvent("copy-cell", {
                bubbles: false,
                composed: true,
                detail: { uuid: this.uuid }
            }));
        }
        async loadCustomSounds(trace) {
            for (const e of trace) {
                if (e.command === pe.SOUND)
                    await this.loadSingleSound(e);
            }
        }
        async loadSingleSound(e) {
            if (e.params.has('sound')) {
                const url = `${this.host}/recorder/audio/${e.params.get('sound')}`;
                e.params.set('sound-url', url);
                await ee.loadCustomSound(url);
            }
        }
        setClass(selector, className, on) {
            on ? this.addClass(selector, className) : this.removeClass(selector, className);
        }
        addClass(selector, className) {
            const e = this.root.querySelector(selector);
            if (e && className)
                e.classList.add(className);
        }
        removeClass(selector, className) {
            const e = this.root.querySelector(selector);
            if (e && className)
                e.classList.remove(className);
        }
        setHTML(selector, value) {
            const e = this.root.querySelector(selector);
            if (e)
                e.innerHTML = value;
        }
        enable(selector) {
            this.root.querySelector(selector)?.removeAttribute('disabled');
        }
        disable(selector) {
            this.root.querySelector(selector)?.setAttribute('disabled', 'true');
        }
        async waitForWindowLoad() {
            return new Promise((resolve) => {
                if (document.readyState === 'complete') {
                    resolve();
                }
                else {
                    window.addEventListener('load', () => {
                        resolve();
                    });
                }
            });
        }
    }
    TunePadCell.ELEMENT = "tunepad-cell";
    TunePadCell.observedAttributes = [
        "uuid", // database ID (should never change)
        "name", // page-unique id for this code snippet (must be valid python identifer)
        "saved", // when this cell was last saved to the datastore
        "readonly", // boolean string, default is false
        "autocompile", // boolean (compile on line edits, default is false)
        "theme", // "dark" | "light" (default is dark)
        "timeline", // timeline view to show ("midi", "waveform", "score", or "hidden")
        "instrument", // "definitions", "piano", "bass", "guitar", "drums"
        "patch", // synthesizer patch name (e.g "grand-piano", "acoustic-guitar")
        "host", // datastore host URL for loading custom sounds (https://api.tunepad.space)
        "midi-out", // generate midi output
        "midi-in", // listen for midi input
        "show-instrument" // is the instrument ui visible (default is "true")
    ];
    //const MIDI_PROGRAM = 48; // strings
    //const MIDI_PROGRAM = 19; // pipe organ
    //const MIDI_PROGRAM = 0; // grand piano
    //const MIDI_PROGRAM = 5; // electric piano 1
    //const MIDI_PROGRAM = 4; // electric piano 3
    //const MIDI_PROGRAM = 16; // jazz organ
    //const MIDI_PROGRAM = 18; // rock organ
    //const MIDI_PROGRAM = 6; // harpsichord
    //const MIDI_PROGRAM = 32; // jazz upright bass
    //const MIDI_PROGRAM = 33; // electric bass
    //const MIDI_PROGRAM = 11; // vibraphone
    /*
        private async loadState() {

            this.state.setAttribute('cell-id', this.uuid);
            this.state.setAttribute('project-id', 'test-project3');
            this.state.setAttribute('wss', 'wss://tunepad.space/websocket/');
            this.root.appendChild(this.state);

            this.editor.innerHTML = defaultCode;
            await this.state.connectToDatastore();


            // update cell to match the datastore
            if (this.state.existed) {
                this.setName(toStr(this.state.get('name'), 'tunepad_cell'));
                this.setAutoCompile(toBool(this.state.get('settings-autocompile'), false));
                this.setTheme(toStr(this.state.get('settings-theme'), 'light'));
                this.setReadOnly(toBool(this.state.get('settings-readonly'), false));
                this.setMidiIn(toBool(this.state.get('settings-midi-in'), false));
                this.setMidiOut(toBool(this.state.get('settings-midi-out'),false));
                this.setInstrument(toStr(this.state.get('instrument'), 'piano'));
                this.setPatch(toStr(this.state.get('patch'), 'grand-piano'));
                this.editor.initialContent = this.state.content;
            }

            // or create default state
            else {
                this.state.set('name', this.name);
                this.state.set('settings-autocompile', this.autocompile);
                this.state.set('settings-theme', toStr(this.getAttribute('theme'), 'light'));
                this.state.set('settings-readonly', this.getAttribute('readonly') === 'false');
                this.state.set('settings-midi-in', this.getAttribute('midi-in') === 'true');
                this.state.set('settings-midi-out', this.getAttribute('midi-out') === 'true');
                this.state.set('instrument', toStr(this.getAttribute('instrument'), 'piano'));
                this.state.set('patch', toStr(this.getAttribute('patch'), 'grand-piano'));
                this.state.content = defaultCode;
                this.editor.initialContent = defaultCode;
            }
            this.state.bindEditor(this.editor);

            // insert codemirror editor
            this.root.querySelector('.cell-contents')?.appendChild(this.editor);

            // initial code compile
            this.setHTML('#line-count', 'LOADING PYTHON...');
            this.setHTML('#uncompiled', '');
            this.recompile();
            
            this.hideLoader();


            this.state.addEventListener('datastore-event', (evt) => {
                const { event, message } = (evt as CustomEvent).detail;

                if (event === 'connection-error') {
                    this.showLoader(message);
                } else if (event === 'connected') {
                    this.hideLoader();
                } else if (event === 'synced') {
                    this.hideLoader();
                }
            });

            // listen for datastore events
            this.state.addEventListener('datastate-event', (evt) => {
                const { action, key, newValue, oldValue } = (evt as CustomEvent).detail;
                if (action === 'update') {
                    this.setHTML('#last-saved', `Last saved: ${new Date().toLocaleString()}`)
                    if (key === 'name') {
                        this.setName(newValue);
                    } else if (key === 'settings-autocompile') {
                        this.setAutoCompile(toBool(newValue, false));
                    } else if (key === 'settings-theme') {
                        this.setAttribute('theme', newValue);
                    } else if (key === 'settings-readonly') {
                        this.setReadOnly(toBool(newValue, false));
                    } else if (key === 'settings-midi-in') {
                        this.setMidiIn(newValue === 'true');
                    } else if (key === 'settings-midi-out') {
                        this.setMidiOut(newValue === 'true');
                    } else if (key === 'patch') {
                        this.setAttribute('patch', newValue);
                    }
                }
            });
        }
            */

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * ## TunePad project
     * ```html
     * <tunepad-project
     *    uuid = "{{ database UUID }}"
     *    name = "{{ python module name }}"  // must be a valid python identifier
     *    readonly = "false"                 // default is false
     *    tempo = "90"
     *    key = "C Major"
     *    time = "4/4">
     *
     *    <!-- optional -->
     *    <tunepad-project-menu>
     *
     *    <!-- optional -->
     *    <tunepad-block-menu> ... </tunepad-block-menu>
     *
     *    <!-- required -->
     *    <tunepad-cell-list>
     *        <tunepad-cell></tunepad-cell>
     *        <tunepad-cell></tunepad-cell>
     *        <p> Other html content </p>
     *        <tunepad-cell></tunepad-cell>
     *
     *        <!-- etc -->
     *    </tunepad-cell-list>
     *
     *    <!-- optional -->
     *    <tunepad-outline></tunepad-outline>
     * </tunepad-project>
     * ```
     */
    class TunePadProject extends HTMLElement {
        constructor() {
            super();
            /** unique database identifier */
            this.uuid = self.crypto.randomUUID();
            /** project name */
            this.name = 'tunepad_project';
            this.audio = q.init();
        }
        async connectedCallback() {
            await this.waitForWindowLoad();
            this.querySelector('tunepad-project-menu')?.addEventListener('update', e => {
                const { property, value } = e.detail;
                if (property === 'key') {
                    this.audio.key = new m(value);
                }
                else if (property === 'tempo') {
                    this.audio.setTempo(p(value, 100));
                }
                else if (property === 'time-signature') {
                    this.audio.setTimeSignature(value);
                }
                else ;
                const uuid = this.uuid;
                this.dispatchEvent(new CustomEvent("update", {
                    bubbles: false,
                    composed: true,
                    detail: { uuid, property, value }
                }));
            });
            this.querySelector('tunepad-project-menu')?.addEventListener('action', e => {
                const { action } = e.detail;
                if (action === 'play') {
                    this.querySelectorAll('tunepad-cell').forEach((cell) => { cell.playAudio(); });
                }
                else if (action === 'pause') {
                    this.querySelectorAll('tunepad-cell').forEach((cell) => { cell.pauseAudio(); });
                }
                else if (action === 'stop') {
                    this.audio.stopAll();
                }
            });
            this.querySelector('tunepad-outline')?.addEventListener('add-cell', e => {
                this.dispatchEvent(new CustomEvent("add-cell", {
                    bubbles: false,
                    composed: true,
                    detail: { uuid: this.uuid }
                }));
            });
            this.querySelector('tunepad-outline')?.addEventListener('reorder-cells', e => {
                this.dispatchEvent(new CustomEvent("reorder-cells", {
                    bubbles: false,
                    composed: true,
                    detail: { uuid: this.uuid, ordering: e.detail.ordering }
                }));
            });
        }
        disconnectedCallback() { }
        attributeChangedCallback(name, oldValue, newValue) {
            if (newValue === oldValue) {
                return;
            }
            else if (name === 'uuid') {
                this.uuid = newValue;
            }
            else if (name === 'name') {
                this.name = newValue;
                this.querySelector('tunepad-project-menu')?.setAttribute('name', newValue);
            }
            else if (name === 'tempo') {
                this.audio.bpm = p(newValue, 90);
            }
            else if (name === 'key') {
                this.audio.key = new m(newValue);
            }
            else if (name === 'time') {
                this.audio.setTimeSignature(newValue);
            }
            else if (name === 'voices') {
                this.audio.voices = newValue;
            }
        }
        async waitForWindowLoad() {
            return new Promise((resolve) => {
                if (document.readyState === 'complete') {
                    resolve();
                }
                else {
                    window.addEventListener('load', () => {
                        resolve();
                    });
                }
            });
        }
        async sleep(t) {
            return new Promise((resolve) => {
                setTimeout(() => resolve(), t);
            });
        }
    }
    TunePadProject.ELEMENT = "tunepad-project";
    TunePadProject.observedAttributes = [
        "uuid", // database ID (should never change)
        "name", // name of this project
        "readonly", // boolean string, default is false
        "tempo",
        "key",
        "time", // time signature (e.g. "4/4")
        "voices" // path to patch list for synth (e.g. /assets/sounds/voices)
    ];

    var html$a = "<nav class=\"top-nav\">\n\n  <input id=\"project-name\" part=\"project-name\">\n\n\n  <div class=\"tabs\" part=\"tabs\">\n    <button id=\"code-tab-button\" data-tab=\"code\" class=\"selected\">Code</button>\n    <button id=\"tracks-tab-button\" data-tab=\"tracks\">Tracks</button>\n    <button id=\"mixer-tab-button\" data-tab=\"mixer\">Mixer</button>\n  </div>\n\n  <div class=\"expander\"></div>\n\n  <div class=\"music-settings\" part=\"music-settings\">\n    <div class=\"separator\"></div>\n\n    <button id=\"change-bpm\" class=\"menu-button\"><span id=\"bpm\" class=\"value\"></span> bpm</button>\n\n    <button id=\"change-time\" class=\"menu-button\"><span id=\"time-signature\" class=\"value\"></span> time</button>\n\n    <button id=\"change-key\" class=\"menu-button\"><span id=\"key-base\" class=\"value\"></span> <span id=\"key-mode\"></span></button>\n\n  </div>\n\n\n  <div class=\"transport-buttons\" part=\"transport-buttons\">\n    <div class=\"separator\"></div>\n\n    <button id=\"settings\" class=\"transport-button hidden\" title=\"Project Settings\">\n      <tunepad-icon icon=\"gear\"></tunepad-icon>\n    </button>\n    <button id=\"play-button\" class=\"transport-button\" title=\"Play All\">\n      <tunepad-icon icon=\"play\"></tunepad-icon>\n    </button>\n    <button id=\"pause-button\" class=\"transport-button hidden\" title=\"Pause All\">\n      <tunepad-icon icon=\"pause\"></tunepad-icon>\n    </button>\n    <button id=\"stop-button\" class=\"transport-button\" title=\"Stop All\">\n      <tunepad-icon icon=\"stop\"></tunepad-icon>\n    </button>\n  </div>\n</nav>\n";

    const sheet$a = new CSSStyleSheet();sheet$a.replaceSync("* {\n    box-sizing: border-box;\n}\n\n.top-nav {\n    position: fixed;\n    top: 0;\n    left: 65px;\n    width: calc(100% - 65px);\n    height: 55px;\n    color: #414251;\n    background-color: #fdfdfd;\n    z-index: 900;\n    box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.1);\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    padding: 8px 20px;\n    user-select: none;\n}\n\n.expander { flex: 1; }\n\n#project-name {\n    flex: 2;\n    min-width: 160px;\n    max-width: 550px;\n    font-family: var(--main-font);\n    font-size: 16px;\n    font-weight: 700;\n    color: #414251;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    border: 1px solid transparent;\n    border-radius: 5px;\n    padding: 5px;\n    margin-left: 5px;\n}\n\n#project-name:hover {\n    border: 1px solid #0007;\n    background-color: #f7f7f7;\n}\n\n.menu-button {\n    color: #999;\n    font-size: 14px;\n    font-family: var(--main-font);\n    font-weight: 600;\n    margin: 0 7px;\n    padding: 8px 14px;\n    border-radius: 5px;\n    transition: 0.25s all;\n    width: 110px;\n    background-color: transparent;\n    outline: none;\n    border: none;\n}\n\n.menu-button:hover { background-color: #E4E4E4; }\n.menu-button:active { color: #2f9af0; }\n.menu-button:active .value { color: #2f9af0; }\n.menu-button .value {\n    color: #414251;\n    font-size: 18px;\n}\n\n.separator {\n    border-left: 2px solid #bbc;\n    height: 30px;\n    margin: 0 10px 0 10px;\n}\n\n\n.music-settings, .transport-buttons, .tabs {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: fit-content;\n}\n\n.tabs { margin: 0 30px; }\n\n.transport-button {\n    fill: #414251;\n    border: none;\n    outline: none;\n    background-color: transparent;\n    font-size: 14px;\n    width: 45px;\n    padding: 15px;\n}\n.transport-button:hover { fill: #888; }\n.transport-button:active { fill: #2f9af0; }\n.transport-button.hidden { display: none; }\n\n\n.tabs button {\n    flex: 1;\n    color: #999;\n    padding: 8px 14px;\n    margin: 0 7px;\n    border-radius: 5px;\n    border: none;\n    outline: none;\n    font-size: 14px;\n    font-family: var(--main-font);\n    font-weight: 600;\n    background-color: transparent;\n    width: 5em;\n    transition: all 0.25s;\n}\n.tabs button.selected, .tabs button:hover {\n    background-color: #414251;\n    color: #fdfdfd;\n}\n.tabs button:active {\n    background-color: #2f9af0;\n    color: #fdfdfd;\n}\n\n@media only screen and (max-width: 1080px) {\n    #settings { display: block; }\n    \n    .music-settings {\n        display: none;\n        position: absolute;\n        top: 50px;\n        right: 50px;\n        background-color: #fdfdfd;\n        box-shadow: 0px 3px 5px #0005;\n        z-index: 800;\n        border-radius: 8px;\n        padding: 15px 5px 10px 5px;\n        flex-direction: column;\n        justify-content: center;\n    }\n\n    .music-settings.show { display: flex; }\n\n    .music-settings .separator { display: none; }\n}");

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * ## TunePad project menu bar
     * ```html
     * <tunepad-project-menu></tunepad-project-menu>
     * ```
     */
    class TunePadProjectMenu extends HTMLElement {
        constructor() {
            super();
            this.root = this.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(sheet$a);
            this.root.innerHTML = html$a;
            this.nameField = this.root.querySelector('#project-name');
            this.audio = q.init();
            this.audio.addSubscriber(this);
            this.bpm = this.audio.bpm;
            this.time = `${this.audio.beatsPerMeasure}/${this.audio.beatValue}`;
            this.key = new m(this.audio.key.name);
            this.playButton = this.root.querySelector('#play-button');
            this.pauseButton = this.root.querySelector('#pause-button');
            this.stopButton = this.root.querySelector('#stop-button');
            this.settingsButton = this.root.querySelector('#settings');
        }
        async connectedCallback() {
            await this.waitForWindowLoad();
            if (this.parentElement?.nodeName.toLowerCase() === 'tunepad-project') {
                this.setName(this.parentElement.getAttribute('name') ?? '');
            }
            this.setTempo(this.audio.bpm);
            this.setTimeSignature(this.audio.beatsPerMeasure, this.audio.beatValue);
            this.setKey(this.audio.key.name);
            this.nameField.addEventListener('blur', (e) => {
                this.setName(this.nameField.value);
                this.emitUpdateEvent('name', this.nameField.value);
            });
            this.nameField.addEventListener('keypress', (e) => {
                if (e.key === "Enter") {
                    this.nameField.blur();
                }
            });
            this.playButton.addEventListener('click', e => {
                this.pauseButton.classList.remove('hidden');
                this.playButton.classList.add('hidden');
                this.emitButtonEvent('play');
            });
            this.pauseButton.addEventListener('click', e => {
                this.pauseButton.classList.add('hidden');
                this.playButton.classList.remove('hidden');
                this.emitButtonEvent('pause');
            });
            this.stopButton.addEventListener('click', e => {
                this.pauseButton.classList.add('hidden');
                this.playButton.classList.remove('hidden');
                this.emitButtonEvent('stop');
            });
            this.settingsButton.addEventListener('click', e => {
                this.root.querySelector('.music-settings')?.classList.toggle('show');
            });
            this.bindDialogEvents();
        }
        disconnectedCallback() {
            this.audio.removeSubscriber(this);
        }
        attributeChangedCallback(name, oldValue, newValue) {
            if (name === 'name')
                this.setName(newValue);
        }
        onClockReset() {
            this.playButton.classList.remove('hidden');
            this.pauseButton.classList.add('hidden');
        }
        onClockTimeChange() {
            this.playButton.classList.remove('hidden');
            this.pauseButton.classList.add('hidden');
        }
        onTempoChange() {
            this.setTempo(this.audio.bpm);
        }
        onKeyChange() {
            this.setKey(this.audio.key.name);
        }
        onTimeSignatureChange() {
            this.setTimeSignature(this.audio.beatsPerMeasure, this.audio.beatValue);
        }
        setName(name) {
            if (name === this.nameField.value)
                return;
            this.nameField.value = name;
            this.setAttribute('name', name);
        }
        setTempo(newBPM) {
            this.bpm = Math.max(5, Math.min(999, newBPM));
            const bpmLabel = this.root.querySelector('#bpm');
            if (bpmLabel)
                bpmLabel.innerHTML = `${this.bpm}`;
        }
        setTimeSignature(numer, denom) {
            numer = Math.max(1, Math.min(32, numer));
            denom = [1, 2, 4, 8, 16, 32, 64].includes(denom) ? denom : 4;
            this.time = `${numer}/${denom}`;
            this.setHTML('#time-signature', this.time);
        }
        setKey(name) {
            this.key = new m(name);
            this.setHTML('#key-base', `${this.key.key.split('/')[0]}`);
            this.setHTML('#key-mode', `${this.key.mode}`);
        }
        emitUpdateEvent(property, value) {
            this.dispatchEvent(new CustomEvent("update", {
                bubbles: false,
                composed: true,
                detail: { property, value }
            }));
        }
        emitButtonEvent(name) {
            this.dispatchEvent(new CustomEvent("action", {
                bubbles: false,
                composed: true,
                detail: { 'action': name }
            }));
        }
        setHTML(selector, value) {
            const e = this.root.querySelector(selector);
            if (e)
                e.innerHTML = value;
        }
        async waitForWindowLoad() {
            return new Promise((resolve) => {
                if (document.readyState === 'complete') {
                    resolve();
                }
                else {
                    window.addEventListener('load', () => {
                        resolve();
                    });
                }
            });
        }
        bindDialogEvents() {
            this.root.querySelector('#change-bpm')?.addEventListener('pointerdown', e => {
                const dialog = BPMDialog.show(this.bpm);
                dialog.addEventListener('tempo', e => {
                    this.setTempo(e.detail.value);
                    this.emitUpdateEvent('tempo', `${this.bpm}`);
                });
                this.root.querySelector('.music-settings')?.classList.remove('show');
            });
            this.root.querySelector('#change-time')?.addEventListener('pointerdown', e => {
                const dialog = TimeSignatureDialog.show(this.audio.beatsPerMeasure, this.audio.beatValue);
                dialog.addEventListener('time-signature', e => {
                    const n = e.detail.numerator;
                    const d = e.detail.denominator;
                    this.setTimeSignature(n, d);
                    this.emitUpdateEvent('time-signature', `${n}/${d}`);
                });
                this.root.querySelector('.music-settings')?.classList.remove('show');
            });
            this.root.querySelector('#change-key')?.addEventListener('pointerdown', e => {
                const dialog = KeyDialog.show(this.key.name);
                dialog.addEventListener('key', e => {
                    this.setKey(e.detail.value);
                    this.emitUpdateEvent('key', this.key.name);
                });
                this.root.querySelector('.music-settings')?.classList.remove('show');
            });
        }
    }
    TunePadProjectMenu.ELEMENT = "tunepad-project-menu";
    TunePadProjectMenu.observedAttributes = ["name"];

    const sheet$9 = new CSSStyleSheet();sheet$9.replaceSync(":host {\n    overflow-y: hidden;\n}\n\n#scroll-container {\n    overflow-x: auto;\n    overflow-y: hidden;\n    height: 100%;\n    position: relative;\n    background-color: #414251;\n}\n\n:host([theme=\"dark\"]) #scroll-container {\n    background-color: #414251;\n}\n:host([theme=\"light\"]) #scroll-container {\n    background-color: rgb(247, 249, 255);\n}\n\n#container {\n    /* width: fit-content; */\n    height: 100%;\n    user-select: none;\n}\n/*\n#timeline { background-color: #414251; }\n.light #timeline { background-color: white; }\n*/\n\n.playhead { fill: orange; }\n.light .playhead { fill: #333; }\n\n.ruler { fill: rgba(46, 48, 62); }\n.light .ruler { fill: rgb(230, 236, 253); }\n\n.ruler-marks {\n    text-anchor: start;\n    font-family: 'Proxima Nova', sans-serif;\n    font-size: 11px;\n    dominant-baseline: middle;\n    pointer-events: none;\n    user-select: none;\n}\n.light .ruler-marks { font-weight: bold; }\n\n.beat-line {\n    stroke-opacity: 0.15;\n    stroke-width: 1.0;\n}\n\n.beat-line.measure {\n    stroke-opacity: 0.3;\n    stroke-width: 2;\n}\n\n.ruler-marks { fill: #ccc; }\n.beat-line { stroke: #ccc; }\n.light .ruler-marks { fill: #395e92; }\n.light .beat-line {\n    stroke: #a3c9ff;\n    stroke-opacity: 0.3;\n}\n.light .beat-line.measure {\n    stroke-opacity: 0.8;\n}\n\n\n.timeline-mark { fill: var(--piano-color); }\n.piano .timeline-mark { fill: var(--piano-color); }\n.guitar .timeline-mark { fill: var(--guitar-color); }\n.marimba .timeline-mark { fill: var(--marimba-color); }\n.bass .timeline-mark { fill: var(--bass-color); }\n.drums .timeline-mark { fill: var(--drum-color); }\n.drum .timeline-mark { fill: var(--drum-color); }\n.sound .timeline-mark { fill: var(--sound-color); }\n.sequencer .timeline-mark { fill: var(--sequencer-color); }\n\n.timeline-note:hover, .timeline-note.highlight { fill: white; }\n.light .timeline-note:hover, .light .timeline-note.highlight { fill: gold; }\n\n\n#note-hint {\n    position: absolute;\n    background-color: var(--info-blue);\n    box-shadow: 3px 3px 3px #0006;\n    font-size: 12px;\n    padding: 12px 16px;\n    top: 20px;\n    right: 10px;\n    color: white;\n    font-family: sans-serif;\n    line-height: 150%;\n    box-sizing: border-box;\n    border-radius: 4px;\n    display: flex;\n    opacity: 0;\n    transition: opacity 0.25s;\n    pointer-events: none;\n    user-select: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    z-index: 1;\n}\n\n#note-hint.show {\n    display: flex;\n    opacity: 1.0;\n}\n\n#note-hint .note-box {\n    display: flex;\n    margin-right: 10px;\n}\n\n#note-hint .note-name {\n    font-family: serif;\n    font-size: 22px;\n    line-height: 22px;\n}\n\n#note-hint .note-decorators {\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n    line-height: 12px;\n    font-size: 12px;\n}\n\n#note-hint .note-info {\n    font-size: 13px;\n    line-height: 24px;\n}");

    var html$9 = "<div id=\"note-hint\">\n    <div class=\"note-box\">\n        <div class=\"note-name\">B</div>\n        <div class=\"note-decorators\">\n            <div class=\"accidental\">&nbsp;</div>\n            <div class=\"octave\">3</div>\n        </div>\n    </div>\n    <div class=\"note-info\">Note 59 (line 9)</div>\n</div>\n\n<div id=\"scroll-container\">\n    <div id=\"container\">\n        <svg id=\"timeline\" version=\"1.1\"></svg>\n    </div>\n</div>\n";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * Timeline that shows midi piano roll
     *
     * <timeline-midi
     *     playhead = "0"           // location of the playhead in beats
     *     theme = "dark | light"   // default is dark
     *     instrument = "piano">    // changes the color of the visualization
     */
    class TimelineMidi extends HTMLElement {
        // total beat count for the current trace rounded up to the nearest measure
        get beats() {
            const b = this.trace.beats;
            const bars = Math.ceil(b / this.measure);
            return Math.max(this.measure, bars * this.measure);
        }
        /** duration of each measure in beats */
        get measure() { return this.audio.beatsPerMeasure; }
        /** how many pixels wide per quarter note */
        get beatWidth() { return Math.max(40, this.width / this.beats); }
        /** how many pixels wide for the entire trace */
        get traceWidth() { return this.beatWidth * this.beats; }
        /** pixels per second of audio */
        get pixelsPerSecond() { return this.beatWidth * (this.audio.bpm / 60); }
        /** height of the element minus the ruler */
        get scoreHeight() { return this.height - this.rulerHeight; }
        get isPercussion() { return this.getAttribute('instrument')?.startsWith('drum') || false; }
        constructor() {
            super();
            /** dimensions of outer container (will get resized on compontent load) */
            this.width = 700;
            this.height = 150;
            /** height of the top ruler */
            this.rulerHeight = 20;
            /** trace object used to visualize audio data */
            this.trace = me.emptyTrace();
            /** playhead attribute: position of the orange playhead in beats */
            this.playhead = 0;
            /** for the midi roll, how many vertical notes to show? */
            this.tracks = 32;
            this._down = false;
            this.root = this.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(sheet$9);
            this.root.adoptedStyleSheets.push(sheet$c);
            this.root.innerHTML = html$9;
            this.container = this.root.querySelector('#container');
            this.scrollContainer = this.root.querySelector('#scroll-container');
            this.svg = this.root.querySelector('#timeline');
            this._playheadLine = document.createElementNS("http://www.w3.org/2000/svg", 'path');
            this._dataGroup = document.createElementNS("http://www.w3.org/2000/svg", 'g');
            this.audio = q.init();
            this.audio.addSubscriber(this);
        }
        setTrace(t, force = false) {
            const changed = !(t.isEquivalent(this.trace) && t.patch === this.trace.patch);
            this.trace = t;
            if (changed || force)
                this.render();
        }
        onClockReset() { }
        onClockTimeChange() { }
        onTempoChange() { }
        onTimeSignatureChange() { this.render(); }
        onKeyChange() { }
        connectedCallback() {
            this.registerTouchEvents();
            window.addEventListener('resize', (e) => this.render());
            this.render();
        }
        disconnectedCallback() {
            //console.log("Custom element removed from page.");
        }
        attributeChangedCallback(name, oldValue, newValue) {
            if (oldValue === newValue)
                return;
            if (name === 'playhead') {
                this.movePlayhead(f(newValue, this.beats));
            }
            else if (name === 'theme' && ['dark', 'light'].includes(newValue)) {
                this.root.querySelector('#container')?.classList.remove(oldValue);
                this.root.querySelector('#container')?.classList.add(newValue);
            }
            else if (name === 'instrument') {
                this.root.querySelector('#container')?.classList.remove(oldValue);
                this.root.querySelector('#container')?.classList.add(newValue);
            }
        }
        beatToX(beat) {
            return beat * this.beatWidth;
        }
        xToBeat(x) {
            let p = this.svg.createSVGPoint();
            p.x = x;
            p = p.matrixTransform(this.svg.getScreenCTM().inverse());
            return p.x / this.beatWidth;
        }
        /**
         * (Re)draw the entire timeline
         */
        render() {
            this.resize();
            this.svg.innerHTML = '';
            const group = document.createElementNS("http://www.w3.org/2000/svg", 'g');
            const ruler = this.renderRuler();
            group.append(ruler);
            this._dataGroup.innerHTML = '';
            group.append(this._dataGroup);
            this.renderPlayhead();
            group.append(this._playheadLine);
            this.svg.append(group);
            this.renderData();
        }
        renderRuler() {
            const beatNumbers = document.createElementNS("http://www.w3.org/2000/svg", 'g');
            // background rect
            const beatBacker = document.createElementNS("http://www.w3.org/2000/svg", 'rect');
            beatBacker.classList.add('ruler');
            beatBacker.setAttribute('x', `${this.beatToX(0)}`);
            beatBacker.setAttribute('y', '0');
            beatBacker.setAttribute('width', `${this.traceWidth}`);
            beatBacker.setAttribute('height', `${this.rulerHeight}`);
            beatNumbers.append(beatBacker);
            beatBacker.addEventListener('pointerdown', (e) => {
                this._down = true;
                this.movePlayhead(this.xToBeat(e.clientX));
                this.emitEvent('playhead-reposition');
            });
            for (let i = 1; i <= this.beats; i++) {
                let x = this.beatToX(i - 1);
                const text = document.createElementNS("http://www.w3.org/2000/svg", 'text');
                text.classList.add('ruler-marks');
                text.setAttribute('x', `${x + 5}`);
                text.setAttribute('y', `${this.rulerHeight / 2}`);
                text.innerHTML = (i === 1) ? "BEAT" : `${i}`;
                beatNumbers.append(text);
                if (i === 1)
                    continue;
                const line = document.createElementNS("http://www.w3.org/2000/svg", 'line');
                line.classList.add('beat-line');
                line.setAttribute('x1', `${x}`);
                line.setAttribute('y1', '0');
                line.setAttribute('x2', `${x}`);
                line.setAttribute('y2', `${this.height}`);
                // make first beat of each measure thicker
                if ((i - 1) % this.measure === 0) {
                    line.classList.add('measure');
                }
                beatNumbers.append(line);
            }
            return beatNumbers;
        }
        renderPlayhead() {
            const h = Math.max(100, this.height);
            const rh = this.rulerHeight;
            const rh2 = this.rulerHeight - 5;
            const px = this.beatToX(this.playhead);
            this._playheadLine.setAttribute("d", `M ${px - 1} ${h} l 0 -${h - rh} l -6 -6 l 0 -${rh2} l 14 0 l 0 ${rh2} l -6 6 l 0 ${h} Z`);
            this._playheadLine.setAttribute("class", "playhead");
        }
        noteToTrack(note) {
            const base = (this.isPercussion) ? 0 : this.trace.minNote;
            return (this.tracks - (Math.round(note - base) % this.tracks)) - 1;
        }
        renderData() {
            const trace = this.trace;
            const range = (trace.maxNote - trace.minNote) + 1;
            this.tracks = Math.max(12, range);
            this._dataGroup.setAttribute("transform", `translate(0, ${this.rulerHeight}), ` +
                `scale(${this.beatWidth}, ${this.scoreHeight / this.tracks})`);
            const events = trace.filter(e => (e.command === pe.PLAY || e.command === pe.SOUND));
            for (const t of events) {
                this._dataGroup.append(this.renderNote(t));
            }
        }
        renderNote(t) {
            const epsilon = 1 / 64;
            const rect = document.createElementNS("http://www.w3.org/2000/svg", 'rect');
            rect.classList.add('timeline-mark', 'timeline-note');
            rect.setAttribute('width', `${t.duration - epsilon}`);
            rect.setAttribute('height', `${1 - epsilon}`);
            rect.setAttribute('x', `${t.time}`);
            rect.setAttribute('y', `${this.noteToTrack(t.note.note)}`);
            rect.setAttribute('data-tevent', `${t.id}`);
            rect.addEventListener('pointerenter', e => {
                this.previewNote(t);
                this.emitEvent('note-enter', t);
            });
            rect.addEventListener('pointerdown', e => { this.emitEvent('note-down', t); });
            rect.addEventListener('pointerup', e => { this.emitEvent('note-up', t); });
            rect.addEventListener('pointerleave', e => {
                this.hidePreview();
                this.emitEvent('note-leave', t);
            });
            return rect;
        }
        /**
         * Called when the window and possibly containing element are resized.
         */
        resize() {
            this.width = this.root.host.getBoundingClientRect().width;
            this.height = this.root.host.getBoundingClientRect().height;
            this.scrollContainer.style.width = `${this.width}px`;
            this.container.style.width = `${this.traceWidth}px`;
            //this.container.style.height = `${this.height}px`;
            this.svg.setAttribute("viewBox", `0 0 ${this.traceWidth} ${this.height}`);
        }
        /**
         * Move playhead to a new location
         */
        movePlayhead(p) {
            this.playhead = Math.max(0, Math.min(this.beats, p));
            this.renderPlayhead();
            if (!this._down) {
                this.scrollContainer.scrollTo(this.beatToX(p) - this.width * 0.8, 0);
            }
            this.root.querySelectorAll('.timeline-note').forEach(tn => {
                tn.classList.remove('highlight');
            });
            if (p > 0) {
                this.trace.slice(p).forEach(te => {
                    this.root.querySelector(`.timeline-note[data-tevent="${te.id}"]`)?.classList.add('highlight');
                });
            }
        }
        hidePreview() {
            this.root.querySelector('#note-hint')?.classList.remove('show');
        }
        previewNote(t) {
            const key = this.audio.key;
            const name = key.getNoteName(t.note, false);
            const acc = key.getAccidental(t.note);
            const tt = Number.isInteger(t.note.note) ? `${t.note.note}` : t.note.note.toFixed(2);
            const hint = this.root.querySelector('#note-hint');
            if (hint) {
                hint.querySelector('.note-name').innerHTML = name;
                hint.querySelector('.accidental').innerHTML = acc ? acc : '&nbsp';
                hint.querySelector('.octave').innerHTML = `${t.note.octave - 1}`;
                hint.querySelector('.note-info').innerHTML = `Note ${tt}`;
                hint.querySelector('.note-info').innerHTML += ` (line ${t.line})`;
                hint.classList.add('show');
            }
        }
        emitEvent(name, tevent) {
            this.dispatchEvent(new CustomEvent(name, {
                bubbles: true,
                composed: true,
                detail: { playhead: this.playhead, note: tevent }
            }));
        }
        registerTouchEvents() {
            this._playheadLine.addEventListener('pointerdown', (e) => {
                this.emitEvent('playhead-down');
                this._playheadLine.setPointerCapture(e.pointerId);
                this._down = true;
            });
            document.addEventListener('pointermove', (e) => {
                if (this._down) {
                    this.movePlayhead(this.xToBeat(e.clientX));
                    this.emitEvent('playhead-drag');
                }
            });
            document.addEventListener('pointerup', (e) => {
                if (this._down) {
                    this.emitEvent('playhead-up');
                }
                this._down = false;
            });
        }
    }
    TimelineMidi.ELEMENT = "timeline-midi";
    TimelineMidi.observedAttributes = [
        "playhead", // location of the playhead in beats
        "theme", // "dark" | "light"
        "instrument", // changes the color of the waveform or trace (TimelineInstruments)
    ];

    var html$8 = "<div id=\"scroll-container\">\n    <div id=\"container\">\n        <svg id=\"timeline\" version=\"1.1\"></svg>\n    </div>\n</div>\n";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * Timeline that can show waveform view of audio
     *
     * <timeline-waveform
     *     playhead = "0"           // location of the playhead in beats
     *     theme = "dark | light"   // default is dark
     *     instrument = "piano">    // changes the color of the visualization
     */
    class TimelineWaveform extends TimelineMidi {
        constructor() {
            super();
            this.uuid = `${TimelineWaveform._TIMELINE_ID++}`;
            /** used to generate waveform data */
            this.synth = new Me();
            this.waveform = new ne();
            this.root.innerHTML = html$8;
            this.container = this.root.querySelector('#container');
            this.scrollContainer = this.root.querySelector('#scroll-container');
            this.svg = this.root.querySelector('#timeline');
        }
        onTempoChange() { this.regenerateWaveform(); }
        render() {
            super.render();
            this.regenerateWaveform();
        }
        /**
         * Creates SVG path that visualizes the waveform
         */
        renderData() {
            this._dataGroup.setAttribute("transform", `translate(0, ${this.rulerHeight + this.scoreHeight / 2}), ` +
                `scale(${this.pixelsPerSecond}, ${this.scoreHeight / 2})`);
            const path = this.waveform.wavepath;
            if (path) {
                path.classList.add("timeline-mark");
                this._dataGroup.append(path);
            }
        }
        async regenerateWaveform() {
            this.waveform = new ne();
            this.synth.bpm = this.audio.bpm;
            // load synth patch
            if (this.trace.patch) {
                await this.synth.loadPatch(this.trace.patch);
            }
            oe.cancelRequest(this.uuid);
            oe.requestWaveform({
                uuid: this.uuid,
                beats: this.beats,
                trace: this.trace,
                synth: this.synth,
                force: true,
                increment: this.measure,
                waveform: this.waveform,
                progress: () => { this.renderData(); },
            })
                .then((waveform) => { this.renderData(); });
        }
    }
    TimelineWaveform.ELEMENT = "timeline-waveform";
    TimelineWaveform._TIMELINE_ID = 0;

    const sheet$8 = new CSSStyleSheet();sheet$8.replaceSync(":host {\n    overflow-y: hidden;\n}\n\n#scroll-container {\n    overflow-x: auto;\n    overflow-y: hidden;\n    width: 100%;\n    height: 100%;\n    position: relative;\n    background-color: #fafafa;\n}\n\n#container {\n    /* width: fit-content; */\n    height: 100%;\n    background-color: transparent;\n    user-select: none;\n    padding: 0 1.5rem;\n}\n\n#container svg {\n    height: 100%;\n}\n\n#container .vf-stavenote.highlight rect {\n    fill: red;\n    opacity: 20%;\n    stroke: none;\n    stroke-width: 10;\n    stroke: red;\n}\n\n");

    var html$7 = "<div id=\"scroll-container\">\n    <div id=\"container\">\n    </div>\n</div>";

    class RuntimeError extends Error {
        constructor(code, message = '') {
            super('[RuntimeError] ' + code + ': ' + message);
            this.code = code;
        }
    }
    function globalObject() {
        if (typeof globalThis !== 'undefined') {
            return globalThis;
        }
        if (typeof self !== 'undefined') {
            return self;
        }
        if (typeof window !== 'undefined') {
            return window;
        }
        if (typeof global !== 'undefined') {
            return global;
        }
        return Function('return this')();
    }
    function defined(x, code = 'undefined', message = '') {
        if (x === undefined) {
            throw new RuntimeError(code, message);
        }
        return x;
    }
    function log(block, ...args) {
        if (!args)
            return;
        const line = Array.prototype.slice.call(args).join(' ');
        globalObject().console.log(block + ': ' + line);
    }
    function warn(...args) {
        const line = args.join(' ');
        const err = new Error();
        globalObject().console.log('Warning: ', line, err.stack);
    }
    function roundN(x, n) {
        return x % n >= n / 2 ? parseInt(`${x / n}`, 10) * n + n : parseInt(`${x / n}`, 10) * n;
    }
    function midLine(a, b) {
        let midLine = b + (a - b) / 2;
        if (midLine % 2 > 0) {
            midLine = roundN(midLine * 10, 5) / 10;
        }
        return midLine;
    }
    function prefix(text) {
        return `vf-${text}`;
    }
    function normalizeAngle(a) {
        a = a % (2 * Math.PI);
        if (a < 0) {
            a += 2 * Math.PI;
        }
        return a;
    }
    function sumArray(arr) {
        return arr.reduce((a, b) => a + b, 0);
    }

    class Fraction {
        static get CATEGORY() {
            return "Fraction";
        }
        static GCD(a, b) {
            if (typeof a !== 'number' || Number.isNaN(a) || typeof b !== 'number' || Number.isNaN(b)) {
                throw new RuntimeError('BadArgument', `Invalid numbers: ${a}, ${b}`);
            }
            let t;
            while (b !== 0) {
                t = b;
                b = a % b;
                a = t;
            }
            return a;
        }
        static LCM(a, b) {
            return (a * b) / Fraction.GCD(a, b);
        }
        static LCMM(args) {
            if (args.length === 0) {
                return 0;
            }
            else if (args.length === 1) {
                return args[0];
            }
            else if (args.length === 2) {
                return Fraction.LCM(args[0], args[1]);
            }
            else {
                return Fraction.LCM(args.shift(), Fraction.LCMM(args));
            }
        }
        constructor(numerator, denominator) {
            this.numerator = 1;
            this.denominator = 1;
            this.set(numerator, denominator);
        }
        set(numerator = 1, denominator = 1) {
            this.numerator = numerator;
            this.denominator = denominator;
            return this;
        }
        value() {
            return this.numerator / this.denominator;
        }
        simplify() {
            let u = this.numerator;
            let d = this.denominator;
            const gcd = Fraction.GCD(u, d);
            u /= gcd;
            d /= gcd;
            if (d < 0) {
                d = -d;
                u = -u;
            }
            return this.set(u, d);
        }
        add(param1 = 0, param2 = 1) {
            const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);
            const lcm = Fraction.LCM(this.denominator, otherDenominator);
            const a = lcm / this.denominator;
            const b = lcm / otherDenominator;
            const u = this.numerator * a + otherNumerator * b;
            return this.set(u, lcm);
        }
        subtract(param1 = 0, param2 = 1) {
            const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);
            const lcm = Fraction.LCM(this.denominator, otherDenominator);
            const a = lcm / this.denominator;
            const b = lcm / otherDenominator;
            const u = this.numerator * a - otherNumerator * b;
            return this.set(u, lcm);
        }
        multiply(param1 = 1, param2 = 1) {
            const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);
            return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);
        }
        divide(param1 = 1, param2 = 1) {
            const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);
            return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);
        }
        equals(compare) {
            const a = Fraction.fractionA.copy(compare).simplify();
            const b = Fraction.fractionB.copy(this).simplify();
            return a.numerator === b.numerator && a.denominator === b.denominator;
        }
        greaterThan(compare) {
            const a = Fraction.fractionA.copy(this);
            a.subtract(compare);
            return a.numerator > 0;
        }
        greaterThanEquals(compare) {
            const a = Fraction.fractionA.copy(this);
            a.subtract(compare);
            return a.numerator >= 0;
        }
        lessThan(compare) {
            return !this.greaterThanEquals(compare);
        }
        lessThanEquals(compare) {
            return !this.greaterThan(compare);
        }
        clone() {
            return new Fraction(this.numerator, this.denominator);
        }
        copy(other) {
            if (typeof other === 'number') {
                return this.set(other);
            }
            else {
                return this.set(other.numerator, other.denominator);
            }
        }
        quotient() {
            return Math.floor(this.numerator / this.denominator);
        }
        remainder() {
            return this.numerator % this.denominator;
        }
        makeAbs() {
            this.denominator = Math.abs(this.denominator);
            this.numerator = Math.abs(this.numerator);
            return this;
        }
        toString() {
            return `${this.numerator}/${this.denominator}`;
        }
        toSimplifiedString() {
            return Fraction.fractionA.copy(this).simplify().toString();
        }
        toMixedString() {
            let s = '';
            const q = this.quotient();
            const f = Fraction.fractionA.copy(this);
            if (q < 0) {
                f.makeAbs();
            }
            if (q !== 0) {
                s += q;
                if (f.numerator !== 0) {
                    s += ` ${f.toSimplifiedString()}`;
                }
            }
            else if (f.numerator === 0) {
                s = '0';
            }
            else {
                s = f.toSimplifiedString();
            }
            return s;
        }
        parse(str) {
            const i = str.split('/');
            const n = parseInt(i[0], 10);
            const d = i[1] ? parseInt(i[1], 10) : 1;
            return this.set(n, d);
        }
    }
    Fraction.fractionA = new Fraction();
    Fraction.fractionB = new Fraction();
    function getNumeratorAndDenominator(n, d = 1) {
        if (typeof n === 'number') {
            return [n, d];
        }
        else {
            return [n.numerator, n.denominator];
        }
    }

    class Metrics {
        static clear(key) {
            if (key) {
                this.cacheFont.delete(key);
                this.cacheStyle.delete(key);
            }
            else {
                this.cacheFont.clear();
                this.cacheStyle.clear();
            }
        }
        static getFontInfo(key) {
            let font = this.cacheFont.get(key);
            if (!font) {
                font = {
                    family: Metrics.get(`${key}.fontFamily`),
                    size: Metrics.get(`${key}.fontSize`) * Metrics.get(`${key}.fontScale`),
                    weight: Metrics.get(`${key}.fontWeight`),
                    style: Metrics.get(`${key}.fontStyle`),
                };
                this.cacheFont.set(key, font);
            }
            return structuredClone(font);
        }
        static getStyle(key) {
            let style = this.cacheStyle.get(key);
            if (!style) {
                style = {
                    fillStyle: Metrics.get(`${key}.fillStyle`),
                    strokeStyle: Metrics.get(`${key}.strokeStyle`),
                    lineWidth: Metrics.get(`${key}.lineWidth`),
                    lineDash: Metrics.get(`${key}.lineDash`),
                    shadowBlur: Metrics.get(`${key}.shadowBlur`),
                    shadowColor: Metrics.get(`${key}.shadowColor`),
                };
                this.cacheStyle.set(key, style);
            }
            return structuredClone(style);
        }
        static get(key, defaultValue) {
            var _a;
            const keyParts = key.split('.');
            const lastKeyPart = keyParts.pop();
            let curr = MetricsDefaults;
            let retVal = defaultValue;
            while (curr) {
                retVal = (_a = curr[lastKeyPart]) !== null && _a !== void 0 ? _a : retVal;
                const keyPart = keyParts.shift();
                if (keyPart) {
                    curr = curr[keyPart];
                }
                else {
                    break;
                }
            }
            return retVal;
        }
    }
    Metrics.cacheStyle = new Map();
    Metrics.cacheFont = new Map();
    const MetricsDefaults = {
        fontFamily: 'Bravura,Academico',
        fontSize: 30,
        fontScale: 1.0,
        fontWeight: 'normal',
        fontStyle: 'normal',
        Accidental: {
            cautionary: {
                fontSize: 20,
            },
            grace: {
                fontSize: 20,
            },
            noteheadAccidentalPadding: 1,
            leftPadding: 2,
            accidentalSpacing: 3,
        },
        Annotation: {
            fontSize: 10,
        },
        Bend: {
            fontSize: 10,
            line: {
                strokeStyle: '#777777',
                lineWidth: 1,
            },
        },
        ChordSymbol: {
            fontSize: 12,
            spacing: 0.05,
            subscriptOffset: 0.2,
            superscriptOffset: -0.4,
            superSubRatio: 0.6,
        },
        FretHandFinger: {
            fontSize: 9,
            fontWeight: 'bold',
        },
        GraceNote: {
            fontScale: 2 / 3,
        },
        GraceTabNote: {
            fontScale: 2 / 3,
        },
        NoteHead: {
            minPadding: 2,
        },
        PedalMarking: {
            text: {
                fontSize: 12,
                fontStyle: 'italic',
            },
        },
        Repetition: {
            text: {
                fontSize: 12,
                fontWeight: 'bold',
                offsetX: 12,
                offsetY: 25,
                spacing: 5,
            },
            coda: {
                offsetY: 25,
            },
            segno: {
                offsetY: 10,
            },
        },
        Stave: {
            strokeStyle: '#999999',
            fontSize: 8,
            padding: 12,
            endPaddingMax: 10,
            endPaddingMin: 5,
            unalignedNotePadding: 10,
        },
        StaveConnector: {
            text: {
                fontSize: 16,
            },
        },
        StaveLine: {
            fontSize: 10,
        },
        StaveSection: {
            fontSize: 10,
            fontWeight: 'bold',
            lineWidth: 2,
            padding: 2,
            strokeStyle: 'black',
        },
        StaveTempo: {
            fontSize: 14,
            glyph: {
                fontSize: 25,
            },
            name: {
                fontWeight: 'bold',
            },
        },
        StaveText: {
            fontSize: 16,
        },
        StaveTie: {
            fontSize: 10,
        },
        Stem: {
            strokeStyle: 'black',
        },
        StringNumber: {
            fontSize: 10,
            fontWeight: 'bold',
            verticalPadding: 8,
            stemPadding: 2,
            leftPadding: 5,
            rightPadding: 6,
        },
        Stroke: {
            text: {
                fontSize: 10,
                fontStyle: 'italic',
                fontWeight: 'bold',
            },
        },
        TabNote: {
            text: {
                fontSize: 9,
            },
        },
        TabSlide: {
            fontSize: 10,
            fontStyle: 'italic',
            fontWeight: 'bold',
        },
        TabStave: {
            strokeStyle: '#999999',
            fontSize: 8,
        },
        TabTie: {
            fontSize: 10,
        },
        TextBracket: {
            fontSize: 15,
            fontStyle: 'italic',
        },
        TextNote: {
            text: {
                fontSize: 12,
            },
        },
        Tremolo: {
            spacing: 7,
        },
        Tuplet: {
            yOffset: 0,
            textYOffset: 2,
        },
        Volta: {
            fontSize: 9,
            fontWeight: 'bold',
        },
    };

    class BoundingBox {
        static copy(that) {
            return new BoundingBox(that.x, that.y, that.w, that.h);
        }
        constructor(x, y, w, h) {
            this.x = x;
            this.y = y;
            this.w = w;
            this.h = h;
        }
        getX() {
            return this.x;
        }
        getY() {
            return this.y;
        }
        getW() {
            return this.w;
        }
        getH() {
            return this.h;
        }
        setX(x) {
            this.x = x;
            return this;
        }
        setY(y) {
            this.y = y;
            return this;
        }
        setW(w) {
            this.w = w;
            return this;
        }
        setH(h) {
            this.h = h;
            return this;
        }
        move(x, y) {
            this.x += x;
            this.y += y;
            return this;
        }
        clone() {
            return BoundingBox.copy(this);
        }
        mergeWith(boundingBox) {
            const that = boundingBox;
            const newX = this.x < that.x ? this.x : that.x;
            const newY = this.y < that.y ? this.y : that.y;
            const newW = Math.max(this.x + this.w, that.x + that.w) - newX;
            const newH = Math.max(this.y + this.h, that.y + that.h) - newY;
            this.x = newX;
            this.y = newY;
            this.w = newW;
            this.h = newH;
            return this;
        }
    }

    var __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var FontWeight;
    (function (FontWeight) {
        FontWeight["NORMAL"] = "normal";
        FontWeight["BOLD"] = "bold";
    })(FontWeight || (FontWeight = {}));
    var FontStyle;
    (function (FontStyle) {
        FontStyle["NORMAL"] = "normal";
        FontStyle["ITALIC"] = "italic";
    })(FontStyle || (FontStyle = {}));
    let fontParser;
    class Font {
        static convertSizeToPixelValue(fontSize) {
            var _a;
            if (typeof fontSize === 'number') {
                return fontSize * Font.scaleToPxFrom.pt;
            }
            else {
                const value = parseFloat(fontSize);
                if (isNaN(value)) {
                    return 0;
                }
                const unit = fontSize.replace(/[\d.\s]/g, '').toLowerCase();
                const conversionFactor = (_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1;
                return value * conversionFactor;
            }
        }
        static convertSizeToPointValue(fontSize) {
            var _a;
            if (typeof fontSize === 'number') {
                return fontSize;
            }
            else {
                const value = parseFloat(fontSize);
                if (isNaN(value)) {
                    return 0;
                }
                const unit = fontSize.replace(/[\d.\s]/g, '').toLowerCase();
                const conversionFactor = ((_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1) / Font.scaleToPxFrom.pt;
                return value * conversionFactor;
            }
        }
        static validate(f, size, weight, style) {
            if (typeof f === 'string' && size === undefined && weight === undefined && style === undefined) {
                return Font.fromCSSString(f);
            }
            let family;
            if (typeof f === 'object') {
                family = f.family;
                size = f.size;
                weight = f.weight;
                style = f.style;
            }
            else {
                family = f;
            }
            family = family !== null && family !== void 0 ? family : Metrics.get('fontFamily');
            size = size !== null && size !== void 0 ? size : Metrics.get('fontSize') + 'pt';
            weight = weight !== null && weight !== void 0 ? weight : FontWeight.NORMAL;
            style = style !== null && style !== void 0 ? style : FontStyle.NORMAL;
            if (weight === '') {
                weight = FontWeight.NORMAL;
            }
            if (style === '') {
                style = FontStyle.NORMAL;
            }
            if (typeof size === 'number') {
                size = `${size}pt`;
            }
            if (typeof weight === 'number') {
                weight = weight.toString();
            }
            return { family, size, weight, style };
        }
        static fromCSSString(cssFontShorthand) {
            if (!fontParser) {
                fontParser = document.createElement('span');
            }
            fontParser.style.font = cssFontShorthand;
            const { fontFamily, fontSize, fontWeight, fontStyle } = fontParser.style;
            return { family: fontFamily, size: fontSize, weight: fontWeight, style: fontStyle };
        }
        static toCSSString(fontInfo) {
            var _a;
            if (!fontInfo) {
                return '';
            }
            let style;
            const st = fontInfo.style;
            if (st === FontStyle.NORMAL || st === '' || st === undefined) {
                style = '';
            }
            else {
                style = st.trim() + ' ';
            }
            let weight;
            const wt = fontInfo.weight;
            if (wt === FontWeight.NORMAL || wt === '' || wt === undefined) {
                weight = '';
            }
            else if (typeof wt === 'number') {
                weight = wt + ' ';
            }
            else {
                weight = wt.trim() + ' ';
            }
            let size;
            const sz = fontInfo.size;
            if (sz === undefined) {
                size = Metrics.get('fontSize') + 'pt';
            }
            else if (typeof sz === 'number') {
                size = sz + 'pt ';
            }
            else {
                size = sz.trim() + ' ';
            }
            const family = (_a = fontInfo.family) !== null && _a !== void 0 ? _a : Metrics.get('fontFamily');
            return `${style}${weight}${size}${family}`;
        }
        static scaleSize(fontSize, scaleFactor) {
            if (typeof fontSize === 'number') {
                return (fontSize * scaleFactor);
            }
            else {
                const value = parseFloat(fontSize);
                const unit = fontSize.replace(/[\d.\s]/g, '');
                return `${value * scaleFactor}${unit}`;
            }
        }
        static isBold(weight) {
            if (!weight) {
                return false;
            }
            else if (typeof weight === 'number') {
                return weight >= 600;
            }
            else {
                const parsedWeight = parseInt(weight, 10);
                if (isNaN(parsedWeight)) {
                    return weight.toLowerCase() === 'bold';
                }
                else {
                    return parsedWeight >= 600;
                }
            }
        }
        static isItalic(style) {
            if (!style) {
                return false;
            }
            else {
                return style.toLowerCase() === FontStyle.ITALIC;
            }
        }
        static load(fontName, url, descriptors) {
            return __awaiter$1(this, void 0, void 0, function* () {
                if (typeof FontFace === 'undefined') {
                    return Promise.reject(new Error('FontFace API is not available in this environment. Cannot load fonts.'));
                }
                if (url === undefined) {
                    const files = Font.FILES;
                    if (!(fontName in files)) {
                        return Promise.reject(new Error(`Font ${fontName} not found in Font.FILES`));
                    }
                    url = Font.HOST_URL + files[fontName];
                }
                const fontFace = new FontFace(fontName, `url(${url})`, descriptors);
                const fontFaceLoadPromise = fontFace.load();
                let fontFaceSet;
                if (typeof document !== 'undefined') {
                    fontFaceSet = document.fonts;
                }
                else if (typeof self !== 'undefined' && 'fonts' in self) {
                    fontFaceSet = self.fonts;
                }
                fontFaceSet === null || fontFaceSet === void 0 ? void 0 : fontFaceSet.add(fontFace);
                return fontFaceLoadPromise;
            });
        }
        static getURLForFont(fontName) {
            const files = Font.FILES;
            if (!(fontName in files)) {
                return undefined;
            }
            return Font.HOST_URL + files[fontName];
        }
    }
    Font.scaleToPxFrom = {
        pt: 4 / 3,
        px: 1,
        em: 16,
        '%': 4 / 25,
        in: 96,
        mm: 96 / 25.4,
        cm: 96 / 2.54,
    };
    Font.HOST_URL = 'https://cdn.jsdelivr.net/npm/@vexflow-fonts/';
    Font.FILES = {
        Academico: 'academico/academico.woff2',
        Bravura: 'bravura/bravura.woff2',
        'Bravura Text': 'bravuratext/bravuratext.woff2',
        Edwin: 'edwin/edwin-roman.woff2',
        'Finale Ash': 'finaleash/finaleash.woff2',
        'Finale Ash Text': 'finaleashtext/finaleashtext.woff2',
        'Finale Broadway': 'finalebroadway/finalebroadway.woff2',
        'Finale Broadway Text': 'finalebroadwaytext/finalebroadwaytext.woff2',
        'Finale Jazz': 'finalejazz/finalejazz.woff2',
        'Finale Jazz Text': 'finalejazztext/finalejazztext.woff2',
        'Finale Maestro': 'finalemaestro/finalemaestro.woff2',
        'Finale Maestro Text': 'finalemaestrotext/finalemaestrotext-regular.woff2',
        Gonville: 'gonville/gonville.woff2',
        Gootville: 'gootville/gootville.woff2',
        'Gootville Text': 'gootvilletext/gootvilletext.woff2',
        Leipzig: 'leipzig/leipzig.woff2',
        Leland: 'leland/leland.woff2',
        'Leland Text': 'lelandtext/lelandtext.woff2',
        MuseJazz: 'musejazz/musejazz.woff2',
        'MuseJazz Text': 'musejazztext/musejazztext.woff2',
        Nepomuk: 'nepomuk/nepomuk.woff2',
        Petaluma: 'petaluma/petaluma.woff2',
        'Petaluma Script': 'petalumascript/petalumascript.woff2',
        'Petaluma Text': 'petalumatext/petalumatext.woff2',
        'Roboto Slab': 'robotoslab/robotoslab-regular-400.woff2',
        Sebastian: 'sebastian/sebastian.woff2',
        'Sebastian Text': 'sebastiantext/sebastiantext.woff2',
    };

    class Index {
        constructor() {
            this.id = {};
            this.type = {};
            this.class = {};
        }
    }
    class Registry {
        static getDefaultRegistry() {
            return Registry.defaultRegistry;
        }
        static enableDefaultRegistry(registry) {
            Registry.defaultRegistry = registry;
        }
        static disableDefaultRegistry() {
            Registry.defaultRegistry = undefined;
        }
        constructor() {
            this.index = new Index();
        }
        clear() {
            this.index = new Index();
            return this;
        }
        setIndexValue(name, value, id, elem) {
            const index = this.index;
            if (!index[name][value]) {
                index[name][value] = {};
            }
            index[name][value][id] = elem;
        }
        updateIndex({ id, name, value, oldValue }) {
            const elem = this.getElementById(id);
            if (oldValue !== undefined && this.index[name][oldValue]) {
                delete this.index[name][oldValue][id];
            }
            if (value && elem) {
                this.setIndexValue(name, value, elem.getAttribute('id'), elem);
            }
        }
        register(elem, id) {
            id = id || elem.getAttribute('id');
            if (!id) {
                throw new RuntimeError("Can't add element without `id` attribute to registry");
            }
            elem.setAttribute('id', id);
            this.setIndexValue('id', id, id, elem);
            this.updateIndex({ id, name: 'type', value: elem.getAttribute('type'), oldValue: undefined });
            elem.onRegister(this);
            return this;
        }
        getElementById(id) {
            var _a, _b;
            return (_b = (_a = this.index.id) === null || _a === void 0 ? void 0 : _a[id]) === null || _b === void 0 ? void 0 : _b[id];
        }
        getElementsByAttribute(attribute, value) {
            const indexAttr = this.index[attribute];
            if (indexAttr) {
                const indexAttrVal = indexAttr[value];
                if (indexAttrVal) {
                    const keys = Object.keys(indexAttrVal);
                    return keys.map((k) => indexAttrVal[k]);
                }
            }
            return [];
        }
        getElementsByType(type) {
            return this.getElementsByAttribute('type', type);
        }
        getElementsByClass(className) {
            return this.getElementsByAttribute('class', className);
        }
        onUpdate(info) {
            const allowedNames = ['id', 'type', 'class'];
            if (allowedNames.includes(info.name)) {
                this.updateIndex(info);
            }
            return this;
        }
    }

    class Element {
        static get CATEGORY() {
            return "Element";
        }
        static newID() {
            return `auto${Element.ID++}`;
        }
        static setTextMeasurementCanvas(canvas) {
            Element.txtCanvas = canvas;
        }
        static getTextMeasurementCanvas() {
            let txtCanvas = Element.txtCanvas;
            if (!txtCanvas) {
                if (typeof document !== 'undefined') {
                    txtCanvas = document.createElement('canvas');
                }
                else if (typeof OffscreenCanvas !== 'undefined') {
                    txtCanvas = new OffscreenCanvas(300, 150);
                }
                Element.txtCanvas = txtCanvas;
            }
            return txtCanvas;
        }
        constructor(category) {
            var _a;
            this.children = [];
            this.style = {};
            this._text = '';
            this.metricsValid = false;
            this._textMetrics = {
                fontBoundingBoxAscent: 0,
                fontBoundingBoxDescent: 0,
                actualBoundingBoxAscent: 0,
                actualBoundingBoxDescent: 0,
                actualBoundingBoxLeft: 0,
                actualBoundingBoxRight: 0,
                width: 0,
                alphabeticBaseline: 0,
                emHeightAscent: 0,
                emHeightDescent: 0,
                hangingBaseline: 0,
                ideographicBaseline: 0,
            };
            this._height = 0;
            this._width = 0;
            this.xShift = 0;
            this.yShift = 0;
            this.x = 0;
            this.y = 0;
            this.attrs = {
                id: Element.newID(),
                type: category !== null && category !== void 0 ? category : this.constructor.CATEGORY,
                class: '',
            };
            this.rendered = false;
            this._fontInfo = Metrics.getFontInfo(this.attrs.type);
            this.style = Metrics.getStyle(this.attrs.type);
            this.fontScale = Metrics.get(`${this.attrs.type}.fontScale`);
            (_a = Registry.getDefaultRegistry()) === null || _a === void 0 ? void 0 : _a.register(this);
        }
        addChild(child) {
            if (child.parent)
                throw new RuntimeError('Element', 'Parent already defined');
            child.parent = this;
            this.children.push(child);
            return this;
        }
        getCategory() {
            return this.attrs.type;
        }
        setStyle(style) {
            this.style = style;
            return this;
        }
        setGroupStyle(style) {
            this.style = style;
            this.children.forEach((child) => child.setGroupStyle(style));
            return this;
        }
        getStyle() {
            return this.style;
        }
        applyStyle(context = this.context, style = this.getStyle()) {
            if (!context)
                return this;
            if (style.shadowColor)
                context.setShadowColor(style.shadowColor);
            if (style.shadowBlur)
                context.setShadowBlur(style.shadowBlur);
            if (style.fillStyle)
                context.setFillStyle(style.fillStyle);
            if (style.strokeStyle)
                context.setStrokeStyle(style.strokeStyle);
            if (style.lineWidth)
                context.setLineWidth(style.lineWidth);
            if (style.lineDash)
                context.setLineDash(style.lineDash.split(' ').map(Number));
            return this;
        }
        drawWithStyle() {
            const ctx = this.checkContext();
            ctx.save();
            this.applyStyle(ctx);
            this.draw();
            ctx.restore();
            return this;
        }
        draw() {
            throw new RuntimeError('Element', 'Draw not defined');
        }
        hasClass(className) {
            var _a;
            if (!this.attrs.class)
                return false;
            return ((_a = this.attrs.class) === null || _a === void 0 ? void 0 : _a.split(' ').indexOf(className)) !== -1;
        }
        addClass(className) {
            var _a;
            if (this.hasClass(className))
                return this;
            if (!this.attrs.class)
                this.attrs.class = `${className}`;
            else
                this.attrs.class = `${this.attrs.class} ${className}`;
            (_a = this.registry) === null || _a === void 0 ? void 0 : _a.onUpdate({
                id: this.attrs.id,
                name: 'class',
                value: className,
                oldValue: undefined,
            });
            return this;
        }
        removeClass(className) {
            var _a, _b;
            if (!this.hasClass(className))
                return this;
            const arr = (_a = this.attrs.class) === null || _a === void 0 ? void 0 : _a.split(' ');
            if (arr) {
                arr.splice(arr.indexOf(className));
                this.attrs.class = arr.join(' ');
            }
            (_b = this.registry) === null || _b === void 0 ? void 0 : _b.onUpdate({
                id: this.attrs.id,
                name: 'class',
                value: undefined,
                oldValue: className,
            });
            return this;
        }
        onRegister(registry) {
            this.registry = registry;
            return this;
        }
        isRendered() {
            return this.rendered;
        }
        setRendered(rendered = true) {
            this.rendered = rendered;
            return this;
        }
        getAttributes() {
            return this.attrs;
        }
        getAttribute(name) {
            return this.attrs[name];
        }
        getSVGElement(suffix = '') {
            const id = prefix(this.attrs.id + suffix);
            const element = document.getElementById(id);
            if (element)
                return element;
        }
        setAttribute(name, value) {
            var _a;
            const oldID = this.attrs.id;
            const oldValue = this.attrs[name];
            this.attrs[name] = value;
            (_a = this.registry) === null || _a === void 0 ? void 0 : _a.onUpdate({ id: oldID, name, value, oldValue });
            return this;
        }
        getBoundingBox() {
            return new BoundingBox(this.x + this.xShift, this.y + this.yShift - this.textMetrics.actualBoundingBoxAscent, this.width, this.height);
        }
        getContext() {
            return this.context;
        }
        setContext(context) {
            this.context = context;
            return this;
        }
        checkContext() {
            return defined(this.context, 'NoContext', 'No rendering context attached to instance.');
        }
        set font(f) {
            this.setFont(f);
        }
        get font() {
            return Font.toCSSString(this._fontInfo);
        }
        setFont(font, size, weight, style) {
            const defaultTextFont = Metrics.getFontInfo(this.attrs.type);
            const fontIsObject = typeof font === 'object';
            const fontIsString = typeof font === 'string';
            const sizeWeightStyleAreUndefined = size === undefined && weight === undefined && style === undefined;
            this.metricsValid = false;
            if (fontIsObject) {
                this._fontInfo = Object.assign(Object.assign({}, defaultTextFont), font);
            }
            else if (fontIsString && sizeWeightStyleAreUndefined) {
                this._fontInfo = Font.fromCSSString(font);
            }
            else {
                this._fontInfo = Font.validate(font !== null && font !== void 0 ? font : defaultTextFont.family, size !== null && size !== void 0 ? size : defaultTextFont.size, weight !== null && weight !== void 0 ? weight : defaultTextFont.weight, style !== null && style !== void 0 ? style : defaultTextFont.style);
            }
            return this;
        }
        getFont() {
            return Font.toCSSString(this._fontInfo);
        }
        get fontInfo() {
            return this._fontInfo;
        }
        set fontInfo(fontInfo) {
            this.setFont(fontInfo);
        }
        setFontSize(size) {
            const fontInfo = this.fontInfo;
            this.setFont(fontInfo.family, size, fontInfo.weight, fontInfo.style);
            return this;
        }
        getFontSize() {
            return this.fontSize;
        }
        getFontScale() {
            return this.fontScale;
        }
        set fontSize(size) {
            this.setFontSize(size);
        }
        get fontSize() {
            let size = this.fontInfo.size;
            if (typeof size === 'number') {
                size = `${size}pt`;
            }
            return size;
        }
        get fontSizeInPoints() {
            return Font.convertSizeToPointValue(this.fontSize);
        }
        get fontSizeInPixels() {
            return Font.convertSizeToPixelValue(this.fontSize);
        }
        get fontStyle() {
            return this.fontInfo.style;
        }
        set fontStyle(style) {
            const fontInfo = this.fontInfo;
            this.setFont(fontInfo.family, fontInfo.size, fontInfo.weight, style);
        }
        get fontWeight() {
            return this.fontInfo.weight + '';
        }
        set fontWeight(weight) {
            const fontInfo = this.fontInfo;
            this.setFont(fontInfo.family, fontInfo.size, weight, fontInfo.style);
        }
        getWidth() {
            return this.width;
        }
        get width() {
            if (!this.metricsValid)
                this.measureText();
            return this._width;
        }
        setWidth(width) {
            this.width = width;
            return this;
        }
        set width(width) {
            if (!this.metricsValid)
                this.measureText();
            this._width = width;
        }
        setX(x) {
            this.x = x;
            return this;
        }
        getX() {
            return this.x;
        }
        getY() {
            return this.y;
        }
        setY(y) {
            this.y = y;
            return this;
        }
        setYShift(yShift) {
            this.yShift = yShift;
            return this;
        }
        getYShift() {
            return this.yShift;
        }
        setXShift(xShift) {
            this.xShift = xShift;
            return this;
        }
        getXShift() {
            return this.xShift;
        }
        setText(text) {
            this.text = text;
            return this;
        }
        set text(text) {
            this.metricsValid = false;
            this._text = text;
        }
        getText() {
            return this._text;
        }
        get text() {
            return this._text;
        }
        renderText(ctx, xPos, yPos) {
            ctx.setFont(this._fontInfo);
            ctx.fillText(this._text, xPos + this.x + this.xShift, yPos + this.y + this.yShift);
            this.children.forEach((child) => {
                ctx.setFont(child.fontInfo);
                ctx.fillText(child.text, xPos + child.x + child.xShift, yPos + child.y + child.yShift);
            });
        }
        measureText() {
            var _a;
            const context = (_a = Element.getTextMeasurementCanvas()) === null || _a === void 0 ? void 0 : _a.getContext('2d');
            if (!context) {
                console.warn('Element: No context for txtCanvas. Returning empty text metrics.');
                return this._textMetrics;
            }
            context.font = Font.toCSSString(Font.validate(this.fontInfo));
            this._textMetrics = context.measureText(this.text);
            this._height = this._textMetrics.actualBoundingBoxAscent + this._textMetrics.actualBoundingBoxDescent;
            this._width = this._textMetrics.width;
            this.metricsValid = true;
            return this._textMetrics;
        }
        static measureWidth(text, key = '') {
            var _a;
            const context = (_a = Element.getTextMeasurementCanvas()) === null || _a === void 0 ? void 0 : _a.getContext('2d');
            if (!context) {
                console.warn('Element: No context for txtCanvas. Returning empty text metrics.');
                return 0;
            }
            context.font = Font.toCSSString(Metrics.getFontInfo(key));
            return context.measureText(text).width;
        }
        getTextMetrics() {
            return this.textMetrics;
        }
        get textMetrics() {
            if (!this.metricsValid)
                this.measureText();
            return this._textMetrics;
        }
        getHeight() {
            return this.height;
        }
        get height() {
            if (!this.metricsValid)
                this.measureText();
            return this._height;
        }
        set height(height) {
            if (!this.metricsValid)
                this.measureText();
            this._height = height;
        }
        setOriginX(x) {
            const bbox = this.getBoundingBox();
            const originX = Math.abs((bbox.getX() - this.xShift) / bbox.getW());
            const xShift = (x - originX) * bbox.getW();
            this.xShift = -xShift;
        }
        setOriginY(y) {
            const bbox = this.getBoundingBox();
            const originY = Math.abs((bbox.getY() - this.yShift) / bbox.getH());
            const yShift = (y - originY) * bbox.getH();
            this.yShift = -yShift;
        }
        setOrigin(x, y) {
            this.setOriginX(x);
            this.setOriginY(y);
        }
    }
    Element.ID = 1000;

    var ModifierPosition;
    (function (ModifierPosition) {
        ModifierPosition[ModifierPosition["CENTER"] = 0] = "CENTER";
        ModifierPosition[ModifierPosition["LEFT"] = 1] = "LEFT";
        ModifierPosition[ModifierPosition["RIGHT"] = 2] = "RIGHT";
        ModifierPosition[ModifierPosition["ABOVE"] = 3] = "ABOVE";
        ModifierPosition[ModifierPosition["BELOW"] = 4] = "BELOW";
    })(ModifierPosition || (ModifierPosition = {}));
    let Modifier$1 = class Modifier extends Element {
        static get CATEGORY() {
            return "Modifier";
        }
        static get Position() {
            return ModifierPosition;
        }
        static get PositionString() {
            return {
                center: ModifierPosition.CENTER,
                above: ModifierPosition.ABOVE,
                below: ModifierPosition.BELOW,
                left: ModifierPosition.LEFT,
                right: ModifierPosition.RIGHT,
            };
        }
        constructor() {
            super();
            this.width = 0;
            this.textLine = 0;
            this.position = Modifier.Position.LEFT;
            this.spacingFromNextModifier = 0;
        }
        reset() {
        }
        getNote() {
            return defined(this.note, 'NoNote', 'Modifier has no note.');
        }
        checkAttachedNote() {
            const category = this.getCategory();
            defined(this.index, 'NoIndex', `Can't draw ${category} without an index.`);
            return defined(this.note, 'NoNote', `Can't draw ${category} without a note.`);
        }
        setNote(note) {
            this.note = note;
            return this;
        }
        getIndex() {
            return this.index;
        }
        checkIndex() {
            return defined(this.index, 'NoIndex', 'Modifier has an invalid index.');
        }
        setIndex(index) {
            this.index = index;
            return this;
        }
        getModifierContext() {
            return this.modifierContext;
        }
        checkModifierContext() {
            return defined(this.modifierContext, 'NoModifierContext', 'Modifier Context Required');
        }
        setModifierContext(c) {
            this.modifierContext = c;
            return this;
        }
        getPosition() {
            return this.position;
        }
        setPosition(position) {
            this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;
            this.reset();
            return this;
        }
        setTextLine(line) {
            this.textLine = line;
            return this;
        }
        setYShift(y) {
            this.yShift = y;
            return this;
        }
        setSpacingFromNextModifier(x) {
            this.spacingFromNextModifier = x;
        }
        getSpacingFromNextModifier() {
            return this.spacingFromNextModifier;
        }
        setXShift(x) {
            this.xShift = 0;
            if (this.position === Modifier.Position.LEFT) {
                this.xShift -= x;
            }
            else {
                this.xShift += x;
            }
            return this;
        }
        getXShift() {
            return this.xShift;
        }
        draw() {
            this.checkContext();
            throw new RuntimeError('NotImplemented', 'draw() not implemented for this modifier.');
        }
        alignSubNotesWithNote(subNotes, note, position = Modifier.Position.LEFT) {
            const tickContext = note.getTickContext();
            const metrics = tickContext.getMetrics();
            const stave = note.getStave();
            const subNoteXOffset = position === Modifier.Position.RIGHT
                ? tickContext.getX() + this.getSpacingFromNextModifier() * subNotes.length + 10
                : tickContext.getX() - metrics.modLeftPx - metrics.modRightPx + this.getSpacingFromNextModifier();
            subNotes.forEach((subNote) => {
                const subTickContext = subNote.getTickContext();
                if (stave)
                    subNote.setStave(stave);
                subTickContext.setXOffset(subNoteXOffset);
            });
        }
    };

    class Music {
        static get NUM_TONES() {
            return this.canonicalNotes.length;
        }
        static get roots() {
            return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];
        }
        static get rootValues() {
            return [0, 2, 4, 5, 7, 9, 11];
        }
        static get rootIndexes() {
            return {
                c: 0,
                d: 1,
                e: 2,
                f: 3,
                g: 4,
                a: 5,
                b: 6,
            };
        }
        static get canonicalNotes() {
            return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];
        }
        static get diatonicIntervals() {
            return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];
        }
        static get diatonicAccidentals() {
            return {
                unison: { note: 0, accidental: 0 },
                m2: { note: 1, accidental: -1 },
                M2: { note: 1, accidental: 0 },
                m3: { note: 2, accidental: -1 },
                M3: { note: 2, accidental: 0 },
                p4: { note: 3, accidental: 0 },
                dim5: { note: 4, accidental: -1 },
                p5: { note: 4, accidental: 0 },
                m6: { note: 5, accidental: -1 },
                M6: { note: 5, accidental: 0 },
                b7: { note: 6, accidental: -1 },
                M7: { note: 6, accidental: 0 },
                octave: { note: 7, accidental: 0 },
            };
        }
        static get intervals() {
            return {
                u: 0,
                unison: 0,
                m2: 1,
                b2: 1,
                min2: 1,
                S: 1,
                H: 1,
                2: 2,
                M2: 2,
                maj2: 2,
                T: 2,
                W: 2,
                m3: 3,
                b3: 3,
                min3: 3,
                M3: 4,
                3: 4,
                maj3: 4,
                4: 5,
                p4: 5,
                '#4': 6,
                b5: 6,
                aug4: 6,
                dim5: 6,
                5: 7,
                p5: 7,
                '#5': 8,
                b6: 8,
                aug5: 8,
                6: 9,
                M6: 9,
                maj6: 9,
                b7: 10,
                m7: 10,
                min7: 10,
                dom7: 10,
                M7: 11,
                maj7: 11,
                8: 12,
                octave: 12,
            };
        }
        static get scales() {
            return {
                major: [2, 2, 1, 2, 2, 2, 1],
                minor: [2, 1, 2, 2, 1, 2, 2],
                ionian: [2, 2, 1, 2, 2, 2, 1],
                dorian: [2, 1, 2, 2, 2, 1, 2],
                phyrgian: [1, 2, 2, 2, 1, 2, 2],
                lydian: [2, 2, 2, 1, 2, 2, 1],
                mixolydian: [2, 2, 1, 2, 2, 1, 2],
                aeolian: [2, 1, 2, 2, 1, 2, 2],
                locrian: [1, 2, 2, 1, 2, 2, 2],
            };
        }
        static get scaleTypes() {
            return {
                M: Music.scales.major,
                m: Music.scales.minor,
            };
        }
        static get accidentals() {
            return ['bb', 'b', 'n', '#', '##'];
        }
        static get noteValues() {
            return {
                c: { rootIndex: 0, intVal: 0 },
                cn: { rootIndex: 0, intVal: 0 },
                'c#': { rootIndex: 0, intVal: 1 },
                'c##': { rootIndex: 0, intVal: 2 },
                cb: { rootIndex: 0, intVal: 11 },
                cbb: { rootIndex: 0, intVal: 10 },
                d: { rootIndex: 1, intVal: 2 },
                dn: { rootIndex: 1, intVal: 2 },
                'd#': { rootIndex: 1, intVal: 3 },
                'd##': { rootIndex: 1, intVal: 4 },
                db: { rootIndex: 1, intVal: 1 },
                dbb: { rootIndex: 1, intVal: 0 },
                e: { rootIndex: 2, intVal: 4 },
                en: { rootIndex: 2, intVal: 4 },
                'e#': { rootIndex: 2, intVal: 5 },
                'e##': { rootIndex: 2, intVal: 6 },
                eb: { rootIndex: 2, intVal: 3 },
                ebb: { rootIndex: 2, intVal: 2 },
                f: { rootIndex: 3, intVal: 5 },
                fn: { rootIndex: 3, intVal: 5 },
                'f#': { rootIndex: 3, intVal: 6 },
                'f##': { rootIndex: 3, intVal: 7 },
                fb: { rootIndex: 3, intVal: 4 },
                fbb: { rootIndex: 3, intVal: 3 },
                g: { rootIndex: 4, intVal: 7 },
                gn: { rootIndex: 4, intVal: 7 },
                'g#': { rootIndex: 4, intVal: 8 },
                'g##': { rootIndex: 4, intVal: 9 },
                gb: { rootIndex: 4, intVal: 6 },
                gbb: { rootIndex: 4, intVal: 5 },
                a: { rootIndex: 5, intVal: 9 },
                an: { rootIndex: 5, intVal: 9 },
                'a#': { rootIndex: 5, intVal: 10 },
                'a##': { rootIndex: 5, intVal: 11 },
                ab: { rootIndex: 5, intVal: 8 },
                abb: { rootIndex: 5, intVal: 7 },
                b: { rootIndex: 6, intVal: 11 },
                bn: { rootIndex: 6, intVal: 11 },
                'b#': { rootIndex: 6, intVal: 0 },
                'b##': { rootIndex: 6, intVal: 1 },
                bb: { rootIndex: 6, intVal: 10 },
                bbb: { rootIndex: 6, intVal: 9 },
            };
        }
        isValidNoteValue(note) {
            return note >= 0 && note < Music.canonicalNotes.length;
        }
        isValidIntervalValue(interval) {
            return interval >= 0 && interval < Music.diatonicIntervals.length;
        }
        getNoteParts(noteString) {
            if (!noteString || noteString.length < 1) {
                throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);
            }
            if (noteString.length > 3) {
                throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);
            }
            const note = noteString.toLowerCase();
            const regex = /^([cdefgab])(b|bb|n|#|##)?$/;
            const match = regex.exec(note);
            if (match !== null) {
                const root = match[1];
                const accidental = match[2];
                return {
                    root,
                    accidental,
                };
            }
            else {
                throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);
            }
        }
        getKeyParts(keyString) {
            if (!keyString || keyString.length < 1) {
                throw new RuntimeError('BadArguments', 'Invalid key: ' + keyString);
            }
            const key = keyString.toLowerCase();
            const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;
            const match = regex.exec(key);
            if (match !== null) {
                const root = match[1];
                const accidental = match[2];
                let type = match[3];
                if (!type)
                    type = 'M';
                return {
                    root,
                    accidental,
                    type,
                };
            }
            else {
                throw new RuntimeError('BadArguments', `Invalid key: ${keyString}`);
            }
        }
        getNoteValue(noteString) {
            const value = Music.noteValues[noteString];
            if (value === undefined) {
                throw new RuntimeError('BadArguments', `Invalid note name: ${noteString}`);
            }
            return value.intVal;
        }
        getIntervalValue(intervalString) {
            const value = Music.intervals[intervalString];
            if (value === undefined) {
                throw new RuntimeError('BadArguments', `Invalid interval name: ${intervalString}`);
            }
            return value;
        }
        getCanonicalNoteName(noteValue) {
            if (!this.isValidNoteValue(noteValue)) {
                throw new RuntimeError('BadArguments', `Invalid note value: ${noteValue}`);
            }
            return Music.canonicalNotes[noteValue];
        }
        getCanonicalIntervalName(intervalValue) {
            if (!this.isValidIntervalValue(intervalValue)) {
                throw new RuntimeError('BadArguments', `Invalid interval value: ${intervalValue}`);
            }
            return Music.diatonicIntervals[intervalValue];
        }
        getRelativeNoteValue(noteValue, intervalValue, direction = 1) {
            if (direction !== 1 && direction !== -1) {
                throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);
            }
            let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;
            if (sum < 0)
                sum += Music.NUM_TONES;
            return sum;
        }
        getRelativeNoteName(root, noteValue) {
            const parts = this.getNoteParts(root);
            const rootValue = this.getNoteValue(parts.root);
            let interval = noteValue - rootValue;
            if (Math.abs(interval) > Music.NUM_TONES - 3) {
                let multiplier = 1;
                if (interval > 0)
                    multiplier = -1;
                const reverseInterval = ((noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES) * multiplier;
                if (Math.abs(reverseInterval) > 2) {
                    throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);
                }
                else {
                    interval = reverseInterval;
                }
            }
            if (Math.abs(interval) > 2) {
                throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);
            }
            let relativeNoteName = parts.root;
            if (interval > 0) {
                for (let i = 1; i <= interval; ++i) {
                    relativeNoteName += '#';
                }
            }
            else if (interval < 0) {
                for (let i = -1; i >= interval; --i) {
                    relativeNoteName += 'b';
                }
            }
            return relativeNoteName;
        }
        getScaleTones(key, intervals) {
            const tones = [key];
            let nextNote = key;
            for (let i = 0; i < intervals.length; i++) {
                nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);
                if (nextNote !== key)
                    tones.push(nextNote);
            }
            return tones;
        }
        getIntervalBetween(note1, note2, direction = 1) {
            if (direction !== 1 && direction !== -1) {
                throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);
            }
            if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {
                throw new RuntimeError('BadArguments', `Invalid notes: ${note1}, ${note2}`);
            }
            let difference = direction === 1 ? note2 - note1 : note1 - note2;
            if (difference < 0)
                difference += Music.NUM_TONES;
            return difference;
        }
        createScaleMap(keySignature) {
            const keySigParts = this.getKeyParts(keySignature);
            if (!keySigParts.type)
                throw new RuntimeError('BadArguments', 'Unsupported key type: undefined');
            const scaleName = Music.scaleTypes[keySigParts.type];
            let keySigString = keySigParts.root;
            if (keySigParts.accidental)
                keySigString += keySigParts.accidental;
            if (!scaleName)
                throw new RuntimeError('BadArguments', 'Unsupported key type: ' + keySignature);
            const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);
            const noteLocation = Music.rootIndexes[keySigParts.root];
            const scaleMap = {};
            for (let i = 0; i < Music.roots.length; ++i) {
                const index = (noteLocation + i) % Music.roots.length;
                const rootName = Music.roots[index];
                let noteName = this.getRelativeNoteName(rootName, scale[i]);
                if (noteName.length === 1) {
                    noteName += 'n';
                }
                scaleMap[rootName] = noteName;
            }
            return scaleMap;
        }
    }

    var Glyphs;
    (function (Glyphs) {
        Glyphs["null"] = "\0";
        Glyphs["fourStringTabClef"] = "\uE06E";
        Glyphs["sixStringTabClef"] = "\uE06D";
        Glyphs["accSagittal11LargeDiesisDown"] = "\uE30D";
        Glyphs["accSagittal11LargeDiesisUp"] = "\uE30C";
        Glyphs["accSagittal11MediumDiesisDown"] = "\uE30B";
        Glyphs["accSagittal11MediumDiesisUp"] = "\uE30A";
        Glyphs["accSagittal11v19LargeDiesisDown"] = "\uE3AB";
        Glyphs["accSagittal11v19LargeDiesisUp"] = "\uE3AA";
        Glyphs["accSagittal11v19MediumDiesisDown"] = "\uE3A3";
        Glyphs["accSagittal11v19MediumDiesisUp"] = "\uE3A2";
        Glyphs["accSagittal11v49CommaDown"] = "\uE397";
        Glyphs["accSagittal11v49CommaUp"] = "\uE396";
        Glyphs["accSagittal143CommaDown"] = "\uE395";
        Glyphs["accSagittal143CommaUp"] = "\uE394";
        Glyphs["accSagittal17CommaDown"] = "\uE343";
        Glyphs["accSagittal17CommaUp"] = "\uE342";
        Glyphs["accSagittal17KleismaDown"] = "\uE393";
        Glyphs["accSagittal17KleismaUp"] = "\uE392";
        Glyphs["accSagittal19CommaDown"] = "\uE399";
        Glyphs["accSagittal19CommaUp"] = "\uE398";
        Glyphs["accSagittal19SchismaDown"] = "\uE391";
        Glyphs["accSagittal19SchismaUp"] = "\uE390";
        Glyphs["accSagittal1MinaDown"] = "\uE3F5";
        Glyphs["accSagittal1MinaUp"] = "\uE3F4";
        Glyphs["accSagittal1TinaDown"] = "\uE3F9";
        Glyphs["accSagittal1TinaUp"] = "\uE3F8";
        Glyphs["accSagittal23CommaDown"] = "\uE371";
        Glyphs["accSagittal23CommaUp"] = "\uE370";
        Glyphs["accSagittal23SmallDiesisDown"] = "\uE39F";
        Glyphs["accSagittal23SmallDiesisUp"] = "\uE39E";
        Glyphs["accSagittal25SmallDiesisDown"] = "\uE307";
        Glyphs["accSagittal25SmallDiesisUp"] = "\uE306";
        Glyphs["accSagittal2MinasDown"] = "\uE3F7";
        Glyphs["accSagittal2MinasUp"] = "\uE3F6";
        Glyphs["accSagittal2TinasDown"] = "\uE3FB";
        Glyphs["accSagittal2TinasUp"] = "\uE3FA";
        Glyphs["accSagittal35LargeDiesisDown"] = "\uE30F";
        Glyphs["accSagittal35LargeDiesisUp"] = "\uE30E";
        Glyphs["accSagittal35MediumDiesisDown"] = "\uE309";
        Glyphs["accSagittal35MediumDiesisUp"] = "\uE308";
        Glyphs["accSagittal3TinasDown"] = "\uE3FD";
        Glyphs["accSagittal3TinasUp"] = "\uE3FC";
        Glyphs["accSagittal49LargeDiesisDown"] = "\uE3A9";
        Glyphs["accSagittal49LargeDiesisUp"] = "\uE3A8";
        Glyphs["accSagittal49MediumDiesisDown"] = "\uE3A5";
        Glyphs["accSagittal49MediumDiesisUp"] = "\uE3A4";
        Glyphs["accSagittal49SmallDiesisDown"] = "\uE39D";
        Glyphs["accSagittal49SmallDiesisUp"] = "\uE39C";
        Glyphs["accSagittal4TinasDown"] = "\uE3FF";
        Glyphs["accSagittal4TinasUp"] = "\uE3FE";
        Glyphs["accSagittal55CommaDown"] = "\uE345";
        Glyphs["accSagittal55CommaUp"] = "\uE344";
        Glyphs["accSagittal5CommaDown"] = "\uE303";
        Glyphs["accSagittal5CommaUp"] = "\uE302";
        Glyphs["accSagittal5TinasDown"] = "\uE401";
        Glyphs["accSagittal5TinasUp"] = "\uE400";
        Glyphs["accSagittal5v11SmallDiesisDown"] = "\uE349";
        Glyphs["accSagittal5v11SmallDiesisUp"] = "\uE348";
        Glyphs["accSagittal5v13LargeDiesisDown"] = "\uE3AD";
        Glyphs["accSagittal5v13LargeDiesisUp"] = "\uE3AC";
        Glyphs["accSagittal5v13MediumDiesisDown"] = "\uE3A1";
        Glyphs["accSagittal5v13MediumDiesisUp"] = "\uE3A0";
        Glyphs["accSagittal5v19CommaDown"] = "\uE373";
        Glyphs["accSagittal5v19CommaUp"] = "\uE372";
        Glyphs["accSagittal5v23SmallDiesisDown"] = "\uE375";
        Glyphs["accSagittal5v23SmallDiesisUp"] = "\uE374";
        Glyphs["accSagittal5v49MediumDiesisDown"] = "\uE3A7";
        Glyphs["accSagittal5v49MediumDiesisUp"] = "\uE3A6";
        Glyphs["accSagittal5v7KleismaDown"] = "\uE301";
        Glyphs["accSagittal5v7KleismaUp"] = "\uE300";
        Glyphs["accSagittal6TinasDown"] = "\uE403";
        Glyphs["accSagittal6TinasUp"] = "\uE402";
        Glyphs["accSagittal7CommaDown"] = "\uE305";
        Glyphs["accSagittal7CommaUp"] = "\uE304";
        Glyphs["accSagittal7TinasDown"] = "\uE405";
        Glyphs["accSagittal7TinasUp"] = "\uE404";
        Glyphs["accSagittal7v11CommaDown"] = "\uE347";
        Glyphs["accSagittal7v11CommaUp"] = "\uE346";
        Glyphs["accSagittal7v11KleismaDown"] = "\uE341";
        Glyphs["accSagittal7v11KleismaUp"] = "\uE340";
        Glyphs["accSagittal7v19CommaDown"] = "\uE39B";
        Glyphs["accSagittal7v19CommaUp"] = "\uE39A";
        Glyphs["accSagittal8TinasDown"] = "\uE407";
        Glyphs["accSagittal8TinasUp"] = "\uE406";
        Glyphs["accSagittal9TinasDown"] = "\uE409";
        Glyphs["accSagittal9TinasUp"] = "\uE408";
        Glyphs["accSagittalAcute"] = "\uE3F2";
        Glyphs["accSagittalDoubleFlat"] = "\uE335";
        Glyphs["accSagittalDoubleFlat11v49CUp"] = "\uE3E9";
        Glyphs["accSagittalDoubleFlat143CUp"] = "\uE3EB";
        Glyphs["accSagittalDoubleFlat17CUp"] = "\uE365";
        Glyphs["accSagittalDoubleFlat17kUp"] = "\uE3ED";
        Glyphs["accSagittalDoubleFlat19CUp"] = "\uE3E7";
        Glyphs["accSagittalDoubleFlat19sUp"] = "\uE3EF";
        Glyphs["accSagittalDoubleFlat23CUp"] = "\uE387";
        Glyphs["accSagittalDoubleFlat23SUp"] = "\uE3E1";
        Glyphs["accSagittalDoubleFlat25SUp"] = "\uE32D";
        Glyphs["accSagittalDoubleFlat49SUp"] = "\uE3E3";
        Glyphs["accSagittalDoubleFlat55CUp"] = "\uE363";
        Glyphs["accSagittalDoubleFlat5CUp"] = "\uE331";
        Glyphs["accSagittalDoubleFlat5v11SUp"] = "\uE35F";
        Glyphs["accSagittalDoubleFlat5v19CUp"] = "\uE385";
        Glyphs["accSagittalDoubleFlat5v23SUp"] = "\uE383";
        Glyphs["accSagittalDoubleFlat5v7kUp"] = "\uE333";
        Glyphs["accSagittalDoubleFlat7CUp"] = "\uE32F";
        Glyphs["accSagittalDoubleFlat7v11CUp"] = "\uE361";
        Glyphs["accSagittalDoubleFlat7v11kUp"] = "\uE367";
        Glyphs["accSagittalDoubleFlat7v19CUp"] = "\uE3E5";
        Glyphs["accSagittalDoubleSharp"] = "\uE334";
        Glyphs["accSagittalDoubleSharp11v49CDown"] = "\uE3E8";
        Glyphs["accSagittalDoubleSharp143CDown"] = "\uE3EA";
        Glyphs["accSagittalDoubleSharp17CDown"] = "\uE364";
        Glyphs["accSagittalDoubleSharp17kDown"] = "\uE3EC";
        Glyphs["accSagittalDoubleSharp19CDown"] = "\uE3E6";
        Glyphs["accSagittalDoubleSharp19sDown"] = "\uE3EE";
        Glyphs["accSagittalDoubleSharp23CDown"] = "\uE386";
        Glyphs["accSagittalDoubleSharp23SDown"] = "\uE3E0";
        Glyphs["accSagittalDoubleSharp25SDown"] = "\uE32C";
        Glyphs["accSagittalDoubleSharp49SDown"] = "\uE3E2";
        Glyphs["accSagittalDoubleSharp55CDown"] = "\uE362";
        Glyphs["accSagittalDoubleSharp5CDown"] = "\uE330";
        Glyphs["accSagittalDoubleSharp5v11SDown"] = "\uE35E";
        Glyphs["accSagittalDoubleSharp5v19CDown"] = "\uE384";
        Glyphs["accSagittalDoubleSharp5v23SDown"] = "\uE382";
        Glyphs["accSagittalDoubleSharp5v7kDown"] = "\uE332";
        Glyphs["accSagittalDoubleSharp7CDown"] = "\uE32E";
        Glyphs["accSagittalDoubleSharp7v11CDown"] = "\uE360";
        Glyphs["accSagittalDoubleSharp7v11kDown"] = "\uE366";
        Glyphs["accSagittalDoubleSharp7v19CDown"] = "\uE3E4";
        Glyphs["accSagittalFlat"] = "\uE319";
        Glyphs["accSagittalFlat11LDown"] = "\uE329";
        Glyphs["accSagittalFlat11MDown"] = "\uE327";
        Glyphs["accSagittalFlat11v19LDown"] = "\uE3DB";
        Glyphs["accSagittalFlat11v19MDown"] = "\uE3D3";
        Glyphs["accSagittalFlat11v49CDown"] = "\uE3C7";
        Glyphs["accSagittalFlat11v49CUp"] = "\uE3B9";
        Glyphs["accSagittalFlat143CDown"] = "\uE3C5";
        Glyphs["accSagittalFlat143CUp"] = "\uE3BB";
        Glyphs["accSagittalFlat17CDown"] = "\uE357";
        Glyphs["accSagittalFlat17CUp"] = "\uE351";
        Glyphs["accSagittalFlat17kDown"] = "\uE3C3";
        Glyphs["accSagittalFlat17kUp"] = "\uE3BD";
        Glyphs["accSagittalFlat19CDown"] = "\uE3C9";
        Glyphs["accSagittalFlat19CUp"] = "\uE3B7";
        Glyphs["accSagittalFlat19sDown"] = "\uE3C1";
        Glyphs["accSagittalFlat19sUp"] = "\uE3BF";
        Glyphs["accSagittalFlat23CDown"] = "\uE37D";
        Glyphs["accSagittalFlat23CUp"] = "\uE37B";
        Glyphs["accSagittalFlat23SDown"] = "\uE3CF";
        Glyphs["accSagittalFlat23SUp"] = "\uE3B1";
        Glyphs["accSagittalFlat25SDown"] = "\uE323";
        Glyphs["accSagittalFlat25SUp"] = "\uE311";
        Glyphs["accSagittalFlat35LDown"] = "\uE32B";
        Glyphs["accSagittalFlat35MDown"] = "\uE325";
        Glyphs["accSagittalFlat49LDown"] = "\uE3D9";
        Glyphs["accSagittalFlat49MDown"] = "\uE3D5";
        Glyphs["accSagittalFlat49SDown"] = "\uE3CD";
        Glyphs["accSagittalFlat49SUp"] = "\uE3B3";
        Glyphs["accSagittalFlat55CDown"] = "\uE359";
        Glyphs["accSagittalFlat55CUp"] = "\uE34F";
        Glyphs["accSagittalFlat5CDown"] = "\uE31F";
        Glyphs["accSagittalFlat5CUp"] = "\uE315";
        Glyphs["accSagittalFlat5v11SDown"] = "\uE35D";
        Glyphs["accSagittalFlat5v11SUp"] = "\uE34B";
        Glyphs["accSagittalFlat5v13LDown"] = "\uE3DD";
        Glyphs["accSagittalFlat5v13MDown"] = "\uE3D1";
        Glyphs["accSagittalFlat5v19CDown"] = "\uE37F";
        Glyphs["accSagittalFlat5v19CUp"] = "\uE379";
        Glyphs["accSagittalFlat5v23SDown"] = "\uE381";
        Glyphs["accSagittalFlat5v23SUp"] = "\uE377";
        Glyphs["accSagittalFlat5v49MDown"] = "\uE3D7";
        Glyphs["accSagittalFlat5v7kDown"] = "\uE31D";
        Glyphs["accSagittalFlat5v7kUp"] = "\uE317";
        Glyphs["accSagittalFlat7CDown"] = "\uE321";
        Glyphs["accSagittalFlat7CUp"] = "\uE313";
        Glyphs["accSagittalFlat7v11CDown"] = "\uE35B";
        Glyphs["accSagittalFlat7v11CUp"] = "\uE34D";
        Glyphs["accSagittalFlat7v11kDown"] = "\uE355";
        Glyphs["accSagittalFlat7v11kUp"] = "\uE353";
        Glyphs["accSagittalFlat7v19CDown"] = "\uE3CB";
        Glyphs["accSagittalFlat7v19CUp"] = "\uE3B5";
        Glyphs["accSagittalFractionalTinaDown"] = "\uE40B";
        Glyphs["accSagittalFractionalTinaUp"] = "\uE40A";
        Glyphs["accSagittalGrave"] = "\uE3F3";
        Glyphs["accSagittalShaftDown"] = "\uE3F1";
        Glyphs["accSagittalShaftUp"] = "\uE3F0";
        Glyphs["accSagittalSharp"] = "\uE318";
        Glyphs["accSagittalSharp11LUp"] = "\uE328";
        Glyphs["accSagittalSharp11MUp"] = "\uE326";
        Glyphs["accSagittalSharp11v19LUp"] = "\uE3DA";
        Glyphs["accSagittalSharp11v19MUp"] = "\uE3D2";
        Glyphs["accSagittalSharp11v49CDown"] = "\uE3B8";
        Glyphs["accSagittalSharp11v49CUp"] = "\uE3C6";
        Glyphs["accSagittalSharp143CDown"] = "\uE3BA";
        Glyphs["accSagittalSharp143CUp"] = "\uE3C4";
        Glyphs["accSagittalSharp17CDown"] = "\uE350";
        Glyphs["accSagittalSharp17CUp"] = "\uE356";
        Glyphs["accSagittalSharp17kDown"] = "\uE3BC";
        Glyphs["accSagittalSharp17kUp"] = "\uE3C2";
        Glyphs["accSagittalSharp19CDown"] = "\uE3B6";
        Glyphs["accSagittalSharp19CUp"] = "\uE3C8";
        Glyphs["accSagittalSharp19sDown"] = "\uE3BE";
        Glyphs["accSagittalSharp19sUp"] = "\uE3C0";
        Glyphs["accSagittalSharp23CDown"] = "\uE37A";
        Glyphs["accSagittalSharp23CUp"] = "\uE37C";
        Glyphs["accSagittalSharp23SDown"] = "\uE3B0";
        Glyphs["accSagittalSharp23SUp"] = "\uE3CE";
        Glyphs["accSagittalSharp25SDown"] = "\uE310";
        Glyphs["accSagittalSharp25SUp"] = "\uE322";
        Glyphs["accSagittalSharp35LUp"] = "\uE32A";
        Glyphs["accSagittalSharp35MUp"] = "\uE324";
        Glyphs["accSagittalSharp49LUp"] = "\uE3D8";
        Glyphs["accSagittalSharp49MUp"] = "\uE3D4";
        Glyphs["accSagittalSharp49SDown"] = "\uE3B2";
        Glyphs["accSagittalSharp49SUp"] = "\uE3CC";
        Glyphs["accSagittalSharp55CDown"] = "\uE34E";
        Glyphs["accSagittalSharp55CUp"] = "\uE358";
        Glyphs["accSagittalSharp5CDown"] = "\uE314";
        Glyphs["accSagittalSharp5CUp"] = "\uE31E";
        Glyphs["accSagittalSharp5v11SDown"] = "\uE34A";
        Glyphs["accSagittalSharp5v11SUp"] = "\uE35C";
        Glyphs["accSagittalSharp5v13LUp"] = "\uE3DC";
        Glyphs["accSagittalSharp5v13MUp"] = "\uE3D0";
        Glyphs["accSagittalSharp5v19CDown"] = "\uE378";
        Glyphs["accSagittalSharp5v19CUp"] = "\uE37E";
        Glyphs["accSagittalSharp5v23SDown"] = "\uE376";
        Glyphs["accSagittalSharp5v23SUp"] = "\uE380";
        Glyphs["accSagittalSharp5v49MUp"] = "\uE3D6";
        Glyphs["accSagittalSharp5v7kDown"] = "\uE316";
        Glyphs["accSagittalSharp5v7kUp"] = "\uE31C";
        Glyphs["accSagittalSharp7CDown"] = "\uE312";
        Glyphs["accSagittalSharp7CUp"] = "\uE320";
        Glyphs["accSagittalSharp7v11CDown"] = "\uE34C";
        Glyphs["accSagittalSharp7v11CUp"] = "\uE35A";
        Glyphs["accSagittalSharp7v11kDown"] = "\uE352";
        Glyphs["accSagittalSharp7v11kUp"] = "\uE354";
        Glyphs["accSagittalSharp7v19CDown"] = "\uE3B4";
        Glyphs["accSagittalSharp7v19CUp"] = "\uE3CA";
        Glyphs["accSagittalUnused1"] = "\uE31A";
        Glyphs["accSagittalUnused2"] = "\uE31B";
        Glyphs["accSagittalUnused3"] = "\uE3DE";
        Glyphs["accSagittalUnused4"] = "\uE3DF";
        Glyphs["accdnCombDot"] = "\uE8CA";
        Glyphs["accdnCombLH2RanksEmpty"] = "\uE8C8";
        Glyphs["accdnCombLH3RanksEmptySquare"] = "\uE8C9";
        Glyphs["accdnCombRH3RanksEmpty"] = "\uE8C6";
        Glyphs["accdnCombRH4RanksEmpty"] = "\uE8C7";
        Glyphs["accdnDiatonicClef"] = "\uE079";
        Glyphs["accdnLH2Ranks16Round"] = "\uE8BC";
        Glyphs["accdnLH2Ranks8Plus16Round"] = "\uE8BD";
        Glyphs["accdnLH2Ranks8Round"] = "\uE8BB";
        Glyphs["accdnLH2RanksFullMasterRound"] = "\uE8C0";
        Glyphs["accdnLH2RanksMasterPlus16Round"] = "\uE8BF";
        Glyphs["accdnLH2RanksMasterRound"] = "\uE8BE";
        Glyphs["accdnLH3Ranks2Plus8Square"] = "\uE8C4";
        Glyphs["accdnLH3Ranks2Square"] = "\uE8C2";
        Glyphs["accdnLH3Ranks8Square"] = "\uE8C1";
        Glyphs["accdnLH3RanksDouble8Square"] = "\uE8C3";
        Glyphs["accdnLH3RanksTuttiSquare"] = "\uE8C5";
        Glyphs["accdnPull"] = "\uE8CC";
        Glyphs["accdnPush"] = "\uE8CB";
        Glyphs["accdnRH3RanksAccordion"] = "\uE8AC";
        Glyphs["accdnRH3RanksAuthenticMusette"] = "\uE8A8";
        Glyphs["accdnRH3RanksBandoneon"] = "\uE8AB";
        Glyphs["accdnRH3RanksBassoon"] = "\uE8A4";
        Glyphs["accdnRH3RanksClarinet"] = "\uE8A1";
        Glyphs["accdnRH3RanksDoubleTremoloLower8ve"] = "\uE8B1";
        Glyphs["accdnRH3RanksDoubleTremoloUpper8ve"] = "\uE8B2";
        Glyphs["accdnRH3RanksFullFactory"] = "\uE8B3";
        Glyphs["accdnRH3RanksHarmonium"] = "\uE8AA";
        Glyphs["accdnRH3RanksImitationMusette"] = "\uE8A7";
        Glyphs["accdnRH3RanksLowerTremolo8"] = "\uE8A3";
        Glyphs["accdnRH3RanksMaster"] = "\uE8AD";
        Glyphs["accdnRH3RanksOboe"] = "\uE8A5";
        Glyphs["accdnRH3RanksOrgan"] = "\uE8A9";
        Glyphs["accdnRH3RanksPiccolo"] = "\uE8A0";
        Glyphs["accdnRH3RanksTremoloLower8ve"] = "\uE8AF";
        Glyphs["accdnRH3RanksTremoloUpper8ve"] = "\uE8B0";
        Glyphs["accdnRH3RanksTwoChoirs"] = "\uE8AE";
        Glyphs["accdnRH3RanksUpperTremolo8"] = "\uE8A2";
        Glyphs["accdnRH3RanksViolin"] = "\uE8A6";
        Glyphs["accdnRH4RanksAlto"] = "\uE8B5";
        Glyphs["accdnRH4RanksBassAlto"] = "\uE8BA";
        Glyphs["accdnRH4RanksMaster"] = "\uE8B7";
        Glyphs["accdnRH4RanksSoftBass"] = "\uE8B8";
        Glyphs["accdnRH4RanksSoftTenor"] = "\uE8B9";
        Glyphs["accdnRH4RanksSoprano"] = "\uE8B4";
        Glyphs["accdnRH4RanksTenor"] = "\uE8B6";
        Glyphs["accdnRicochet2"] = "\uE8CD";
        Glyphs["accdnRicochet3"] = "\uE8CE";
        Glyphs["accdnRicochet4"] = "\uE8CF";
        Glyphs["accdnRicochet5"] = "\uE8D0";
        Glyphs["accdnRicochet6"] = "\uE8D1";
        Glyphs["accdnRicochetStem2"] = "\uE8D2";
        Glyphs["accdnRicochetStem3"] = "\uE8D3";
        Glyphs["accdnRicochetStem4"] = "\uE8D4";
        Glyphs["accdnRicochetStem5"] = "\uE8D5";
        Glyphs["accdnRicochetStem6"] = "\uE8D6";
        Glyphs["accidental1CommaFlat"] = "\uE454";
        Glyphs["accidental1CommaSharp"] = "\uE450";
        Glyphs["accidental2CommaFlat"] = "\uE455";
        Glyphs["accidental2CommaSharp"] = "\uE451";
        Glyphs["accidental3CommaFlat"] = "\uE456";
        Glyphs["accidental3CommaSharp"] = "\uE452";
        Glyphs["accidental4CommaFlat"] = "\uE457";
        Glyphs["accidental5CommaSharp"] = "\uE453";
        Glyphs["accidentalArrowDown"] = "\uE27B";
        Glyphs["accidentalArrowUp"] = "\uE27A";
        Glyphs["accidentalBakiyeFlat"] = "\uE442";
        Glyphs["accidentalBakiyeSharp"] = "\uE445";
        Glyphs["accidentalBracketLeft"] = "\uE26C";
        Glyphs["accidentalBracketRight"] = "\uE26D";
        Glyphs["accidentalBuyukMucennebFlat"] = "\uE440";
        Glyphs["accidentalBuyukMucennebSharp"] = "\uE447";
        Glyphs["accidentalCombiningCloseCurlyBrace"] = "\uE2EF";
        Glyphs["accidentalCombiningLower17Schisma"] = "\uE2E6";
        Glyphs["accidentalCombiningLower19Schisma"] = "\uE2E8";
        Glyphs["accidentalCombiningLower23Limit29LimitComma"] = "\uE2EA";
        Glyphs["accidentalCombiningLower29LimitComma"] = "\uEE50";
        Glyphs["accidentalCombiningLower31Schisma"] = "\uE2EC";
        Glyphs["accidentalCombiningLower37Quartertone"] = "\uEE52";
        Glyphs["accidentalCombiningLower41Comma"] = "\uEE54";
        Glyphs["accidentalCombiningLower43Comma"] = "\uEE56";
        Glyphs["accidentalCombiningLower47Quartertone"] = "\uEE58";
        Glyphs["accidentalCombiningLower53LimitComma"] = "\uE2F7";
        Glyphs["accidentalCombiningOpenCurlyBrace"] = "\uE2EE";
        Glyphs["accidentalCombiningRaise17Schisma"] = "\uE2E7";
        Glyphs["accidentalCombiningRaise19Schisma"] = "\uE2E9";
        Glyphs["accidentalCombiningRaise23Limit29LimitComma"] = "\uE2EB";
        Glyphs["accidentalCombiningRaise29LimitComma"] = "\uEE51";
        Glyphs["accidentalCombiningRaise31Schisma"] = "\uE2ED";
        Glyphs["accidentalCombiningRaise37Quartertone"] = "\uEE53";
        Glyphs["accidentalCombiningRaise41Comma"] = "\uEE55";
        Glyphs["accidentalCombiningRaise43Comma"] = "\uEE57";
        Glyphs["accidentalCombiningRaise47Quartertone"] = "\uEE59";
        Glyphs["accidentalCombiningRaise53LimitComma"] = "\uE2F8";
        Glyphs["accidentalCommaSlashDown"] = "\uE47A";
        Glyphs["accidentalCommaSlashUp"] = "\uE479";
        Glyphs["accidentalDoubleFlat"] = "\uE264";
        Glyphs["accidentalDoubleFlatArabic"] = "\uED30";
        Glyphs["accidentalDoubleFlatEqualTempered"] = "\uE2F0";
        Glyphs["accidentalDoubleFlatOneArrowDown"] = "\uE2C0";
        Glyphs["accidentalDoubleFlatOneArrowUp"] = "\uE2C5";
        Glyphs["accidentalDoubleFlatReversed"] = "\uE483";
        Glyphs["accidentalDoubleFlatThreeArrowsDown"] = "\uE2D4";
        Glyphs["accidentalDoubleFlatThreeArrowsUp"] = "\uE2D9";
        Glyphs["accidentalDoubleFlatTurned"] = "\uE485";
        Glyphs["accidentalDoubleFlatTwoArrowsDown"] = "\uE2CA";
        Glyphs["accidentalDoubleFlatTwoArrowsUp"] = "\uE2CF";
        Glyphs["accidentalDoubleSharp"] = "\uE263";
        Glyphs["accidentalDoubleSharpArabic"] = "\uED38";
        Glyphs["accidentalDoubleSharpEqualTempered"] = "\uE2F4";
        Glyphs["accidentalDoubleSharpOneArrowDown"] = "\uE2C4";
        Glyphs["accidentalDoubleSharpOneArrowUp"] = "\uE2C9";
        Glyphs["accidentalDoubleSharpThreeArrowsDown"] = "\uE2D8";
        Glyphs["accidentalDoubleSharpThreeArrowsUp"] = "\uE2DD";
        Glyphs["accidentalDoubleSharpTwoArrowsDown"] = "\uE2CE";
        Glyphs["accidentalDoubleSharpTwoArrowsUp"] = "\uE2D3";
        Glyphs["accidentalEnharmonicAlmostEqualTo"] = "\uE2FA";
        Glyphs["accidentalEnharmonicEquals"] = "\uE2FB";
        Glyphs["accidentalEnharmonicTilde"] = "\uE2F9";
        Glyphs["accidentalFilledReversedFlatAndFlat"] = "\uE296";
        Glyphs["accidentalFilledReversedFlatAndFlatArrowDown"] = "\uE298";
        Glyphs["accidentalFilledReversedFlatAndFlatArrowUp"] = "\uE297";
        Glyphs["accidentalFilledReversedFlatArrowDown"] = "\uE293";
        Glyphs["accidentalFilledReversedFlatArrowUp"] = "\uE292";
        Glyphs["accidentalFiveQuarterTonesFlatArrowDown"] = "\uE279";
        Glyphs["accidentalFiveQuarterTonesSharpArrowUp"] = "\uE276";
        Glyphs["accidentalFlat"] = "\uE260";
        Glyphs["accidentalFlatArabic"] = "\uED32";
        Glyphs["accidentalFlatEqualTempered"] = "\uE2F1";
        Glyphs["accidentalFlatLoweredStockhausen"] = "\uED53";
        Glyphs["accidentalFlatOneArrowDown"] = "\uE2C1";
        Glyphs["accidentalFlatOneArrowUp"] = "\uE2C6";
        Glyphs["accidentalFlatRaisedStockhausen"] = "\uED52";
        Glyphs["accidentalFlatRepeatedLineStockhausen"] = "\uED5C";
        Glyphs["accidentalFlatRepeatedSpaceStockhausen"] = "\uED5B";
        Glyphs["accidentalFlatThreeArrowsDown"] = "\uE2D5";
        Glyphs["accidentalFlatThreeArrowsUp"] = "\uE2DA";
        Glyphs["accidentalFlatTurned"] = "\uE484";
        Glyphs["accidentalFlatTwoArrowsDown"] = "\uE2CB";
        Glyphs["accidentalFlatTwoArrowsUp"] = "\uE2D0";
        Glyphs["accidentalHabaFlatQuarterToneHigher"] = "\uEE65";
        Glyphs["accidentalHabaFlatThreeQuarterTonesLower"] = "\uEE69";
        Glyphs["accidentalHabaQuarterToneHigher"] = "\uEE64";
        Glyphs["accidentalHabaQuarterToneLower"] = "\uEE67";
        Glyphs["accidentalHabaSharpQuarterToneLower"] = "\uEE68";
        Glyphs["accidentalHabaSharpThreeQuarterTonesHigher"] = "\uEE66";
        Glyphs["accidentalHalfSharpArrowDown"] = "\uE29A";
        Glyphs["accidentalHalfSharpArrowUp"] = "\uE299";
        Glyphs["accidentalJohnston13"] = "\uE2B6";
        Glyphs["accidentalJohnston31"] = "\uE2B7";
        Glyphs["accidentalJohnstonDown"] = "\uE2B5";
        Glyphs["accidentalJohnstonEl"] = "\uE2B2";
        Glyphs["accidentalJohnstonMinus"] = "\uE2B1";
        Glyphs["accidentalJohnstonPlus"] = "\uE2B0";
        Glyphs["accidentalJohnstonSeven"] = "\uE2B3";
        Glyphs["accidentalJohnstonUp"] = "\uE2B4";
        Glyphs["accidentalKomaFlat"] = "\uE443";
        Glyphs["accidentalKomaSharp"] = "\uE444";
        Glyphs["accidentalKoron"] = "\uE460";
        Glyphs["accidentalKucukMucennebFlat"] = "\uE441";
        Glyphs["accidentalKucukMucennebSharp"] = "\uE446";
        Glyphs["accidentalLargeDoubleSharp"] = "\uE47D";
        Glyphs["accidentalLowerOneSeptimalComma"] = "\uE2DE";
        Glyphs["accidentalLowerOneTridecimalQuartertone"] = "\uE2E4";
        Glyphs["accidentalLowerOneUndecimalQuartertone"] = "\uE2E2";
        Glyphs["accidentalLowerTwoSeptimalCommas"] = "\uE2E0";
        Glyphs["accidentalLoweredStockhausen"] = "\uED51";
        Glyphs["accidentalNarrowReversedFlat"] = "\uE284";
        Glyphs["accidentalNarrowReversedFlatAndFlat"] = "\uE285";
        Glyphs["accidentalNatural"] = "\uE261";
        Glyphs["accidentalNaturalArabic"] = "\uED34";
        Glyphs["accidentalNaturalEqualTempered"] = "\uE2F2";
        Glyphs["accidentalNaturalFlat"] = "\uE267";
        Glyphs["accidentalNaturalLoweredStockhausen"] = "\uED55";
        Glyphs["accidentalNaturalOneArrowDown"] = "\uE2C2";
        Glyphs["accidentalNaturalOneArrowUp"] = "\uE2C7";
        Glyphs["accidentalNaturalRaisedStockhausen"] = "\uED54";
        Glyphs["accidentalNaturalReversed"] = "\uE482";
        Glyphs["accidentalNaturalSharp"] = "\uE268";
        Glyphs["accidentalNaturalThreeArrowsDown"] = "\uE2D6";
        Glyphs["accidentalNaturalThreeArrowsUp"] = "\uE2DB";
        Glyphs["accidentalNaturalTwoArrowsDown"] = "\uE2CC";
        Glyphs["accidentalNaturalTwoArrowsUp"] = "\uE2D1";
        Glyphs["accidentalOneAndAHalfSharpsArrowDown"] = "\uE29C";
        Glyphs["accidentalOneAndAHalfSharpsArrowUp"] = "\uE29B";
        Glyphs["accidentalOneQuarterToneFlatFerneyhough"] = "\uE48F";
        Glyphs["accidentalOneQuarterToneFlatStockhausen"] = "\uED59";
        Glyphs["accidentalOneQuarterToneSharpFerneyhough"] = "\uE48E";
        Glyphs["accidentalOneQuarterToneSharpStockhausen"] = "\uED58";
        Glyphs["accidentalOneThirdToneFlatFerneyhough"] = "\uE48B";
        Glyphs["accidentalOneThirdToneSharpFerneyhough"] = "\uE48A";
        Glyphs["accidentalParensLeft"] = "\uE26A";
        Glyphs["accidentalParensRight"] = "\uE26B";
        Glyphs["accidentalQuarterFlatEqualTempered"] = "\uE2F5";
        Glyphs["accidentalQuarterSharpEqualTempered"] = "\uE2F6";
        Glyphs["accidentalQuarterToneFlat4"] = "\uE47F";
        Glyphs["accidentalQuarterToneFlatArabic"] = "\uED33";
        Glyphs["accidentalQuarterToneFlatArrowUp"] = "\uE270";
        Glyphs["accidentalQuarterToneFlatFilledReversed"] = "\uE480";
        Glyphs["accidentalQuarterToneFlatNaturalArrowDown"] = "\uE273";
        Glyphs["accidentalQuarterToneFlatPenderecki"] = "\uE478";
        Glyphs["accidentalQuarterToneFlatStein"] = "\uE280";
        Glyphs["accidentalQuarterToneFlatVanBlankenburg"] = "\uE488";
        Glyphs["accidentalQuarterToneSharp4"] = "\uE47E";
        Glyphs["accidentalQuarterToneSharpArabic"] = "\uED35";
        Glyphs["accidentalQuarterToneSharpArrowDown"] = "\uE275";
        Glyphs["accidentalQuarterToneSharpBusotti"] = "\uE472";
        Glyphs["accidentalQuarterToneSharpNaturalArrowUp"] = "\uE272";
        Glyphs["accidentalQuarterToneSharpStein"] = "\uE282";
        Glyphs["accidentalQuarterToneSharpWiggle"] = "\uE475";
        Glyphs["accidentalRaiseOneSeptimalComma"] = "\uE2DF";
        Glyphs["accidentalRaiseOneTridecimalQuartertone"] = "\uE2E5";
        Glyphs["accidentalRaiseOneUndecimalQuartertone"] = "\uE2E3";
        Glyphs["accidentalRaiseTwoSeptimalCommas"] = "\uE2E1";
        Glyphs["accidentalRaisedStockhausen"] = "\uED50";
        Glyphs["accidentalReversedFlatAndFlatArrowDown"] = "\uE295";
        Glyphs["accidentalReversedFlatAndFlatArrowUp"] = "\uE294";
        Glyphs["accidentalReversedFlatArrowDown"] = "\uE291";
        Glyphs["accidentalReversedFlatArrowUp"] = "\uE290";
        Glyphs["accidentalSharp"] = "\uE262";
        Glyphs["accidentalSharpArabic"] = "\uED36";
        Glyphs["accidentalSharpEqualTempered"] = "\uE2F3";
        Glyphs["accidentalSharpLoweredStockhausen"] = "\uED57";
        Glyphs["accidentalSharpOneArrowDown"] = "\uE2C3";
        Glyphs["accidentalSharpOneArrowUp"] = "\uE2C8";
        Glyphs["accidentalSharpOneHorizontalStroke"] = "\uE473";
        Glyphs["accidentalSharpRaisedStockhausen"] = "\uED56";
        Glyphs["accidentalSharpRepeatedLineStockhausen"] = "\uED5E";
        Glyphs["accidentalSharpRepeatedSpaceStockhausen"] = "\uED5D";
        Glyphs["accidentalSharpReversed"] = "\uE481";
        Glyphs["accidentalSharpSharp"] = "\uE269";
        Glyphs["accidentalSharpThreeArrowsDown"] = "\uE2D7";
        Glyphs["accidentalSharpThreeArrowsUp"] = "\uE2DC";
        Glyphs["accidentalSharpTwoArrowsDown"] = "\uE2CD";
        Glyphs["accidentalSharpTwoArrowsUp"] = "\uE2D2";
        Glyphs["accidentalSims12Down"] = "\uE2A0";
        Glyphs["accidentalSims12Up"] = "\uE2A3";
        Glyphs["accidentalSims4Down"] = "\uE2A2";
        Glyphs["accidentalSims4Up"] = "\uE2A5";
        Glyphs["accidentalSims6Down"] = "\uE2A1";
        Glyphs["accidentalSims6Up"] = "\uE2A4";
        Glyphs["accidentalSori"] = "\uE461";
        Glyphs["accidentalTavenerFlat"] = "\uE477";
        Glyphs["accidentalTavenerSharp"] = "\uE476";
        Glyphs["accidentalThreeQuarterTonesFlatArabic"] = "\uED31";
        Glyphs["accidentalThreeQuarterTonesFlatArrowDown"] = "\uE271";
        Glyphs["accidentalThreeQuarterTonesFlatArrowUp"] = "\uE278";
        Glyphs["accidentalThreeQuarterTonesFlatCouper"] = "\uE489";
        Glyphs["accidentalThreeQuarterTonesFlatGrisey"] = "\uE486";
        Glyphs["accidentalThreeQuarterTonesFlatTartini"] = "\uE487";
        Glyphs["accidentalThreeQuarterTonesFlatZimmermann"] = "\uE281";
        Glyphs["accidentalThreeQuarterTonesSharpArabic"] = "\uED37";
        Glyphs["accidentalThreeQuarterTonesSharpArrowDown"] = "\uE277";
        Glyphs["accidentalThreeQuarterTonesSharpArrowUp"] = "\uE274";
        Glyphs["accidentalThreeQuarterTonesSharpBusotti"] = "\uE474";
        Glyphs["accidentalThreeQuarterTonesSharpStein"] = "\uE283";
        Glyphs["accidentalThreeQuarterTonesSharpStockhausen"] = "\uED5A";
        Glyphs["accidentalTripleFlat"] = "\uE266";
        Glyphs["accidentalTripleSharp"] = "\uE265";
        Glyphs["accidentalTwoThirdTonesFlatFerneyhough"] = "\uE48D";
        Glyphs["accidentalTwoThirdTonesSharpFerneyhough"] = "\uE48C";
        Glyphs["accidentalUpsAndDownsDown"] = "\uEE61";
        Glyphs["accidentalUpsAndDownsLess"] = "\uEE63";
        Glyphs["accidentalUpsAndDownsMore"] = "\uEE62";
        Glyphs["accidentalUpsAndDownsUp"] = "\uEE60";
        Glyphs["accidentalWilsonMinus"] = "\uE47C";
        Glyphs["accidentalWilsonPlus"] = "\uE47B";
        Glyphs["accidentalWyschnegradsky10TwelfthsFlat"] = "\uE434";
        Glyphs["accidentalWyschnegradsky10TwelfthsSharp"] = "\uE429";
        Glyphs["accidentalWyschnegradsky11TwelfthsFlat"] = "\uE435";
        Glyphs["accidentalWyschnegradsky11TwelfthsSharp"] = "\uE42A";
        Glyphs["accidentalWyschnegradsky1TwelfthsFlat"] = "\uE42B";
        Glyphs["accidentalWyschnegradsky1TwelfthsSharp"] = "\uE420";
        Glyphs["accidentalWyschnegradsky2TwelfthsFlat"] = "\uE42C";
        Glyphs["accidentalWyschnegradsky2TwelfthsSharp"] = "\uE421";
        Glyphs["accidentalWyschnegradsky3TwelfthsFlat"] = "\uE42D";
        Glyphs["accidentalWyschnegradsky3TwelfthsSharp"] = "\uE422";
        Glyphs["accidentalWyschnegradsky4TwelfthsFlat"] = "\uE42E";
        Glyphs["accidentalWyschnegradsky4TwelfthsSharp"] = "\uE423";
        Glyphs["accidentalWyschnegradsky5TwelfthsFlat"] = "\uE42F";
        Glyphs["accidentalWyschnegradsky5TwelfthsSharp"] = "\uE424";
        Glyphs["accidentalWyschnegradsky6TwelfthsFlat"] = "\uE430";
        Glyphs["accidentalWyschnegradsky6TwelfthsSharp"] = "\uE425";
        Glyphs["accidentalWyschnegradsky7TwelfthsFlat"] = "\uE431";
        Glyphs["accidentalWyschnegradsky7TwelfthsSharp"] = "\uE426";
        Glyphs["accidentalWyschnegradsky8TwelfthsFlat"] = "\uE432";
        Glyphs["accidentalWyschnegradsky8TwelfthsSharp"] = "\uE427";
        Glyphs["accidentalWyschnegradsky9TwelfthsFlat"] = "\uE433";
        Glyphs["accidentalWyschnegradsky9TwelfthsSharp"] = "\uE428";
        Glyphs["accidentalXenakisOneThirdToneSharp"] = "\uE470";
        Glyphs["accidentalXenakisTwoThirdTonesSharp"] = "\uE471";
        Glyphs["analyticsChoralmelodie"] = "\uE86A";
        Glyphs["analyticsEndStimme"] = "\uE863";
        Glyphs["analyticsHauptrhythmus"] = "\uE86B";
        Glyphs["analyticsHauptstimme"] = "\uE860";
        Glyphs["analyticsInversion1"] = "\uE869";
        Glyphs["analyticsNebenstimme"] = "\uE861";
        Glyphs["analyticsStartStimme"] = "\uE862";
        Glyphs["analyticsTheme"] = "\uE864";
        Glyphs["analyticsTheme1"] = "\uE868";
        Glyphs["analyticsThemeInversion"] = "\uE867";
        Glyphs["analyticsThemeRetrograde"] = "\uE865";
        Glyphs["analyticsThemeRetrogradeInversion"] = "\uE866";
        Glyphs["arpeggiato"] = "\uE63C";
        Glyphs["arpeggiatoDown"] = "\uE635";
        Glyphs["arpeggiatoUp"] = "\uE634";
        Glyphs["arrowBlackDown"] = "\uEB64";
        Glyphs["arrowBlackDownLeft"] = "\uEB65";
        Glyphs["arrowBlackDownRight"] = "\uEB63";
        Glyphs["arrowBlackLeft"] = "\uEB66";
        Glyphs["arrowBlackRight"] = "\uEB62";
        Glyphs["arrowBlackUp"] = "\uEB60";
        Glyphs["arrowBlackUpLeft"] = "\uEB67";
        Glyphs["arrowBlackUpRight"] = "\uEB61";
        Glyphs["arrowOpenDown"] = "\uEB74";
        Glyphs["arrowOpenDownLeft"] = "\uEB75";
        Glyphs["arrowOpenDownRight"] = "\uEB73";
        Glyphs["arrowOpenLeft"] = "\uEB76";
        Glyphs["arrowOpenRight"] = "\uEB72";
        Glyphs["arrowOpenUp"] = "\uEB70";
        Glyphs["arrowOpenUpLeft"] = "\uEB77";
        Glyphs["arrowOpenUpRight"] = "\uEB71";
        Glyphs["arrowWhiteDown"] = "\uEB6C";
        Glyphs["arrowWhiteDownLeft"] = "\uEB6D";
        Glyphs["arrowWhiteDownRight"] = "\uEB6B";
        Glyphs["arrowWhiteLeft"] = "\uEB6E";
        Glyphs["arrowWhiteRight"] = "\uEB6A";
        Glyphs["arrowWhiteUp"] = "\uEB68";
        Glyphs["arrowWhiteUpLeft"] = "\uEB6F";
        Glyphs["arrowWhiteUpRight"] = "\uEB69";
        Glyphs["arrowheadBlackDown"] = "\uEB7C";
        Glyphs["arrowheadBlackDownLeft"] = "\uEB7D";
        Glyphs["arrowheadBlackDownRight"] = "\uEB7B";
        Glyphs["arrowheadBlackLeft"] = "\uEB7E";
        Glyphs["arrowheadBlackRight"] = "\uEB7A";
        Glyphs["arrowheadBlackUp"] = "\uEB78";
        Glyphs["arrowheadBlackUpLeft"] = "\uEB7F";
        Glyphs["arrowheadBlackUpRight"] = "\uEB79";
        Glyphs["arrowheadOpenDown"] = "\uEB8C";
        Glyphs["arrowheadOpenDownLeft"] = "\uEB8D";
        Glyphs["arrowheadOpenDownRight"] = "\uEB8B";
        Glyphs["arrowheadOpenLeft"] = "\uEB8E";
        Glyphs["arrowheadOpenRight"] = "\uEB8A";
        Glyphs["arrowheadOpenUp"] = "\uEB88";
        Glyphs["arrowheadOpenUpLeft"] = "\uEB8F";
        Glyphs["arrowheadOpenUpRight"] = "\uEB89";
        Glyphs["arrowheadWhiteDown"] = "\uEB84";
        Glyphs["arrowheadWhiteDownLeft"] = "\uEB85";
        Glyphs["arrowheadWhiteDownRight"] = "\uEB83";
        Glyphs["arrowheadWhiteLeft"] = "\uEB86";
        Glyphs["arrowheadWhiteRight"] = "\uEB82";
        Glyphs["arrowheadWhiteUp"] = "\uEB80";
        Glyphs["arrowheadWhiteUpLeft"] = "\uEB87";
        Glyphs["arrowheadWhiteUpRight"] = "\uEB81";
        Glyphs["articAccentAbove"] = "\uE4A0";
        Glyphs["articAccentBelow"] = "\uE4A1";
        Glyphs["articAccentStaccatoAbove"] = "\uE4B0";
        Glyphs["articAccentStaccatoBelow"] = "\uE4B1";
        Glyphs["articLaissezVibrerAbove"] = "\uE4BA";
        Glyphs["articLaissezVibrerBelow"] = "\uE4BB";
        Glyphs["articMarcatoAbove"] = "\uE4AC";
        Glyphs["articMarcatoBelow"] = "\uE4AD";
        Glyphs["articMarcatoStaccatoAbove"] = "\uE4AE";
        Glyphs["articMarcatoStaccatoBelow"] = "\uE4AF";
        Glyphs["articMarcatoTenutoAbove"] = "\uE4BC";
        Glyphs["articMarcatoTenutoBelow"] = "\uE4BD";
        Glyphs["articSoftAccentAbove"] = "\uED40";
        Glyphs["articSoftAccentBelow"] = "\uED41";
        Glyphs["articSoftAccentStaccatoAbove"] = "\uED42";
        Glyphs["articSoftAccentStaccatoBelow"] = "\uED43";
        Glyphs["articSoftAccentTenutoAbove"] = "\uED44";
        Glyphs["articSoftAccentTenutoBelow"] = "\uED45";
        Glyphs["articSoftAccentTenutoStaccatoAbove"] = "\uED46";
        Glyphs["articSoftAccentTenutoStaccatoBelow"] = "\uED47";
        Glyphs["articStaccatissimoAbove"] = "\uE4A6";
        Glyphs["articStaccatissimoBelow"] = "\uE4A7";
        Glyphs["articStaccatissimoStrokeAbove"] = "\uE4AA";
        Glyphs["articStaccatissimoStrokeBelow"] = "\uE4AB";
        Glyphs["articStaccatissimoWedgeAbove"] = "\uE4A8";
        Glyphs["articStaccatissimoWedgeBelow"] = "\uE4A9";
        Glyphs["articStaccatoAbove"] = "\uE4A2";
        Glyphs["articStaccatoBelow"] = "\uE4A3";
        Glyphs["articStressAbove"] = "\uE4B6";
        Glyphs["articStressBelow"] = "\uE4B7";
        Glyphs["articTenutoAbove"] = "\uE4A4";
        Glyphs["articTenutoAccentAbove"] = "\uE4B4";
        Glyphs["articTenutoAccentBelow"] = "\uE4B5";
        Glyphs["articTenutoBelow"] = "\uE4A5";
        Glyphs["articTenutoStaccatoAbove"] = "\uE4B2";
        Glyphs["articTenutoStaccatoBelow"] = "\uE4B3";
        Glyphs["articUnstressAbove"] = "\uE4B8";
        Glyphs["articUnstressBelow"] = "\uE4B9";
        Glyphs["augmentationDot"] = "\uE1E7";
        Glyphs["barlineDashed"] = "\uE036";
        Glyphs["barlineDotted"] = "\uE037";
        Glyphs["barlineDouble"] = "\uE031";
        Glyphs["barlineFinal"] = "\uE032";
        Glyphs["barlineHeavy"] = "\uE034";
        Glyphs["barlineHeavyHeavy"] = "\uE035";
        Glyphs["barlineReverseFinal"] = "\uE033";
        Glyphs["barlineShort"] = "\uE038";
        Glyphs["barlineSingle"] = "\uE030";
        Glyphs["barlineTick"] = "\uE039";
        Glyphs["beamAccelRit1"] = "\uEAF4";
        Glyphs["beamAccelRit10"] = "\uEAFD";
        Glyphs["beamAccelRit11"] = "\uEAFE";
        Glyphs["beamAccelRit12"] = "\uEAFF";
        Glyphs["beamAccelRit13"] = "\uEB00";
        Glyphs["beamAccelRit14"] = "\uEB01";
        Glyphs["beamAccelRit15"] = "\uEB02";
        Glyphs["beamAccelRit2"] = "\uEAF5";
        Glyphs["beamAccelRit3"] = "\uEAF6";
        Glyphs["beamAccelRit4"] = "\uEAF7";
        Glyphs["beamAccelRit5"] = "\uEAF8";
        Glyphs["beamAccelRit6"] = "\uEAF9";
        Glyphs["beamAccelRit7"] = "\uEAFA";
        Glyphs["beamAccelRit8"] = "\uEAFB";
        Glyphs["beamAccelRit9"] = "\uEAFC";
        Glyphs["beamAccelRitFinal"] = "\uEB03";
        Glyphs["brace"] = "\uE000";
        Glyphs["bracket"] = "\uE002";
        Glyphs["bracketBottom"] = "\uE004";
        Glyphs["bracketTop"] = "\uE003";
        Glyphs["brassBend"] = "\uE5E3";
        Glyphs["brassDoitLong"] = "\uE5D6";
        Glyphs["brassDoitMedium"] = "\uE5D5";
        Glyphs["brassDoitShort"] = "\uE5D4";
        Glyphs["brassFallLipLong"] = "\uE5D9";
        Glyphs["brassFallLipMedium"] = "\uE5D8";
        Glyphs["brassFallLipShort"] = "\uE5D7";
        Glyphs["brassFallRoughLong"] = "\uE5DF";
        Glyphs["brassFallRoughMedium"] = "\uE5DE";
        Glyphs["brassFallRoughShort"] = "\uE5DD";
        Glyphs["brassFallSmoothLong"] = "\uE5DC";
        Glyphs["brassFallSmoothMedium"] = "\uE5DB";
        Glyphs["brassFallSmoothShort"] = "\uE5DA";
        Glyphs["brassFlip"] = "\uE5E1";
        Glyphs["brassHarmonMuteClosed"] = "\uE5E8";
        Glyphs["brassHarmonMuteStemHalfLeft"] = "\uE5E9";
        Glyphs["brassHarmonMuteStemHalfRight"] = "\uE5EA";
        Glyphs["brassHarmonMuteStemOpen"] = "\uE5EB";
        Glyphs["brassJazzTurn"] = "\uE5E4";
        Glyphs["brassLiftLong"] = "\uE5D3";
        Glyphs["brassLiftMedium"] = "\uE5D2";
        Glyphs["brassLiftShort"] = "\uE5D1";
        Glyphs["brassLiftSmoothLong"] = "\uE5EE";
        Glyphs["brassLiftSmoothMedium"] = "\uE5ED";
        Glyphs["brassLiftSmoothShort"] = "\uE5EC";
        Glyphs["brassMuteClosed"] = "\uE5E5";
        Glyphs["brassMuteHalfClosed"] = "\uE5E6";
        Glyphs["brassMuteOpen"] = "\uE5E7";
        Glyphs["brassPlop"] = "\uE5E0";
        Glyphs["brassScoop"] = "\uE5D0";
        Glyphs["brassSmear"] = "\uE5E2";
        Glyphs["brassValveTrill"] = "\uE5EF";
        Glyphs["breathMarkComma"] = "\uE4CE";
        Glyphs["breathMarkSalzedo"] = "\uE4D5";
        Glyphs["breathMarkTick"] = "\uE4CF";
        Glyphs["breathMarkUpbow"] = "\uE4D0";
        Glyphs["bridgeClef"] = "\uE078";
        Glyphs["buzzRoll"] = "\uE22A";
        Glyphs["cClef"] = "\uE05C";
        Glyphs["cClef8vb"] = "\uE05D";
        Glyphs["cClefArrowDown"] = "\uE05F";
        Glyphs["cClefArrowUp"] = "\uE05E";
        Glyphs["cClefChange"] = "\uE07B";
        Glyphs["cClefCombining"] = "\uE061";
        Glyphs["cClefReversed"] = "\uE075";
        Glyphs["cClefSquare"] = "\uE060";
        Glyphs["caesura"] = "\uE4D1";
        Glyphs["caesuraCurved"] = "\uE4D4";
        Glyphs["caesuraShort"] = "\uE4D3";
        Glyphs["caesuraSingleStroke"] = "\uE4D7";
        Glyphs["caesuraThick"] = "\uE4D2";
        Glyphs["chantAccentusAbove"] = "\uE9D6";
        Glyphs["chantAccentusBelow"] = "\uE9D7";
        Glyphs["chantAuctumAsc"] = "\uE994";
        Glyphs["chantAuctumDesc"] = "\uE995";
        Glyphs["chantAugmentum"] = "\uE9D9";
        Glyphs["chantCaesura"] = "\uE8F8";
        Glyphs["chantCclef"] = "\uE906";
        Glyphs["chantCirculusAbove"] = "\uE9D2";
        Glyphs["chantCirculusBelow"] = "\uE9D3";
        Glyphs["chantConnectingLineAsc2nd"] = "\uE9BD";
        Glyphs["chantConnectingLineAsc3rd"] = "\uE9BE";
        Glyphs["chantConnectingLineAsc4th"] = "\uE9BF";
        Glyphs["chantConnectingLineAsc5th"] = "\uE9C0";
        Glyphs["chantConnectingLineAsc6th"] = "\uE9C1";
        Glyphs["chantCustosStemDownPosHigh"] = "\uEA08";
        Glyphs["chantCustosStemDownPosHighest"] = "\uEA09";
        Glyphs["chantCustosStemDownPosMiddle"] = "\uEA07";
        Glyphs["chantCustosStemUpPosLow"] = "\uEA05";
        Glyphs["chantCustosStemUpPosLowest"] = "\uEA04";
        Glyphs["chantCustosStemUpPosMiddle"] = "\uEA06";
        Glyphs["chantDeminutumLower"] = "\uE9B3";
        Glyphs["chantDeminutumUpper"] = "\uE9B2";
        Glyphs["chantDivisioFinalis"] = "\uE8F6";
        Glyphs["chantDivisioMaior"] = "\uE8F4";
        Glyphs["chantDivisioMaxima"] = "\uE8F5";
        Glyphs["chantDivisioMinima"] = "\uE8F3";
        Glyphs["chantEntryLineAsc2nd"] = "\uE9B4";
        Glyphs["chantEntryLineAsc3rd"] = "\uE9B5";
        Glyphs["chantEntryLineAsc4th"] = "\uE9B6";
        Glyphs["chantEntryLineAsc5th"] = "\uE9B7";
        Glyphs["chantEntryLineAsc6th"] = "\uE9B8";
        Glyphs["chantEpisema"] = "\uE9D8";
        Glyphs["chantFclef"] = "\uE902";
        Glyphs["chantIctusAbove"] = "\uE9D0";
        Glyphs["chantIctusBelow"] = "\uE9D1";
        Glyphs["chantLigaturaDesc2nd"] = "\uE9B9";
        Glyphs["chantLigaturaDesc3rd"] = "\uE9BA";
        Glyphs["chantLigaturaDesc4th"] = "\uE9BB";
        Glyphs["chantLigaturaDesc5th"] = "\uE9BC";
        Glyphs["chantOriscusAscending"] = "\uE99C";
        Glyphs["chantOriscusDescending"] = "\uE99D";
        Glyphs["chantOriscusLiquescens"] = "\uE99E";
        Glyphs["chantPodatusLower"] = "\uE9B0";
        Glyphs["chantPodatusUpper"] = "\uE9B1";
        Glyphs["chantPunctum"] = "\uE990";
        Glyphs["chantPunctumCavum"] = "\uE998";
        Glyphs["chantPunctumDeminutum"] = "\uE9A1";
        Glyphs["chantPunctumInclinatum"] = "\uE991";
        Glyphs["chantPunctumInclinatumAuctum"] = "\uE992";
        Glyphs["chantPunctumInclinatumDeminutum"] = "\uE993";
        Glyphs["chantPunctumLinea"] = "\uE999";
        Glyphs["chantPunctumLineaCavum"] = "\uE99A";
        Glyphs["chantPunctumVirga"] = "\uE996";
        Glyphs["chantPunctumVirgaReversed"] = "\uE997";
        Glyphs["chantQuilisma"] = "\uE99B";
        Glyphs["chantSemicirculusAbove"] = "\uE9D4";
        Glyphs["chantSemicirculusBelow"] = "\uE9D5";
        Glyphs["chantStaff"] = "\uE8F0";
        Glyphs["chantStaffNarrow"] = "\uE8F2";
        Glyphs["chantStaffWide"] = "\uE8F1";
        Glyphs["chantStrophicus"] = "\uE99F";
        Glyphs["chantStrophicusAuctus"] = "\uE9A0";
        Glyphs["chantStrophicusLiquescens2nd"] = "\uE9C2";
        Glyphs["chantStrophicusLiquescens3rd"] = "\uE9C3";
        Glyphs["chantStrophicusLiquescens4th"] = "\uE9C4";
        Glyphs["chantStrophicusLiquescens5th"] = "\uE9C5";
        Glyphs["chantVirgula"] = "\uE8F7";
        Glyphs["clef15"] = "\uE07E";
        Glyphs["clef8"] = "\uE07D";
        Glyphs["clefChangeCombining"] = "\uE07F";
        Glyphs["coda"] = "\uE048";
        Glyphs["codaSquare"] = "\uE049";
        Glyphs["conductorBeat2Compound"] = "\uE897";
        Glyphs["conductorBeat2Simple"] = "\uE894";
        Glyphs["conductorBeat3Compound"] = "\uE898";
        Glyphs["conductorBeat3Simple"] = "\uE895";
        Glyphs["conductorBeat4Compound"] = "\uE899";
        Glyphs["conductorBeat4Simple"] = "\uE896";
        Glyphs["conductorLeftBeat"] = "\uE891";
        Glyphs["conductorRightBeat"] = "\uE892";
        Glyphs["conductorStrongBeat"] = "\uE890";
        Glyphs["conductorUnconducted"] = "\uE89A";
        Glyphs["conductorWeakBeat"] = "\uE893";
        Glyphs["controlBeginBeam"] = "\uE8E0";
        Glyphs["controlBeginPhrase"] = "\uE8E6";
        Glyphs["controlBeginSlur"] = "\uE8E4";
        Glyphs["controlBeginTie"] = "\uE8E2";
        Glyphs["controlEndBeam"] = "\uE8E1";
        Glyphs["controlEndPhrase"] = "\uE8E7";
        Glyphs["controlEndSlur"] = "\uE8E5";
        Glyphs["controlEndTie"] = "\uE8E3";
        Glyphs["csymAccidentalDoubleFlat"] = "\uED64";
        Glyphs["csymAccidentalDoubleSharp"] = "\uED63";
        Glyphs["csymAccidentalFlat"] = "\uED60";
        Glyphs["csymAccidentalNatural"] = "\uED61";
        Glyphs["csymAccidentalSharp"] = "\uED62";
        Glyphs["csymAccidentalTripleFlat"] = "\uED66";
        Glyphs["csymAccidentalTripleSharp"] = "\uED65";
        Glyphs["csymAlteredBassSlash"] = "\uE87B";
        Glyphs["csymAugmented"] = "\uE872";
        Glyphs["csymBracketLeftTall"] = "\uE877";
        Glyphs["csymBracketRightTall"] = "\uE878";
        Glyphs["csymDiagonalArrangementSlash"] = "\uE87C";
        Glyphs["csymDiminished"] = "\uE870";
        Glyphs["csymHalfDiminished"] = "\uE871";
        Glyphs["csymMajorSeventh"] = "\uE873";
        Glyphs["csymMinor"] = "\uE874";
        Glyphs["csymParensLeftTall"] = "\uE875";
        Glyphs["csymParensLeftVeryTall"] = "\uE879";
        Glyphs["csymParensRightTall"] = "\uE876";
        Glyphs["csymParensRightVeryTall"] = "\uE87A";
        Glyphs["curlewSign"] = "\uE4D6";
        Glyphs["daCapo"] = "\uE046";
        Glyphs["dalSegno"] = "\uE045";
        Glyphs["daseianExcellentes1"] = "\uEA3C";
        Glyphs["daseianExcellentes2"] = "\uEA3D";
        Glyphs["daseianExcellentes3"] = "\uEA3E";
        Glyphs["daseianExcellentes4"] = "\uEA3F";
        Glyphs["daseianFinales1"] = "\uEA34";
        Glyphs["daseianFinales2"] = "\uEA35";
        Glyphs["daseianFinales3"] = "\uEA36";
        Glyphs["daseianFinales4"] = "\uEA37";
        Glyphs["daseianGraves1"] = "\uEA30";
        Glyphs["daseianGraves2"] = "\uEA31";
        Glyphs["daseianGraves3"] = "\uEA32";
        Glyphs["daseianGraves4"] = "\uEA33";
        Glyphs["daseianResidua1"] = "\uEA40";
        Glyphs["daseianResidua2"] = "\uEA41";
        Glyphs["daseianSuperiores1"] = "\uEA38";
        Glyphs["daseianSuperiores2"] = "\uEA39";
        Glyphs["daseianSuperiores3"] = "\uEA3A";
        Glyphs["daseianSuperiores4"] = "\uEA3B";
        Glyphs["doubleLateralRollStevens"] = "\uE234";
        Glyphs["doubleTongueAbove"] = "\uE5F0";
        Glyphs["doubleTongueBelow"] = "\uE5F1";
        Glyphs["dynamicCombinedSeparatorColon"] = "\uE546";
        Glyphs["dynamicCombinedSeparatorHyphen"] = "\uE547";
        Glyphs["dynamicCombinedSeparatorSlash"] = "\uE549";
        Glyphs["dynamicCombinedSeparatorSpace"] = "\uE548";
        Glyphs["dynamicCrescendoHairpin"] = "\uE53E";
        Glyphs["dynamicDiminuendoHairpin"] = "\uE53F";
        Glyphs["dynamicFF"] = "\uE52F";
        Glyphs["dynamicFFF"] = "\uE530";
        Glyphs["dynamicFFFF"] = "\uE531";
        Glyphs["dynamicFFFFF"] = "\uE532";
        Glyphs["dynamicFFFFFF"] = "\uE533";
        Glyphs["dynamicForte"] = "\uE522";
        Glyphs["dynamicFortePiano"] = "\uE534";
        Glyphs["dynamicForzando"] = "\uE535";
        Glyphs["dynamicHairpinBracketLeft"] = "\uE544";
        Glyphs["dynamicHairpinBracketRight"] = "\uE545";
        Glyphs["dynamicHairpinParenthesisLeft"] = "\uE542";
        Glyphs["dynamicHairpinParenthesisRight"] = "\uE543";
        Glyphs["dynamicMF"] = "\uE52D";
        Glyphs["dynamicMP"] = "\uE52C";
        Glyphs["dynamicMessaDiVoce"] = "\uE540";
        Glyphs["dynamicMezzo"] = "\uE521";
        Glyphs["dynamicNiente"] = "\uE526";
        Glyphs["dynamicNienteForHairpin"] = "\uE541";
        Glyphs["dynamicPF"] = "\uE52E";
        Glyphs["dynamicPP"] = "\uE52B";
        Glyphs["dynamicPPP"] = "\uE52A";
        Glyphs["dynamicPPPP"] = "\uE529";
        Glyphs["dynamicPPPPP"] = "\uE528";
        Glyphs["dynamicPPPPPP"] = "\uE527";
        Glyphs["dynamicPiano"] = "\uE520";
        Glyphs["dynamicRinforzando"] = "\uE523";
        Glyphs["dynamicRinforzando1"] = "\uE53C";
        Glyphs["dynamicRinforzando2"] = "\uE53D";
        Glyphs["dynamicSforzando"] = "\uE524";
        Glyphs["dynamicSforzando1"] = "\uE536";
        Glyphs["dynamicSforzandoPianissimo"] = "\uE538";
        Glyphs["dynamicSforzandoPiano"] = "\uE537";
        Glyphs["dynamicSforzato"] = "\uE539";
        Glyphs["dynamicSforzatoFF"] = "\uE53B";
        Glyphs["dynamicSforzatoPiano"] = "\uE53A";
        Glyphs["dynamicZ"] = "\uE525";
        Glyphs["elecAudioChannelsEight"] = "\uEB46";
        Glyphs["elecAudioChannelsFive"] = "\uEB43";
        Glyphs["elecAudioChannelsFour"] = "\uEB42";
        Glyphs["elecAudioChannelsOne"] = "\uEB3E";
        Glyphs["elecAudioChannelsSeven"] = "\uEB45";
        Glyphs["elecAudioChannelsSix"] = "\uEB44";
        Glyphs["elecAudioChannelsThreeFrontal"] = "\uEB40";
        Glyphs["elecAudioChannelsThreeSurround"] = "\uEB41";
        Glyphs["elecAudioChannelsTwo"] = "\uEB3F";
        Glyphs["elecAudioIn"] = "\uEB49";
        Glyphs["elecAudioMono"] = "\uEB3C";
        Glyphs["elecAudioOut"] = "\uEB4A";
        Glyphs["elecAudioStereo"] = "\uEB3D";
        Glyphs["elecCamera"] = "\uEB1B";
        Glyphs["elecDataIn"] = "\uEB4D";
        Glyphs["elecDataOut"] = "\uEB4E";
        Glyphs["elecDisc"] = "\uEB13";
        Glyphs["elecDownload"] = "\uEB4F";
        Glyphs["elecEject"] = "\uEB2B";
        Glyphs["elecFastForward"] = "\uEB1F";
        Glyphs["elecHeadphones"] = "\uEB11";
        Glyphs["elecHeadset"] = "\uEB12";
        Glyphs["elecLineIn"] = "\uEB47";
        Glyphs["elecLineOut"] = "\uEB48";
        Glyphs["elecLoop"] = "\uEB23";
        Glyphs["elecLoudspeaker"] = "\uEB1A";
        Glyphs["elecMIDIController0"] = "\uEB36";
        Glyphs["elecMIDIController100"] = "\uEB3B";
        Glyphs["elecMIDIController20"] = "\uEB37";
        Glyphs["elecMIDIController40"] = "\uEB38";
        Glyphs["elecMIDIController60"] = "\uEB39";
        Glyphs["elecMIDIController80"] = "\uEB3A";
        Glyphs["elecMIDIIn"] = "\uEB34";
        Glyphs["elecMIDIOut"] = "\uEB35";
        Glyphs["elecMicrophone"] = "\uEB10";
        Glyphs["elecMicrophoneMute"] = "\uEB28";
        Glyphs["elecMicrophoneUnmute"] = "\uEB29";
        Glyphs["elecMixingConsole"] = "\uEB15";
        Glyphs["elecMonitor"] = "\uEB18";
        Glyphs["elecMute"] = "\uEB26";
        Glyphs["elecPause"] = "\uEB1E";
        Glyphs["elecPlay"] = "\uEB1C";
        Glyphs["elecPowerOnOff"] = "\uEB2A";
        Glyphs["elecProjector"] = "\uEB19";
        Glyphs["elecReplay"] = "\uEB24";
        Glyphs["elecRewind"] = "\uEB20";
        Glyphs["elecShuffle"] = "\uEB25";
        Glyphs["elecSkipBackwards"] = "\uEB22";
        Glyphs["elecSkipForwards"] = "\uEB21";
        Glyphs["elecStop"] = "\uEB1D";
        Glyphs["elecTape"] = "\uEB14";
        Glyphs["elecUSB"] = "\uEB16";
        Glyphs["elecUnmute"] = "\uEB27";
        Glyphs["elecUpload"] = "\uEB50";
        Glyphs["elecVideoCamera"] = "\uEB17";
        Glyphs["elecVideoIn"] = "\uEB4B";
        Glyphs["elecVideoOut"] = "\uEB4C";
        Glyphs["elecVolumeFader"] = "\uEB2C";
        Glyphs["elecVolumeFaderThumb"] = "\uEB2D";
        Glyphs["elecVolumeLevel0"] = "\uEB2E";
        Glyphs["elecVolumeLevel100"] = "\uEB33";
        Glyphs["elecVolumeLevel20"] = "\uEB2F";
        Glyphs["elecVolumeLevel40"] = "\uEB30";
        Glyphs["elecVolumeLevel60"] = "\uEB31";
        Glyphs["elecVolumeLevel80"] = "\uEB32";
        Glyphs["fClef"] = "\uE062";
        Glyphs["fClef15ma"] = "\uE066";
        Glyphs["fClef15mb"] = "\uE063";
        Glyphs["fClef8va"] = "\uE065";
        Glyphs["fClef8vb"] = "\uE064";
        Glyphs["fClefArrowDown"] = "\uE068";
        Glyphs["fClefArrowUp"] = "\uE067";
        Glyphs["fClefChange"] = "\uE07C";
        Glyphs["fClefReversed"] = "\uE076";
        Glyphs["fClefTurned"] = "\uE077";
        Glyphs["fermataAbove"] = "\uE4C0";
        Glyphs["fermataBelow"] = "\uE4C1";
        Glyphs["fermataLongAbove"] = "\uE4C6";
        Glyphs["fermataLongBelow"] = "\uE4C7";
        Glyphs["fermataLongHenzeAbove"] = "\uE4CA";
        Glyphs["fermataLongHenzeBelow"] = "\uE4CB";
        Glyphs["fermataShortAbove"] = "\uE4C4";
        Glyphs["fermataShortBelow"] = "\uE4C5";
        Glyphs["fermataShortHenzeAbove"] = "\uE4CC";
        Glyphs["fermataShortHenzeBelow"] = "\uE4CD";
        Glyphs["fermataVeryLongAbove"] = "\uE4C8";
        Glyphs["fermataVeryLongBelow"] = "\uE4C9";
        Glyphs["fermataVeryShortAbove"] = "\uE4C2";
        Glyphs["fermataVeryShortBelow"] = "\uE4C3";
        Glyphs["figbass0"] = "\uEA50";
        Glyphs["figbass1"] = "\uEA51";
        Glyphs["figbass2"] = "\uEA52";
        Glyphs["figbass2Raised"] = "\uEA53";
        Glyphs["figbass3"] = "\uEA54";
        Glyphs["figbass4"] = "\uEA55";
        Glyphs["figbass4Raised"] = "\uEA56";
        Glyphs["figbass5"] = "\uEA57";
        Glyphs["figbass5Raised1"] = "\uEA58";
        Glyphs["figbass5Raised2"] = "\uEA59";
        Glyphs["figbass5Raised3"] = "\uEA5A";
        Glyphs["figbass6"] = "\uEA5B";
        Glyphs["figbass6Raised"] = "\uEA5C";
        Glyphs["figbass6Raised2"] = "\uEA6F";
        Glyphs["figbass7"] = "\uEA5D";
        Glyphs["figbass7Diminished"] = "\uECC0";
        Glyphs["figbass7Raised1"] = "\uEA5E";
        Glyphs["figbass7Raised2"] = "\uEA5F";
        Glyphs["figbass8"] = "\uEA60";
        Glyphs["figbass9"] = "\uEA61";
        Glyphs["figbass9Raised"] = "\uEA62";
        Glyphs["figbassBracketLeft"] = "\uEA68";
        Glyphs["figbassBracketRight"] = "\uEA69";
        Glyphs["figbassCombiningLowering"] = "\uEA6E";
        Glyphs["figbassCombiningRaising"] = "\uEA6D";
        Glyphs["figbassDoubleFlat"] = "\uEA63";
        Glyphs["figbassDoubleSharp"] = "\uEA67";
        Glyphs["figbassFlat"] = "\uEA64";
        Glyphs["figbassNatural"] = "\uEA65";
        Glyphs["figbassParensLeft"] = "\uEA6A";
        Glyphs["figbassParensRight"] = "\uEA6B";
        Glyphs["figbassPlus"] = "\uEA6C";
        Glyphs["figbassSharp"] = "\uEA66";
        Glyphs["figbassTripleFlat"] = "\uECC1";
        Glyphs["figbassTripleSharp"] = "\uECC2";
        Glyphs["fingering0"] = "\uED10";
        Glyphs["fingering0Italic"] = "\uED80";
        Glyphs["fingering1"] = "\uED11";
        Glyphs["fingering1Italic"] = "\uED81";
        Glyphs["fingering2"] = "\uED12";
        Glyphs["fingering2Italic"] = "\uED82";
        Glyphs["fingering3"] = "\uED13";
        Glyphs["fingering3Italic"] = "\uED83";
        Glyphs["fingering4"] = "\uED14";
        Glyphs["fingering4Italic"] = "\uED84";
        Glyphs["fingering5"] = "\uED15";
        Glyphs["fingering5Italic"] = "\uED85";
        Glyphs["fingering6"] = "\uED24";
        Glyphs["fingering6Italic"] = "\uED86";
        Glyphs["fingering7"] = "\uED25";
        Glyphs["fingering7Italic"] = "\uED87";
        Glyphs["fingering8"] = "\uED26";
        Glyphs["fingering8Italic"] = "\uED88";
        Glyphs["fingering9"] = "\uED27";
        Glyphs["fingering9Italic"] = "\uED89";
        Glyphs["fingeringALower"] = "\uED1B";
        Glyphs["fingeringCLower"] = "\uED1C";
        Glyphs["fingeringELower"] = "\uED1E";
        Glyphs["fingeringILower"] = "\uED19";
        Glyphs["fingeringLeftBracket"] = "\uED2A";
        Glyphs["fingeringLeftBracketItalic"] = "\uED8C";
        Glyphs["fingeringLeftParenthesis"] = "\uED28";
        Glyphs["fingeringLeftParenthesisItalic"] = "\uED8A";
        Glyphs["fingeringMLower"] = "\uED1A";
        Glyphs["fingeringMultipleNotes"] = "\uED23";
        Glyphs["fingeringOLower"] = "\uED1F";
        Glyphs["fingeringPLower"] = "\uED17";
        Glyphs["fingeringQLower"] = "\uED8E";
        Glyphs["fingeringRightBracket"] = "\uED2B";
        Glyphs["fingeringRightBracketItalic"] = "\uED8D";
        Glyphs["fingeringRightParenthesis"] = "\uED29";
        Glyphs["fingeringRightParenthesisItalic"] = "\uED8B";
        Glyphs["fingeringSLower"] = "\uED8F";
        Glyphs["fingeringSeparatorMiddleDot"] = "\uED2C";
        Glyphs["fingeringSeparatorMiddleDotWhite"] = "\uED2D";
        Glyphs["fingeringSeparatorSlash"] = "\uED2E";
        Glyphs["fingeringSubstitutionAbove"] = "\uED20";
        Glyphs["fingeringSubstitutionBelow"] = "\uED21";
        Glyphs["fingeringSubstitutionDash"] = "\uED22";
        Glyphs["fingeringTLower"] = "\uED18";
        Glyphs["fingeringTUpper"] = "\uED16";
        Glyphs["fingeringXLower"] = "\uED1D";
        Glyphs["flag1024thDown"] = "\uE24F";
        Glyphs["flag1024thUp"] = "\uE24E";
        Glyphs["flag128thDown"] = "\uE249";
        Glyphs["flag128thUp"] = "\uE248";
        Glyphs["flag16thDown"] = "\uE243";
        Glyphs["flag16thUp"] = "\uE242";
        Glyphs["flag256thDown"] = "\uE24B";
        Glyphs["flag256thUp"] = "\uE24A";
        Glyphs["flag32ndDown"] = "\uE245";
        Glyphs["flag32ndUp"] = "\uE244";
        Glyphs["flag512thDown"] = "\uE24D";
        Glyphs["flag512thUp"] = "\uE24C";
        Glyphs["flag64thDown"] = "\uE247";
        Glyphs["flag64thUp"] = "\uE246";
        Glyphs["flag8thDown"] = "\uE241";
        Glyphs["flag8thUp"] = "\uE240";
        Glyphs["flagInternalDown"] = "\uE251";
        Glyphs["flagInternalUp"] = "\uE250";
        Glyphs["fretboard3String"] = "\uE850";
        Glyphs["fretboard3StringNut"] = "\uE851";
        Glyphs["fretboard4String"] = "\uE852";
        Glyphs["fretboard4StringNut"] = "\uE853";
        Glyphs["fretboard5String"] = "\uE854";
        Glyphs["fretboard5StringNut"] = "\uE855";
        Glyphs["fretboard6String"] = "\uE856";
        Glyphs["fretboard6StringNut"] = "\uE857";
        Glyphs["fretboardFilledCircle"] = "\uE858";
        Glyphs["fretboardO"] = "\uE85A";
        Glyphs["fretboardX"] = "\uE859";
        Glyphs["functionAngleLeft"] = "\uEA93";
        Glyphs["functionAngleRight"] = "\uEA94";
        Glyphs["functionBracketLeft"] = "\uEA8F";
        Glyphs["functionBracketRight"] = "\uEA90";
        Glyphs["functionDD"] = "\uEA81";
        Glyphs["functionDLower"] = "\uEA80";
        Glyphs["functionDUpper"] = "\uEA7F";
        Glyphs["functionEight"] = "\uEA78";
        Glyphs["functionFUpper"] = "\uEA99";
        Glyphs["functionFive"] = "\uEA75";
        Glyphs["functionFour"] = "\uEA74";
        Glyphs["functionGLower"] = "\uEA84";
        Glyphs["functionGUpper"] = "\uEA83";
        Glyphs["functionGreaterThan"] = "\uEA7C";
        Glyphs["functionILower"] = "\uEA9B";
        Glyphs["functionIUpper"] = "\uEA9A";
        Glyphs["functionKLower"] = "\uEA9D";
        Glyphs["functionKUpper"] = "\uEA9C";
        Glyphs["functionLLower"] = "\uEA9F";
        Glyphs["functionLUpper"] = "\uEA9E";
        Glyphs["functionLessThan"] = "\uEA7A";
        Glyphs["functionMLower"] = "\uED01";
        Glyphs["functionMUpper"] = "\uED00";
        Glyphs["functionMinus"] = "\uEA7B";
        Glyphs["functionNLower"] = "\uEA86";
        Glyphs["functionNUpper"] = "\uEA85";
        Glyphs["functionNUpperSuperscript"] = "\uED02";
        Glyphs["functionNine"] = "\uEA79";
        Glyphs["functionOne"] = "\uEA71";
        Glyphs["functionPLower"] = "\uEA88";
        Glyphs["functionPUpper"] = "\uEA87";
        Glyphs["functionParensLeft"] = "\uEA91";
        Glyphs["functionParensRight"] = "\uEA92";
        Glyphs["functionPlus"] = "\uEA98";
        Glyphs["functionRLower"] = "\uED03";
        Glyphs["functionRepetition1"] = "\uEA95";
        Glyphs["functionRepetition2"] = "\uEA96";
        Glyphs["functionRing"] = "\uEA97";
        Glyphs["functionSLower"] = "\uEA8A";
        Glyphs["functionSSLower"] = "\uEA7E";
        Glyphs["functionSSUpper"] = "\uEA7D";
        Glyphs["functionSUpper"] = "\uEA89";
        Glyphs["functionSeven"] = "\uEA77";
        Glyphs["functionSix"] = "\uEA76";
        Glyphs["functionSlashedDD"] = "\uEA82";
        Glyphs["functionTLower"] = "\uEA8C";
        Glyphs["functionTUpper"] = "\uEA8B";
        Glyphs["functionThree"] = "\uEA73";
        Glyphs["functionTwo"] = "\uEA72";
        Glyphs["functionVLower"] = "\uEA8E";
        Glyphs["functionVUpper"] = "\uEA8D";
        Glyphs["functionZero"] = "\uEA70";
        Glyphs["gClef"] = "\uE050";
        Glyphs["gClef15ma"] = "\uE054";
        Glyphs["gClef15mb"] = "\uE051";
        Glyphs["gClef8va"] = "\uE053";
        Glyphs["gClef8vb"] = "\uE052";
        Glyphs["gClef8vbCClef"] = "\uE056";
        Glyphs["gClef8vbOld"] = "\uE055";
        Glyphs["gClef8vbParens"] = "\uE057";
        Glyphs["gClefArrowDown"] = "\uE05B";
        Glyphs["gClefArrowUp"] = "\uE05A";
        Glyphs["gClefChange"] = "\uE07A";
        Glyphs["gClefLigatedNumberAbove"] = "\uE059";
        Glyphs["gClefLigatedNumberBelow"] = "\uE058";
        Glyphs["gClefReversed"] = "\uE073";
        Glyphs["gClefTurned"] = "\uE074";
        Glyphs["glissandoDown"] = "\uE586";
        Glyphs["glissandoUp"] = "\uE585";
        Glyphs["graceNoteAcciaccaturaStemDown"] = "\uE561";
        Glyphs["graceNoteAcciaccaturaStemUp"] = "\uE560";
        Glyphs["graceNoteAppoggiaturaStemDown"] = "\uE563";
        Glyphs["graceNoteAppoggiaturaStemUp"] = "\uE562";
        Glyphs["graceNoteSlashStemDown"] = "\uE565";
        Glyphs["graceNoteSlashStemUp"] = "\uE564";
        Glyphs["guitarBarreFull"] = "\uE848";
        Glyphs["guitarBarreHalf"] = "\uE849";
        Glyphs["guitarClosePedal"] = "\uE83F";
        Glyphs["guitarFadeIn"] = "\uE843";
        Glyphs["guitarFadeOut"] = "\uE844";
        Glyphs["guitarGolpe"] = "\uE842";
        Glyphs["guitarHalfOpenPedal"] = "\uE83E";
        Glyphs["guitarLeftHandTapping"] = "\uE840";
        Glyphs["guitarOpenPedal"] = "\uE83D";
        Glyphs["guitarRightHandTapping"] = "\uE841";
        Glyphs["guitarShake"] = "\uE832";
        Glyphs["guitarString0"] = "\uE833";
        Glyphs["guitarString1"] = "\uE834";
        Glyphs["guitarString10"] = "\uE84A";
        Glyphs["guitarString11"] = "\uE84B";
        Glyphs["guitarString12"] = "\uE84C";
        Glyphs["guitarString13"] = "\uE84D";
        Glyphs["guitarString2"] = "\uE835";
        Glyphs["guitarString3"] = "\uE836";
        Glyphs["guitarString4"] = "\uE837";
        Glyphs["guitarString5"] = "\uE838";
        Glyphs["guitarString6"] = "\uE839";
        Glyphs["guitarString7"] = "\uE83A";
        Glyphs["guitarString8"] = "\uE83B";
        Glyphs["guitarString9"] = "\uE83C";
        Glyphs["guitarStrumDown"] = "\uE847";
        Glyphs["guitarStrumUp"] = "\uE846";
        Glyphs["guitarVibratoBarDip"] = "\uE831";
        Glyphs["guitarVibratoBarScoop"] = "\uE830";
        Glyphs["guitarVibratoStroke"] = "\uEAB2";
        Glyphs["guitarVolumeSwell"] = "\uE845";
        Glyphs["guitarWideVibratoStroke"] = "\uEAB3";
        Glyphs["handbellsBelltree"] = "\uE81F";
        Glyphs["handbellsDamp3"] = "\uE81E";
        Glyphs["handbellsEcho1"] = "\uE81B";
        Glyphs["handbellsEcho2"] = "\uE81C";
        Glyphs["handbellsGyro"] = "\uE81D";
        Glyphs["handbellsHandMartellato"] = "\uE812";
        Glyphs["handbellsMalletBellOnTable"] = "\uE815";
        Glyphs["handbellsMalletBellSuspended"] = "\uE814";
        Glyphs["handbellsMalletLft"] = "\uE816";
        Glyphs["handbellsMartellato"] = "\uE810";
        Glyphs["handbellsMartellatoLift"] = "\uE811";
        Glyphs["handbellsMutedMartellato"] = "\uE813";
        Glyphs["handbellsPluckLift"] = "\uE817";
        Glyphs["handbellsSwing"] = "\uE81A";
        Glyphs["handbellsSwingDown"] = "\uE819";
        Glyphs["handbellsSwingUp"] = "\uE818";
        Glyphs["handbellsTablePairBells"] = "\uE821";
        Glyphs["handbellsTableSingleBell"] = "\uE820";
        Glyphs["harpMetalRod"] = "\uE68F";
        Glyphs["harpPedalCentered"] = "\uE681";
        Glyphs["harpPedalDivider"] = "\uE683";
        Glyphs["harpPedalLowered"] = "\uE682";
        Glyphs["harpPedalRaised"] = "\uE680";
        Glyphs["harpSalzedoAeolianAscending"] = "\uE695";
        Glyphs["harpSalzedoAeolianDescending"] = "\uE696";
        Glyphs["harpSalzedoDampAbove"] = "\uE69A";
        Glyphs["harpSalzedoDampBelow"] = "\uE699";
        Glyphs["harpSalzedoDampBothHands"] = "\uE698";
        Glyphs["harpSalzedoDampLowStrings"] = "\uE697";
        Glyphs["harpSalzedoFluidicSoundsLeft"] = "\uE68D";
        Glyphs["harpSalzedoFluidicSoundsRight"] = "\uE68E";
        Glyphs["harpSalzedoIsolatedSounds"] = "\uE69C";
        Glyphs["harpSalzedoMetallicSounds"] = "\uE688";
        Glyphs["harpSalzedoMetallicSoundsOneString"] = "\uE69B";
        Glyphs["harpSalzedoMuffleTotally"] = "\uE68C";
        Glyphs["harpSalzedoOboicFlux"] = "\uE685";
        Glyphs["harpSalzedoPlayUpperEnd"] = "\uE68A";
        Glyphs["harpSalzedoSlideWithSuppleness"] = "\uE684";
        Glyphs["harpSalzedoSnareDrum"] = "\uE69D";
        Glyphs["harpSalzedoTamTamSounds"] = "\uE689";
        Glyphs["harpSalzedoThunderEffect"] = "\uE686";
        Glyphs["harpSalzedoTimpanicSounds"] = "\uE68B";
        Glyphs["harpSalzedoWhistlingSounds"] = "\uE687";
        Glyphs["harpStringNoiseStem"] = "\uE694";
        Glyphs["harpTuningKey"] = "\uE690";
        Glyphs["harpTuningKeyGlissando"] = "\uE693";
        Glyphs["harpTuningKeyHandle"] = "\uE691";
        Glyphs["harpTuningKeyShank"] = "\uE692";
        Glyphs["indianDrumClef"] = "\uED70";
        Glyphs["kahnBackChug"] = "\uEDE2";
        Glyphs["kahnBackFlap"] = "\uEDD8";
        Glyphs["kahnBackRiff"] = "\uEDE1";
        Glyphs["kahnBackRip"] = "\uEDDA";
        Glyphs["kahnBallChange"] = "\uEDC6";
        Glyphs["kahnBallDig"] = "\uEDCD";
        Glyphs["kahnBrushBackward"] = "\uEDA7";
        Glyphs["kahnBrushForward"] = "\uEDA6";
        Glyphs["kahnChug"] = "\uEDDD";
        Glyphs["kahnClap"] = "\uEDB8";
        Glyphs["kahnDoubleSnap"] = "\uEDBA";
        Glyphs["kahnDoubleWing"] = "\uEDEB";
        Glyphs["kahnDrawStep"] = "\uEDB2";
        Glyphs["kahnDrawTap"] = "\uEDB3";
        Glyphs["kahnFlam"] = "\uEDCF";
        Glyphs["kahnFlap"] = "\uEDD5";
        Glyphs["kahnFlapStep"] = "\uEDD7";
        Glyphs["kahnFlat"] = "\uEDA9";
        Glyphs["kahnFleaHop"] = "\uEDB0";
        Glyphs["kahnFleaTap"] = "\uEDB1";
        Glyphs["kahnGraceTap"] = "\uEDA8";
        Glyphs["kahnGraceTapChange"] = "\uEDD1";
        Glyphs["kahnGraceTapHop"] = "\uEDD0";
        Glyphs["kahnGraceTapStamp"] = "\uEDD3";
        Glyphs["kahnHeel"] = "\uEDAA";
        Glyphs["kahnHeelChange"] = "\uEDC9";
        Glyphs["kahnHeelClick"] = "\uEDBB";
        Glyphs["kahnHeelDrop"] = "\uEDB6";
        Glyphs["kahnHeelStep"] = "\uEDC4";
        Glyphs["kahnHeelTap"] = "\uEDCB";
        Glyphs["kahnHop"] = "\uEDA2";
        Glyphs["kahnJumpApart"] = "\uEDA5";
        Glyphs["kahnJumpTogether"] = "\uEDA4";
        Glyphs["kahnKneeInward"] = "\uEDAD";
        Glyphs["kahnKneeOutward"] = "\uEDAC";
        Glyphs["kahnLeap"] = "\uEDA3";
        Glyphs["kahnLeapFlatFoot"] = "\uEDD2";
        Glyphs["kahnLeapHeelClick"] = "\uEDD4";
        Glyphs["kahnLeftCatch"] = "\uEDBF";
        Glyphs["kahnLeftCross"] = "\uEDBD";
        Glyphs["kahnLeftFoot"] = "\uEDEE";
        Glyphs["kahnLeftToeStrike"] = "\uEDC1";
        Glyphs["kahnLeftTurn"] = "\uEDF0";
        Glyphs["kahnOverTheTop"] = "\uEDEC";
        Glyphs["kahnOverTheTopTap"] = "\uEDED";
        Glyphs["kahnPull"] = "\uEDE3";
        Glyphs["kahnPush"] = "\uEDDE";
        Glyphs["kahnRiff"] = "\uEDE0";
        Glyphs["kahnRiffle"] = "\uEDE7";
        Glyphs["kahnRightCatch"] = "\uEDC0";
        Glyphs["kahnRightCross"] = "\uEDBE";
        Glyphs["kahnRightFoot"] = "\uEDEF";
        Glyphs["kahnRightToeStrike"] = "\uEDC2";
        Glyphs["kahnRightTurn"] = "\uEDF1";
        Glyphs["kahnRip"] = "\uEDD6";
        Glyphs["kahnRipple"] = "\uEDE8";
        Glyphs["kahnScrape"] = "\uEDAE";
        Glyphs["kahnScuff"] = "\uEDDC";
        Glyphs["kahnScuffle"] = "\uEDE6";
        Glyphs["kahnShuffle"] = "\uEDE5";
        Glyphs["kahnSlam"] = "\uEDCE";
        Glyphs["kahnSlap"] = "\uEDD9";
        Glyphs["kahnSlideStep"] = "\uEDB4";
        Glyphs["kahnSlideTap"] = "\uEDB5";
        Glyphs["kahnSnap"] = "\uEDB9";
        Glyphs["kahnStamp"] = "\uEDC3";
        Glyphs["kahnStampStamp"] = "\uEDC8";
        Glyphs["kahnStep"] = "\uEDA0";
        Glyphs["kahnStepStamp"] = "\uEDC7";
        Glyphs["kahnStomp"] = "\uEDCA";
        Glyphs["kahnStompBrush"] = "\uEDDB";
        Glyphs["kahnTap"] = "\uEDA1";
        Glyphs["kahnToe"] = "\uEDAB";
        Glyphs["kahnToeClick"] = "\uEDBC";
        Glyphs["kahnToeDrop"] = "\uEDB7";
        Glyphs["kahnToeStep"] = "\uEDC5";
        Glyphs["kahnToeTap"] = "\uEDCC";
        Glyphs["kahnTrench"] = "\uEDAF";
        Glyphs["kahnWing"] = "\uEDE9";
        Glyphs["kahnWingChange"] = "\uEDEA";
        Glyphs["kahnZank"] = "\uEDE4";
        Glyphs["kahnZink"] = "\uEDDF";
        Glyphs["keyboardBebung2DotsAbove"] = "\uE668";
        Glyphs["keyboardBebung2DotsBelow"] = "\uE669";
        Glyphs["keyboardBebung3DotsAbove"] = "\uE66A";
        Glyphs["keyboardBebung3DotsBelow"] = "\uE66B";
        Glyphs["keyboardBebung4DotsAbove"] = "\uE66C";
        Glyphs["keyboardBebung4DotsBelow"] = "\uE66D";
        Glyphs["keyboardLeftPedalPictogram"] = "\uE65E";
        Glyphs["keyboardMiddlePedalPictogram"] = "\uE65F";
        Glyphs["keyboardPedalD"] = "\uE653";
        Glyphs["keyboardPedalDot"] = "\uE654";
        Glyphs["keyboardPedalE"] = "\uE652";
        Glyphs["keyboardPedalHalf"] = "\uE656";
        Glyphs["keyboardPedalHalf2"] = "\uE65B";
        Glyphs["keyboardPedalHalf3"] = "\uE65C";
        Glyphs["keyboardPedalHeel1"] = "\uE661";
        Glyphs["keyboardPedalHeel2"] = "\uE662";
        Glyphs["keyboardPedalHeel3"] = "\uE663";
        Glyphs["keyboardPedalHeelToToe"] = "\uE674";
        Glyphs["keyboardPedalHeelToe"] = "\uE666";
        Glyphs["keyboardPedalHookEnd"] = "\uE673";
        Glyphs["keyboardPedalHookStart"] = "\uE672";
        Glyphs["keyboardPedalHyphen"] = "\uE658";
        Glyphs["keyboardPedalP"] = "\uE651";
        Glyphs["keyboardPedalParensLeft"] = "\uE676";
        Glyphs["keyboardPedalParensRight"] = "\uE677";
        Glyphs["keyboardPedalPed"] = "\uE650";
        Glyphs["keyboardPedalS"] = "\uE65A";
        Glyphs["keyboardPedalSost"] = "\uE659";
        Glyphs["keyboardPedalToe1"] = "\uE664";
        Glyphs["keyboardPedalToe2"] = "\uE665";
        Glyphs["keyboardPedalToeToHeel"] = "\uE675";
        Glyphs["keyboardPedalUp"] = "\uE655";
        Glyphs["keyboardPedalUpNotch"] = "\uE657";
        Glyphs["keyboardPedalUpSpecial"] = "\uE65D";
        Glyphs["keyboardPlayWithLH"] = "\uE670";
        Glyphs["keyboardPlayWithLHEnd"] = "\uE671";
        Glyphs["keyboardPlayWithRH"] = "\uE66E";
        Glyphs["keyboardPlayWithRHEnd"] = "\uE66F";
        Glyphs["keyboardPluckInside"] = "\uE667";
        Glyphs["keyboardRightPedalPictogram"] = "\uE660";
        Glyphs["kievanAccidentalFlat"] = "\uEC3E";
        Glyphs["kievanAccidentalSharp"] = "\uEC3D";
        Glyphs["kievanAugmentationDot"] = "\uEC3C";
        Glyphs["kievanCClef"] = "\uEC30";
        Glyphs["kievanEndingSymbol"] = "\uEC31";
        Glyphs["kievanNote8thStemDown"] = "\uEC3A";
        Glyphs["kievanNote8thStemUp"] = "\uEC39";
        Glyphs["kievanNoteBeam"] = "\uEC3B";
        Glyphs["kievanNoteHalfStaffLine"] = "\uEC35";
        Glyphs["kievanNoteHalfStaffSpace"] = "\uEC36";
        Glyphs["kievanNoteQuarterStemDown"] = "\uEC38";
        Glyphs["kievanNoteQuarterStemUp"] = "\uEC37";
        Glyphs["kievanNoteReciting"] = "\uEC32";
        Glyphs["kievanNoteWhole"] = "\uEC33";
        Glyphs["kievanNoteWholeFinal"] = "\uEC34";
        Glyphs["kodalyHandDo"] = "\uEC40";
        Glyphs["kodalyHandFa"] = "\uEC43";
        Glyphs["kodalyHandLa"] = "\uEC45";
        Glyphs["kodalyHandMi"] = "\uEC42";
        Glyphs["kodalyHandRe"] = "\uEC41";
        Glyphs["kodalyHandSo"] = "\uEC44";
        Glyphs["kodalyHandTi"] = "\uEC46";
        Glyphs["leftRepeatSmall"] = "\uE04C";
        Glyphs["legerLine"] = "\uE022";
        Glyphs["legerLineNarrow"] = "\uE024";
        Glyphs["legerLineWide"] = "\uE023";
        Glyphs["luteBarlineEndRepeat"] = "\uEBA4";
        Glyphs["luteBarlineFinal"] = "\uEBA5";
        Glyphs["luteBarlineStartRepeat"] = "\uEBA3";
        Glyphs["luteDuration16th"] = "\uEBAB";
        Glyphs["luteDuration32nd"] = "\uEBAC";
        Glyphs["luteDuration8th"] = "\uEBAA";
        Glyphs["luteDurationDoubleWhole"] = "\uEBA6";
        Glyphs["luteDurationHalf"] = "\uEBA8";
        Glyphs["luteDurationQuarter"] = "\uEBA9";
        Glyphs["luteDurationWhole"] = "\uEBA7";
        Glyphs["luteFingeringRHFirst"] = "\uEBAE";
        Glyphs["luteFingeringRHSecond"] = "\uEBAF";
        Glyphs["luteFingeringRHThird"] = "\uEBB0";
        Glyphs["luteFingeringRHThumb"] = "\uEBAD";
        Glyphs["luteFrench10thCourse"] = "\uEBD0";
        Glyphs["luteFrench7thCourse"] = "\uEBCD";
        Glyphs["luteFrench8thCourse"] = "\uEBCE";
        Glyphs["luteFrench9thCourse"] = "\uEBCF";
        Glyphs["luteFrenchAppoggiaturaAbove"] = "\uEBD5";
        Glyphs["luteFrenchAppoggiaturaBelow"] = "\uEBD4";
        Glyphs["luteFrenchFretA"] = "\uEBC0";
        Glyphs["luteFrenchFretB"] = "\uEBC1";
        Glyphs["luteFrenchFretC"] = "\uEBC2";
        Glyphs["luteFrenchFretD"] = "\uEBC3";
        Glyphs["luteFrenchFretE"] = "\uEBC4";
        Glyphs["luteFrenchFretF"] = "\uEBC5";
        Glyphs["luteFrenchFretG"] = "\uEBC6";
        Glyphs["luteFrenchFretH"] = "\uEBC7";
        Glyphs["luteFrenchFretI"] = "\uEBC8";
        Glyphs["luteFrenchFretK"] = "\uEBC9";
        Glyphs["luteFrenchFretL"] = "\uEBCA";
        Glyphs["luteFrenchFretM"] = "\uEBCB";
        Glyphs["luteFrenchFretN"] = "\uEBCC";
        Glyphs["luteFrenchMordentInverted"] = "\uEBD3";
        Glyphs["luteFrenchMordentLower"] = "\uEBD2";
        Glyphs["luteFrenchMordentUpper"] = "\uEBD1";
        Glyphs["luteGermanALower"] = "\uEC00";
        Glyphs["luteGermanAUpper"] = "\uEC17";
        Glyphs["luteGermanBLower"] = "\uEC01";
        Glyphs["luteGermanBUpper"] = "\uEC18";
        Glyphs["luteGermanCLower"] = "\uEC02";
        Glyphs["luteGermanCUpper"] = "\uEC19";
        Glyphs["luteGermanDLower"] = "\uEC03";
        Glyphs["luteGermanDUpper"] = "\uEC1A";
        Glyphs["luteGermanELower"] = "\uEC04";
        Glyphs["luteGermanEUpper"] = "\uEC1B";
        Glyphs["luteGermanFLower"] = "\uEC05";
        Glyphs["luteGermanFUpper"] = "\uEC1C";
        Glyphs["luteGermanGLower"] = "\uEC06";
        Glyphs["luteGermanGUpper"] = "\uEC1D";
        Glyphs["luteGermanHLower"] = "\uEC07";
        Glyphs["luteGermanHUpper"] = "\uEC1E";
        Glyphs["luteGermanILower"] = "\uEC08";
        Glyphs["luteGermanIUpper"] = "\uEC1F";
        Glyphs["luteGermanKLower"] = "\uEC09";
        Glyphs["luteGermanKUpper"] = "\uEC20";
        Glyphs["luteGermanLLower"] = "\uEC0A";
        Glyphs["luteGermanLUpper"] = "\uEC21";
        Glyphs["luteGermanMLower"] = "\uEC0B";
        Glyphs["luteGermanMUpper"] = "\uEC22";
        Glyphs["luteGermanNLower"] = "\uEC0C";
        Glyphs["luteGermanNUpper"] = "\uEC23";
        Glyphs["luteGermanOLower"] = "\uEC0D";
        Glyphs["luteGermanPLower"] = "\uEC0E";
        Glyphs["luteGermanQLower"] = "\uEC0F";
        Glyphs["luteGermanRLower"] = "\uEC10";
        Glyphs["luteGermanSLower"] = "\uEC11";
        Glyphs["luteGermanTLower"] = "\uEC12";
        Glyphs["luteGermanVLower"] = "\uEC13";
        Glyphs["luteGermanXLower"] = "\uEC14";
        Glyphs["luteGermanYLower"] = "\uEC15";
        Glyphs["luteGermanZLower"] = "\uEC16";
        Glyphs["luteItalianClefCSolFaUt"] = "\uEBF1";
        Glyphs["luteItalianClefFFaUt"] = "\uEBF0";
        Glyphs["luteItalianFret0"] = "\uEBE0";
        Glyphs["luteItalianFret1"] = "\uEBE1";
        Glyphs["luteItalianFret2"] = "\uEBE2";
        Glyphs["luteItalianFret3"] = "\uEBE3";
        Glyphs["luteItalianFret4"] = "\uEBE4";
        Glyphs["luteItalianFret5"] = "\uEBE5";
        Glyphs["luteItalianFret6"] = "\uEBE6";
        Glyphs["luteItalianFret7"] = "\uEBE7";
        Glyphs["luteItalianFret8"] = "\uEBE8";
        Glyphs["luteItalianFret9"] = "\uEBE9";
        Glyphs["luteItalianHoldFinger"] = "\uEBF4";
        Glyphs["luteItalianHoldNote"] = "\uEBF3";
        Glyphs["luteItalianReleaseFinger"] = "\uEBF5";
        Glyphs["luteItalianTempoFast"] = "\uEBEA";
        Glyphs["luteItalianTempoNeitherFastNorSlow"] = "\uEBEC";
        Glyphs["luteItalianTempoSlow"] = "\uEBED";
        Glyphs["luteItalianTempoSomewhatFast"] = "\uEBEB";
        Glyphs["luteItalianTempoVerySlow"] = "\uEBEE";
        Glyphs["luteItalianTimeTriple"] = "\uEBEF";
        Glyphs["luteItalianTremolo"] = "\uEBF2";
        Glyphs["luteItalianVibrato"] = "\uEBF6";
        Glyphs["luteStaff6Lines"] = "\uEBA0";
        Glyphs["luteStaff6LinesNarrow"] = "\uEBA2";
        Glyphs["luteStaff6LinesWide"] = "\uEBA1";
        Glyphs["lyricsElision"] = "\uE551";
        Glyphs["lyricsElisionNarrow"] = "\uE550";
        Glyphs["lyricsElisionWide"] = "\uE552";
        Glyphs["lyricsHyphenBaseline"] = "\uE553";
        Glyphs["lyricsHyphenBaselineNonBreaking"] = "\uE554";
        Glyphs["lyricsTextRepeat"] = "\uE555";
        Glyphs["medRenFlatHardB"] = "\uE9E1";
        Glyphs["medRenFlatSoftB"] = "\uE9E0";
        Glyphs["medRenFlatWithDot"] = "\uE9E4";
        Glyphs["medRenGClefCMN"] = "\uEA24";
        Glyphs["medRenLiquescenceCMN"] = "\uEA22";
        Glyphs["medRenLiquescentAscCMN"] = "\uEA26";
        Glyphs["medRenLiquescentDescCMN"] = "\uEA27";
        Glyphs["medRenNatural"] = "\uE9E2";
        Glyphs["medRenNaturalWithCross"] = "\uE9E5";
        Glyphs["medRenOriscusCMN"] = "\uEA2A";
        Glyphs["medRenPlicaCMN"] = "\uEA23";
        Glyphs["medRenPunctumCMN"] = "\uEA25";
        Glyphs["medRenQuilismaCMN"] = "\uEA28";
        Glyphs["medRenSharpCroix"] = "\uE9E3";
        Glyphs["medRenStrophicusCMN"] = "\uEA29";
        Glyphs["mensuralAlterationSign"] = "\uEA10";
        Glyphs["mensuralBlackBrevis"] = "\uE952";
        Glyphs["mensuralBlackBrevisVoid"] = "\uE956";
        Glyphs["mensuralBlackDragma"] = "\uE95A";
        Glyphs["mensuralBlackLonga"] = "\uE951";
        Glyphs["mensuralBlackMaxima"] = "\uE950";
        Glyphs["mensuralBlackMinima"] = "\uE954";
        Glyphs["mensuralBlackMinimaVoid"] = "\uE958";
        Glyphs["mensuralBlackSemibrevis"] = "\uE953";
        Glyphs["mensuralBlackSemibrevisCaudata"] = "\uE959";
        Glyphs["mensuralBlackSemibrevisOblique"] = "\uE95B";
        Glyphs["mensuralBlackSemibrevisVoid"] = "\uE957";
        Glyphs["mensuralBlackSemiminima"] = "\uE955";
        Glyphs["mensuralCclef"] = "\uE905";
        Glyphs["mensuralCclefPetrucciPosHigh"] = "\uE90A";
        Glyphs["mensuralCclefPetrucciPosHighest"] = "\uE90B";
        Glyphs["mensuralCclefPetrucciPosLow"] = "\uE908";
        Glyphs["mensuralCclefPetrucciPosLowest"] = "\uE907";
        Glyphs["mensuralCclefPetrucciPosMiddle"] = "\uE909";
        Glyphs["mensuralColorationEndRound"] = "\uEA0F";
        Glyphs["mensuralColorationEndSquare"] = "\uEA0D";
        Glyphs["mensuralColorationStartRound"] = "\uEA0E";
        Glyphs["mensuralColorationStartSquare"] = "\uEA0C";
        Glyphs["mensuralCombStemDiagonal"] = "\uE940";
        Glyphs["mensuralCombStemDown"] = "\uE93F";
        Glyphs["mensuralCombStemDownFlagExtended"] = "\uE948";
        Glyphs["mensuralCombStemDownFlagFlared"] = "\uE946";
        Glyphs["mensuralCombStemDownFlagFusa"] = "\uE94C";
        Glyphs["mensuralCombStemDownFlagLeft"] = "\uE944";
        Glyphs["mensuralCombStemDownFlagRight"] = "\uE942";
        Glyphs["mensuralCombStemDownFlagSemiminima"] = "\uE94A";
        Glyphs["mensuralCombStemUp"] = "\uE93E";
        Glyphs["mensuralCombStemUpFlagExtended"] = "\uE947";
        Glyphs["mensuralCombStemUpFlagFlared"] = "\uE945";
        Glyphs["mensuralCombStemUpFlagFusa"] = "\uE94B";
        Glyphs["mensuralCombStemUpFlagLeft"] = "\uE943";
        Glyphs["mensuralCombStemUpFlagRight"] = "\uE941";
        Glyphs["mensuralCombStemUpFlagSemiminima"] = "\uE949";
        Glyphs["mensuralCustosCheckmark"] = "\uEA0A";
        Glyphs["mensuralCustosDown"] = "\uEA03";
        Glyphs["mensuralCustosTurn"] = "\uEA0B";
        Glyphs["mensuralCustosUp"] = "\uEA02";
        Glyphs["mensuralFclef"] = "\uE903";
        Glyphs["mensuralFclefPetrucci"] = "\uE904";
        Glyphs["mensuralGclef"] = "\uE900";
        Glyphs["mensuralGclefPetrucci"] = "\uE901";
        Glyphs["mensuralModusImperfectumVert"] = "\uE92D";
        Glyphs["mensuralModusPerfectumVert"] = "\uE92C";
        Glyphs["mensuralNoteheadLongaBlack"] = "\uE934";
        Glyphs["mensuralNoteheadLongaBlackVoid"] = "\uE936";
        Glyphs["mensuralNoteheadLongaVoid"] = "\uE935";
        Glyphs["mensuralNoteheadLongaWhite"] = "\uE937";
        Glyphs["mensuralNoteheadMaximaBlack"] = "\uE930";
        Glyphs["mensuralNoteheadMaximaBlackVoid"] = "\uE932";
        Glyphs["mensuralNoteheadMaximaVoid"] = "\uE931";
        Glyphs["mensuralNoteheadMaximaWhite"] = "\uE933";
        Glyphs["mensuralNoteheadMinimaWhite"] = "\uE93C";
        Glyphs["mensuralNoteheadSemibrevisBlack"] = "\uE938";
        Glyphs["mensuralNoteheadSemibrevisBlackVoid"] = "\uE93A";
        Glyphs["mensuralNoteheadSemibrevisBlackVoidTurned"] = "\uE93B";
        Glyphs["mensuralNoteheadSemibrevisVoid"] = "\uE939";
        Glyphs["mensuralNoteheadSemiminimaWhite"] = "\uE93D";
        Glyphs["mensuralObliqueAsc2ndBlack"] = "\uE970";
        Glyphs["mensuralObliqueAsc2ndBlackVoid"] = "\uE972";
        Glyphs["mensuralObliqueAsc2ndVoid"] = "\uE971";
        Glyphs["mensuralObliqueAsc2ndWhite"] = "\uE973";
        Glyphs["mensuralObliqueAsc3rdBlack"] = "\uE974";
        Glyphs["mensuralObliqueAsc3rdBlackVoid"] = "\uE976";
        Glyphs["mensuralObliqueAsc3rdVoid"] = "\uE975";
        Glyphs["mensuralObliqueAsc3rdWhite"] = "\uE977";
        Glyphs["mensuralObliqueAsc4thBlack"] = "\uE978";
        Glyphs["mensuralObliqueAsc4thBlackVoid"] = "\uE97A";
        Glyphs["mensuralObliqueAsc4thVoid"] = "\uE979";
        Glyphs["mensuralObliqueAsc4thWhite"] = "\uE97B";
        Glyphs["mensuralObliqueAsc5thBlack"] = "\uE97C";
        Glyphs["mensuralObliqueAsc5thBlackVoid"] = "\uE97E";
        Glyphs["mensuralObliqueAsc5thVoid"] = "\uE97D";
        Glyphs["mensuralObliqueAsc5thWhite"] = "\uE97F";
        Glyphs["mensuralObliqueDesc2ndBlack"] = "\uE980";
        Glyphs["mensuralObliqueDesc2ndBlackVoid"] = "\uE982";
        Glyphs["mensuralObliqueDesc2ndVoid"] = "\uE981";
        Glyphs["mensuralObliqueDesc2ndWhite"] = "\uE983";
        Glyphs["mensuralObliqueDesc3rdBlack"] = "\uE984";
        Glyphs["mensuralObliqueDesc3rdBlackVoid"] = "\uE986";
        Glyphs["mensuralObliqueDesc3rdVoid"] = "\uE985";
        Glyphs["mensuralObliqueDesc3rdWhite"] = "\uE987";
        Glyphs["mensuralObliqueDesc4thBlack"] = "\uE988";
        Glyphs["mensuralObliqueDesc4thBlackVoid"] = "\uE98A";
        Glyphs["mensuralObliqueDesc4thVoid"] = "\uE989";
        Glyphs["mensuralObliqueDesc4thWhite"] = "\uE98B";
        Glyphs["mensuralObliqueDesc5thBlack"] = "\uE98C";
        Glyphs["mensuralObliqueDesc5thBlackVoid"] = "\uE98E";
        Glyphs["mensuralObliqueDesc5thVoid"] = "\uE98D";
        Glyphs["mensuralObliqueDesc5thWhite"] = "\uE98F";
        Glyphs["mensuralProlation1"] = "\uE910";
        Glyphs["mensuralProlation10"] = "\uE919";
        Glyphs["mensuralProlation11"] = "\uE91A";
        Glyphs["mensuralProlation2"] = "\uE911";
        Glyphs["mensuralProlation3"] = "\uE912";
        Glyphs["mensuralProlation4"] = "\uE913";
        Glyphs["mensuralProlation5"] = "\uE914";
        Glyphs["mensuralProlation6"] = "\uE915";
        Glyphs["mensuralProlation7"] = "\uE916";
        Glyphs["mensuralProlation8"] = "\uE917";
        Glyphs["mensuralProlation9"] = "\uE918";
        Glyphs["mensuralProlationCombiningDot"] = "\uE920";
        Glyphs["mensuralProlationCombiningDotVoid"] = "\uE924";
        Glyphs["mensuralProlationCombiningStroke"] = "\uE925";
        Glyphs["mensuralProlationCombiningThreeDots"] = "\uE922";
        Glyphs["mensuralProlationCombiningThreeDotsTri"] = "\uE923";
        Glyphs["mensuralProlationCombiningTwoDots"] = "\uE921";
        Glyphs["mensuralProportion1"] = "\uE926";
        Glyphs["mensuralProportion2"] = "\uE927";
        Glyphs["mensuralProportion3"] = "\uE928";
        Glyphs["mensuralProportion4"] = "\uE929";
        Glyphs["mensuralProportion5"] = "\uEE90";
        Glyphs["mensuralProportion6"] = "\uEE91";
        Glyphs["mensuralProportion7"] = "\uEE92";
        Glyphs["mensuralProportion8"] = "\uEE93";
        Glyphs["mensuralProportion9"] = "\uEE94";
        Glyphs["mensuralProportionMajor"] = "\uE92B";
        Glyphs["mensuralProportionMinor"] = "\uE92A";
        Glyphs["mensuralProportionProportioDupla1"] = "\uE91C";
        Glyphs["mensuralProportionProportioDupla2"] = "\uE91D";
        Glyphs["mensuralProportionProportioQuadrupla"] = "\uE91F";
        Glyphs["mensuralProportionProportioTripla"] = "\uE91E";
        Glyphs["mensuralProportionTempusPerfectum"] = "\uE91B";
        Glyphs["mensuralRestBrevis"] = "\uE9F3";
        Glyphs["mensuralRestFusa"] = "\uE9F7";
        Glyphs["mensuralRestLongaImperfecta"] = "\uE9F2";
        Glyphs["mensuralRestLongaPerfecta"] = "\uE9F1";
        Glyphs["mensuralRestMaxima"] = "\uE9F0";
        Glyphs["mensuralRestMinima"] = "\uE9F5";
        Glyphs["mensuralRestSemibrevis"] = "\uE9F4";
        Glyphs["mensuralRestSemifusa"] = "\uE9F8";
        Glyphs["mensuralRestSemiminima"] = "\uE9F6";
        Glyphs["mensuralSignumDown"] = "\uEA01";
        Glyphs["mensuralSignumUp"] = "\uEA00";
        Glyphs["mensuralTempusImperfectumHoriz"] = "\uE92F";
        Glyphs["mensuralTempusPerfectumHoriz"] = "\uE92E";
        Glyphs["mensuralWhiteBrevis"] = "\uE95E";
        Glyphs["mensuralWhiteFusa"] = "\uE961";
        Glyphs["mensuralWhiteLonga"] = "\uE95D";
        Glyphs["mensuralWhiteMaxima"] = "\uE95C";
        Glyphs["mensuralWhiteMinima"] = "\uE95F";
        Glyphs["mensuralWhiteSemibrevis"] = "\uE962";
        Glyphs["mensuralWhiteSemiminima"] = "\uE960";
        Glyphs["metAugmentationDot"] = "\uECB7";
        Glyphs["metNote1024thDown"] = "\uECB6";
        Glyphs["metNote1024thUp"] = "\uECB5";
        Glyphs["metNote128thDown"] = "\uECB0";
        Glyphs["metNote128thUp"] = "\uECAF";
        Glyphs["metNote16thDown"] = "\uECAA";
        Glyphs["metNote16thUp"] = "\uECA9";
        Glyphs["metNote256thDown"] = "\uECB2";
        Glyphs["metNote256thUp"] = "\uECB1";
        Glyphs["metNote32ndDown"] = "\uECAC";
        Glyphs["metNote32ndUp"] = "\uECAB";
        Glyphs["metNote512thDown"] = "\uECB4";
        Glyphs["metNote512thUp"] = "\uECB3";
        Glyphs["metNote64thDown"] = "\uECAE";
        Glyphs["metNote64thUp"] = "\uECAD";
        Glyphs["metNote8thDown"] = "\uECA8";
        Glyphs["metNote8thUp"] = "\uECA7";
        Glyphs["metNoteDoubleWhole"] = "\uECA0";
        Glyphs["metNoteDoubleWholeSquare"] = "\uECA1";
        Glyphs["metNoteHalfDown"] = "\uECA4";
        Glyphs["metNoteHalfUp"] = "\uECA3";
        Glyphs["metNoteQuarterDown"] = "\uECA6";
        Glyphs["metNoteQuarterUp"] = "\uECA5";
        Glyphs["metNoteWhole"] = "\uECA2";
        Glyphs["metricModulationArrowLeft"] = "\uEC63";
        Glyphs["metricModulationArrowRight"] = "\uEC64";
        Glyphs["miscDoNotCopy"] = "\uEC61";
        Glyphs["miscDoNotPhotocopy"] = "\uEC60";
        Glyphs["miscEyeglasses"] = "\uEC62";
        Glyphs["note1024thDown"] = "\uE1E6";
        Glyphs["note1024thUp"] = "\uE1E5";
        Glyphs["note128thDown"] = "\uE1E0";
        Glyphs["note128thUp"] = "\uE1DF";
        Glyphs["note16thDown"] = "\uE1DA";
        Glyphs["note16thUp"] = "\uE1D9";
        Glyphs["note256thDown"] = "\uE1E2";
        Glyphs["note256thUp"] = "\uE1E1";
        Glyphs["note32ndDown"] = "\uE1DC";
        Glyphs["note32ndUp"] = "\uE1DB";
        Glyphs["note512thDown"] = "\uE1E4";
        Glyphs["note512thUp"] = "\uE1E3";
        Glyphs["note64thDown"] = "\uE1DE";
        Glyphs["note64thUp"] = "\uE1DD";
        Glyphs["note8thDown"] = "\uE1D8";
        Glyphs["note8thUp"] = "\uE1D7";
        Glyphs["noteABlack"] = "\uE197";
        Glyphs["noteAFlatBlack"] = "\uE196";
        Glyphs["noteAFlatHalf"] = "\uE17F";
        Glyphs["noteAFlatWhole"] = "\uE168";
        Glyphs["noteAHalf"] = "\uE180";
        Glyphs["noteASharpBlack"] = "\uE198";
        Glyphs["noteASharpHalf"] = "\uE181";
        Glyphs["noteASharpWhole"] = "\uE16A";
        Glyphs["noteAWhole"] = "\uE169";
        Glyphs["noteBBlack"] = "\uE19A";
        Glyphs["noteBFlatBlack"] = "\uE199";
        Glyphs["noteBFlatHalf"] = "\uE182";
        Glyphs["noteBFlatWhole"] = "\uE16B";
        Glyphs["noteBHalf"] = "\uE183";
        Glyphs["noteBSharpBlack"] = "\uE19B";
        Glyphs["noteBSharpHalf"] = "\uE184";
        Glyphs["noteBSharpWhole"] = "\uE16D";
        Glyphs["noteBWhole"] = "\uE16C";
        Glyphs["noteCBlack"] = "\uE19D";
        Glyphs["noteCFlatBlack"] = "\uE19C";
        Glyphs["noteCFlatHalf"] = "\uE185";
        Glyphs["noteCFlatWhole"] = "\uE16E";
        Glyphs["noteCHalf"] = "\uE186";
        Glyphs["noteCSharpBlack"] = "\uE19E";
        Glyphs["noteCSharpHalf"] = "\uE187";
        Glyphs["noteCSharpWhole"] = "\uE170";
        Glyphs["noteCWhole"] = "\uE16F";
        Glyphs["noteDBlack"] = "\uE1A0";
        Glyphs["noteDFlatBlack"] = "\uE19F";
        Glyphs["noteDFlatHalf"] = "\uE188";
        Glyphs["noteDFlatWhole"] = "\uE171";
        Glyphs["noteDHalf"] = "\uE189";
        Glyphs["noteDSharpBlack"] = "\uE1A1";
        Glyphs["noteDSharpHalf"] = "\uE18A";
        Glyphs["noteDSharpWhole"] = "\uE173";
        Glyphs["noteDWhole"] = "\uE172";
        Glyphs["noteDiBlack"] = "\uEEF2";
        Glyphs["noteDiHalf"] = "\uEEE9";
        Glyphs["noteDiWhole"] = "\uEEE0";
        Glyphs["noteDoBlack"] = "\uE160";
        Glyphs["noteDoHalf"] = "\uE158";
        Glyphs["noteDoWhole"] = "\uE150";
        Glyphs["noteDoubleWhole"] = "\uE1D0";
        Glyphs["noteDoubleWholeSquare"] = "\uE1D1";
        Glyphs["noteEBlack"] = "\uE1A3";
        Glyphs["noteEFlatBlack"] = "\uE1A2";
        Glyphs["noteEFlatHalf"] = "\uE18B";
        Glyphs["noteEFlatWhole"] = "\uE174";
        Glyphs["noteEHalf"] = "\uE18C";
        Glyphs["noteESharpBlack"] = "\uE1A4";
        Glyphs["noteESharpHalf"] = "\uE18D";
        Glyphs["noteESharpWhole"] = "\uE176";
        Glyphs["noteEWhole"] = "\uE175";
        Glyphs["noteEmptyBlack"] = "\uE1AF";
        Glyphs["noteEmptyHalf"] = "\uE1AE";
        Glyphs["noteEmptyWhole"] = "\uE1AD";
        Glyphs["noteFBlack"] = "\uE1A6";
        Glyphs["noteFFlatBlack"] = "\uE1A5";
        Glyphs["noteFFlatHalf"] = "\uE18E";
        Glyphs["noteFFlatWhole"] = "\uE177";
        Glyphs["noteFHalf"] = "\uE18F";
        Glyphs["noteFSharpBlack"] = "\uE1A7";
        Glyphs["noteFSharpHalf"] = "\uE190";
        Glyphs["noteFSharpWhole"] = "\uE179";
        Glyphs["noteFWhole"] = "\uE178";
        Glyphs["noteFaBlack"] = "\uE163";
        Glyphs["noteFaHalf"] = "\uE15B";
        Glyphs["noteFaWhole"] = "\uE153";
        Glyphs["noteFiBlack"] = "\uEEF6";
        Glyphs["noteFiHalf"] = "\uEEED";
        Glyphs["noteFiWhole"] = "\uEEE4";
        Glyphs["noteGBlack"] = "\uE1A9";
        Glyphs["noteGFlatBlack"] = "\uE1A8";
        Glyphs["noteGFlatHalf"] = "\uE191";
        Glyphs["noteGFlatWhole"] = "\uE17A";
        Glyphs["noteGHalf"] = "\uE192";
        Glyphs["noteGSharpBlack"] = "\uE1AA";
        Glyphs["noteGSharpHalf"] = "\uE193";
        Glyphs["noteGSharpWhole"] = "\uE17C";
        Glyphs["noteGWhole"] = "\uE17B";
        Glyphs["noteHBlack"] = "\uE1AB";
        Glyphs["noteHHalf"] = "\uE194";
        Glyphs["noteHSharpBlack"] = "\uE1AC";
        Glyphs["noteHSharpHalf"] = "\uE195";
        Glyphs["noteHSharpWhole"] = "\uE17E";
        Glyphs["noteHWhole"] = "\uE17D";
        Glyphs["noteHalfDown"] = "\uE1D4";
        Glyphs["noteHalfUp"] = "\uE1D3";
        Glyphs["noteLaBlack"] = "\uE165";
        Glyphs["noteLaHalf"] = "\uE15D";
        Glyphs["noteLaWhole"] = "\uE155";
        Glyphs["noteLeBlack"] = "\uEEF9";
        Glyphs["noteLeHalf"] = "\uEEF0";
        Glyphs["noteLeWhole"] = "\uEEE7";
        Glyphs["noteLiBlack"] = "\uEEF8";
        Glyphs["noteLiHalf"] = "\uEEEF";
        Glyphs["noteLiWhole"] = "\uEEE6";
        Glyphs["noteMeBlack"] = "\uEEF5";
        Glyphs["noteMeHalf"] = "\uEEEC";
        Glyphs["noteMeWhole"] = "\uEEE3";
        Glyphs["noteMiBlack"] = "\uE162";
        Glyphs["noteMiHalf"] = "\uE15A";
        Glyphs["noteMiWhole"] = "\uE152";
        Glyphs["noteQuarterDown"] = "\uE1D6";
        Glyphs["noteQuarterUp"] = "\uE1D5";
        Glyphs["noteRaBlack"] = "\uEEF4";
        Glyphs["noteRaHalf"] = "\uEEEB";
        Glyphs["noteRaWhole"] = "\uEEE2";
        Glyphs["noteReBlack"] = "\uE161";
        Glyphs["noteReHalf"] = "\uE159";
        Glyphs["noteReWhole"] = "\uE151";
        Glyphs["noteRiBlack"] = "\uEEF3";
        Glyphs["noteRiHalf"] = "\uEEEA";
        Glyphs["noteRiWhole"] = "\uEEE1";
        Glyphs["noteSeBlack"] = "\uEEF7";
        Glyphs["noteSeHalf"] = "\uEEEE";
        Glyphs["noteSeWhole"] = "\uEEE5";
        Glyphs["noteShapeArrowheadLeftBlack"] = "\uE1C9";
        Glyphs["noteShapeArrowheadLeftDoubleWhole"] = "\uECDC";
        Glyphs["noteShapeArrowheadLeftWhite"] = "\uE1C8";
        Glyphs["noteShapeDiamondBlack"] = "\uE1B9";
        Glyphs["noteShapeDiamondDoubleWhole"] = "\uECD4";
        Glyphs["noteShapeDiamondWhite"] = "\uE1B8";
        Glyphs["noteShapeIsoscelesTriangleBlack"] = "\uE1C5";
        Glyphs["noteShapeIsoscelesTriangleDoubleWhole"] = "\uECDA";
        Glyphs["noteShapeIsoscelesTriangleWhite"] = "\uE1C4";
        Glyphs["noteShapeKeystoneBlack"] = "\uE1C1";
        Glyphs["noteShapeKeystoneDoubleWhole"] = "\uECD8";
        Glyphs["noteShapeKeystoneWhite"] = "\uE1C0";
        Glyphs["noteShapeMoonBlack"] = "\uE1BD";
        Glyphs["noteShapeMoonDoubleWhole"] = "\uECD6";
        Glyphs["noteShapeMoonLeftBlack"] = "\uE1C7";
        Glyphs["noteShapeMoonLeftDoubleWhole"] = "\uECDB";
        Glyphs["noteShapeMoonLeftWhite"] = "\uE1C6";
        Glyphs["noteShapeMoonWhite"] = "\uE1BC";
        Glyphs["noteShapeQuarterMoonBlack"] = "\uE1C3";
        Glyphs["noteShapeQuarterMoonDoubleWhole"] = "\uECD9";
        Glyphs["noteShapeQuarterMoonWhite"] = "\uE1C2";
        Glyphs["noteShapeRoundBlack"] = "\uE1B1";
        Glyphs["noteShapeRoundDoubleWhole"] = "\uECD0";
        Glyphs["noteShapeRoundWhite"] = "\uE1B0";
        Glyphs["noteShapeSquareBlack"] = "\uE1B3";
        Glyphs["noteShapeSquareDoubleWhole"] = "\uECD1";
        Glyphs["noteShapeSquareWhite"] = "\uE1B2";
        Glyphs["noteShapeTriangleLeftBlack"] = "\uE1B7";
        Glyphs["noteShapeTriangleLeftDoubleWhole"] = "\uECD3";
        Glyphs["noteShapeTriangleLeftWhite"] = "\uE1B6";
        Glyphs["noteShapeTriangleRightBlack"] = "\uE1B5";
        Glyphs["noteShapeTriangleRightDoubleWhole"] = "\uECD2";
        Glyphs["noteShapeTriangleRightWhite"] = "\uE1B4";
        Glyphs["noteShapeTriangleRoundBlack"] = "\uE1BF";
        Glyphs["noteShapeTriangleRoundDoubleWhole"] = "\uECD7";
        Glyphs["noteShapeTriangleRoundLeftBlack"] = "\uE1CB";
        Glyphs["noteShapeTriangleRoundLeftDoubleWhole"] = "\uECDD";
        Glyphs["noteShapeTriangleRoundLeftWhite"] = "\uE1CA";
        Glyphs["noteShapeTriangleRoundWhite"] = "\uE1BE";
        Glyphs["noteShapeTriangleUpBlack"] = "\uE1BB";
        Glyphs["noteShapeTriangleUpDoubleWhole"] = "\uECD5";
        Glyphs["noteShapeTriangleUpWhite"] = "\uE1BA";
        Glyphs["noteSiBlack"] = "\uE167";
        Glyphs["noteSiHalf"] = "\uE15F";
        Glyphs["noteSiWhole"] = "\uE157";
        Glyphs["noteSoBlack"] = "\uE164";
        Glyphs["noteSoHalf"] = "\uE15C";
        Glyphs["noteSoWhole"] = "\uE154";
        Glyphs["noteTeBlack"] = "\uEEFA";
        Glyphs["noteTeHalf"] = "\uEEF1";
        Glyphs["noteTeWhole"] = "\uEEE8";
        Glyphs["noteTiBlack"] = "\uE166";
        Glyphs["noteTiHalf"] = "\uE15E";
        Glyphs["noteTiWhole"] = "\uE156";
        Glyphs["noteWhole"] = "\uE1D2";
        Glyphs["noteheadBlack"] = "\uE0A4";
        Glyphs["noteheadCircleSlash"] = "\uE0F7";
        Glyphs["noteheadCircleX"] = "\uE0B3";
        Glyphs["noteheadCircleXDoubleWhole"] = "\uE0B0";
        Glyphs["noteheadCircleXHalf"] = "\uE0B2";
        Glyphs["noteheadCircleXWhole"] = "\uE0B1";
        Glyphs["noteheadCircledBlack"] = "\uE0E4";
        Glyphs["noteheadCircledBlackLarge"] = "\uE0E8";
        Glyphs["noteheadCircledDoubleWhole"] = "\uE0E7";
        Glyphs["noteheadCircledDoubleWholeLarge"] = "\uE0EB";
        Glyphs["noteheadCircledHalf"] = "\uE0E5";
        Glyphs["noteheadCircledHalfLarge"] = "\uE0E9";
        Glyphs["noteheadCircledWhole"] = "\uE0E6";
        Glyphs["noteheadCircledWholeLarge"] = "\uE0EA";
        Glyphs["noteheadCircledXLarge"] = "\uE0EC";
        Glyphs["noteheadClusterDoubleWhole2nd"] = "\uE124";
        Glyphs["noteheadClusterDoubleWhole3rd"] = "\uE128";
        Glyphs["noteheadClusterDoubleWholeBottom"] = "\uE12E";
        Glyphs["noteheadClusterDoubleWholeMiddle"] = "\uE12D";
        Glyphs["noteheadClusterDoubleWholeTop"] = "\uE12C";
        Glyphs["noteheadClusterHalf2nd"] = "\uE126";
        Glyphs["noteheadClusterHalf3rd"] = "\uE12A";
        Glyphs["noteheadClusterHalfBottom"] = "\uE134";
        Glyphs["noteheadClusterHalfMiddle"] = "\uE133";
        Glyphs["noteheadClusterHalfTop"] = "\uE132";
        Glyphs["noteheadClusterQuarter2nd"] = "\uE127";
        Glyphs["noteheadClusterQuarter3rd"] = "\uE12B";
        Glyphs["noteheadClusterQuarterBottom"] = "\uE137";
        Glyphs["noteheadClusterQuarterMiddle"] = "\uE136";
        Glyphs["noteheadClusterQuarterTop"] = "\uE135";
        Glyphs["noteheadClusterRoundBlack"] = "\uE123";
        Glyphs["noteheadClusterRoundWhite"] = "\uE122";
        Glyphs["noteheadClusterSquareBlack"] = "\uE121";
        Glyphs["noteheadClusterSquareWhite"] = "\uE120";
        Glyphs["noteheadClusterWhole2nd"] = "\uE125";
        Glyphs["noteheadClusterWhole3rd"] = "\uE129";
        Glyphs["noteheadClusterWholeBottom"] = "\uE131";
        Glyphs["noteheadClusterWholeMiddle"] = "\uE130";
        Glyphs["noteheadClusterWholeTop"] = "\uE12F";
        Glyphs["noteheadCowellEleventhNoteSeriesHalf"] = "\uEEAE";
        Glyphs["noteheadCowellEleventhNoteSeriesWhole"] = "\uEEAD";
        Glyphs["noteheadCowellEleventhSeriesBlack"] = "\uEEAF";
        Glyphs["noteheadCowellFifteenthNoteSeriesBlack"] = "\uEEB5";
        Glyphs["noteheadCowellFifteenthNoteSeriesHalf"] = "\uEEB4";
        Glyphs["noteheadCowellFifteenthNoteSeriesWhole"] = "\uEEB3";
        Glyphs["noteheadCowellFifthNoteSeriesBlack"] = "\uEEA6";
        Glyphs["noteheadCowellFifthNoteSeriesHalf"] = "\uEEA5";
        Glyphs["noteheadCowellFifthNoteSeriesWhole"] = "\uEEA4";
        Glyphs["noteheadCowellNinthNoteSeriesBlack"] = "\uEEAC";
        Glyphs["noteheadCowellNinthNoteSeriesHalf"] = "\uEEAB";
        Glyphs["noteheadCowellNinthNoteSeriesWhole"] = "\uEEAA";
        Glyphs["noteheadCowellSeventhNoteSeriesBlack"] = "\uEEA9";
        Glyphs["noteheadCowellSeventhNoteSeriesHalf"] = "\uEEA8";
        Glyphs["noteheadCowellSeventhNoteSeriesWhole"] = "\uEEA7";
        Glyphs["noteheadCowellThirdNoteSeriesBlack"] = "\uEEA3";
        Glyphs["noteheadCowellThirdNoteSeriesHalf"] = "\uEEA2";
        Glyphs["noteheadCowellThirdNoteSeriesWhole"] = "\uEEA1";
        Glyphs["noteheadCowellThirteenthNoteSeriesBlack"] = "\uEEB2";
        Glyphs["noteheadCowellThirteenthNoteSeriesHalf"] = "\uEEB1";
        Glyphs["noteheadCowellThirteenthNoteSeriesWhole"] = "\uEEB0";
        Glyphs["noteheadDiamondBlack"] = "\uE0DB";
        Glyphs["noteheadDiamondBlackOld"] = "\uE0E2";
        Glyphs["noteheadDiamondBlackWide"] = "\uE0DC";
        Glyphs["noteheadDiamondClusterBlack2nd"] = "\uE139";
        Glyphs["noteheadDiamondClusterBlack3rd"] = "\uE13B";
        Glyphs["noteheadDiamondClusterBlackBottom"] = "\uE141";
        Glyphs["noteheadDiamondClusterBlackMiddle"] = "\uE140";
        Glyphs["noteheadDiamondClusterBlackTop"] = "\uE13F";
        Glyphs["noteheadDiamondClusterWhite2nd"] = "\uE138";
        Glyphs["noteheadDiamondClusterWhite3rd"] = "\uE13A";
        Glyphs["noteheadDiamondClusterWhiteBottom"] = "\uE13E";
        Glyphs["noteheadDiamondClusterWhiteMiddle"] = "\uE13D";
        Glyphs["noteheadDiamondClusterWhiteTop"] = "\uE13C";
        Glyphs["noteheadDiamondDoubleWhole"] = "\uE0D7";
        Glyphs["noteheadDiamondDoubleWholeOld"] = "\uE0DF";
        Glyphs["noteheadDiamondHalf"] = "\uE0D9";
        Glyphs["noteheadDiamondHalfFilled"] = "\uE0E3";
        Glyphs["noteheadDiamondHalfOld"] = "\uE0E1";
        Glyphs["noteheadDiamondHalfWide"] = "\uE0DA";
        Glyphs["noteheadDiamondOpen"] = "\uE0FC";
        Glyphs["noteheadDiamondWhite"] = "\uE0DD";
        Glyphs["noteheadDiamondWhiteWide"] = "\uE0DE";
        Glyphs["noteheadDiamondWhole"] = "\uE0D8";
        Glyphs["noteheadDiamondWholeOld"] = "\uE0E0";
        Glyphs["noteheadDoubleWhole"] = "\uE0A0";
        Glyphs["noteheadDoubleWholeSquare"] = "\uE0A1";
        Glyphs["noteheadDoubleWholeWithX"] = "\uE0B4";
        Glyphs["noteheadHalf"] = "\uE0A3";
        Glyphs["noteheadHalfFilled"] = "\uE0FB";
        Glyphs["noteheadHalfWithX"] = "\uE0B6";
        Glyphs["noteheadHeavyX"] = "\uE0F8";
        Glyphs["noteheadHeavyXHat"] = "\uE0F9";
        Glyphs["noteheadLargeArrowDownBlack"] = "\uE0F4";
        Glyphs["noteheadLargeArrowDownDoubleWhole"] = "\uE0F1";
        Glyphs["noteheadLargeArrowDownHalf"] = "\uE0F3";
        Glyphs["noteheadLargeArrowDownWhole"] = "\uE0F2";
        Glyphs["noteheadLargeArrowUpBlack"] = "\uE0F0";
        Glyphs["noteheadLargeArrowUpDoubleWhole"] = "\uE0ED";
        Glyphs["noteheadLargeArrowUpHalf"] = "\uE0EF";
        Glyphs["noteheadLargeArrowUpWhole"] = "\uE0EE";
        Glyphs["noteheadMoonBlack"] = "\uE0CB";
        Glyphs["noteheadMoonWhite"] = "\uE0CA";
        Glyphs["noteheadNancarrowSine"] = "\uEEA0";
        Glyphs["noteheadNull"] = "\uE0A5";
        Glyphs["noteheadParenthesis"] = "\uE0CE";
        Glyphs["noteheadParenthesisLeft"] = "\uE0F5";
        Glyphs["noteheadParenthesisRight"] = "\uE0F6";
        Glyphs["noteheadPlusBlack"] = "\uE0AF";
        Glyphs["noteheadPlusDoubleWhole"] = "\uE0AC";
        Glyphs["noteheadPlusHalf"] = "\uE0AE";
        Glyphs["noteheadPlusWhole"] = "\uE0AD";
        Glyphs["noteheadRectangularClusterBlackBottom"] = "\uE144";
        Glyphs["noteheadRectangularClusterBlackMiddle"] = "\uE143";
        Glyphs["noteheadRectangularClusterBlackTop"] = "\uE142";
        Glyphs["noteheadRectangularClusterWhiteBottom"] = "\uE147";
        Glyphs["noteheadRectangularClusterWhiteMiddle"] = "\uE146";
        Glyphs["noteheadRectangularClusterWhiteTop"] = "\uE145";
        Glyphs["noteheadRoundBlack"] = "\uE113";
        Glyphs["noteheadRoundBlackDoubleSlashed"] = "\uE11C";
        Glyphs["noteheadRoundBlackLarge"] = "\uE110";
        Glyphs["noteheadRoundBlackSlashed"] = "\uE118";
        Glyphs["noteheadRoundBlackSlashedLarge"] = "\uE116";
        Glyphs["noteheadRoundWhite"] = "\uE114";
        Glyphs["noteheadRoundWhiteDoubleSlashed"] = "\uE11D";
        Glyphs["noteheadRoundWhiteLarge"] = "\uE111";
        Glyphs["noteheadRoundWhiteSlashed"] = "\uE119";
        Glyphs["noteheadRoundWhiteSlashedLarge"] = "\uE117";
        Glyphs["noteheadRoundWhiteWithDot"] = "\uE115";
        Glyphs["noteheadRoundWhiteWithDotLarge"] = "\uE112";
        Glyphs["noteheadSlashDiamondWhite"] = "\uE104";
        Glyphs["noteheadSlashHorizontalEnds"] = "\uE101";
        Glyphs["noteheadSlashHorizontalEndsMuted"] = "\uE108";
        Glyphs["noteheadSlashVerticalEnds"] = "\uE100";
        Glyphs["noteheadSlashVerticalEndsMuted"] = "\uE107";
        Glyphs["noteheadSlashVerticalEndsSmall"] = "\uE105";
        Glyphs["noteheadSlashWhiteDoubleWhole"] = "\uE10A";
        Glyphs["noteheadSlashWhiteHalf"] = "\uE103";
        Glyphs["noteheadSlashWhiteMuted"] = "\uE109";
        Glyphs["noteheadSlashWhiteWhole"] = "\uE102";
        Glyphs["noteheadSlashX"] = "\uE106";
        Glyphs["noteheadSlashedBlack1"] = "\uE0CF";
        Glyphs["noteheadSlashedBlack2"] = "\uE0D0";
        Glyphs["noteheadSlashedDoubleWhole1"] = "\uE0D5";
        Glyphs["noteheadSlashedDoubleWhole2"] = "\uE0D6";
        Glyphs["noteheadSlashedHalf1"] = "\uE0D1";
        Glyphs["noteheadSlashedHalf2"] = "\uE0D2";
        Glyphs["noteheadSlashedWhole1"] = "\uE0D3";
        Glyphs["noteheadSlashedWhole2"] = "\uE0D4";
        Glyphs["noteheadSquareBlack"] = "\uE0B9";
        Glyphs["noteheadSquareBlackLarge"] = "\uE11A";
        Glyphs["noteheadSquareBlackWhite"] = "\uE11B";
        Glyphs["noteheadSquareWhite"] = "\uE0B8";
        Glyphs["noteheadTriangleDownBlack"] = "\uE0C7";
        Glyphs["noteheadTriangleDownDoubleWhole"] = "\uE0C3";
        Glyphs["noteheadTriangleDownHalf"] = "\uE0C5";
        Glyphs["noteheadTriangleDownWhite"] = "\uE0C6";
        Glyphs["noteheadTriangleDownWhole"] = "\uE0C4";
        Glyphs["noteheadTriangleLeftBlack"] = "\uE0C0";
        Glyphs["noteheadTriangleLeftWhite"] = "\uE0BF";
        Glyphs["noteheadTriangleRightBlack"] = "\uE0C2";
        Glyphs["noteheadTriangleRightWhite"] = "\uE0C1";
        Glyphs["noteheadTriangleRoundDownBlack"] = "\uE0CD";
        Glyphs["noteheadTriangleRoundDownWhite"] = "\uE0CC";
        Glyphs["noteheadTriangleUpBlack"] = "\uE0BE";
        Glyphs["noteheadTriangleUpDoubleWhole"] = "\uE0BA";
        Glyphs["noteheadTriangleUpHalf"] = "\uE0BC";
        Glyphs["noteheadTriangleUpRightBlack"] = "\uE0C9";
        Glyphs["noteheadTriangleUpRightWhite"] = "\uE0C8";
        Glyphs["noteheadTriangleUpWhite"] = "\uE0BD";
        Glyphs["noteheadTriangleUpWhole"] = "\uE0BB";
        Glyphs["noteheadVoidWithX"] = "\uE0B7";
        Glyphs["noteheadWhole"] = "\uE0A2";
        Glyphs["noteheadWholeFilled"] = "\uE0FA";
        Glyphs["noteheadWholeWithX"] = "\uE0B5";
        Glyphs["noteheadXBlack"] = "\uE0A9";
        Glyphs["noteheadXDoubleWhole"] = "\uE0A6";
        Glyphs["noteheadXHalf"] = "\uE0A8";
        Glyphs["noteheadXOrnate"] = "\uE0AA";
        Glyphs["noteheadXOrnateEllipse"] = "\uE0AB";
        Glyphs["noteheadXWhole"] = "\uE0A7";
        Glyphs["octaveBaselineA"] = "\uEC91";
        Glyphs["octaveBaselineB"] = "\uEC93";
        Glyphs["octaveBaselineM"] = "\uEC95";
        Glyphs["octaveBaselineV"] = "\uEC97";
        Glyphs["octaveBassa"] = "\uE51F";
        Glyphs["octaveLoco"] = "\uEC90";
        Glyphs["octaveParensLeft"] = "\uE51A";
        Glyphs["octaveParensRight"] = "\uE51B";
        Glyphs["octaveSuperscriptA"] = "\uEC92";
        Glyphs["octaveSuperscriptB"] = "\uEC94";
        Glyphs["octaveSuperscriptM"] = "\uEC96";
        Glyphs["octaveSuperscriptV"] = "\uEC98";
        Glyphs["oneHandedRollStevens"] = "\uE233";
        Glyphs["organGerman2Fusae"] = "\uEE2E";
        Glyphs["organGerman2Minimae"] = "\uEE2C";
        Glyphs["organGerman2OctaveUp"] = "\uEE19";
        Glyphs["organGerman2Semifusae"] = "\uEE2F";
        Glyphs["organGerman2Semiminimae"] = "\uEE2D";
        Glyphs["organGerman3Fusae"] = "\uEE32";
        Glyphs["organGerman3Minimae"] = "\uEE30";
        Glyphs["organGerman3Semifusae"] = "\uEE33";
        Glyphs["organGerman3Semiminimae"] = "\uEE31";
        Glyphs["organGerman4Fusae"] = "\uEE36";
        Glyphs["organGerman4Minimae"] = "\uEE34";
        Glyphs["organGerman4Semifusae"] = "\uEE37";
        Glyphs["organGerman4Semiminimae"] = "\uEE35";
        Glyphs["organGerman5Fusae"] = "\uEE3A";
        Glyphs["organGerman5Minimae"] = "\uEE38";
        Glyphs["organGerman5Semifusae"] = "\uEE3B";
        Glyphs["organGerman5Semiminimae"] = "\uEE39";
        Glyphs["organGerman6Fusae"] = "\uEE3E";
        Glyphs["organGerman6Minimae"] = "\uEE3C";
        Glyphs["organGerman6Semifusae"] = "\uEE3F";
        Glyphs["organGerman6Semiminimae"] = "\uEE3D";
        Glyphs["organGermanALower"] = "\uEE15";
        Glyphs["organGermanAUpper"] = "\uEE09";
        Glyphs["organGermanAugmentationDot"] = "\uEE1C";
        Glyphs["organGermanBLower"] = "\uEE16";
        Glyphs["organGermanBUpper"] = "\uEE0A";
        Glyphs["organGermanBuxheimerBrevis2"] = "\uEE25";
        Glyphs["organGermanBuxheimerBrevis3"] = "\uEE24";
        Glyphs["organGermanBuxheimerMinimaRest"] = "\uEE1E";
        Glyphs["organGermanBuxheimerSemibrevis"] = "\uEE26";
        Glyphs["organGermanBuxheimerSemibrevisRest"] = "\uEE1D";
        Glyphs["organGermanCLower"] = "\uEE0C";
        Glyphs["organGermanCUpper"] = "\uEE00";
        Glyphs["organGermanCisLower"] = "\uEE0D";
        Glyphs["organGermanCisUpper"] = "\uEE01";
        Glyphs["organGermanDLower"] = "\uEE0E";
        Glyphs["organGermanDUpper"] = "\uEE02";
        Glyphs["organGermanDisLower"] = "\uEE0F";
        Glyphs["organGermanDisUpper"] = "\uEE03";
        Glyphs["organGermanELower"] = "\uEE10";
        Glyphs["organGermanEUpper"] = "\uEE04";
        Glyphs["organGermanFLower"] = "\uEE11";
        Glyphs["organGermanFUpper"] = "\uEE05";
        Glyphs["organGermanFisLower"] = "\uEE12";
        Glyphs["organGermanFisUpper"] = "\uEE06";
        Glyphs["organGermanFusa"] = "\uEE2A";
        Glyphs["organGermanFusaRest"] = "\uEE22";
        Glyphs["organGermanGLower"] = "\uEE13";
        Glyphs["organGermanGUpper"] = "\uEE07";
        Glyphs["organGermanGisLower"] = "\uEE14";
        Glyphs["organGermanGisUpper"] = "\uEE08";
        Glyphs["organGermanHLower"] = "\uEE17";
        Glyphs["organGermanHUpper"] = "\uEE0B";
        Glyphs["organGermanMinima"] = "\uEE28";
        Glyphs["organGermanMinimaRest"] = "\uEE20";
        Glyphs["organGermanOctaveDown"] = "\uEE1A";
        Glyphs["organGermanOctaveUp"] = "\uEE18";
        Glyphs["organGermanSemibrevis"] = "\uEE27";
        Glyphs["organGermanSemibrevisRest"] = "\uEE1F";
        Glyphs["organGermanSemifusa"] = "\uEE2B";
        Glyphs["organGermanSemifusaRest"] = "\uEE23";
        Glyphs["organGermanSemiminima"] = "\uEE29";
        Glyphs["organGermanSemiminimaRest"] = "\uEE21";
        Glyphs["organGermanTie"] = "\uEE1B";
        Glyphs["ornamentBottomLeftConcaveStroke"] = "\uE59A";
        Glyphs["ornamentBottomLeftConcaveStrokeLarge"] = "\uE59B";
        Glyphs["ornamentBottomLeftConvexStroke"] = "\uE59C";
        Glyphs["ornamentBottomRightConcaveStroke"] = "\uE5A7";
        Glyphs["ornamentBottomRightConvexStroke"] = "\uE5A8";
        Glyphs["ornamentComma"] = "\uE581";
        Glyphs["ornamentDoubleObliqueLinesAfterNote"] = "\uE57E";
        Glyphs["ornamentDoubleObliqueLinesBeforeNote"] = "\uE57D";
        Glyphs["ornamentDownCurve"] = "\uE578";
        Glyphs["ornamentHaydn"] = "\uE56F";
        Glyphs["ornamentHighLeftConcaveStroke"] = "\uE592";
        Glyphs["ornamentHighLeftConvexStroke"] = "\uE593";
        Glyphs["ornamentHighRightConcaveStroke"] = "\uE5A2";
        Glyphs["ornamentHighRightConvexStroke"] = "\uE5A3";
        Glyphs["ornamentHookAfterNote"] = "\uE576";
        Glyphs["ornamentHookBeforeNote"] = "\uE575";
        Glyphs["ornamentLeftFacingHalfCircle"] = "\uE572";
        Glyphs["ornamentLeftFacingHook"] = "\uE574";
        Glyphs["ornamentLeftPlus"] = "\uE597";
        Glyphs["ornamentLeftShakeT"] = "\uE596";
        Glyphs["ornamentLeftVerticalStroke"] = "\uE594";
        Glyphs["ornamentLeftVerticalStrokeWithCross"] = "\uE595";
        Glyphs["ornamentLowLeftConcaveStroke"] = "\uE598";
        Glyphs["ornamentLowLeftConvexStroke"] = "\uE599";
        Glyphs["ornamentLowRightConcaveStroke"] = "\uE5A5";
        Glyphs["ornamentLowRightConvexStroke"] = "\uE5A6";
        Glyphs["ornamentMiddleVerticalStroke"] = "\uE59F";
        Glyphs["ornamentMordent"] = "\uE56D";
        Glyphs["ornamentObliqueLineAfterNote"] = "\uE57C";
        Glyphs["ornamentObliqueLineBeforeNote"] = "\uE57B";
        Glyphs["ornamentObliqueLineHorizAfterNote"] = "\uE580";
        Glyphs["ornamentObliqueLineHorizBeforeNote"] = "\uE57F";
        Glyphs["ornamentOriscus"] = "\uEA21";
        Glyphs["ornamentPinceCouperin"] = "\uE588";
        Glyphs["ornamentPortDeVoixV"] = "\uE570";
        Glyphs["ornamentPrecompAppoggTrill"] = "\uE5B2";
        Glyphs["ornamentPrecompAppoggTrillSuffix"] = "\uE5B3";
        Glyphs["ornamentPrecompCadence"] = "\uE5BE";
        Glyphs["ornamentPrecompCadenceUpperPrefix"] = "\uE5C1";
        Glyphs["ornamentPrecompCadenceUpperPrefixTurn"] = "\uE5C2";
        Glyphs["ornamentPrecompCadenceWithTurn"] = "\uE5BF";
        Glyphs["ornamentPrecompDescendingSlide"] = "\uE5B1";
        Glyphs["ornamentPrecompDoubleCadenceLowerPrefix"] = "\uE5C0";
        Glyphs["ornamentPrecompDoubleCadenceUpperPrefix"] = "\uE5C3";
        Glyphs["ornamentPrecompDoubleCadenceUpperPrefixTurn"] = "\uE5C4";
        Glyphs["ornamentPrecompInvertedMordentUpperPrefix"] = "\uE5C7";
        Glyphs["ornamentPrecompMordentRelease"] = "\uE5C5";
        Glyphs["ornamentPrecompMordentUpperPrefix"] = "\uE5C6";
        Glyphs["ornamentPrecompPortDeVoixMordent"] = "\uE5BC";
        Glyphs["ornamentPrecompSlide"] = "\uE5B0";
        Glyphs["ornamentPrecompSlideTrillBach"] = "\uE5B8";
        Glyphs["ornamentPrecompSlideTrillDAnglebert"] = "\uE5B5";
        Glyphs["ornamentPrecompSlideTrillMarpurg"] = "\uE5B6";
        Glyphs["ornamentPrecompSlideTrillMuffat"] = "\uE5B9";
        Glyphs["ornamentPrecompSlideTrillSuffixMuffat"] = "\uE5BA";
        Glyphs["ornamentPrecompTrillLowerSuffix"] = "\uE5C8";
        Glyphs["ornamentPrecompTrillSuffixDandrieu"] = "\uE5BB";
        Glyphs["ornamentPrecompTrillWithMordent"] = "\uE5BD";
        Glyphs["ornamentPrecompTurnTrillBach"] = "\uE5B7";
        Glyphs["ornamentPrecompTurnTrillDAnglebert"] = "\uE5B4";
        Glyphs["ornamentQuilisma"] = "\uEA20";
        Glyphs["ornamentRightFacingHalfCircle"] = "\uE571";
        Glyphs["ornamentRightFacingHook"] = "\uE573";
        Glyphs["ornamentRightVerticalStroke"] = "\uE5A4";
        Glyphs["ornamentSchleifer"] = "\uE587";
        Glyphs["ornamentShake3"] = "\uE582";
        Glyphs["ornamentShakeMuffat1"] = "\uE584";
        Glyphs["ornamentShortObliqueLineAfterNote"] = "\uE57A";
        Glyphs["ornamentShortObliqueLineBeforeNote"] = "\uE579";
        Glyphs["ornamentShortTrill"] = "\uE56C";
        Glyphs["ornamentTopLeftConcaveStroke"] = "\uE590";
        Glyphs["ornamentTopLeftConvexStroke"] = "\uE591";
        Glyphs["ornamentTopRightConcaveStroke"] = "\uE5A0";
        Glyphs["ornamentTopRightConvexStroke"] = "\uE5A1";
        Glyphs["ornamentTremblement"] = "\uE56E";
        Glyphs["ornamentTremblementCouperin"] = "\uE589";
        Glyphs["ornamentTrill"] = "\uE566";
        Glyphs["ornamentTurn"] = "\uE567";
        Glyphs["ornamentTurnInverted"] = "\uE568";
        Glyphs["ornamentTurnSlash"] = "\uE569";
        Glyphs["ornamentTurnUp"] = "\uE56A";
        Glyphs["ornamentTurnUpS"] = "\uE56B";
        Glyphs["ornamentUpCurve"] = "\uE577";
        Glyphs["ornamentVerticalLine"] = "\uE583";
        Glyphs["ornamentZigZagLineNoRightEnd"] = "\uE59D";
        Glyphs["ornamentZigZagLineWithRightEnd"] = "\uE59E";
        Glyphs["ottava"] = "\uE510";
        Glyphs["ottavaAlta"] = "\uE511";
        Glyphs["ottavaBassa"] = "\uE512";
        Glyphs["ottavaBassaBa"] = "\uE513";
        Glyphs["ottavaBassaVb"] = "\uE51C";
        Glyphs["pendereckiTremolo"] = "\uE22B";
        Glyphs["pictAgogo"] = "\uE717";
        Glyphs["pictAlmglocken"] = "\uE712";
        Glyphs["pictAnvil"] = "\uE701";
        Glyphs["pictBambooChimes"] = "\uE6C3";
        Glyphs["pictBambooScraper"] = "\uE6FB";
        Glyphs["pictBassDrum"] = "\uE6D4";
        Glyphs["pictBassDrumOnSide"] = "\uE6D5";
        Glyphs["pictBeaterBow"] = "\uE7DE";
        Glyphs["pictBeaterBox"] = "\uE7EB";
        Glyphs["pictBeaterBrassMalletsDown"] = "\uE7DA";
        Glyphs["pictBeaterBrassMalletsLeft"] = "\uE7EE";
        Glyphs["pictBeaterBrassMalletsRight"] = "\uE7ED";
        Glyphs["pictBeaterBrassMalletsUp"] = "\uE7D9";
        Glyphs["pictBeaterCombiningDashedCircle"] = "\uE7EA";
        Glyphs["pictBeaterCombiningParentheses"] = "\uE7E9";
        Glyphs["pictBeaterDoubleBassDrumDown"] = "\uE7A1";
        Glyphs["pictBeaterDoubleBassDrumUp"] = "\uE7A0";
        Glyphs["pictBeaterFinger"] = "\uE7E4";
        Glyphs["pictBeaterFingernails"] = "\uE7E6";
        Glyphs["pictBeaterFist"] = "\uE7E5";
        Glyphs["pictBeaterGuiroScraper"] = "\uE7DD";
        Glyphs["pictBeaterHammer"] = "\uE7E1";
        Glyphs["pictBeaterHammerMetalDown"] = "\uE7D0";
        Glyphs["pictBeaterHammerMetalUp"] = "\uE7CF";
        Glyphs["pictBeaterHammerPlasticDown"] = "\uE7CE";
        Glyphs["pictBeaterHammerPlasticUp"] = "\uE7CD";
        Glyphs["pictBeaterHammerWoodDown"] = "\uE7CC";
        Glyphs["pictBeaterHammerWoodUp"] = "\uE7CB";
        Glyphs["pictBeaterHand"] = "\uE7E3";
        Glyphs["pictBeaterHardBassDrumDown"] = "\uE79D";
        Glyphs["pictBeaterHardBassDrumUp"] = "\uE79C";
        Glyphs["pictBeaterHardGlockenspielDown"] = "\uE785";
        Glyphs["pictBeaterHardGlockenspielLeft"] = "\uE787";
        Glyphs["pictBeaterHardGlockenspielRight"] = "\uE786";
        Glyphs["pictBeaterHardGlockenspielUp"] = "\uE784";
        Glyphs["pictBeaterHardTimpaniDown"] = "\uE791";
        Glyphs["pictBeaterHardTimpaniLeft"] = "\uE793";
        Glyphs["pictBeaterHardTimpaniRight"] = "\uE792";
        Glyphs["pictBeaterHardTimpaniUp"] = "\uE790";
        Glyphs["pictBeaterHardXylophoneDown"] = "\uE779";
        Glyphs["pictBeaterHardXylophoneLeft"] = "\uE77B";
        Glyphs["pictBeaterHardXylophoneRight"] = "\uE77A";
        Glyphs["pictBeaterHardXylophoneUp"] = "\uE778";
        Glyphs["pictBeaterHardYarnDown"] = "\uE7AB";
        Glyphs["pictBeaterHardYarnLeft"] = "\uE7AD";
        Glyphs["pictBeaterHardYarnRight"] = "\uE7AC";
        Glyphs["pictBeaterHardYarnUp"] = "\uE7AA";
        Glyphs["pictBeaterJazzSticksDown"] = "\uE7D4";
        Glyphs["pictBeaterJazzSticksUp"] = "\uE7D3";
        Glyphs["pictBeaterKnittingNeedle"] = "\uE7E2";
        Glyphs["pictBeaterMallet"] = "\uE7DF";
        Glyphs["pictBeaterMalletDown"] = "\uE7EC";
        Glyphs["pictBeaterMediumBassDrumDown"] = "\uE79B";
        Glyphs["pictBeaterMediumBassDrumUp"] = "\uE79A";
        Glyphs["pictBeaterMediumTimpaniDown"] = "\uE78D";
        Glyphs["pictBeaterMediumTimpaniLeft"] = "\uE78F";
        Glyphs["pictBeaterMediumTimpaniRight"] = "\uE78E";
        Glyphs["pictBeaterMediumTimpaniUp"] = "\uE78C";
        Glyphs["pictBeaterMediumXylophoneDown"] = "\uE775";
        Glyphs["pictBeaterMediumXylophoneLeft"] = "\uE777";
        Glyphs["pictBeaterMediumXylophoneRight"] = "\uE776";
        Glyphs["pictBeaterMediumXylophoneUp"] = "\uE774";
        Glyphs["pictBeaterMediumYarnDown"] = "\uE7A7";
        Glyphs["pictBeaterMediumYarnLeft"] = "\uE7A9";
        Glyphs["pictBeaterMediumYarnRight"] = "\uE7A8";
        Glyphs["pictBeaterMediumYarnUp"] = "\uE7A6";
        Glyphs["pictBeaterMetalBassDrumDown"] = "\uE79F";
        Glyphs["pictBeaterMetalBassDrumUp"] = "\uE79E";
        Glyphs["pictBeaterMetalDown"] = "\uE7C8";
        Glyphs["pictBeaterMetalHammer"] = "\uE7E0";
        Glyphs["pictBeaterMetalLeft"] = "\uE7CA";
        Glyphs["pictBeaterMetalRight"] = "\uE7C9";
        Glyphs["pictBeaterMetalUp"] = "\uE7C7";
        Glyphs["pictBeaterSnareSticksDown"] = "\uE7D2";
        Glyphs["pictBeaterSnareSticksUp"] = "\uE7D1";
        Glyphs["pictBeaterSoftBassDrumDown"] = "\uE799";
        Glyphs["pictBeaterSoftBassDrumUp"] = "\uE798";
        Glyphs["pictBeaterSoftGlockenspielDown"] = "\uE781";
        Glyphs["pictBeaterSoftGlockenspielLeft"] = "\uE783";
        Glyphs["pictBeaterSoftGlockenspielRight"] = "\uE782";
        Glyphs["pictBeaterSoftGlockenspielUp"] = "\uE780";
        Glyphs["pictBeaterSoftTimpaniDown"] = "\uE789";
        Glyphs["pictBeaterSoftTimpaniLeft"] = "\uE78B";
        Glyphs["pictBeaterSoftTimpaniRight"] = "\uE78A";
        Glyphs["pictBeaterSoftTimpaniUp"] = "\uE788";
        Glyphs["pictBeaterSoftXylophone"] = "\uE7DB";
        Glyphs["pictBeaterSoftXylophoneDown"] = "\uE771";
        Glyphs["pictBeaterSoftXylophoneLeft"] = "\uE773";
        Glyphs["pictBeaterSoftXylophoneRight"] = "\uE772";
        Glyphs["pictBeaterSoftXylophoneUp"] = "\uE770";
        Glyphs["pictBeaterSoftYarnDown"] = "\uE7A3";
        Glyphs["pictBeaterSoftYarnLeft"] = "\uE7A5";
        Glyphs["pictBeaterSoftYarnRight"] = "\uE7A4";
        Glyphs["pictBeaterSoftYarnUp"] = "\uE7A2";
        Glyphs["pictBeaterSpoonWoodenMallet"] = "\uE7DC";
        Glyphs["pictBeaterSuperballDown"] = "\uE7AF";
        Glyphs["pictBeaterSuperballLeft"] = "\uE7B1";
        Glyphs["pictBeaterSuperballRight"] = "\uE7B0";
        Glyphs["pictBeaterSuperballUp"] = "\uE7AE";
        Glyphs["pictBeaterTriangleDown"] = "\uE7D6";
        Glyphs["pictBeaterTrianglePlain"] = "\uE7EF";
        Glyphs["pictBeaterTriangleUp"] = "\uE7D5";
        Glyphs["pictBeaterWireBrushesDown"] = "\uE7D8";
        Glyphs["pictBeaterWireBrushesUp"] = "\uE7D7";
        Glyphs["pictBeaterWoodTimpaniDown"] = "\uE795";
        Glyphs["pictBeaterWoodTimpaniLeft"] = "\uE797";
        Glyphs["pictBeaterWoodTimpaniRight"] = "\uE796";
        Glyphs["pictBeaterWoodTimpaniUp"] = "\uE794";
        Glyphs["pictBeaterWoodXylophoneDown"] = "\uE77D";
        Glyphs["pictBeaterWoodXylophoneLeft"] = "\uE77F";
        Glyphs["pictBeaterWoodXylophoneRight"] = "\uE77E";
        Glyphs["pictBeaterWoodXylophoneUp"] = "\uE77C";
        Glyphs["pictBell"] = "\uE714";
        Glyphs["pictBellOfCymbal"] = "\uE72A";
        Glyphs["pictBellPlate"] = "\uE713";
        Glyphs["pictBellTree"] = "\uE71A";
        Glyphs["pictBirdWhistle"] = "\uE751";
        Glyphs["pictBoardClapper"] = "\uE6F7";
        Glyphs["pictBongos"] = "\uE6DD";
        Glyphs["pictBrakeDrum"] = "\uE6E1";
        Glyphs["pictCabasa"] = "\uE743";
        Glyphs["pictCannon"] = "\uE761";
        Glyphs["pictCarHorn"] = "\uE755";
        Glyphs["pictCastanets"] = "\uE6F8";
        Glyphs["pictCastanetsWithHandle"] = "\uE6F9";
        Glyphs["pictCelesta"] = "\uE6B0";
        Glyphs["pictCencerro"] = "\uE716";
        Glyphs["pictCenter1"] = "\uE7FE";
        Glyphs["pictCenter2"] = "\uE7FF";
        Glyphs["pictCenter3"] = "\uE800";
        Glyphs["pictChainRattle"] = "\uE748";
        Glyphs["pictChimes"] = "\uE6C2";
        Glyphs["pictChineseCymbal"] = "\uE726";
        Glyphs["pictChokeCymbal"] = "\uE805";
        Glyphs["pictClaves"] = "\uE6F2";
        Glyphs["pictCoins"] = "\uE7E7";
        Glyphs["pictConga"] = "\uE6DE";
        Glyphs["pictCowBell"] = "\uE711";
        Glyphs["pictCrashCymbals"] = "\uE720";
        Glyphs["pictCrotales"] = "\uE6AE";
        Glyphs["pictCrushStem"] = "\uE80C";
        Glyphs["pictCuica"] = "\uE6E4";
        Glyphs["pictCymbalTongs"] = "\uE728";
        Glyphs["pictDamp1"] = "\uE7F9";
        Glyphs["pictDamp2"] = "\uE7FA";
        Glyphs["pictDamp3"] = "\uE7FB";
        Glyphs["pictDamp4"] = "\uE7FC";
        Glyphs["pictDeadNoteStem"] = "\uE80D";
        Glyphs["pictDrumStick"] = "\uE7E8";
        Glyphs["pictDuckCall"] = "\uE757";
        Glyphs["pictEdgeOfCymbal"] = "\uE729";
        Glyphs["pictEmptyTrap"] = "\uE6A9";
        Glyphs["pictFingerCymbals"] = "\uE727";
        Glyphs["pictFlexatone"] = "\uE740";
        Glyphs["pictFootballRatchet"] = "\uE6F5";
        Glyphs["pictGlassHarmonica"] = "\uE765";
        Glyphs["pictGlassHarp"] = "\uE764";
        Glyphs["pictGlassPlateChimes"] = "\uE6C6";
        Glyphs["pictGlassTubeChimes"] = "\uE6C5";
        Glyphs["pictGlsp"] = "\uE6A0";
        Glyphs["pictGlspSmithBrindle"] = "\uE6AA";
        Glyphs["pictGobletDrum"] = "\uE6E2";
        Glyphs["pictGong"] = "\uE732";
        Glyphs["pictGongWithButton"] = "\uE733";
        Glyphs["pictGuiro"] = "\uE6F3";
        Glyphs["pictGumHardDown"] = "\uE7C4";
        Glyphs["pictGumHardLeft"] = "\uE7C6";
        Glyphs["pictGumHardRight"] = "\uE7C5";
        Glyphs["pictGumHardUp"] = "\uE7C3";
        Glyphs["pictGumMediumDown"] = "\uE7C0";
        Glyphs["pictGumMediumLeft"] = "\uE7C2";
        Glyphs["pictGumMediumRight"] = "\uE7C1";
        Glyphs["pictGumMediumUp"] = "\uE7BF";
        Glyphs["pictGumSoftDown"] = "\uE7BC";
        Glyphs["pictGumSoftLeft"] = "\uE7BE";
        Glyphs["pictGumSoftRight"] = "\uE7BD";
        Glyphs["pictGumSoftUp"] = "\uE7BB";
        Glyphs["pictHalfOpen1"] = "\uE7F6";
        Glyphs["pictHalfOpen2"] = "\uE7F7";
        Glyphs["pictHandbell"] = "\uE715";
        Glyphs["pictHiHat"] = "\uE722";
        Glyphs["pictHiHatOnStand"] = "\uE723";
        Glyphs["pictJawHarp"] = "\uE767";
        Glyphs["pictJingleBells"] = "\uE719";
        Glyphs["pictKlaxonHorn"] = "\uE756";
        Glyphs["pictLeftHandCircle"] = "\uE807";
        Glyphs["pictLionsRoar"] = "\uE763";
        Glyphs["pictLithophone"] = "\uE6B1";
        Glyphs["pictLogDrum"] = "\uE6DF";
        Glyphs["pictLotusFlute"] = "\uE75A";
        Glyphs["pictMar"] = "\uE6A6";
        Glyphs["pictMarSmithBrindle"] = "\uE6AC";
        Glyphs["pictMaraca"] = "\uE741";
        Glyphs["pictMaracas"] = "\uE742";
        Glyphs["pictMegaphone"] = "\uE759";
        Glyphs["pictMetalPlateChimes"] = "\uE6C8";
        Glyphs["pictMetalTubeChimes"] = "\uE6C7";
        Glyphs["pictMusicalSaw"] = "\uE766";
        Glyphs["pictNormalPosition"] = "\uE804";
        Glyphs["pictOnRim"] = "\uE7F4";
        Glyphs["pictOpen"] = "\uE7F8";
        Glyphs["pictOpenRimShot"] = "\uE7F5";
        Glyphs["pictPistolShot"] = "\uE760";
        Glyphs["pictPoliceWhistle"] = "\uE752";
        Glyphs["pictQuijada"] = "\uE6FA";
        Glyphs["pictRainstick"] = "\uE747";
        Glyphs["pictRatchet"] = "\uE6F4";
        Glyphs["pictRecoReco"] = "\uE6FC";
        Glyphs["pictRightHandSquare"] = "\uE806";
        Glyphs["pictRim1"] = "\uE801";
        Glyphs["pictRim2"] = "\uE802";
        Glyphs["pictRim3"] = "\uE803";
        Glyphs["pictRimShotOnStem"] = "\uE7FD";
        Glyphs["pictSandpaperBlocks"] = "\uE762";
        Glyphs["pictScrapeAroundRim"] = "\uE7F3";
        Glyphs["pictScrapeAroundRimClockwise"] = "\uE80E";
        Glyphs["pictScrapeCenterToEdge"] = "\uE7F1";
        Glyphs["pictScrapeEdgeToCenter"] = "\uE7F2";
        Glyphs["pictShellBells"] = "\uE718";
        Glyphs["pictShellChimes"] = "\uE6C4";
        Glyphs["pictSiren"] = "\uE753";
        Glyphs["pictSistrum"] = "\uE746";
        Glyphs["pictSizzleCymbal"] = "\uE724";
        Glyphs["pictSleighBell"] = "\uE710";
        Glyphs["pictSlideBrushOnGong"] = "\uE734";
        Glyphs["pictSlideWhistle"] = "\uE750";
        Glyphs["pictSlitDrum"] = "\uE6E0";
        Glyphs["pictSnareDrum"] = "\uE6D1";
        Glyphs["pictSnareDrumMilitary"] = "\uE6D3";
        Glyphs["pictSnareDrumSnaresOff"] = "\uE6D2";
        Glyphs["pictSteelDrums"] = "\uE6AF";
        Glyphs["pictStickShot"] = "\uE7F0";
        Glyphs["pictSuperball"] = "\uE7B2";
        Glyphs["pictSuspendedCymbal"] = "\uE721";
        Glyphs["pictSwishStem"] = "\uE808";
        Glyphs["pictTabla"] = "\uE6E3";
        Glyphs["pictTamTam"] = "\uE730";
        Glyphs["pictTamTamWithBeater"] = "\uE731";
        Glyphs["pictTambourine"] = "\uE6DB";
        Glyphs["pictTempleBlocks"] = "\uE6F1";
        Glyphs["pictTenorDrum"] = "\uE6D6";
        Glyphs["pictThundersheet"] = "\uE744";
        Glyphs["pictTimbales"] = "\uE6DC";
        Glyphs["pictTimpani"] = "\uE6D0";
        Glyphs["pictTomTom"] = "\uE6D7";
        Glyphs["pictTomTomChinese"] = "\uE6D8";
        Glyphs["pictTomTomIndoAmerican"] = "\uE6DA";
        Glyphs["pictTomTomJapanese"] = "\uE6D9";
        Glyphs["pictTriangle"] = "\uE700";
        Glyphs["pictTubaphone"] = "\uE6B2";
        Glyphs["pictTubularBells"] = "\uE6C0";
        Glyphs["pictTurnLeftStem"] = "\uE80A";
        Glyphs["pictTurnRightLeftStem"] = "\uE80B";
        Glyphs["pictTurnRightStem"] = "\uE809";
        Glyphs["pictVib"] = "\uE6A7";
        Glyphs["pictVibMotorOff"] = "\uE6A8";
        Glyphs["pictVibSmithBrindle"] = "\uE6AD";
        Glyphs["pictVibraslap"] = "\uE745";
        Glyphs["pictVietnameseHat"] = "\uE725";
        Glyphs["pictWhip"] = "\uE6F6";
        Glyphs["pictWindChimesGlass"] = "\uE6C1";
        Glyphs["pictWindMachine"] = "\uE754";
        Glyphs["pictWindWhistle"] = "\uE758";
        Glyphs["pictWoodBlock"] = "\uE6F0";
        Glyphs["pictWoundHardDown"] = "\uE7B4";
        Glyphs["pictWoundHardLeft"] = "\uE7B6";
        Glyphs["pictWoundHardRight"] = "\uE7B5";
        Glyphs["pictWoundHardUp"] = "\uE7B3";
        Glyphs["pictWoundSoftDown"] = "\uE7B8";
        Glyphs["pictWoundSoftLeft"] = "\uE7BA";
        Glyphs["pictWoundSoftRight"] = "\uE7B9";
        Glyphs["pictWoundSoftUp"] = "\uE7B7";
        Glyphs["pictXyl"] = "\uE6A1";
        Glyphs["pictXylBass"] = "\uE6A3";
        Glyphs["pictXylSmithBrindle"] = "\uE6AB";
        Glyphs["pictXylTenor"] = "\uE6A2";
        Glyphs["pictXylTenorTrough"] = "\uE6A5";
        Glyphs["pictXylTrough"] = "\uE6A4";
        Glyphs["pluckedBuzzPizzicato"] = "\uE632";
        Glyphs["pluckedDamp"] = "\uE638";
        Glyphs["pluckedDampAll"] = "\uE639";
        Glyphs["pluckedDampOnStem"] = "\uE63B";
        Glyphs["pluckedFingernailFlick"] = "\uE637";
        Glyphs["pluckedLeftHandPizzicato"] = "\uE633";
        Glyphs["pluckedPlectrum"] = "\uE63A";
        Glyphs["pluckedSnapPizzicatoAbove"] = "\uE631";
        Glyphs["pluckedSnapPizzicatoBelow"] = "\uE630";
        Glyphs["pluckedWithFingernails"] = "\uE636";
        Glyphs["quindicesima"] = "\uE514";
        Glyphs["quindicesimaAlta"] = "\uE515";
        Glyphs["quindicesimaBassa"] = "\uE516";
        Glyphs["quindicesimaBassaMb"] = "\uE51D";
        Glyphs["repeat1Bar"] = "\uE500";
        Glyphs["repeat2Bars"] = "\uE501";
        Glyphs["repeat4Bars"] = "\uE502";
        Glyphs["repeatBarLowerDot"] = "\uE505";
        Glyphs["repeatBarSlash"] = "\uE504";
        Glyphs["repeatBarUpperDot"] = "\uE503";
        Glyphs["repeatDot"] = "\uE044";
        Glyphs["repeatDots"] = "\uE043";
        Glyphs["repeatLeft"] = "\uE040";
        Glyphs["repeatRight"] = "\uE041";
        Glyphs["repeatRightLeft"] = "\uE042";
        Glyphs["rest1024th"] = "\uE4ED";
        Glyphs["rest128th"] = "\uE4EA";
        Glyphs["rest16th"] = "\uE4E7";
        Glyphs["rest256th"] = "\uE4EB";
        Glyphs["rest32nd"] = "\uE4E8";
        Glyphs["rest512th"] = "\uE4EC";
        Glyphs["rest64th"] = "\uE4E9";
        Glyphs["rest8th"] = "\uE4E6";
        Glyphs["restDoubleWhole"] = "\uE4E2";
        Glyphs["restDoubleWholeLegerLine"] = "\uE4F3";
        Glyphs["restHBar"] = "\uE4EE";
        Glyphs["restHBarLeft"] = "\uE4EF";
        Glyphs["restHBarMiddle"] = "\uE4F0";
        Glyphs["restHBarRight"] = "\uE4F1";
        Glyphs["restHalf"] = "\uE4E4";
        Glyphs["restHalfLegerLine"] = "\uE4F5";
        Glyphs["restLonga"] = "\uE4E1";
        Glyphs["restMaxima"] = "\uE4E0";
        Glyphs["restQuarter"] = "\uE4E5";
        Glyphs["restQuarterOld"] = "\uE4F2";
        Glyphs["restQuarterZ"] = "\uE4F6";
        Glyphs["restWhole"] = "\uE4E3";
        Glyphs["restWholeLegerLine"] = "\uE4F4";
        Glyphs["reversedBrace"] = "\uE001";
        Glyphs["reversedBracketBottom"] = "\uE006";
        Glyphs["reversedBracketTop"] = "\uE005";
        Glyphs["rightRepeatSmall"] = "\uE04D";
        Glyphs["scaleDegree1"] = "\uEF00";
        Glyphs["scaleDegree2"] = "\uEF01";
        Glyphs["scaleDegree3"] = "\uEF02";
        Glyphs["scaleDegree4"] = "\uEF03";
        Glyphs["scaleDegree5"] = "\uEF04";
        Glyphs["scaleDegree6"] = "\uEF05";
        Glyphs["scaleDegree7"] = "\uEF06";
        Glyphs["scaleDegree8"] = "\uEF07";
        Glyphs["scaleDegree9"] = "\uEF08";
        Glyphs["schaefferClef"] = "\uE06F";
        Glyphs["schaefferFClefToGClef"] = "\uE072";
        Glyphs["schaefferGClefToFClef"] = "\uE071";
        Glyphs["schaefferPreviousClef"] = "\uE070";
        Glyphs["segno"] = "\uE047";
        Glyphs["segnoSerpent1"] = "\uE04A";
        Glyphs["segnoSerpent2"] = "\uE04B";
        Glyphs["semipitchedPercussionClef1"] = "\uE06B";
        Glyphs["semipitchedPercussionClef2"] = "\uE06C";
        Glyphs["smnFlat"] = "\uEC52";
        Glyphs["smnFlatWhite"] = "\uEC53";
        Glyphs["smnHistoryDoubleFlat"] = "\uEC57";
        Glyphs["smnHistoryDoubleSharp"] = "\uEC55";
        Glyphs["smnHistoryFlat"] = "\uEC56";
        Glyphs["smnHistorySharp"] = "\uEC54";
        Glyphs["smnNatural"] = "\uEC58";
        Glyphs["smnSharp"] = "\uEC50";
        Glyphs["smnSharpDown"] = "\uEC59";
        Glyphs["smnSharpWhite"] = "\uEC51";
        Glyphs["smnSharpWhiteDown"] = "\uEC5A";
        Glyphs["splitBarDivider"] = "\uE00A";
        Glyphs["staff1Line"] = "\uE010";
        Glyphs["staff1LineNarrow"] = "\uE01C";
        Glyphs["staff1LineWide"] = "\uE016";
        Glyphs["staff2Lines"] = "\uE011";
        Glyphs["staff2LinesNarrow"] = "\uE01D";
        Glyphs["staff2LinesWide"] = "\uE017";
        Glyphs["staff3Lines"] = "\uE012";
        Glyphs["staff3LinesNarrow"] = "\uE01E";
        Glyphs["staff3LinesWide"] = "\uE018";
        Glyphs["staff4Lines"] = "\uE013";
        Glyphs["staff4LinesNarrow"] = "\uE01F";
        Glyphs["staff4LinesWide"] = "\uE019";
        Glyphs["staff5Lines"] = "\uE014";
        Glyphs["staff5LinesNarrow"] = "\uE020";
        Glyphs["staff5LinesWide"] = "\uE01A";
        Glyphs["staff6Lines"] = "\uE015";
        Glyphs["staff6LinesNarrow"] = "\uE021";
        Glyphs["staff6LinesWide"] = "\uE01B";
        Glyphs["staffDivideArrowDown"] = "\uE00B";
        Glyphs["staffDivideArrowUp"] = "\uE00C";
        Glyphs["staffDivideArrowUpDown"] = "\uE00D";
        Glyphs["staffPosLower1"] = "\uEB98";
        Glyphs["staffPosLower2"] = "\uEB99";
        Glyphs["staffPosLower3"] = "\uEB9A";
        Glyphs["staffPosLower4"] = "\uEB9B";
        Glyphs["staffPosLower5"] = "\uEB9C";
        Glyphs["staffPosLower6"] = "\uEB9D";
        Glyphs["staffPosLower7"] = "\uEB9E";
        Glyphs["staffPosLower8"] = "\uEB9F";
        Glyphs["staffPosRaise1"] = "\uEB90";
        Glyphs["staffPosRaise2"] = "\uEB91";
        Glyphs["staffPosRaise3"] = "\uEB92";
        Glyphs["staffPosRaise4"] = "\uEB93";
        Glyphs["staffPosRaise5"] = "\uEB94";
        Glyphs["staffPosRaise6"] = "\uEB95";
        Glyphs["staffPosRaise7"] = "\uEB96";
        Glyphs["staffPosRaise8"] = "\uEB97";
        Glyphs["stem"] = "\uE210";
        Glyphs["stemBowOnBridge"] = "\uE215";
        Glyphs["stemBowOnTailpiece"] = "\uE216";
        Glyphs["stemBuzzRoll"] = "\uE217";
        Glyphs["stemDamp"] = "\uE218";
        Glyphs["stemHarpStringNoise"] = "\uE21F";
        Glyphs["stemMultiphonicsBlack"] = "\uE21A";
        Glyphs["stemMultiphonicsBlackWhite"] = "\uE21C";
        Glyphs["stemMultiphonicsWhite"] = "\uE21B";
        Glyphs["stemPendereckiTremolo"] = "\uE213";
        Glyphs["stemRimShot"] = "\uE21E";
        Glyphs["stemSprechgesang"] = "\uE211";
        Glyphs["stemSulPonticello"] = "\uE214";
        Glyphs["stemSussurando"] = "\uE21D";
        Glyphs["stemSwished"] = "\uE212";
        Glyphs["stemVibratoPulse"] = "\uE219";
        Glyphs["stockhausenTremolo"] = "\uE232";
        Glyphs["stringsBowBehindBridge"] = "\uE618";
        Glyphs["stringsBowBehindBridgeFourStrings"] = "\uE62A";
        Glyphs["stringsBowBehindBridgeOneString"] = "\uE627";
        Glyphs["stringsBowBehindBridgeThreeStrings"] = "\uE629";
        Glyphs["stringsBowBehindBridgeTwoStrings"] = "\uE628";
        Glyphs["stringsBowOnBridge"] = "\uE619";
        Glyphs["stringsBowOnTailpiece"] = "\uE61A";
        Glyphs["stringsChangeBowDirection"] = "\uE626";
        Glyphs["stringsDownBow"] = "\uE610";
        Glyphs["stringsDownBowAwayFromBody"] = "\uEE82";
        Glyphs["stringsDownBowBeyondBridge"] = "\uEE84";
        Glyphs["stringsDownBowTowardsBody"] = "\uEE80";
        Glyphs["stringsDownBowTurned"] = "\uE611";
        Glyphs["stringsFouette"] = "\uE622";
        Glyphs["stringsHalfHarmonic"] = "\uE615";
        Glyphs["stringsHarmonic"] = "\uE614";
        Glyphs["stringsJeteAbove"] = "\uE620";
        Glyphs["stringsJeteBelow"] = "\uE621";
        Glyphs["stringsMuteOff"] = "\uE617";
        Glyphs["stringsMuteOn"] = "\uE616";
        Glyphs["stringsOverpressureDownBow"] = "\uE61B";
        Glyphs["stringsOverpressureNoDirection"] = "\uE61F";
        Glyphs["stringsOverpressurePossibileDownBow"] = "\uE61D";
        Glyphs["stringsOverpressurePossibileUpBow"] = "\uE61E";
        Glyphs["stringsOverpressureUpBow"] = "\uE61C";
        Glyphs["stringsScrapeCircularClockwise"] = "\uEE88";
        Glyphs["stringsScrapeCircularCounterclockwise"] = "\uEE89";
        Glyphs["stringsScrapeParallelInward"] = "\uEE86";
        Glyphs["stringsScrapeParallelOutward"] = "\uEE87";
        Glyphs["stringsThumbPosition"] = "\uE624";
        Glyphs["stringsThumbPositionTurned"] = "\uE625";
        Glyphs["stringsTripleChopInward"] = "\uEE8A";
        Glyphs["stringsTripleChopOutward"] = "\uEE8B";
        Glyphs["stringsUpBow"] = "\uE612";
        Glyphs["stringsUpBowAwayFromBody"] = "\uEE83";
        Glyphs["stringsUpBowBeyondBridge"] = "\uEE85";
        Glyphs["stringsUpBowTowardsBody"] = "\uEE81";
        Glyphs["stringsUpBowTurned"] = "\uE613";
        Glyphs["stringsVibratoPulse"] = "\uE623";
        Glyphs["swissRudimentsNoteheadBlackDouble"] = "\uEE72";
        Glyphs["swissRudimentsNoteheadBlackFlam"] = "\uEE70";
        Glyphs["swissRudimentsNoteheadHalfDouble"] = "\uEE73";
        Glyphs["swissRudimentsNoteheadHalfFlam"] = "\uEE71";
        Glyphs["systemDivider"] = "\uE007";
        Glyphs["systemDividerExtraLong"] = "\uE009";
        Glyphs["systemDividerLong"] = "\uE008";
        Glyphs["textAugmentationDot"] = "\uE1FC";
        Glyphs["textBlackNoteFrac16thLongStem"] = "\uE1F5";
        Glyphs["textBlackNoteFrac16thShortStem"] = "\uE1F4";
        Glyphs["textBlackNoteFrac32ndLongStem"] = "\uE1F6";
        Glyphs["textBlackNoteFrac8thLongStem"] = "\uE1F3";
        Glyphs["textBlackNoteFrac8thShortStem"] = "\uE1F2";
        Glyphs["textBlackNoteLongStem"] = "\uE1F1";
        Glyphs["textBlackNoteShortStem"] = "\uE1F0";
        Glyphs["textCont16thBeamLongStem"] = "\uE1FA";
        Glyphs["textCont16thBeamShortStem"] = "\uE1F9";
        Glyphs["textCont32ndBeamLongStem"] = "\uE1FB";
        Glyphs["textCont8thBeamLongStem"] = "\uE1F8";
        Glyphs["textCont8thBeamShortStem"] = "\uE1F7";
        Glyphs["textHeadlessBlackNoteFrac16thLongStem"] = "\uE209";
        Glyphs["textHeadlessBlackNoteFrac16thShortStem"] = "\uE208";
        Glyphs["textHeadlessBlackNoteFrac32ndLongStem"] = "\uE20A";
        Glyphs["textHeadlessBlackNoteFrac8thLongStem"] = "\uE207";
        Glyphs["textHeadlessBlackNoteFrac8thShortStem"] = "\uE206";
        Glyphs["textHeadlessBlackNoteLongStem"] = "\uE205";
        Glyphs["textHeadlessBlackNoteShortStem"] = "\uE204";
        Glyphs["textTie"] = "\uE1FD";
        Glyphs["textTuplet3LongStem"] = "\uE202";
        Glyphs["textTuplet3ShortStem"] = "\uE1FF";
        Glyphs["textTupletBracketEndLongStem"] = "\uE203";
        Glyphs["textTupletBracketEndShortStem"] = "\uE200";
        Glyphs["textTupletBracketStartLongStem"] = "\uE201";
        Glyphs["textTupletBracketStartShortStem"] = "\uE1FE";
        Glyphs["timeSig0"] = "\uE080";
        Glyphs["timeSig0Reversed"] = "\uECF0";
        Glyphs["timeSig0Turned"] = "\uECE0";
        Glyphs["timeSig1"] = "\uE081";
        Glyphs["timeSig1Reversed"] = "\uECF1";
        Glyphs["timeSig1Turned"] = "\uECE1";
        Glyphs["timeSig2"] = "\uE082";
        Glyphs["timeSig2Reversed"] = "\uECF2";
        Glyphs["timeSig2Turned"] = "\uECE2";
        Glyphs["timeSig3"] = "\uE083";
        Glyphs["timeSig3Reversed"] = "\uECF3";
        Glyphs["timeSig3Turned"] = "\uECE3";
        Glyphs["timeSig4"] = "\uE084";
        Glyphs["timeSig4Reversed"] = "\uECF4";
        Glyphs["timeSig4Turned"] = "\uECE4";
        Glyphs["timeSig5"] = "\uE085";
        Glyphs["timeSig5Reversed"] = "\uECF5";
        Glyphs["timeSig5Turned"] = "\uECE5";
        Glyphs["timeSig6"] = "\uE086";
        Glyphs["timeSig6Reversed"] = "\uECF6";
        Glyphs["timeSig6Turned"] = "\uECE6";
        Glyphs["timeSig7"] = "\uE087";
        Glyphs["timeSig7Reversed"] = "\uECF7";
        Glyphs["timeSig7Turned"] = "\uECE7";
        Glyphs["timeSig8"] = "\uE088";
        Glyphs["timeSig8Reversed"] = "\uECF8";
        Glyphs["timeSig8Turned"] = "\uECE8";
        Glyphs["timeSig9"] = "\uE089";
        Glyphs["timeSig9Reversed"] = "\uECF9";
        Glyphs["timeSig9Turned"] = "\uECE9";
        Glyphs["timeSigBracketLeft"] = "\uEC80";
        Glyphs["timeSigBracketLeftSmall"] = "\uEC82";
        Glyphs["timeSigBracketRight"] = "\uEC81";
        Glyphs["timeSigBracketRightSmall"] = "\uEC83";
        Glyphs["timeSigCombDenominator"] = "\uE09F";
        Glyphs["timeSigCombNumerator"] = "\uE09E";
        Glyphs["timeSigComma"] = "\uE096";
        Glyphs["timeSigCommon"] = "\uE08A";
        Glyphs["timeSigCommonReversed"] = "\uECFA";
        Glyphs["timeSigCommonTurned"] = "\uECEA";
        Glyphs["timeSigCut2"] = "\uEC85";
        Glyphs["timeSigCut3"] = "\uEC86";
        Glyphs["timeSigCutCommon"] = "\uE08B";
        Glyphs["timeSigCutCommonReversed"] = "\uECFB";
        Glyphs["timeSigCutCommonTurned"] = "\uECEB";
        Glyphs["timeSigEquals"] = "\uE08F";
        Glyphs["timeSigFractionHalf"] = "\uE098";
        Glyphs["timeSigFractionOneThird"] = "\uE09A";
        Glyphs["timeSigFractionQuarter"] = "\uE097";
        Glyphs["timeSigFractionThreeQuarters"] = "\uE099";
        Glyphs["timeSigFractionTwoThirds"] = "\uE09B";
        Glyphs["timeSigFractionalSlash"] = "\uE08E";
        Glyphs["timeSigMinus"] = "\uE090";
        Glyphs["timeSigMultiply"] = "\uE091";
        Glyphs["timeSigOpenPenderecki"] = "\uE09D";
        Glyphs["timeSigParensLeft"] = "\uE094";
        Glyphs["timeSigParensLeftSmall"] = "\uE092";
        Glyphs["timeSigParensRight"] = "\uE095";
        Glyphs["timeSigParensRightSmall"] = "\uE093";
        Glyphs["timeSigPlus"] = "\uE08C";
        Glyphs["timeSigPlusSmall"] = "\uE08D";
        Glyphs["timeSigSlash"] = "\uEC84";
        Glyphs["timeSigX"] = "\uE09C";
        Glyphs["tremolo1"] = "\uE220";
        Glyphs["tremolo2"] = "\uE221";
        Glyphs["tremolo3"] = "\uE222";
        Glyphs["tremolo4"] = "\uE223";
        Glyphs["tremolo5"] = "\uE224";
        Glyphs["tremoloDivisiDots2"] = "\uE22E";
        Glyphs["tremoloDivisiDots3"] = "\uE22F";
        Glyphs["tremoloDivisiDots4"] = "\uE230";
        Glyphs["tremoloDivisiDots6"] = "\uE231";
        Glyphs["tremoloFingered1"] = "\uE225";
        Glyphs["tremoloFingered2"] = "\uE226";
        Glyphs["tremoloFingered3"] = "\uE227";
        Glyphs["tremoloFingered4"] = "\uE228";
        Glyphs["tremoloFingered5"] = "\uE229";
        Glyphs["tripleTongueAbove"] = "\uE5F2";
        Glyphs["tripleTongueBelow"] = "\uE5F3";
        Glyphs["tuplet0"] = "\uE880";
        Glyphs["tuplet1"] = "\uE881";
        Glyphs["tuplet2"] = "\uE882";
        Glyphs["tuplet3"] = "\uE883";
        Glyphs["tuplet4"] = "\uE884";
        Glyphs["tuplet5"] = "\uE885";
        Glyphs["tuplet6"] = "\uE886";
        Glyphs["tuplet7"] = "\uE887";
        Glyphs["tuplet8"] = "\uE888";
        Glyphs["tuplet9"] = "\uE889";
        Glyphs["tupletColon"] = "\uE88A";
        Glyphs["unmeasuredTremolo"] = "\uE22C";
        Glyphs["unmeasuredTremoloSimple"] = "\uE22D";
        Glyphs["unpitchedPercussionClef1"] = "\uE069";
        Glyphs["unpitchedPercussionClef2"] = "\uE06A";
        Glyphs["ventiduesima"] = "\uE517";
        Glyphs["ventiduesimaAlta"] = "\uE518";
        Glyphs["ventiduesimaBassa"] = "\uE519";
        Glyphs["ventiduesimaBassaMb"] = "\uE51E";
        Glyphs["vocalFingerClickStockhausen"] = "\uE649";
        Glyphs["vocalHalbGesungen"] = "\uE64B";
        Glyphs["vocalMouthClosed"] = "\uE640";
        Glyphs["vocalMouthOpen"] = "\uE642";
        Glyphs["vocalMouthPursed"] = "\uE644";
        Glyphs["vocalMouthSlightlyOpen"] = "\uE641";
        Glyphs["vocalMouthWideOpen"] = "\uE643";
        Glyphs["vocalNasalVoice"] = "\uE647";
        Glyphs["vocalSprechgesang"] = "\uE645";
        Glyphs["vocalTongueClickStockhausen"] = "\uE648";
        Glyphs["vocalTongueFingerClickStockhausen"] = "\uE64A";
        Glyphs["vocalsSussurando"] = "\uE646";
        Glyphs["wiggleArpeggiatoDown"] = "\uEAAA";
        Glyphs["wiggleArpeggiatoDownArrow"] = "\uEAAE";
        Glyphs["wiggleArpeggiatoDownSwash"] = "\uEAAC";
        Glyphs["wiggleArpeggiatoUp"] = "\uEAA9";
        Glyphs["wiggleArpeggiatoUpArrow"] = "\uEAAD";
        Glyphs["wiggleArpeggiatoUpSwash"] = "\uEAAB";
        Glyphs["wiggleCircular"] = "\uEAC9";
        Glyphs["wiggleCircularConstant"] = "\uEAC0";
        Glyphs["wiggleCircularConstantFlipped"] = "\uEAC1";
        Glyphs["wiggleCircularConstantFlippedLarge"] = "\uEAC3";
        Glyphs["wiggleCircularConstantLarge"] = "\uEAC2";
        Glyphs["wiggleCircularEnd"] = "\uEACB";
        Glyphs["wiggleCircularLarge"] = "\uEAC8";
        Glyphs["wiggleCircularLarger"] = "\uEAC7";
        Glyphs["wiggleCircularLargerStill"] = "\uEAC6";
        Glyphs["wiggleCircularLargest"] = "\uEAC5";
        Glyphs["wiggleCircularSmall"] = "\uEACA";
        Glyphs["wiggleCircularStart"] = "\uEAC4";
        Glyphs["wiggleGlissando"] = "\uEAAF";
        Glyphs["wiggleGlissandoGroup1"] = "\uEABD";
        Glyphs["wiggleGlissandoGroup2"] = "\uEABE";
        Glyphs["wiggleGlissandoGroup3"] = "\uEABF";
        Glyphs["wiggleRandom1"] = "\uEAF0";
        Glyphs["wiggleRandom2"] = "\uEAF1";
        Glyphs["wiggleRandom3"] = "\uEAF2";
        Glyphs["wiggleRandom4"] = "\uEAF3";
        Glyphs["wiggleSawtooth"] = "\uEABB";
        Glyphs["wiggleSawtoothNarrow"] = "\uEABA";
        Glyphs["wiggleSawtoothWide"] = "\uEABC";
        Glyphs["wiggleSquareWave"] = "\uEAB8";
        Glyphs["wiggleSquareWaveNarrow"] = "\uEAB7";
        Glyphs["wiggleSquareWaveWide"] = "\uEAB9";
        Glyphs["wiggleTrill"] = "\uEAA4";
        Glyphs["wiggleTrillFast"] = "\uEAA3";
        Glyphs["wiggleTrillFaster"] = "\uEAA2";
        Glyphs["wiggleTrillFasterStill"] = "\uEAA1";
        Glyphs["wiggleTrillFastest"] = "\uEAA0";
        Glyphs["wiggleTrillSlow"] = "\uEAA5";
        Glyphs["wiggleTrillSlower"] = "\uEAA6";
        Glyphs["wiggleTrillSlowerStill"] = "\uEAA7";
        Glyphs["wiggleTrillSlowest"] = "\uEAA8";
        Glyphs["wiggleVIbratoLargestSlower"] = "\uEAEE";
        Glyphs["wiggleVIbratoMediumSlower"] = "\uEAE0";
        Glyphs["wiggleVibrato"] = "\uEAB0";
        Glyphs["wiggleVibratoLargeFast"] = "\uEAE5";
        Glyphs["wiggleVibratoLargeFaster"] = "\uEAE4";
        Glyphs["wiggleVibratoLargeFasterStill"] = "\uEAE3";
        Glyphs["wiggleVibratoLargeFastest"] = "\uEAE2";
        Glyphs["wiggleVibratoLargeSlow"] = "\uEAE6";
        Glyphs["wiggleVibratoLargeSlower"] = "\uEAE7";
        Glyphs["wiggleVibratoLargeSlowest"] = "\uEAE8";
        Glyphs["wiggleVibratoLargestFast"] = "\uEAEC";
        Glyphs["wiggleVibratoLargestFaster"] = "\uEAEB";
        Glyphs["wiggleVibratoLargestFasterStill"] = "\uEAEA";
        Glyphs["wiggleVibratoLargestFastest"] = "\uEAE9";
        Glyphs["wiggleVibratoLargestSlow"] = "\uEAED";
        Glyphs["wiggleVibratoLargestSlowest"] = "\uEAEF";
        Glyphs["wiggleVibratoMediumFast"] = "\uEADE";
        Glyphs["wiggleVibratoMediumFaster"] = "\uEADD";
        Glyphs["wiggleVibratoMediumFasterStill"] = "\uEADC";
        Glyphs["wiggleVibratoMediumFastest"] = "\uEADB";
        Glyphs["wiggleVibratoMediumSlow"] = "\uEADF";
        Glyphs["wiggleVibratoMediumSlowest"] = "\uEAE1";
        Glyphs["wiggleVibratoSmallFast"] = "\uEAD7";
        Glyphs["wiggleVibratoSmallFaster"] = "\uEAD6";
        Glyphs["wiggleVibratoSmallFasterStill"] = "\uEAD5";
        Glyphs["wiggleVibratoSmallFastest"] = "\uEAD4";
        Glyphs["wiggleVibratoSmallSlow"] = "\uEAD8";
        Glyphs["wiggleVibratoSmallSlower"] = "\uEAD9";
        Glyphs["wiggleVibratoSmallSlowest"] = "\uEADA";
        Glyphs["wiggleVibratoSmallestFast"] = "\uEAD0";
        Glyphs["wiggleVibratoSmallestFaster"] = "\uEACF";
        Glyphs["wiggleVibratoSmallestFasterStill"] = "\uEACE";
        Glyphs["wiggleVibratoSmallestFastest"] = "\uEACD";
        Glyphs["wiggleVibratoSmallestSlow"] = "\uEAD1";
        Glyphs["wiggleVibratoSmallestSlower"] = "\uEAD2";
        Glyphs["wiggleVibratoSmallestSlowest"] = "\uEAD3";
        Glyphs["wiggleVibratoStart"] = "\uEACC";
        Glyphs["wiggleVibratoWide"] = "\uEAB1";
        Glyphs["wiggleWavy"] = "\uEAB5";
        Glyphs["wiggleWavyNarrow"] = "\uEAB4";
        Glyphs["wiggleWavyWide"] = "\uEAB6";
        Glyphs["windClosedHole"] = "\uE5F4";
        Glyphs["windFlatEmbouchure"] = "\uE5FB";
        Glyphs["windHalfClosedHole1"] = "\uE5F6";
        Glyphs["windHalfClosedHole2"] = "\uE5F7";
        Glyphs["windHalfClosedHole3"] = "\uE5F8";
        Glyphs["windLessRelaxedEmbouchure"] = "\uE5FE";
        Glyphs["windLessTightEmbouchure"] = "\uE600";
        Glyphs["windMouthpiecePop"] = "\uE60A";
        Glyphs["windMultiphonicsBlackStem"] = "\uE607";
        Glyphs["windMultiphonicsBlackWhiteStem"] = "\uE609";
        Glyphs["windMultiphonicsWhiteStem"] = "\uE608";
        Glyphs["windOpenHole"] = "\uE5F9";
        Glyphs["windReedPositionIn"] = "\uE606";
        Glyphs["windReedPositionNormal"] = "\uE604";
        Glyphs["windReedPositionOut"] = "\uE605";
        Glyphs["windRelaxedEmbouchure"] = "\uE5FD";
        Glyphs["windRimOnly"] = "\uE60B";
        Glyphs["windSharpEmbouchure"] = "\uE5FC";
        Glyphs["windStrongAirPressure"] = "\uE603";
        Glyphs["windThreeQuartersClosedHole"] = "\uE5F5";
        Glyphs["windTightEmbouchure"] = "\uE5FF";
        Glyphs["windTrillKey"] = "\uE5FA";
        Glyphs["windVeryTightEmbouchure"] = "\uE601";
        Glyphs["windWeakAirPressure"] = "\uE602";
    })(Glyphs || (Glyphs = {}));

    const RESOLUTION = 16384;
    const durations$1 = {
        '1/2': RESOLUTION * 2,
        1: RESOLUTION / 1,
        2: RESOLUTION / 2,
        4: RESOLUTION / 4,
        8: RESOLUTION / 8,
        16: RESOLUTION / 16,
        32: RESOLUTION / 32,
        64: RESOLUTION / 64,
        128: RESOLUTION / 128,
        256: RESOLUTION / 256,
    };
    const durationAliases = {
        w: '1',
        h: '2',
        q: '4',
        b: '256',
    };
    const keySignatures = {
        C: { num: 0 },
        Am: { num: 0 },
        F: { accidental: 'b', num: 1 },
        Dm: { accidental: 'b', num: 1 },
        Bb: { accidental: 'b', num: 2 },
        Gm: { accidental: 'b', num: 2 },
        Eb: { accidental: 'b', num: 3 },
        Cm: { accidental: 'b', num: 3 },
        Ab: { accidental: 'b', num: 4 },
        Fm: { accidental: 'b', num: 4 },
        Db: { accidental: 'b', num: 5 },
        Bbm: { accidental: 'b', num: 5 },
        Gb: { accidental: 'b', num: 6 },
        Ebm: { accidental: 'b', num: 6 },
        Cb: { accidental: 'b', num: 7 },
        Abm: { accidental: 'b', num: 7 },
        G: { accidental: '#', num: 1 },
        Em: { accidental: '#', num: 1 },
        D: { accidental: '#', num: 2 },
        Bm: { accidental: '#', num: 2 },
        A: { accidental: '#', num: 3 },
        'F#m': { accidental: '#', num: 3 },
        E: { accidental: '#', num: 4 },
        'C#m': { accidental: '#', num: 4 },
        B: { accidental: '#', num: 5 },
        'G#m': { accidental: '#', num: 5 },
        'F#': { accidental: '#', num: 6 },
        'D#m': { accidental: '#', num: 6 },
        'C#': { accidental: '#', num: 7 },
        'A#m': { accidental: '#', num: 7 },
    };
    const clefs = {
        treble: { lineShift: 0 },
        bass: { lineShift: 6 },
        tenor: { lineShift: 4 },
        alto: { lineShift: 3 },
        soprano: { lineShift: 1 },
        percussion: { lineShift: 0 },
        'mezzo-soprano': { lineShift: 2 },
        'baritone-c': { lineShift: 5 },
        'baritone-f': { lineShift: 5 },
        subbass: { lineShift: 7 },
        french: { lineShift: -1 },
    };
    const notesInfo = {
        C: { index: 0, intVal: 0 },
        CN: { index: 0, intVal: 0 },
        'C#': { index: 0, intVal: 1 },
        'C##': { index: 0, intVal: 2 },
        CB: { index: 0, intVal: 11 },
        CBB: { index: 0, intVal: 10 },
        D: { index: 1, intVal: 2 },
        DN: { index: 1, intVal: 2 },
        'D#': { index: 1, intVal: 3 },
        'D##': { index: 1, intVal: 4 },
        DB: { index: 1, intVal: 1 },
        DBB: { index: 1, intVal: 0 },
        E: { index: 2, intVal: 4 },
        EN: { index: 2, intVal: 4 },
        'E#': { index: 2, intVal: 5 },
        'E##': { index: 2, intVal: 6 },
        EB: { index: 2, intVal: 3 },
        EBB: { index: 2, intVal: 2 },
        F: { index: 3, intVal: 5 },
        FN: { index: 3, intVal: 5 },
        'F#': { index: 3, intVal: 6 },
        'F##': { index: 3, intVal: 7 },
        FB: { index: 3, intVal: 4 },
        FBB: { index: 3, intVal: 3 },
        G: { index: 4, intVal: 7 },
        GN: { index: 4, intVal: 7 },
        'G#': { index: 4, intVal: 8 },
        'G##': { index: 4, intVal: 9 },
        GB: { index: 4, intVal: 6 },
        GBB: { index: 4, intVal: 5 },
        A: { index: 5, intVal: 9 },
        AN: { index: 5, intVal: 9 },
        'A#': { index: 5, intVal: 10 },
        'A##': { index: 5, intVal: 11 },
        AB: { index: 5, intVal: 8 },
        ABB: { index: 5, intVal: 7 },
        B: { index: 6, intVal: 11 },
        BN: { index: 6, intVal: 11 },
        'B#': { index: 6, intVal: 12 },
        'B##': { index: 6, intVal: 13 },
        BB: { index: 6, intVal: 10 },
        BBB: { index: 6, intVal: 9 },
        R: { index: 6 },
        X: { index: 6 },
    };
    const validNoteTypes = {
        n: { name: 'note' },
        r: { name: 'rest' },
        h: { name: 'harmonic' },
        m: { name: 'muted' },
        s: { name: 'slash' },
        g: { name: 'ghost' },
        d: { name: 'diamond' },
        x: { name: 'x' },
        ci: { name: 'circled' },
        cx: { name: 'circle x' },
        sf: { name: 'slashed' },
        sb: { name: 'slashed backward' },
        sq: { name: 'square' },
        tu: { name: 'triangle up' },
        td: { name: 'triangle down' },
    };
    const accidentals = {
        '#': Glyphs.accidentalSharp,
        '##': Glyphs.accidentalDoubleSharp,
        b: Glyphs.accidentalFlat,
        bb: Glyphs.accidentalDoubleFlat,
        n: Glyphs.accidentalNatural,
        '{': Glyphs.accidentalParensLeft,
        '}': Glyphs.accidentalParensRight,
        db: Glyphs.accidentalThreeQuarterTonesFlatZimmermann,
        d: Glyphs.accidentalQuarterToneFlatStein,
        '++': Glyphs.accidentalThreeQuarterTonesSharpStein,
        '+': Glyphs.accidentalQuarterToneSharpStein,
        '+-': Glyphs.accidentalKucukMucennebSharp,
        bs: Glyphs.accidentalBakiyeFlat,
        bss: Glyphs.accidentalBuyukMucennebFlat,
        o: Glyphs.accidentalSori,
        k: Glyphs.accidentalKoron,
        bbs: Glyphs.accidentalBuyukMucennebSharp,
        '++-': Glyphs.accidentalBuyukMucennebSharp,
        ashs: Glyphs.accidentalBuyukMucennebSharp,
        afhf: Glyphs.accidentalBuyukMucennebSharp,
    };
    const accidentalColumns = {
        1: {
            a: [1],
            b: [1],
        },
        2: {
            a: [1, 2],
        },
        3: {
            a: [1, 3, 2],
            b: [1, 2, 1],
            secondOnBottom: [1, 2, 3],
        },
        4: {
            a: [1, 3, 4, 2],
            b: [1, 2, 3, 1],
            spacedOutTetrachord: [1, 2, 1, 2],
        },
        5: {
            a: [1, 3, 5, 4, 2],
            b: [1, 2, 4, 3, 1],
            spacedOutPentachord: [1, 2, 3, 2, 1],
            verySpacedOutPentachord: [1, 2, 1, 2, 1],
        },
        6: {
            a: [1, 3, 5, 6, 4, 2],
            b: [1, 2, 4, 5, 3, 1],
            spacedOutHexachord: [1, 3, 2, 1, 3, 2],
            verySpacedOutHexachord: [1, 2, 1, 2, 1, 2],
        },
    };
    const articulations = {
        'a.': { code: Glyphs.augmentationDot, betweenLines: true },
        av: {
            aboveCode: Glyphs.articStaccatissimoAbove,
            belowCode: Glyphs.articStaccatissimoBelow,
            betweenLines: true,
        },
        'a>': {
            aboveCode: Glyphs.articAccentAbove,
            belowCode: Glyphs.articAccentBelow,
            betweenLines: true,
        },
        'a-': {
            aboveCode: Glyphs.articTenutoAbove,
            belowCode: Glyphs.articTenutoBelow,
            betweenLines: true,
        },
        'a^': {
            aboveCode: Glyphs.articMarcatoAbove,
            belowCode: Glyphs.articMarcatoBelow,
            betweenLines: false,
        },
        'a+': { code: Glyphs.pluckedLeftHandPizzicato, betweenLines: false },
        ao: {
            aboveCode: Glyphs.pluckedSnapPizzicatoAbove,
            belowCode: Glyphs.pluckedSnapPizzicatoBelow,
            betweenLines: false,
        },
        ah: { code: Glyphs.stringsHarmonic, betweenLines: false },
        'a@': { aboveCode: Glyphs.fermataAbove, belowCode: Glyphs.fermataBelow, betweenLines: false },
        'a@a': { code: Glyphs.fermataAbove, betweenLines: false },
        'a@u': { code: Glyphs.fermataBelow, betweenLines: false },
        'a@s': { aboveCode: Glyphs.fermataShortAbove, belowCode: Glyphs.fermataShortBelow, betweenLines: false },
        'a@as': { code: Glyphs.fermataShortAbove, betweenLines: false },
        'a@us': { code: Glyphs.fermataShortBelow, betweenLines: false },
        'a@l': { aboveCode: Glyphs.fermataLongAbove, belowCode: Glyphs.fermataLongBelow, betweenLines: false },
        'a@al': { code: Glyphs.fermataLongAbove, betweenLines: false },
        'a@ul': { code: Glyphs.fermataLongBelow, betweenLines: false },
        'a@vl': {
            aboveCode: Glyphs.fermataVeryLongAbove,
            belowCode: Glyphs.fermataVeryLongBelow,
            betweenLines: false,
        },
        'a@avl': { code: Glyphs.fermataVeryLongAbove, betweenLines: false },
        'a@uvl': { code: Glyphs.fermataVeryLongBelow, betweenLines: false },
        'a|': { code: Glyphs.stringsUpBow, betweenLines: false },
        am: { code: Glyphs.stringsDownBow, betweenLines: false },
        'a,': { code: Glyphs.pictChokeCymbal, betweenLines: false },
    };
    const ornaments = {
        mordent: Glyphs.ornamentShortTrill,
        mordentInverted: Glyphs.ornamentMordent,
        turn: Glyphs.ornamentTurn,
        turnInverted: Glyphs.ornamentTurnSlash,
        tr: Glyphs.ornamentTrill,
        upprall: Glyphs.ornamentPrecompSlideTrillDAnglebert,
        downprall: Glyphs.ornamentPrecompDoubleCadenceUpperPrefix,
        prallup: Glyphs.ornamentPrecompTrillSuffixDandrieu,
        pralldown: Glyphs.ornamentPrecompTrillLowerSuffix,
        upmordent: Glyphs.ornamentPrecompSlideTrillBach,
        downmordent: Glyphs.ornamentPrecompDoubleCadenceUpperPrefixTurn,
        lineprall: Glyphs.ornamentPrecompAppoggTrill,
        prallprall: Glyphs.ornamentTremblement,
        scoop: Glyphs.brassScoop,
        doit: Glyphs.brassDoitMedium,
        fall: Glyphs.brassFallLipShort,
        doitLong: Glyphs.brassLiftMedium,
        fallLong: Glyphs.brassFallRoughMedium,
        bend: Glyphs.brassBend,
        plungerClosed: Glyphs.brassMuteClosed,
        plungerOpen: Glyphs.brassMuteOpen,
        flip: Glyphs.brassFlip,
        jazzTurn: Glyphs.brassJazzTurn,
        smear: Glyphs.brassSmear,
    };
    class Tables {
        static clefProperties(clef) {
            if (!clef || !(clef in clefs))
                throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);
            return clefs[clef];
        }
        static keyProperties(keyOctaveGlyph, clef = 'treble', type = 'N', params) {
            let options = { octaveShift: 0, duration: '4' };
            if (typeof params === 'object') {
                options = Object.assign(Object.assign({}, options), params);
            }
            const duration = Tables.sanitizeDuration(options.duration);
            const pieces = keyOctaveGlyph.split('/');
            if (pieces.length < 2) {
                throw new RuntimeError('BadArguments', `First argument must be note/octave or note/octave/glyph-code: ${keyOctaveGlyph}`);
            }
            const key = pieces[0].toUpperCase();
            type = type.toUpperCase();
            const value = notesInfo[key];
            if (!value)
                throw new RuntimeError('BadArguments', 'Invalid key name: ' + key);
            let octave = parseInt(pieces[1], 10);
            octave -= options.octaveShift;
            const baseIndex = octave * 7 - 4 * 7;
            let line = (baseIndex + value.index) / 2;
            line += Tables.clefProperties(clef).lineShift;
            const intValue = typeof value.intVal !== 'undefined' ? octave * 12 + value.intVal : undefined;
            let code = '';
            let glyphName = 'N';
            if (pieces.length > 2 && pieces[2]) {
                glyphName = pieces[2].toUpperCase();
            }
            else if (type !== 'N') {
                glyphName = type;
            }
            else
                glyphName = key;
            code = this.codeNoteHead(glyphName, duration);
            return {
                key,
                octave,
                line,
                intValue,
                code,
                displaced: false,
            };
        }
        static integerToNote(integer) {
            if (typeof integer === 'undefined' || integer < 0 || integer > 11) {
                throw new RuntimeError('BadArguments', `integerToNote() requires an integer in the range [0, 11]: ${integer}`);
            }
            const table = {
                0: 'C',
                1: 'C#',
                2: 'D',
                3: 'D#',
                4: 'E',
                5: 'F',
                6: 'F#',
                7: 'G',
                8: 'G#',
                9: 'A',
                10: 'A#',
                11: 'B',
            };
            const noteValue = table[integer];
            if (!noteValue) {
                throw new RuntimeError('BadArguments', `Unknown note value for integer: ${integer}`);
            }
            return noteValue;
        }
        static textWidth(text) {
            return 7 * text.toString().length;
        }
        static articulationCodes(artic) {
            return articulations[artic];
        }
        static accidentalCodes(accidental) {
            var _a;
            return (_a = accidentals[accidental]) !== null && _a !== void 0 ? _a : accidental;
        }
        static ornamentCodes(ornament) {
            var _a;
            return (_a = ornaments[ornament]) !== null && _a !== void 0 ? _a : ornament;
        }
        static keySignature(spec) {
            const keySpec = keySignatures[spec];
            if (!keySpec) {
                throw new RuntimeError('BadKeySignature', `Bad key signature spec: '${spec}'`);
            }
            if (!keySpec.accidental) {
                return [];
            }
            const accidentalList = {
                b: [2, 0.5, 2.5, 1, 3, 1.5, 3.5],
                '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],
            };
            const notes = accidentalList[keySpec.accidental];
            const accList = [];
            for (let i = 0; i < keySpec.num; ++i) {
                const line = notes[i];
                accList.push({ type: keySpec.accidental, line });
            }
            return accList;
        }
        static getKeySignatures() {
            return keySignatures;
        }
        static hasKeySignature(spec) {
            return spec in keySignatures;
        }
        static sanitizeDuration(duration) {
            const durationNumber = durationAliases[duration];
            if (durationNumber !== undefined) {
                duration = durationNumber;
            }
            if (durations$1[duration] === undefined) {
                throw new RuntimeError('BadArguments', `The provided duration is not valid: ${duration}`);
            }
            return duration;
        }
        static durationToFraction(duration) {
            return new Fraction().parse(Tables.sanitizeDuration(duration));
        }
        static durationToNumber(duration) {
            return Tables.durationToFraction(duration).value();
        }
        static durationToTicks(duration) {
            duration = Tables.sanitizeDuration(duration);
            const ticks = durations$1[duration];
            if (ticks === undefined) {
                throw new RuntimeError('InvalidDuration');
            }
            return ticks;
        }
        static codeNoteHead(type, duration) {
            switch (type) {
                case 'D0':
                    return Glyphs.noteheadDiamondWhole;
                case 'D1':
                    return Glyphs.noteheadDiamondHalf;
                case 'D2':
                    return Glyphs.noteheadDiamondBlack;
                case 'D3':
                    return Glyphs.noteheadDiamondBlack;
                case 'T0':
                    return Glyphs.noteheadTriangleUpWhole;
                case 'T1':
                    return Glyphs.noteheadTriangleUpHalf;
                case 'T2':
                    return Glyphs.noteheadTriangleUpBlack;
                case 'T3':
                    return Glyphs.noteheadTriangleUpBlack;
                case 'X0':
                    return Glyphs.noteheadXWhole;
                case 'X1':
                    return Glyphs.noteheadXHalf;
                case 'X2':
                    return Glyphs.noteheadXBlack;
                case 'X3':
                    return Glyphs.noteheadCircleX;
                case 'S1':
                    return Glyphs.noteheadSquareWhite;
                case 'S2':
                    return Glyphs.noteheadSquareBlack;
                case 'R1':
                    return Glyphs.noteheadSquareWhite;
                case 'R2':
                    return Glyphs.noteheadSquareWhite;
                case 'DO':
                    return Glyphs.noteheadTriangleUpBlack;
                case 'RE':
                    return Glyphs.noteheadMoonBlack;
                case 'MI':
                    return Glyphs.noteheadDiamondBlack;
                case 'FA':
                    return Glyphs.noteheadTriangleLeftBlack;
                case 'FAUP':
                    return Glyphs.noteheadTriangleRightBlack;
                case 'SO':
                    return Glyphs.noteheadBlack;
                case 'LA':
                    return Glyphs.noteheadSquareBlack;
                case 'TI':
                    return Glyphs.noteheadTriangleRoundDownBlack;
                case 'DI':
                case 'H':
                    switch (duration) {
                        case '1/2':
                            return Glyphs.noteheadDiamondDoubleWhole;
                        case '1':
                            return Glyphs.noteheadDiamondWhole;
                        case '2':
                            return Glyphs.noteheadDiamondHalf;
                        default:
                            return Glyphs.noteheadDiamondBlack;
                    }
                case 'X':
                case 'M':
                    switch (duration) {
                        case '1/2':
                            return Glyphs.noteheadXDoubleWhole;
                        case '1':
                            return Glyphs.noteheadXWhole;
                        case '2':
                            return Glyphs.noteheadXHalf;
                        default:
                            return Glyphs.noteheadXBlack;
                    }
                case 'CX':
                    switch (duration) {
                        case '1/2':
                            return Glyphs.noteheadCircleXDoubleWhole;
                        case '1':
                            return Glyphs.noteheadCircleXWhole;
                        case '2':
                            return Glyphs.noteheadCircleXHalf;
                        default:
                            return Glyphs.noteheadCircleX;
                    }
                case 'CI':
                    switch (duration) {
                        case '1/2':
                            return Glyphs.noteheadCircledDoubleWhole;
                        case '1':
                            return Glyphs.noteheadCircledWhole;
                        case '2':
                            return Glyphs.noteheadCircledHalf;
                        default:
                            return Glyphs.noteheadCircledBlack;
                    }
                case 'SQ':
                    switch (duration) {
                        case '1/2':
                            return Glyphs.noteheadDoubleWholeSquare;
                        case '1':
                            return Glyphs.noteheadSquareWhite;
                        case '2':
                            return Glyphs.noteheadSquareWhite;
                        default:
                            return Glyphs.noteheadSquareBlack;
                    }
                case 'TU':
                    switch (duration) {
                        case '1/2':
                            return Glyphs.noteheadTriangleUpDoubleWhole;
                        case '1':
                            return Glyphs.noteheadTriangleUpWhole;
                        case '2':
                            return Glyphs.noteheadTriangleUpHalf;
                        default:
                            return Glyphs.noteheadTriangleUpBlack;
                    }
                case 'TD':
                    switch (duration) {
                        case '1/2':
                            return Glyphs.noteheadTriangleDownDoubleWhole;
                        case '1':
                            return Glyphs.noteheadTriangleDownWhole;
                        case '2':
                            return Glyphs.noteheadTriangleDownHalf;
                        default:
                            return Glyphs.noteheadTriangleDownBlack;
                    }
                case 'SF':
                    switch (duration) {
                        case '1/2':
                            return Glyphs.noteheadSlashedDoubleWhole1;
                        case '1':
                            return Glyphs.noteheadSlashedWhole1;
                        case '2':
                            return Glyphs.noteheadSlashedHalf1;
                        default:
                            return Glyphs.noteheadSlashedBlack1;
                    }
                case 'SB':
                    switch (duration) {
                        case '1/2':
                            return Glyphs.noteheadSlashedDoubleWhole2;
                        case '1':
                            return Glyphs.noteheadSlashedWhole2;
                        case '2':
                            return Glyphs.noteheadSlashedHalf2;
                        default:
                            return Glyphs.noteheadSlashedBlack2;
                    }
                case 'R':
                    switch (duration) {
                        case '1/2':
                            return Glyphs.restDoubleWhole;
                        case '1':
                            return Glyphs.restWhole;
                        case '2':
                            return Glyphs.restHalf;
                        case '4':
                            return Glyphs.restQuarter;
                        case '8':
                            return Glyphs.rest8th;
                        case '16':
                            return Glyphs.rest16th;
                        case '32':
                            return Glyphs.rest32nd;
                        case '64':
                            return Glyphs.rest64th;
                        case '128':
                            return Glyphs.rest128th;
                    }
                    break;
                case 'S':
                    switch (duration) {
                        case '1/2':
                            return Glyphs.noteheadSlashWhiteDoubleWhole;
                        case '1':
                            return Glyphs.noteheadSlashWhiteWhole;
                        case '2':
                            return Glyphs.noteheadSlashWhiteHalf;
                        default:
                            return Glyphs.noteheadSlashVerticalEnds;
                    }
                default:
                    switch (duration) {
                        case '1/2':
                            return Glyphs.noteheadDoubleWhole;
                        case '1':
                            return Glyphs.noteheadWhole;
                        case '2':
                            return Glyphs.noteheadHalf;
                        default:
                            return Glyphs.noteheadBlack;
                    }
            }
            return Glyphs.null;
        }
    }
    Tables.UNISON = true;
    Tables.SOFTMAX_FACTOR = 10;
    Tables.STEM_WIDTH = 1.5;
    Tables.STEM_HEIGHT = 35;
    Tables.STAVE_LINE_THICKNESS = 1;
    Tables.RENDER_PRECISION_PLACES = 3;
    Tables.RESOLUTION = RESOLUTION;
    Tables.durationCodes = {
        '1/2': {
            stem: false,
        },
        1: {
            stem: false,
        },
        2: {
            stem: true,
        },
        4: {
            stem: true,
        },
        8: {
            stem: true,
            beamCount: 1,
            stemBeamExtension: 0,
            codeFlagUp: Glyphs.flag8thUp,
        },
        16: {
            beamCount: 2,
            stemBeamExtension: 0,
            stem: true,
            codeFlagUp: Glyphs.flag16thUp,
        },
        32: {
            beamCount: 3,
            stemBeamExtension: 7.5,
            stem: true,
            codeFlagUp: Glyphs.flag32ndUp,
        },
        64: {
            beamCount: 4,
            stemBeamExtension: 15,
            stem: true,
            codeFlagUp: Glyphs.flag64thUp,
        },
        128: {
            beamCount: 5,
            stemBeamExtension: 22.5,
            stem: true,
            codeFlagUp: Glyphs.flag128thUp,
        },
    };
    Tables.NOTATION_FONT_SCALE = 39;
    Tables.TABLATURE_FONT_SCALE = 39;
    Tables.SLASH_NOTEHEAD_WIDTH = 15;
    Tables.STAVE_LINE_DISTANCE = 10;
    Tables.TEXT_HEIGHT_OFFSET_HACK = 1;
    Tables.accidentalColumnsTable = accidentalColumns;
    Tables.unicode = {
        sharp: '\u266f',
        flat: '\u266d',
        natural: '\u266e',
        triangle: '\u25b3',
        'o-with-slash': '\u00f8',
        degrees: '\u00b0',
        circle: '\u25cb',
    };
    Tables.validTypes = validNoteTypes;
    Tables.TIME4_4 = {
        numBeats: 4,
        beatValue: 4,
        resolution: RESOLUTION,
    };

    function isCategory(obj, category, checkAncestors = true) {
        if (typeof obj !== 'object' || obj === null) {
            return false;
        }
        let constructorFcn = obj.constructor;
        if (checkAncestors) {
            while (obj !== null) {
                constructorFcn = obj.constructor;
                if ('CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category) {
                    return true;
                }
                obj = Object.getPrototypeOf(obj);
            }
            return false;
        }
        else {
            return 'CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category;
        }
    }
    const isAccidental = (obj) => isCategory(obj, "Accidental");
    const isAnnotation = (obj) => isCategory(obj, "Annotation");
    const isBarline = (obj) => isCategory(obj, "Barline");
    const isDot = (obj) => isCategory(obj, "Dot");
    const isGraceNote = (obj) => isCategory(obj, "GraceNote");
    const isGraceNoteGroup = (obj) => isCategory(obj, "GraceNoteGroup");
    const isNote = (obj) => isCategory(obj, "Note");
    const isRenderContext = (obj) => isCategory(obj, "RenderContext");
    const isStaveNote = (obj) => isCategory(obj, "StaveNote");
    const isStemmableNote = (obj) => isCategory(obj, "StemmableNote");
    const isTabNote = (obj) => isCategory(obj, "TabNote");

    function L$l(...args) {
        if (Accidental.DEBUG)
            log('VexFlow.Accidental', args);
    }
    class Accidental extends Modifier$1 {
        static get CATEGORY() {
            return "Accidental";
        }
        static format(accidentals, state) {
            if (!accidentals || accidentals.length === 0)
                return;
            const noteheadAccidentalPadding = Metrics.get('Accidental.noteheadAccidentalPadding');
            const leftShift = state.leftShift + noteheadAccidentalPadding;
            const accidentalSpacing = Metrics.get('Accidental.accidentalSpacing');
            const additionalPadding = Metrics.get('Accidental.leftPadding');
            const accidentalLinePositionsAndSpaceNeeds = [];
            let prevNote = undefined;
            let extraXSpaceNeededForLeftDisplacedNotehead = 0;
            for (let i = 0; i < accidentals.length; ++i) {
                const accidental = accidentals[i];
                const note = accidental.getNote();
                const stave = note.getStave();
                const index = accidental.checkIndex();
                const props = note.getKeyProps()[index];
                if (note !== prevNote) {
                    for (let n = 0; n < note.keys.length; ++n) {
                        extraXSpaceNeededForLeftDisplacedNotehead = Math.max(note.getLeftDisplacedHeadPx() - note.getXShift(), extraXSpaceNeededForLeftDisplacedNotehead);
                    }
                    prevNote = note;
                }
                if (stave) {
                    const lineSpace = stave.getSpacingBetweenLines();
                    const y = stave.getYForLine(props.line);
                    const accLine = Math.round((y / lineSpace) * 2) / 2;
                    accidentalLinePositionsAndSpaceNeeds.push({
                        y,
                        line: accLine,
                        extraXSpaceNeeded: extraXSpaceNeededForLeftDisplacedNotehead,
                        accidental: accidental,
                        spacingBetweenStaveLines: lineSpace,
                    });
                }
                else {
                    accidentalLinePositionsAndSpaceNeeds.push({
                        line: props.line,
                        extraXSpaceNeeded: extraXSpaceNeededForLeftDisplacedNotehead,
                        accidental: accidental,
                    });
                }
            }
            accidentalLinePositionsAndSpaceNeeds.sort((a, b) => b.line - a.line);
            const staveLineAccidentalLayoutMetrics = [];
            let maxExtraXSpaceNeeded = 0;
            for (let i = 0; i < accidentalLinePositionsAndSpaceNeeds.length; i++) {
                const accidentalLinePositionAndSpaceNeeds = accidentalLinePositionsAndSpaceNeeds[i];
                const accidentalType = accidentalLinePositionAndSpaceNeeds.accidental.type;
                const priorLineMetric = staveLineAccidentalLayoutMetrics[staveLineAccidentalLayoutMetrics.length - 1];
                let currentLineMetric;
                if (!priorLineMetric || (priorLineMetric === null || priorLineMetric === void 0 ? void 0 : priorLineMetric.line) !== accidentalLinePositionAndSpaceNeeds.line) {
                    currentLineMetric = {
                        line: accidentalLinePositionAndSpaceNeeds.line,
                        flatLine: true,
                        dblSharpLine: true,
                        numAcc: 0,
                        width: 0,
                        column: 0,
                    };
                    staveLineAccidentalLayoutMetrics.push(currentLineMetric);
                }
                else {
                    currentLineMetric = priorLineMetric;
                }
                if (accidentalType !== 'b' && accidentalType !== 'bb') {
                    currentLineMetric.flatLine = false;
                }
                if (accidentalType !== '##') {
                    currentLineMetric.dblSharpLine = false;
                }
                currentLineMetric.numAcc++;
                currentLineMetric.width += accidentalLinePositionAndSpaceNeeds.accidental.getWidth() + accidentalSpacing;
                maxExtraXSpaceNeeded = Math.max(accidentalLinePositionAndSpaceNeeds.extraXSpaceNeeded, maxExtraXSpaceNeeded);
            }
            let totalColumns = 0;
            for (let i = 0; i < staveLineAccidentalLayoutMetrics.length; i++) {
                let noFurtherConflicts = false;
                const groupStart = i;
                let groupEnd = i;
                while (groupEnd + 1 < staveLineAccidentalLayoutMetrics.length && !noFurtherConflicts) {
                    if (this.checkCollision(staveLineAccidentalLayoutMetrics[groupEnd], staveLineAccidentalLayoutMetrics[groupEnd + 1])) {
                        groupEnd++;
                    }
                    else {
                        noFurtherConflicts = true;
                    }
                }
                const getGroupLine = (index) => staveLineAccidentalLayoutMetrics[groupStart + index];
                const getGroupLines = (indexes) => indexes.map(getGroupLine);
                const lineDifference = (indexA, indexB) => {
                    const [a, b] = getGroupLines([indexA, indexB]).map((item) => item.line);
                    return a - b;
                };
                const notColliding = (...indexPairs) => indexPairs.map(getGroupLines).every(([line1, line2]) => !this.checkCollision(line1, line2));
                const groupLength = groupEnd - groupStart + 1;
                let endCase = this.checkCollision(staveLineAccidentalLayoutMetrics[groupStart], staveLineAccidentalLayoutMetrics[groupEnd])
                    ? 'a'
                    : 'b';
                switch (groupLength) {
                    case 3:
                        if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {
                            endCase = 'secondOnBottom';
                        }
                        break;
                    case 4:
                        if (notColliding([0, 2], [1, 3])) {
                            endCase = 'spacedOutTetrachord';
                        }
                        break;
                    case 5:
                        if (endCase === 'b' && notColliding([1, 3])) {
                            endCase = 'spacedOutPentachord';
                            if (notColliding([0, 2], [2, 4])) {
                                endCase = 'verySpacedOutPentachord';
                            }
                        }
                        break;
                    case 6:
                        if (notColliding([0, 3], [1, 4], [2, 5])) {
                            endCase = 'spacedOutHexachord';
                        }
                        if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {
                            endCase = 'verySpacedOutHexachord';
                        }
                        break;
                }
                let groupMember;
                let column;
                if (groupLength >= 7) {
                    let patternLength = 2;
                    let collisionDetected = true;
                    while (collisionDetected === true) {
                        collisionDetected = false;
                        for (let line = 0; line + patternLength < staveLineAccidentalLayoutMetrics.length; line++) {
                            if (this.checkCollision(staveLineAccidentalLayoutMetrics[line], staveLineAccidentalLayoutMetrics[line + patternLength])) {
                                collisionDetected = true;
                                patternLength++;
                                break;
                            }
                        }
                    }
                    for (groupMember = i; groupMember <= groupEnd; groupMember++) {
                        column = ((groupMember - i) % patternLength) + 1;
                        staveLineAccidentalLayoutMetrics[groupMember].column = column;
                        totalColumns = totalColumns > column ? totalColumns : column;
                    }
                }
                else {
                    for (groupMember = i; groupMember <= groupEnd; groupMember++) {
                        column = Tables.accidentalColumnsTable[groupLength][endCase][groupMember - i];
                        staveLineAccidentalLayoutMetrics[groupMember].column = column;
                        totalColumns = totalColumns > column ? totalColumns : column;
                    }
                }
                i = groupEnd;
            }
            const columnWidths = [];
            const columnXOffsets = [];
            for (let i = 0; i <= totalColumns; i++) {
                columnWidths[i] = 0;
                columnXOffsets[i] = 0;
            }
            columnWidths[0] = leftShift + maxExtraXSpaceNeeded;
            columnXOffsets[0] = leftShift;
            staveLineAccidentalLayoutMetrics.forEach((line) => {
                if (line.width > columnWidths[line.column])
                    columnWidths[line.column] = line.width;
            });
            for (let i = 1; i < columnWidths.length; i++) {
                columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];
            }
            const totalShift = columnXOffsets[columnXOffsets.length - 1];
            let accCount = 0;
            staveLineAccidentalLayoutMetrics.forEach((line) => {
                let lineWidth = 0;
                const lastAccOnLine = accCount + line.numAcc;
                for (accCount; accCount < lastAccOnLine; accCount++) {
                    const xShift = columnXOffsets[line.column - 1] + lineWidth + maxExtraXSpaceNeeded;
                    accidentalLinePositionsAndSpaceNeeds[accCount].accidental.setXShift(xShift);
                    lineWidth += accidentalLinePositionsAndSpaceNeeds[accCount].accidental.getWidth() + accidentalSpacing;
                    L$l('Line, accCount, shift: ', line.line, accCount, xShift);
                }
            });
            state.leftShift = totalShift + additionalPadding;
        }
        static checkCollision(line1, line2) {
            let clearance = line2.line - line1.line;
            let clearanceRequired = 3;
            if (clearance > 0) {
                clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;
                if (line1.dblSharpLine)
                    clearance -= 0.5;
            }
            else {
                clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;
                if (line2.dblSharpLine)
                    clearance -= 0.5;
            }
            const collision = Math.abs(clearance) < clearanceRequired;
            L$l('Line1, Line2, Collision: ', line1.line, line2.line, collision);
            return collision;
        }
        static applyAccidentals(voices, keySignature) {
            const tickPositions = [];
            const tickNoteMap = {};
            voices.forEach((voice) => {
                const tickPosition = new Fraction(0, 1);
                const tickable = voice.getTickables();
                tickable.forEach((t) => {
                    if (t.shouldIgnoreTicks())
                        return;
                    const notesAtPosition = tickNoteMap[tickPosition.value()];
                    if (!notesAtPosition) {
                        tickPositions.push(tickPosition.value());
                        tickNoteMap[tickPosition.value()] = [t];
                    }
                    else {
                        notesAtPosition.push(t);
                    }
                    tickPosition.add(t.getTicks());
                });
            });
            const music = new Music();
            if (!keySignature)
                keySignature = 'C';
            const scaleMapKey = music.createScaleMap(keySignature);
            const scaleMap = {};
            tickPositions.forEach((tickPos) => {
                const tickables = tickNoteMap[tickPos];
                const modifiedPitches = [];
                const processNote = (t) => {
                    if (!isStaveNote(t) || t.isRest() || t.shouldIgnoreTicks()) {
                        return;
                    }
                    const staveNote = t;
                    staveNote.keys.forEach((keyString, keyIndex) => {
                        const key = music.getNoteParts(keyString.split('/')[0]);
                        const octave = keyString.split('/')[1];
                        const accidentalString = key.accidental || 'n';
                        const pitch = key.root + accidentalString;
                        if (!scaleMap[key.root + octave])
                            scaleMap[key.root + octave] = scaleMapKey[key.root];
                        const sameAccidental = scaleMap[key.root + octave] === pitch;
                        const previouslyModified = modifiedPitches.indexOf(keyString) > -1;
                        staveNote.getModifiers().forEach((modifier, index) => {
                            if (isAccidental(modifier) && modifier.type == accidentalString && modifier.getIndex() == keyIndex) {
                                staveNote.getModifiers().splice(index, 1);
                            }
                        });
                        if (!sameAccidental || (sameAccidental && previouslyModified)) {
                            scaleMap[key.root + octave] = pitch;
                            const accidental = new Accidental(accidentalString);
                            staveNote.addModifier(accidental, keyIndex);
                            modifiedPitches.push(keyString);
                        }
                    });
                    staveNote.getModifiers().forEach((modifier) => {
                        if (isGraceNoteGroup(modifier)) {
                            modifier.getGraceNotes().forEach(processNote);
                        }
                    });
                };
                tickables.forEach(processNote);
            });
        }
        constructor(type) {
            super();
            L$l('New accidental: ', type);
            this.type = type;
            this.position = Modifier$1.Position.LEFT;
            this.cautionary = false;
            this.reset();
        }
        reset() {
            this.text = '';
            if (!this.cautionary) {
                this.text += Tables.accidentalCodes(this.type);
                this.fontInfo.size = Metrics.get('Accidental.fontSize');
            }
            else {
                this.text += Tables.accidentalCodes('{');
                this.text += Tables.accidentalCodes(this.type);
                this.text += Tables.accidentalCodes('}');
                this.fontInfo.size = Metrics.get('Accidental.cautionary.fontSize');
            }
            if (isGraceNote(this.note)) {
                this.fontInfo.size = Metrics.get('Accidental.grace.fontSize');
            }
        }
        setNote(note) {
            defined(note, 'ArgumentError', `Bad note value: ${note}`);
            this.note = note;
            this.reset();
            return this;
        }
        setAsCautionary() {
            this.cautionary = true;
            this.reset();
            return this;
        }
        draw() {
            const { type, position, index } = this;
            const ctx = this.checkContext();
            const note = this.checkAttachedNote();
            this.setRendered();
            const start = note.getModifierStartXY(position, index);
            this.x = start.x - this.width;
            this.y = start.y;
            L$l('Rendering: ', type, start.x, start.y);
            this.renderText(ctx, 0, 0);
        }
    }
    Accidental.DEBUG = false;

    function L$k(...args) {
        if (Stem.DEBUG)
            log('VexFlow.Stem', args);
    }
    class Stem extends Element {
        static get CATEGORY() {
            return "Stem";
        }
        static get UP() {
            return 1;
        }
        static get DOWN() {
            return -1;
        }
        static get WIDTH() {
            return Tables.STEM_WIDTH;
        }
        static get HEIGHT() {
            return Tables.STEM_HEIGHT;
        }
        constructor(options) {
            var _a, _b, _c, _d, _e, _f, _g;
            super();
            this.stemUpYOffset = 0;
            this.stemDownYOffset = 0;
            this.stemUpYBaseOffset = 0;
            this.stemDownYBaseOffset = 0;
            this.xBegin = (_a = options === null || options === void 0 ? void 0 : options.xBegin) !== null && _a !== void 0 ? _a : 0;
            this.xEnd = (_b = options === null || options === void 0 ? void 0 : options.xEnd) !== null && _b !== void 0 ? _b : 0;
            this.yTop = (_c = options === null || options === void 0 ? void 0 : options.yTop) !== null && _c !== void 0 ? _c : 0;
            this.yBottom = (_d = options === null || options === void 0 ? void 0 : options.yBottom) !== null && _d !== void 0 ? _d : 0;
            this.stemExtension = (_e = options === null || options === void 0 ? void 0 : options.stemExtension) !== null && _e !== void 0 ? _e : 0;
            this.stemDirection = (_f = options === null || options === void 0 ? void 0 : options.stemDirection) !== null && _f !== void 0 ? _f : 0;
            this.hide = (options === null || options === void 0 ? void 0 : options.hide) || false;
            this.isStemlet = (options === null || options === void 0 ? void 0 : options.isStemlet) || false;
            this.stemletHeight = (_g = options === null || options === void 0 ? void 0 : options.stemletHeight) !== null && _g !== void 0 ? _g : 0;
            this.renderHeightAdjustment = 0;
            this.setOptions(options);
        }
        setOptions(options) {
            var _a, _b, _c, _d;
            this.stemUpYOffset = (_a = options === null || options === void 0 ? void 0 : options.stemUpYOffset) !== null && _a !== void 0 ? _a : 0;
            this.stemDownYOffset = (_b = options === null || options === void 0 ? void 0 : options.stemDownYOffset) !== null && _b !== void 0 ? _b : 0;
            this.stemUpYBaseOffset = (_c = options === null || options === void 0 ? void 0 : options.stemUpYBaseOffset) !== null && _c !== void 0 ? _c : 0;
            this.stemDownYBaseOffset = (_d = options === null || options === void 0 ? void 0 : options.stemDownYBaseOffset) !== null && _d !== void 0 ? _d : 0;
        }
        setNoteHeadXBounds(xBegin, xEnd) {
            this.xBegin = xBegin;
            this.xEnd = xEnd;
            return this;
        }
        setDirection(direction) {
            this.stemDirection = direction;
        }
        setExtension(ext) {
            this.stemExtension = ext;
        }
        getExtension() {
            return this.stemExtension;
        }
        setYBounds(yTop, yBottom) {
            this.yTop = yTop;
            this.yBottom = yBottom;
        }
        getHeight() {
            const yOffset = this.stemDirection === Stem.UP ? this.stemUpYOffset : this.stemDownYOffset;
            const unsignedHeight = this.yBottom - this.yTop + (Stem.HEIGHT - yOffset + this.stemExtension);
            return unsignedHeight * this.stemDirection;
        }
        getBoundingBox() {
            throw new RuntimeError('NotImplemented', 'getBoundingBox() not implemented.');
        }
        getExtents() {
            const isStemUp = this.stemDirection === Stem.UP;
            const ys = [this.yTop, this.yBottom];
            const stemHeight = Stem.HEIGHT + this.stemExtension;
            const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);
            const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);
            const stemTipY = innerMostNoteheadY + stemHeight * -this.stemDirection;
            return { topY: stemTipY, baseY: outerMostNoteheadY };
        }
        setVisibility(isVisible) {
            this.hide = !isVisible;
            return this;
        }
        setStemlet(isStemlet, stemletHeight) {
            this.isStemlet = isStemlet;
            this.stemletHeight = stemletHeight;
            return this;
        }
        adjustHeightForFlag() {
            this.renderHeightAdjustment = Metrics.get('Stem.heightAdjustmentForFlag', -3);
        }
        adjustHeightForBeam() {
            this.renderHeightAdjustment = -Stem.WIDTH / 2;
        }
        draw() {
            this.setRendered();
            if (this.hide)
                return;
            const ctx = this.checkContext();
            let stemX;
            let stemY;
            const stemDirection = this.stemDirection;
            let yBaseOffset = 0;
            if (stemDirection === Stem.DOWN) {
                stemX = this.xBegin;
                stemY = this.yTop + this.stemDownYOffset;
                yBaseOffset = this.stemDownYBaseOffset;
            }
            else {
                stemX = this.xEnd;
                stemY = this.yBottom - this.stemUpYOffset;
                yBaseOffset = this.stemUpYBaseOffset;
            }
            const stemHeight = this.getHeight();
            L$k('Rendering stem - ', 'Top Y: ', this.yTop, 'Bottom Y: ', this.yBottom);
            const stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stemDirection : 0;
            ctx.openGroup('stem', this.getAttribute('id'));
            ctx.beginPath();
            ctx.setLineWidth(Stem.WIDTH);
            ctx.moveTo(stemX, stemY - stemletYOffset + yBaseOffset);
            ctx.lineTo(stemX, stemY - stemHeight - this.renderHeightAdjustment * stemDirection);
            ctx.stroke();
            ctx.closeGroup();
        }
    }
    Stem.DEBUG = false;

    function L$j(...args) {
        if (Annotation$1.DEBUG)
            log('VexFlow.Annotation', args);
    }
    var AnnotationHorizontalJustify;
    (function (AnnotationHorizontalJustify) {
        AnnotationHorizontalJustify[AnnotationHorizontalJustify["LEFT"] = 1] = "LEFT";
        AnnotationHorizontalJustify[AnnotationHorizontalJustify["CENTER"] = 2] = "CENTER";
        AnnotationHorizontalJustify[AnnotationHorizontalJustify["RIGHT"] = 3] = "RIGHT";
        AnnotationHorizontalJustify[AnnotationHorizontalJustify["CENTER_STEM"] = 4] = "CENTER_STEM";
    })(AnnotationHorizontalJustify || (AnnotationHorizontalJustify = {}));
    var AnnotationVerticalJustify;
    (function (AnnotationVerticalJustify) {
        AnnotationVerticalJustify[AnnotationVerticalJustify["TOP"] = 1] = "TOP";
        AnnotationVerticalJustify[AnnotationVerticalJustify["CENTER"] = 2] = "CENTER";
        AnnotationVerticalJustify[AnnotationVerticalJustify["BOTTOM"] = 3] = "BOTTOM";
        AnnotationVerticalJustify[AnnotationVerticalJustify["CENTER_STEM"] = 4] = "CENTER_STEM";
    })(AnnotationVerticalJustify || (AnnotationVerticalJustify = {}));
    let Annotation$1 = class Annotation extends Modifier$1 {
        static get CATEGORY() {
            return "Annotation";
        }
        static get minAnnotationPadding() {
            return Metrics.get('NoteHead.minPadding');
        }
        static format(annotations, state) {
            if (!annotations || annotations.length === 0)
                return false;
            let leftWidth = 0;
            let rightWidth = 0;
            let maxLeftGlyphWidth = 0;
            let maxRightGlyphWidth = 0;
            for (let i = 0; i < annotations.length; ++i) {
                const annotation = annotations[i];
                const textLines = (2 + Font.convertSizeToPixelValue(annotation.fontInfo.size)) / Tables.STAVE_LINE_DISTANCE;
                let verticalSpaceNeeded = textLines;
                const note = annotation.checkAttachedNote();
                const glyphWidth = note.getGlyphWidth();
                const textWidth = annotation.getWidth();
                if (annotation.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {
                    maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);
                    leftWidth = Math.max(leftWidth, textWidth) + Annotation.minAnnotationPadding;
                }
                else if (annotation.horizontalJustification === AnnotationHorizontalJustify.LEFT) {
                    maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);
                    rightWidth = Math.max(rightWidth, textWidth);
                }
                else {
                    leftWidth = Math.max(leftWidth, textWidth / 2) + Annotation.minAnnotationPadding;
                    rightWidth = Math.max(rightWidth, textWidth / 2);
                    maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);
                    maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);
                }
                const stave = note.getStave();
                const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;
                let stemHeight = 0;
                let lines = 5;
                if (isTabNote(note)) {
                    if (note.renderOptions.drawStem) {
                        const stem = note.getStem();
                        if (stem) {
                            stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;
                        }
                    }
                    else {
                        stemHeight = 0;
                    }
                }
                else if (isStemmableNote(note)) {
                    const stem = note.getStem();
                    if (stem && note.getNoteType() === 'n') {
                        stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;
                    }
                }
                if (stave) {
                    lines = stave.getNumLines();
                }
                if (annotation.verticalJustification === this.VerticalJustify.TOP) {
                    let noteLine = note.getLineNumber(true);
                    if (isTabNote(note)) {
                        noteLine = lines - (note.leastString() - 0.5);
                    }
                    if (stemDirection === Stem.UP) {
                        noteLine += stemHeight;
                    }
                    const curTop = noteLine + state.topTextLine + 0.5;
                    if (curTop < lines) {
                        annotation.setTextLine(lines - noteLine);
                        verticalSpaceNeeded += lines - noteLine;
                        state.topTextLine = verticalSpaceNeeded;
                    }
                    else {
                        annotation.setTextLine(state.topTextLine);
                        state.topTextLine += verticalSpaceNeeded;
                    }
                }
                else if (annotation.verticalJustification === this.VerticalJustify.BOTTOM) {
                    let noteLine = lines - note.getLineNumber();
                    if (isTabNote(note)) {
                        noteLine = note.greatestString() - 1;
                    }
                    if (stemDirection === Stem.DOWN) {
                        noteLine += stemHeight;
                    }
                    const curBottom = noteLine + state.textLine + 1;
                    if (curBottom < lines) {
                        annotation.setTextLine(lines - curBottom);
                        verticalSpaceNeeded += lines - curBottom;
                        state.textLine = verticalSpaceNeeded;
                    }
                    else {
                        annotation.setTextLine(state.textLine);
                        state.textLine += verticalSpaceNeeded;
                    }
                }
                else {
                    annotation.setTextLine(state.textLine);
                }
            }
            const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.rightShift, 0));
            const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.leftShift, 0));
            state.leftShift += leftOverlap;
            state.rightShift += rightOverlap;
            return true;
        }
        constructor(text) {
            super();
            this.text = text;
            this.horizontalJustification = AnnotationHorizontalJustify.CENTER;
            this.verticalJustification = AnnotationVerticalJustify.TOP;
        }
        setVerticalJustification(just) {
            this.verticalJustification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;
            return this;
        }
        getJustification() {
            return this.horizontalJustification;
        }
        setJustification(just) {
            this.horizontalJustification = typeof just === 'string' ? Annotation.HorizontalJustifyString[just] : just;
            return this;
        }
        draw() {
            const ctx = this.checkContext();
            const note = this.checkAttachedNote();
            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;
            const start = note.getModifierStartXY(ModifierPosition.ABOVE, this.index);
            this.setRendered();
            ctx.openGroup('annotation', this.getAttribute('id'));
            const textWidth = this.getWidth();
            const textHeight = Font.convertSizeToPixelValue(this.fontInfo.size);
            let x;
            let y;
            if (this.horizontalJustification === AnnotationHorizontalJustify.LEFT) {
                x = start.x;
            }
            else if (this.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {
                x = start.x - textWidth;
            }
            else if (this.horizontalJustification === AnnotationHorizontalJustify.CENTER) {
                x = start.x - textWidth / 2;
            }
            else {
                x = note.getStemX() - textWidth / 2;
            }
            let stemExt = {};
            let spacing = 0;
            const hasStem = note.hasStem();
            const stave = note.checkStave();
            if (hasStem) {
                stemExt = note.checkStem().getExtents();
                spacing = stave.getSpacingBetweenLines();
            }
            if (this.verticalJustification === AnnotationVerticalJustify.BOTTOM) {
                const ys = note.getYs();
                y = ys.reduce((a, b) => (a > b ? a : b));
                y += (this.textLine + 1) * Tables.STAVE_LINE_DISTANCE + textHeight;
                if (hasStem && stemDirection === Stem.DOWN) {
                    y = Math.max(y, stemExt.topY + textHeight + spacing * this.textLine);
                }
            }
            else if (this.verticalJustification === AnnotationVerticalJustify.CENTER) {
                const yt = note.getYForTopText(this.textLine) - 1;
                const yb = stave.getYForBottomText(this.textLine);
                y = yt + (yb - yt) / 2 + textHeight / 2;
            }
            else if (this.verticalJustification === AnnotationVerticalJustify.TOP) {
                const topY = Math.min(...note.getYs());
                y = topY - (this.textLine + 1) * Tables.STAVE_LINE_DISTANCE;
                if (hasStem && stemDirection === Stem.UP) {
                    spacing = stemExt.topY < stave.getTopLineTopY() ? Tables.STAVE_LINE_DISTANCE : spacing;
                    y = Math.min(y, stemExt.topY - spacing * (this.textLine + 1));
                }
            }
            else {
                const extents = note.getStemExtents();
                y = extents.topY + (extents.baseY - extents.topY) / 2 + textHeight / 2;
            }
            L$j('Rendering annotation: ', this.text, x, y);
            this.x = x;
            this.y = y;
            this.renderText(ctx, 0, 0);
            ctx.closeGroup();
        }
    };
    Annotation$1.DEBUG = false;
    Annotation$1.HorizontalJustify = AnnotationHorizontalJustify;
    Annotation$1.HorizontalJustifyString = {
        left: AnnotationHorizontalJustify.LEFT,
        right: AnnotationHorizontalJustify.RIGHT,
        center: AnnotationHorizontalJustify.CENTER,
        centerStem: AnnotationHorizontalJustify.CENTER_STEM,
    };
    Annotation$1.VerticalJustify = AnnotationVerticalJustify;
    Annotation$1.VerticalJustifyString = {
        above: AnnotationVerticalJustify.TOP,
        top: AnnotationVerticalJustify.TOP,
        below: AnnotationVerticalJustify.BOTTOM,
        bottom: AnnotationVerticalJustify.BOTTOM,
        center: AnnotationVerticalJustify.CENTER,
        centerStem: AnnotationVerticalJustify.CENTER_STEM,
    };

    function L$i(...args) {
        if (Articulation.DEBUG)
            log('VexFlow.Articulation', args);
    }
    const { ABOVE, BELOW } = Modifier$1.Position;
    function roundToNearestHalf(mathFn, value) {
        return mathFn(value / 0.5) * 0.5;
    }
    function isWithinLines(line, position) {
        return position === ABOVE ? line <= 5 : line >= 1;
    }
    function getRoundingFunction(line, position) {
        if (isWithinLines(line, position)) {
            if (position === ABOVE) {
                return Math.ceil;
            }
            else {
                return Math.floor;
            }
        }
        else {
            return Math.round;
        }
    }
    function snapLineToStaff(canSitBetweenLines, line, position, offsetDirection) {
        const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);
        const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);
        const onStaffLine = snappedLine % 1 === 0;
        if (canSnapToStaffSpace && onStaffLine) {
            const HALF_STAFF_SPACE = 0.5;
            return snappedLine + HALF_STAFF_SPACE * -offsetDirection;
        }
        else {
            return snappedLine;
        }
    }
    const isStaveOrGraceNote = (note) => isStaveNote(note) || isGraceNote(note);
    function getTopY(note, textLine) {
        const stemDirection = note.getStemDirection();
        const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();
        if (isStaveOrGraceNote(note)) {
            if (note.hasStem()) {
                if (stemDirection === Stem.UP) {
                    return stemTipY;
                }
                else {
                    return stemBaseY;
                }
            }
            else {
                return Math.min(...note.getYs());
            }
        }
        else if (isTabNote(note)) {
            if (note.hasStem()) {
                if (stemDirection === Stem.UP) {
                    return stemTipY;
                }
                else {
                    return note.checkStave().getYForTopText(textLine);
                }
            }
            else {
                return note.checkStave().getYForTopText(textLine);
            }
        }
        else {
            throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');
        }
    }
    function getBottomY(note, textLine) {
        const stemDirection = note.getStemDirection();
        const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();
        if (isStaveOrGraceNote(note)) {
            if (note.hasStem()) {
                if (stemDirection === Stem.UP) {
                    return stemBaseY;
                }
                else {
                    return stemTipY;
                }
            }
            else {
                return Math.max(...note.getYs());
            }
        }
        else if (isTabNote(note)) {
            if (note.hasStem()) {
                if (stemDirection === Stem.UP) {
                    return note.checkStave().getYForBottomText(textLine);
                }
                else {
                    return stemTipY;
                }
            }
            else {
                return note.checkStave().getYForBottomText(textLine);
            }
        }
        else {
            throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');
        }
    }
    function getInitialOffset(note, position) {
        const isOnStemTip = (position === ABOVE && note.getStemDirection() === Stem.UP) ||
            (position === BELOW && note.getStemDirection() === Stem.DOWN);
        if (isStaveOrGraceNote(note)) {
            if (note.hasStem() && isOnStemTip) {
                return 0.5;
            }
            else {
                return 1;
            }
        }
        else {
            if (note.hasStem() && isOnStemTip) {
                return 1;
            }
            else {
                return 0;
            }
        }
    }
    class Articulation extends Modifier$1 {
        static get CATEGORY() {
            return "Articulation";
        }
        static format(articulations, state) {
            if (!articulations || articulations.length === 0)
                return false;
            const margin = 0.5;
            let maxGlyphWidth = 0;
            const getIncrement = (articulation, line, position) => roundToNearestHalf(getRoundingFunction(line, position), articulation.height / 10 + margin);
            articulations.forEach((articulation) => {
                const note = articulation.checkAttachedNote();
                maxGlyphWidth = Math.max(note.getGlyphWidth(), maxGlyphWidth);
                let lines = 5;
                const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;
                let stemHeight = 0;
                if (isStemmableNote(note)) {
                    const stem = note.getStem();
                    if (stem) {
                        stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;
                    }
                }
                const stave = note.getStave();
                if (stave) {
                    lines = stave.getNumLines();
                }
                if (articulation.getPosition() === ABOVE) {
                    let noteLine = note.getLineNumber(true);
                    if (stemDirection === Stem.UP) {
                        noteLine += stemHeight;
                    }
                    let increment = getIncrement(articulation, state.topTextLine, ABOVE);
                    const curTop = noteLine + state.topTextLine + 0.5;
                    if (!articulation.articulation.betweenLines && curTop < lines) {
                        increment += lines - curTop;
                    }
                    articulation.setTextLine(state.topTextLine);
                    state.topTextLine += increment;
                    articulation.setOrigin(0.5, 1);
                }
                else if (articulation.getPosition() === BELOW) {
                    let noteLine = Math.max(lines - note.getLineNumber(), 0);
                    if (stemDirection === Stem.DOWN) {
                        noteLine += stemHeight;
                    }
                    let increment = getIncrement(articulation, state.textLine, BELOW);
                    const curBottom = noteLine + state.textLine + 0.5;
                    if (!articulation.articulation.betweenLines && curBottom < lines) {
                        increment += lines - curBottom;
                    }
                    articulation.setTextLine(state.textLine);
                    state.textLine += increment;
                    articulation.setOrigin(0.5, 0);
                }
            });
            const width = articulations
                .map((articulation) => articulation.getWidth())
                .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));
            const overlap = Math.min(Math.max(width - maxGlyphWidth, 0), Math.max(width - (state.leftShift + state.rightShift), 0));
            state.leftShift += overlap / 2;
            state.rightShift += overlap / 2;
            return true;
        }
        static easyScoreHook({ articulations }, note, builder) {
            if (!articulations)
                return;
            const articNameToCode = {
                staccato: 'a.',
                tenuto: 'a-',
                accent: 'a>',
            };
            articulations
                .split(',')
                .map((articString) => articString.trim().split('.'))
                .map(([name, position]) => {
                const artic = { type: articNameToCode[name] };
                if (position)
                    artic.position = Modifier$1.PositionString[position];
                return builder.getFactory().Articulation(artic);
            })
                .map((artic) => note.addModifier(artic, 0));
        }
        constructor(type) {
            var _a;
            super();
            this.heightShift = 0;
            this.type = type;
            this.position = ABOVE;
            if (!Tables.articulationCodes(this.type)) {
                if (((_a = this.type.codePointAt(0)) !== null && _a !== void 0 ? _a : 0) % 2 === 0)
                    this.position = ABOVE;
                else
                    this.position = BELOW;
            }
            this.articulation = { betweenLines: false };
            this.reset();
        }
        reset() {
            this.articulation = Tables.articulationCodes(this.type);
            if (!this.articulation) {
                this.articulation = { code: this.type, betweenLines: false };
            }
            const code = (this.position === ABOVE ? this.articulation.aboveCode : this.articulation.belowCode) ||
                this.articulation.code ||
                Glyphs.null;
            this.text = code;
        }
        setBetweenLines(betweenLines = true) {
            this.articulation.betweenLines = betweenLines;
            return this;
        }
        draw() {
            const ctx = this.checkContext();
            const note = this.checkAttachedNote();
            this.setRendered();
            const index = this.checkIndex();
            const { position, textLine } = this;
            const canSitBetweenLines = this.articulation.betweenLines;
            const stave = note.checkStave();
            const staffSpace = stave.getSpacingBetweenLines();
            const isTab = isTabNote(note);
            const { x } = note.getModifierStartXY(position, index);
            const shouldSitOutsideStaff = !canSitBetweenLines || isTab;
            const initialOffset = getInitialOffset(note, position);
            let y = {
                [ABOVE]: () => {
                    const y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;
                    return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;
                },
                [BELOW]: () => {
                    const y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;
                    return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;
                },
            }[position]();
            if (!isTab) {
                const offsetDirection = position === ABOVE ? -1 : 1;
                const noteLine = note.getKeyProps()[index].line;
                const distanceFromNote = (note.getYs()[index] - y) / staffSpace;
                const articLine = distanceFromNote + Number(noteLine);
                const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);
                if (isWithinLines(snappedLine, position))
                    this.setOrigin(0.5, 0.5);
                y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection;
            }
            L$i(`Rendering articulation at (x: ${x}, y: ${y})`);
            this.x = x;
            this.y = y;
            this.renderText(ctx, 0, 0);
        }
    }
    Articulation.DEBUG = false;
    Articulation.INITIAL_OFFSET = -0.5;

    class RenderContext {
        static get CATEGORY() {
            return "RenderContext";
        }
        set font(f) {
            this.setFont(f);
        }
        get font() {
            return this.getFont();
        }
    }
    function drawDot(ctx, x, y, color = '#F55') {
        ctx.save();
        ctx.setFillStyle(color);
        ctx.beginPath();
        ctx.arc(x, y, 3, 0, Math.PI * 2, false);
        ctx.closePath();
        ctx.fill();
        ctx.restore();
    }

    class Tickable extends Element {
        static get CATEGORY() {
            return "Tickable";
        }
        constructor() {
            super();
            this._preFormatted = false;
            this._postFormatted = false;
            this.ticks = new Fraction(0, 1);
            this.intrinsicTicks = 0;
            this.tickMultiplier = new Fraction(1, 1);
            this.modifiers = [];
            this.tupletStack = [];
            this.alignCenter = false;
            this.centerXShift = 0;
            this.ignoreTicks = false;
            this.formatterMetrics = {
                freedom: { left: 0, right: 0 },
                duration: '',
                iterations: 0,
                space: {
                    used: 0,
                    mean: 0,
                    deviation: 0,
                },
            };
        }
        reset() {
            return this;
        }
        getTicks() {
            return this.ticks;
        }
        shouldIgnoreTicks() {
            return this.ignoreTicks;
        }
        setIgnoreTicks(flag) {
            this.ignoreTicks = flag;
            return this;
        }
        getWidth() {
            if (!this._preFormatted) {
                throw new RuntimeError('UnformattedNote', "Can't call GetWidth on an unformatted note.");
            }
            return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);
        }
        getX() {
            const tickContext = this.checkTickContext(`Can't getX() without a TickContext.`);
            return tickContext.getX() + this.xShift;
        }
        getFormatterMetrics() {
            return this.formatterMetrics;
        }
        getCenterXShift() {
            if (this.isCenterAligned()) {
                return this.centerXShift;
            }
            return 0;
        }
        setCenterXShift(centerXShift) {
            this.centerXShift = centerXShift;
            return this;
        }
        isCenterAligned() {
            return this.alignCenter;
        }
        setCenterAlignment(alignCenter) {
            this.alignCenter = alignCenter;
            return this;
        }
        getVoice() {
            return defined(this.voice, 'NoVoice', 'Tickable has no voice.');
        }
        setVoice(voice) {
            this.voice = voice;
        }
        getTuplet() {
            return this.tuplet;
        }
        getTupletStack() {
            return this.tupletStack;
        }
        resetTuplet(tuplet) {
            let noteCount;
            let notesOccupied;
            if (tuplet) {
                const i = this.tupletStack.indexOf(tuplet);
                if (i !== -1) {
                    this.tupletStack.splice(i, 1);
                    noteCount = tuplet.getNoteCount();
                    notesOccupied = tuplet.getNotesOccupied();
                    this.applyTickMultiplier(noteCount, notesOccupied);
                }
                return this;
            }
            while (this.tupletStack.length) {
                tuplet = this.tupletStack.pop();
                noteCount = tuplet.getNoteCount();
                notesOccupied = tuplet.getNotesOccupied();
                this.applyTickMultiplier(noteCount, notesOccupied);
            }
            return this;
        }
        setTuplet(tuplet) {
            if (tuplet) {
                this.tupletStack.push(tuplet);
                const noteCount = tuplet.getNoteCount();
                const notesOccupied = tuplet.getNotesOccupied();
                this.applyTickMultiplier(notesOccupied, noteCount);
            }
            this.tuplet = tuplet;
            return this;
        }
        addToModifierContext(mc) {
            this.modifierContext = mc;
            for (let i = 0; i < this.modifiers.length; ++i) {
                this.modifierContext.addMember(this.modifiers[i]);
            }
            this.modifierContext.addMember(this);
            this._preFormatted = false;
            return this;
        }
        addModifier(modifier, index = 0) {
            this.modifiers.push(modifier);
            this._preFormatted = false;
            return this;
        }
        getModifiers() {
            return this.modifiers;
        }
        setTickContext(tc) {
            this.tickContext = tc;
            this._preFormatted = false;
        }
        checkTickContext(message = 'Tickable has no tick context.') {
            return defined(this.tickContext, 'NoTickContext', message);
        }
        preFormat() {
            if (this._preFormatted)
                return;
            this.width = 0;
            if (this.modifierContext) {
                this.modifierContext.preFormat();
                this.width += this.modifierContext.getWidth();
            }
        }
        set preFormatted(value) {
            this._preFormatted = value;
        }
        get preFormatted() {
            return this._preFormatted;
        }
        postFormat() {
            if (this._postFormatted)
                return this;
            this._postFormatted = true;
            return this;
        }
        set postFormatted(value) {
            this._postFormatted = value;
        }
        get postFormatted() {
            return this._postFormatted;
        }
        getIntrinsicTicks() {
            return this.intrinsicTicks;
        }
        setIntrinsicTicks(intrinsicTicks) {
            this.intrinsicTicks = intrinsicTicks;
            this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);
        }
        getTickMultiplier() {
            return this.tickMultiplier;
        }
        applyTickMultiplier(numerator, denominator) {
            this.tickMultiplier.multiply(numerator, denominator);
            this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);
        }
        setDuration(duration) {
            const ticks = duration.numerator * (Tables.RESOLUTION / duration.denominator);
            this.ticks = this.tickMultiplier.clone().multiply(ticks);
            this.intrinsicTicks = this.ticks.value();
        }
        getAbsoluteX() {
            const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);
            return tickContext.getX();
        }
        setModifierContext(mc) {
            this.modifierContext = mc;
            return this;
        }
        getModifierContext() {
            return this.modifierContext;
        }
        checkModifierContext() {
            return defined(this.modifierContext, 'NoModifierContext', 'No modifier context attached to this tickable.');
        }
    }

    class Note extends Tickable {
        static get CATEGORY() {
            return "Note";
        }
        static getGlyphProps(duration, type = 'n') {
            duration = Tables.sanitizeDuration(duration);
            let code = Tables.durationCodes[duration];
            if (code === undefined) {
                code = Tables.durationCodes['4'];
            }
            const codeNoteHead = Tables.codeNoteHead(type.toUpperCase(), duration);
            if (codeNoteHead !== Glyphs.null) {
                code = Object.assign(Object.assign({}, code), { codeHead: codeNoteHead });
            }
            return code;
        }
        static plotMetrics(ctx, note, yPos) {
            var _a;
            const metrics = note.getMetrics();
            const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.leftDisplacedHeadPx;
            const xPre1 = note.getAbsoluteX() - metrics.leftDisplacedHeadPx;
            const xAbs = note.getAbsoluteX();
            const xPost1 = note.getAbsoluteX() + metrics.notePx;
            const xPost2 = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx;
            const xEnd = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx + metrics.modRightPx;
            const xFreedomRight = xEnd + ((_a = note.getFormatterMetrics().freedom.right) !== null && _a !== void 0 ? _a : 0);
            const xWidth = xEnd - xStart;
            ctx.save();
            ctx.setFont(Metrics.get('fontFamily'), 8);
            ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);
            const y = yPos + 7;
            function stroke(x1, x2, color, yy = y) {
                ctx.beginPath();
                ctx.setStrokeStyle(color);
                ctx.setFillStyle(color);
                ctx.setLineWidth(3);
                ctx.moveTo(x1 + note.getXShift(), yy);
                ctx.lineTo(x2 + note.getXShift(), yy);
                ctx.stroke();
            }
            stroke(xStart, xPre1, 'red');
            stroke(xPre1, xAbs, '#999');
            stroke(xAbs, xPost1, 'green');
            stroke(xPost1, xPost2, '#999');
            stroke(xPost2, xEnd, 'red');
            stroke(xEnd, xFreedomRight, '#DD0');
            stroke(xStart - note.getXShift(), xStart, '#BBB');
            drawDot(ctx, xAbs + note.getXShift(), y, 'blue');
            const formatterMetrics = note.getFormatterMetrics();
            if (formatterMetrics.iterations > 0) {
                const spaceDeviation = formatterMetrics.space.deviation;
                const prefix = spaceDeviation >= 0 ? '+' : '';
                ctx.setFillStyle('red');
                ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);
            }
            ctx.restore();
        }
        static parseDuration(durationString) {
            if (!durationString) {
                return undefined;
            }
            const regexp = /(\d*\/?\d+|[a-z])(d*)([nrhms]|$)/;
            const result = regexp.exec(durationString);
            if (!result) {
                return undefined;
            }
            const duration = result[1];
            const dots = result[2].length;
            const type = result[3] || 'n';
            return { duration, dots, type };
        }
        static parseNoteStruct(noteStruct) {
            const durationProps = Note.parseDuration(noteStruct.duration);
            if (!durationProps) {
                return undefined;
            }
            let type = noteStruct.type;
            if (type && !Tables.validTypes[type]) {
                return undefined;
            }
            const customTypes = [];
            if (!type) {
                type = durationProps.type || 'n';
                if (noteStruct.keys !== undefined) {
                    noteStruct.keys.forEach((k, i) => {
                        const result = k.split('/');
                        customTypes[i] = (result && result.length === 3 ? result[2] : type);
                    });
                }
            }
            let ticks = Tables.durationToTicks(durationProps.duration);
            if (!ticks) {
                return undefined;
            }
            const dots = noteStruct.dots ? noteStruct.dots : durationProps.dots;
            if (typeof dots !== 'number') {
                return undefined;
            }
            let currentTicks = ticks;
            for (let i = 0; i < dots; i++) {
                if (currentTicks <= 1)
                    return undefined;
                currentTicks = currentTicks / 2;
                ticks += currentTicks;
            }
            return {
                duration: durationProps.duration,
                type,
                customTypes,
                dots,
                ticks,
            };
        }
        constructor(noteStruct) {
            super();
            if (!noteStruct) {
                throw new RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');
            }
            const parsedNoteStruct = Note.parseNoteStruct(noteStruct);
            if (!parsedNoteStruct) {
                throw new RuntimeError('BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`);
            }
            this.keys = noteStruct.keys || [];
            this.keyProps = [];
            this.duration = parsedNoteStruct.duration;
            this.noteType = parsedNoteStruct.type;
            this.customTypes = parsedNoteStruct.customTypes;
            if (noteStruct.durationOverride) {
                this.setDuration(noteStruct.durationOverride);
            }
            else {
                this.setIntrinsicTicks(parsedNoteStruct.ticks);
            }
            this.modifiers = [];
            this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);
            this.customGlyphs = this.customTypes.map((t) => Note.getGlyphProps(this.duration, t));
            this.playNote = undefined;
            this.ignoreTicks = false;
            this.width = 0;
            this.leftDisplacedHeadPx = 0;
            this.rightDisplacedHeadPx = 0;
            this.xShift = 0;
            this.ys = [];
            if (noteStruct.alignCenter) {
                this.setCenterAlignment(noteStruct.alignCenter);
            }
            this.renderOptions = {
                annotationSpacing: 5,
                strokePx: 1,
                yShift: 0,
            };
        }
        getPlayNote() {
            return this.playNote;
        }
        setPlayNote(note) {
            this.playNote = note;
            return this;
        }
        isRest() {
            return false;
        }
        addStroke(index, stroke) {
            stroke.setNote(this);
            stroke.setIndex(index);
            this.modifiers.push(stroke);
            this.preFormatted = false;
            return this;
        }
        getStave() {
            return this.stave;
        }
        checkStave() {
            return defined(this.stave, 'NoStave', 'No stave attached to instance.');
        }
        setStave(stave) {
            this.stave = stave;
            this.setYs([stave.getYForLine(0)]);
            this.setContext(this.stave.getContext());
            return this;
        }
        getLeftDisplacedHeadPx() {
            return this.leftDisplacedHeadPx;
        }
        getRightDisplacedHeadPx() {
            return this.rightDisplacedHeadPx;
        }
        setLeftDisplacedHeadPx(x) {
            this.leftDisplacedHeadPx = x;
            return this;
        }
        setRightDisplacedHeadPx(x) {
            this.rightDisplacedHeadPx = x;
            return this;
        }
        shouldIgnoreTicks() {
            return this.ignoreTicks;
        }
        getLineNumber(isTopNote) {
            return 0;
        }
        getLineForRest() {
            return 0;
        }
        getGlyphProps() {
            return this.glyphProps;
        }
        getGlyphWidth() {
            return 0;
        }
        setYs(ys) {
            this.ys = ys;
            return this;
        }
        getYs() {
            if (this.ys.length === 0) {
                throw new RuntimeError('NoYValues', 'No Y-values calculated for this note.');
            }
            return this.ys;
        }
        getYForTopText(textLine) {
            return this.checkStave().getYForTopText(textLine);
        }
        getVoice() {
            if (!this.voice)
                throw new RuntimeError('NoVoice', 'Note has no voice.');
            return this.voice;
        }
        setVoice(voice) {
            this.voice = voice;
            this.preFormatted = false;
            return this;
        }
        getTickContext() {
            return this.checkTickContext();
        }
        setTickContext(tc) {
            this.tickContext = tc;
            this.preFormatted = false;
            return this;
        }
        getDuration() {
            return this.duration;
        }
        isDotted() {
            return this.getModifiersByType("Dot").length > 0;
        }
        hasStem() {
            return false;
        }
        getNoteType() {
            return this.noteType;
        }
        getBeam() {
            return this.beam;
        }
        checkBeam() {
            return defined(this.beam, 'NoBeam', 'No beam attached to instance');
        }
        hasBeam() {
            return this.beam !== undefined;
        }
        setBeam(beam) {
            this.beam = beam;
            return this;
        }
        addModifier(modifier, index = 0) {
            const signature = 'Note.addModifier(modifier: Modifier, index: number=0)';
            if (typeof index === 'string') {
                index = parseInt(index);
                console.warn(signature + ' expected a number for `index`, but received a string.');
            }
            if (typeof modifier !== 'object' || typeof index !== 'number') {
                throw new RuntimeError('WrongParams', 'Incorrect call signature. Use ' + signature + ' instead.');
            }
            modifier.setNote(this);
            modifier.setIndex(index);
            super.addModifier(modifier);
            return this;
        }
        getModifiersByType(type) {
            return this.modifiers.filter((modifier) => modifier.getCategory() === type);
        }
        getModifierStartXY(position, index, options) {
            if (!this.preFormatted) {
                throw new RuntimeError('UnformattedNote', "Can't call GetModifierStartXY on an unformatted note");
            }
            return {
                x: this.getAbsoluteX(),
                y: this.ys[0],
            };
        }
        getRightParenthesisPx(index) {
            const props = this.getKeyProps()[index];
            return props.displaced ? this.getRightDisplacedHeadPx() : 0;
        }
        getLeftParenthesisPx(index) {
            const props = this.getKeyProps()[index];
            return props.displaced ? this.getLeftDisplacedHeadPx() - this.xShift : -this.xShift;
        }
        getFirstDotPx() {
            let px = this.getRightDisplacedHeadPx();
            const parentheses = this.checkModifierContext().getMembers('Parenthesis');
            if (parentheses.length !== 0) {
                px += parentheses[0].getWidth() + 1;
            }
            return px;
        }
        getMetrics() {
            if (!this.preFormatted) {
                throw new RuntimeError('UnformattedNote', "Can't call getMetrics on an unformatted note.");
            }
            const modLeftPx = this.modifierContext ? this.modifierContext.getState().leftShift : 0;
            const modRightPx = this.modifierContext ? this.modifierContext.getState().rightShift : 0;
            const width = this.getWidth();
            const glyphWidth = this.getGlyphWidth();
            const notePx = width -
                modLeftPx -
                modRightPx -
                this.leftDisplacedHeadPx -
                this.rightDisplacedHeadPx;
            return {
                width,
                glyphWidth,
                notePx,
                modLeftPx,
                modRightPx,
                leftDisplacedHeadPx: this.leftDisplacedHeadPx,
                rightDisplacedHeadPx: this.rightDisplacedHeadPx,
                glyphPx: 0,
            };
        }
        getAbsoluteX() {
            const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);
            let x = tickContext.getX();
            if (this.stave) {
                x += this.stave.getNoteStartX() + Metrics.get('Stave.padding', 0);
            }
            if (this.isCenterAligned()) {
                x += this.getCenterXShift();
            }
            return x;
        }
        getStemDirection() {
            throw new RuntimeError('NoStem', 'No stem attached to this note.');
        }
        getStemExtents() {
            throw new RuntimeError('NoStem', 'No stem attached to this note.');
        }
        getTieRightX() {
            let tieStartX = this.getAbsoluteX();
            const noteGlyphWidth = this.getGlyphWidth();
            tieStartX += noteGlyphWidth / 2;
            tieStartX += -this.width / 2 + this.width + 2;
            return tieStartX;
        }
        getTieLeftX() {
            let tieEndX = this.getAbsoluteX();
            const noteGlyphWidth = this.getGlyphWidth();
            tieEndX += noteGlyphWidth / 2;
            tieEndX -= this.width / 2 + 2;
            return tieEndX;
        }
        getKeys() {
            return this.keys;
        }
        getKeyProps() {
            return this.keyProps;
        }
        getBoundingBox() {
            const boundingBox = super.getBoundingBox();
            for (let i = 0; i < this.modifiers.length; i++) {
                boundingBox.mergeWith(this.modifiers[i].getBoundingBox());
            }
            return boundingBox;
        }
    }

    var StaveModifierPosition;
    (function (StaveModifierPosition) {
        StaveModifierPosition[StaveModifierPosition["CENTER"] = 0] = "CENTER";
        StaveModifierPosition[StaveModifierPosition["LEFT"] = 1] = "LEFT";
        StaveModifierPosition[StaveModifierPosition["RIGHT"] = 2] = "RIGHT";
        StaveModifierPosition[StaveModifierPosition["ABOVE"] = 3] = "ABOVE";
        StaveModifierPosition[StaveModifierPosition["BELOW"] = 4] = "BELOW";
        StaveModifierPosition[StaveModifierPosition["BEGIN"] = 5] = "BEGIN";
        StaveModifierPosition[StaveModifierPosition["END"] = 6] = "END";
    })(StaveModifierPosition || (StaveModifierPosition = {}));
    class StaveModifier extends Element {
        static get CATEGORY() {
            return "StaveModifier";
        }
        static get Position() {
            return StaveModifierPosition;
        }
        constructor() {
            super();
            this.padding = 10;
            this.position = StaveModifierPosition.ABOVE;
        }
        getPosition() {
            return this.position;
        }
        setPosition(position) {
            this.position = position;
            return this;
        }
        getStave() {
            return this.stave;
        }
        checkStave() {
            return defined(this.stave, 'NoStave', 'No stave attached to instance.');
        }
        setStave(stave) {
            this.stave = stave;
            return this;
        }
        getPadding(index) {
            return index !== undefined && index < 2 ? 0 : this.padding;
        }
        setPadding(padding) {
            this.padding = padding;
            return this;
        }
        setLayoutMetrics(layoutMetrics) {
            this.layoutMetrics = layoutMetrics;
            return this;
        }
        getLayoutMetrics() {
            return this.layoutMetrics;
        }
    }

    var BarlineType;
    (function (BarlineType) {
        BarlineType[BarlineType["SINGLE"] = 1] = "SINGLE";
        BarlineType[BarlineType["DOUBLE"] = 2] = "DOUBLE";
        BarlineType[BarlineType["END"] = 3] = "END";
        BarlineType[BarlineType["REPEAT_BEGIN"] = 4] = "REPEAT_BEGIN";
        BarlineType[BarlineType["REPEAT_END"] = 5] = "REPEAT_END";
        BarlineType[BarlineType["REPEAT_BOTH"] = 6] = "REPEAT_BOTH";
        BarlineType[BarlineType["NONE"] = 7] = "NONE";
    })(BarlineType || (BarlineType = {}));
    class Barline extends StaveModifier {
        static get CATEGORY() {
            return "Barline";
        }
        static get type() {
            return BarlineType;
        }
        static get typeString() {
            return {
                single: BarlineType.SINGLE,
                double: BarlineType.DOUBLE,
                end: BarlineType.END,
                repeatBegin: BarlineType.REPEAT_BEGIN,
                repeatEnd: BarlineType.REPEAT_END,
                repeatBoth: BarlineType.REPEAT_BOTH,
                none: BarlineType.NONE,
            };
        }
        constructor(type) {
            super();
            this.thickness = Tables.STAVE_LINE_THICKNESS;
            const TYPE = BarlineType;
            this.widths = {};
            this.widths[TYPE.SINGLE] = 5;
            this.widths[TYPE.DOUBLE] = 5;
            this.widths[TYPE.END] = 5;
            this.widths[TYPE.REPEAT_BEGIN] = 5;
            this.widths[TYPE.REPEAT_END] = 5;
            this.widths[TYPE.REPEAT_BOTH] = 5;
            this.widths[TYPE.NONE] = 5;
            this.paddings = {};
            this.paddings[TYPE.SINGLE] = 0;
            this.paddings[TYPE.DOUBLE] = 0;
            this.paddings[TYPE.END] = 0;
            this.paddings[TYPE.REPEAT_BEGIN] = 15;
            this.paddings[TYPE.REPEAT_END] = 15;
            this.paddings[TYPE.REPEAT_BOTH] = 15;
            this.paddings[TYPE.NONE] = 0;
            this.layoutMetricsMap = {};
            this.layoutMetricsMap[TYPE.SINGLE] = {
                xMin: 0,
                xMax: 1,
                paddingLeft: 5,
                paddingRight: 5,
            };
            this.layoutMetricsMap[TYPE.DOUBLE] = {
                xMin: -3,
                xMax: 1,
                paddingLeft: 5,
                paddingRight: 5,
            };
            this.layoutMetricsMap[TYPE.END] = {
                xMin: -5,
                xMax: 1,
                paddingLeft: 5,
                paddingRight: 5,
            };
            this.layoutMetricsMap[TYPE.REPEAT_END] = {
                xMin: -10,
                xMax: 1,
                paddingLeft: 5,
                paddingRight: 5,
            };
            this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {
                xMin: -2,
                xMax: 10,
                paddingLeft: 5,
                paddingRight: 5,
            };
            this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {
                xMin: -10,
                xMax: 10,
                paddingLeft: 5,
                paddingRight: 5,
            };
            this.layoutMetricsMap[TYPE.NONE] = {
                xMin: 0,
                xMax: 0,
                paddingLeft: 5,
                paddingRight: 5,
            };
            this.setPosition(StaveModifierPosition.BEGIN);
            this.setType(type);
        }
        getType() {
            return this.type;
        }
        setType(type) {
            this.type = typeof type === 'string' ? Barline.typeString[type] : type;
            this.setWidth(this.widths[this.type]);
            this.setPadding(this.paddings[this.type]);
            this.setLayoutMetrics(this.layoutMetricsMap[this.type]);
            return this;
        }
        draw() {
            const stave = this.checkStave();
            const ctx = stave.checkContext();
            this.setRendered();
            ctx.openGroup('stavebarline', this.getAttribute('id'));
            switch (this.type) {
                case BarlineType.SINGLE:
                    this.drawVerticalBar(stave, this.x, false);
                    break;
                case BarlineType.DOUBLE:
                    this.drawVerticalBar(stave, this.x, true);
                    break;
                case BarlineType.END:
                    this.drawVerticalEndBar(stave, this.x);
                    break;
                case BarlineType.REPEAT_BEGIN:
                    this.drawRepeatBar(stave, this.x, true);
                    if (stave.getX() !== this.x) {
                        this.drawVerticalBar(stave, stave.getX());
                    }
                    break;
                case BarlineType.REPEAT_END:
                    this.drawRepeatBar(stave, this.x, false);
                    break;
                case BarlineType.REPEAT_BOTH:
                    this.drawRepeatBar(stave, this.x, false);
                    this.drawRepeatBar(stave, this.x, true);
                    break;
            }
            ctx.closeGroup();
        }
        drawVerticalBar(stave, x, doubleBar) {
            const staveCtx = stave.checkContext();
            const topY = stave.getTopLineTopY();
            const botY = stave.getBottomLineBottomY();
            if (doubleBar) {
                staveCtx.fillRect(x - 3, topY, 1, botY - topY);
            }
            staveCtx.fillRect(x, topY, 1, botY - topY);
        }
        drawVerticalEndBar(stave, x) {
            const staveCtx = stave.checkContext();
            const topY = stave.getTopLineTopY();
            const botY = stave.getBottomLineBottomY();
            staveCtx.fillRect(x - 5, topY, 1, botY - topY);
            staveCtx.fillRect(x - 2, topY, 3, botY - topY);
        }
        drawRepeatBar(stave, x, begin) {
            const staveCtx = stave.checkContext();
            const topY = stave.getTopLineTopY();
            const botY = stave.getBottomLineBottomY();
            let xShift = 3;
            if (!begin) {
                xShift = -5;
            }
            staveCtx.fillRect(x + xShift, topY, 1, botY - topY);
            staveCtx.fillRect(x - 2, topY, 3, botY - topY);
            const dotRadius = 2;
            if (begin) {
                xShift += 4;
            }
            else {
                xShift -= 4;
            }
            const dotX = x + xShift + dotRadius / 2;
            let yOffset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();
            yOffset = yOffset / 2 - stave.getSpacingBetweenLines() / 2;
            let dotY = topY + yOffset + dotRadius / 2;
            staveCtx.beginPath();
            staveCtx.arc(dotX, dotY, dotRadius, 0, Math.PI * 2, false);
            staveCtx.fill();
            dotY += stave.getSpacingBetweenLines();
            staveCtx.beginPath();
            staveCtx.arc(dotX, dotY, dotRadius, 0, Math.PI * 2, false);
            staveCtx.fill();
        }
    }

    function L$h(...args) {
        if (BarNote.DEBUG)
            log('VexFlow.BarNote', args);
    }
    class BarNote extends Note {
        static get CATEGORY() {
            return "BarNote";
        }
        constructor(type = BarlineType.SINGLE) {
            super({ duration: 'b' });
            this.metrics = {
                widths: {},
            };
            const TYPE = BarlineType;
            this.metrics.widths = {
                [TYPE.SINGLE]: 8,
                [TYPE.DOUBLE]: 12,
                [TYPE.END]: 15,
                [TYPE.REPEAT_BEGIN]: 14,
                [TYPE.REPEAT_END]: 14,
                [TYPE.REPEAT_BOTH]: 18,
                [TYPE.NONE]: 0,
            };
            this.ignoreTicks = true;
            this.setType(type);
        }
        getType() {
            return this.type;
        }
        setType(type) {
            this.type = typeof type === 'string' ? Barline.typeString[type] : type;
            this.setWidth(this.metrics.widths[this.type]);
            return this;
        }
        addToModifierContext(mc) {
            return this;
        }
        preFormat() {
            this.preFormatted = true;
            return this;
        }
        draw() {
            const ctx = this.checkContext();
            L$h('Rendering bar line at: ', this.getAbsoluteX());
            const barline = new Barline(this.type);
            barline.setX(this.getAbsoluteX());
            barline.setStave(this.checkStave());
            barline.setContext(ctx);
            barline.drawWithStyle();
            this.setRendered();
        }
    }
    BarNote.DEBUG = false;

    function calculateStemDirection(notes) {
        let lineSum = 0;
        notes.forEach((note) => {
            if (note.keyProps) {
                note.keyProps.forEach((keyProp) => {
                    lineSum += keyProp.line - 3;
                });
            }
        });
        if (lineSum >= 0) {
            return Stem.DOWN;
        }
        return Stem.UP;
    }
    function getStemSlope(firstNote, lastNote) {
        const firstStemTipY = firstNote.getStemExtents().topY;
        const firstStemX = firstNote.getStemX();
        const lastStemTipY = lastNote.getStemExtents().topY;
        const lastStemX = lastNote.getStemX();
        return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);
    }
    const BEAM_LEFT = 'L';
    const BEAM_RIGHT = 'R';
    const BEAM_BOTH = 'B';
    class Beam extends Element {
        static get CATEGORY() {
            return "Beam";
        }
        getStemDirection() {
            return this._stemDirection;
        }
        static getDefaultBeamGroups(timeSig) {
            if (!timeSig || timeSig === 'c') {
                timeSig = '4/4';
            }
            const defaults = {
                '1/2': ['1/2'],
                '2/2': ['1/2'],
                '3/2': ['1/2'],
                '4/2': ['1/2'],
                '1/4': ['1/4'],
                '2/4': ['1/4'],
                '3/4': ['1/4'],
                '4/4': ['1/4'],
                '1/8': ['1/8'],
                '2/8': ['2/8'],
                '3/8': ['3/8'],
                '4/8': ['2/8'],
                '1/16': ['1/16'],
                '2/16': ['2/16'],
                '3/16': ['3/16'],
                '4/16': ['2/16'],
            };
            const groups = defaults[timeSig];
            if (groups === undefined) {
                const beatTotal = parseInt(timeSig.split('/')[0], 10);
                const beatValue = parseInt(timeSig.split('/')[1], 10);
                const tripleMeter = beatTotal % 3 === 0;
                if (tripleMeter) {
                    return [new Fraction(3, beatValue)];
                }
                else if (beatValue > 4) {
                    return [new Fraction(2, beatValue)];
                }
                else if (beatValue <= 4) {
                    return [new Fraction(1, beatValue)];
                }
            }
            else {
                return groups.map((group) => new Fraction().parse(group));
            }
            return [new Fraction(1, 4)];
        }
        static applyAndGetBeams(voice, stemDirection, groups) {
            return Beam.generateBeams(voice.getTickables(), { groups, stemDirection });
        }
        static generateBeams(notes, config = {}) {
            if (!config.groups || !config.groups.length) {
                config.groups = [new Fraction(2, 8)];
            }
            const tickGroups = config.groups.map((group) => {
                if (!group.multiply) {
                    throw new RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of VexFlow.Fractions');
                }
                return group.clone().multiply(Tables.RESOLUTION, 1);
            });
            const unprocessedNotes = notes;
            let currentTickGroup = 0;
            let noteGroups = [];
            let currentGroup = [];
            function getTotalTicks(notes) {
                return notes.reduce((memo, note) => note.getTicks().clone().add(memo), new Fraction(0, 1));
            }
            function nextTickGroup() {
                if (tickGroups.length - 1 > currentTickGroup) {
                    currentTickGroup += 1;
                }
                else {
                    currentTickGroup = 0;
                }
            }
            function createGroups() {
                let nextGroup = [];
                let currentGroupTotalTicks = new Fraction(0, 1);
                unprocessedNotes.forEach((unprocessedNote) => {
                    nextGroup = [];
                    if (unprocessedNote.shouldIgnoreTicks()) {
                        noteGroups.push(currentGroup);
                        currentGroup = nextGroup;
                        return;
                    }
                    currentGroup.push(unprocessedNote);
                    const ticksPerGroup = tickGroups[currentTickGroup].clone();
                    const totalTicks = getTotalTicks(currentGroup).add(currentGroupTotalTicks);
                    const unbeamable = Tables.durationToNumber(unprocessedNote.getDuration()) < 8;
                    if (unbeamable && unprocessedNote.getTuplet()) {
                        ticksPerGroup.numerator *= 2;
                    }
                    if (totalTicks.greaterThan(ticksPerGroup)) {
                        if (!unbeamable) {
                            const note = currentGroup.pop();
                            if (note)
                                nextGroup.push(note);
                        }
                        noteGroups.push(currentGroup);
                        do {
                            currentGroupTotalTicks = totalTicks.subtract(tickGroups[currentTickGroup]);
                            nextTickGroup();
                        } while (currentGroupTotalTicks.greaterThanEquals(tickGroups[currentTickGroup]));
                        currentGroup = nextGroup;
                    }
                    else if (totalTicks.equals(ticksPerGroup)) {
                        noteGroups.push(currentGroup);
                        currentGroupTotalTicks = new Fraction(0, 1);
                        currentGroup = nextGroup;
                        nextTickGroup();
                    }
                });
                if (currentGroup.length > 0) {
                    noteGroups.push(currentGroup);
                }
            }
            function getBeamGroups() {
                return noteGroups.filter((group) => {
                    if (group.length > 1) {
                        let beamable = true;
                        group.forEach((note) => {
                            if (note.getIntrinsicTicks() >= Tables.durationToTicks('4')) {
                                beamable = false;
                            }
                        });
                        return beamable;
                    }
                    return false;
                });
            }
            function sanitizeGroups() {
                const sanitizedGroups = [];
                noteGroups.forEach((group) => {
                    let tempGroup = [];
                    group.forEach((note, index, group) => {
                        const isFirstOrLast = index === 0 || index === group.length - 1;
                        const prevNote = group[index - 1];
                        const breaksOnEachRest = !config.beamRests && note.isRest();
                        const breaksOnFirstOrLastRest = config.beamRests && config.beamMiddleOnly && note.isRest() && isFirstOrLast;
                        let breakOnStemChange = false;
                        if (config.maintainStemDirections && prevNote && !note.isRest() && !prevNote.isRest()) {
                            const prevDirection = prevNote.getStemDirection();
                            const currentDirection = note.getStemDirection();
                            breakOnStemChange = currentDirection !== prevDirection;
                        }
                        const isUnbeamableDuration = parseInt(note.getDuration(), 10) < 8;
                        const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;
                        if (shouldBreak) {
                            if (tempGroup.length > 0) {
                                sanitizedGroups.push(tempGroup);
                            }
                            tempGroup = breakOnStemChange ? [note] : [];
                        }
                        else {
                            tempGroup.push(note);
                        }
                    });
                    if (tempGroup.length > 0) {
                        sanitizedGroups.push(tempGroup);
                    }
                });
                noteGroups = sanitizedGroups;
            }
            function formatStems() {
                noteGroups.forEach((group) => {
                    let stemDirection;
                    if (config.maintainStemDirections) {
                        const note = findFirstNote(group);
                        stemDirection = note ? note.getStemDirection() : Stem.UP;
                    }
                    else {
                        if (config.stemDirection) {
                            stemDirection = config.stemDirection;
                        }
                        else {
                            stemDirection = calculateStemDirection(group);
                        }
                    }
                    applyStemDirection(group, stemDirection);
                });
            }
            function findFirstNote(group) {
                for (let i = 0; i < group.length; i++) {
                    const note = group[i];
                    if (!note.isRest()) {
                        return note;
                    }
                }
                return false;
            }
            function applyStemDirection(group, direction) {
                group.forEach((note) => {
                    note.setStemDirection(direction);
                });
            }
            function getTuplets() {
                const uniqueTuplets = [];
                noteGroups.forEach((group) => {
                    let tuplet;
                    group.forEach((note) => {
                        const noteTuplet = note.getTuplet();
                        if (noteTuplet && tuplet !== noteTuplet) {
                            tuplet = noteTuplet;
                            uniqueTuplets.push(tuplet);
                        }
                    });
                });
                return uniqueTuplets;
            }
            createGroups();
            sanitizeGroups();
            formatStems();
            const beamedNoteGroups = getBeamGroups();
            const allTuplets = getTuplets();
            const beams = [];
            beamedNoteGroups.forEach((group) => {
                const beam = new Beam(group);
                if (config.showStemlets) {
                    beam.renderOptions.showStemlets = true;
                }
                if (config.secondaryBreaks) {
                    beam.renderOptions.secondaryBreakTicks = Tables.durationToTicks(config.secondaryBreaks);
                }
                if (config.flatBeams === true) {
                    beam.renderOptions.flatBeams = true;
                    beam.renderOptions.flatBeamOffset = config.flatBeamOffset;
                }
                beams.push(beam);
            });
            allTuplets.forEach((tuplet) => {
                const direction = tuplet.notes[0].stemDirection === Stem.DOWN ? -1 : 1;
                tuplet.setTupletLocation(direction);
                let bracketed = false;
                for (let i = 0; i < tuplet.notes.length; i++) {
                    const note = tuplet.notes[i];
                    if (!note.hasBeam()) {
                        bracketed = true;
                        break;
                    }
                }
                tuplet.setBracketed(bracketed);
            });
            return beams;
        }
        constructor(notes, autoStem = false) {
            super();
            this.slope = 0;
            this.yShift = 0;
            this.forcedPartialDirections = {};
            if (!notes || notes.length === 0) {
                throw new RuntimeError('BadArguments', 'No notes provided for beam.');
            }
            if (notes.length === 1) {
                throw new RuntimeError('BadArguments', 'Too few notes for beam.');
            }
            this._ticks = notes[0].getIntrinsicTicks();
            if (this._ticks >= Tables.durationToTicks('4')) {
                throw new RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');
            }
            let i;
            let note;
            this._stemDirection = notes[0].getStemDirection();
            let stemDirection = this._stemDirection;
            if (autoStem && isStaveNote(notes[0])) {
                stemDirection = calculateStemDirection(notes);
            }
            else if (autoStem && isTabNote(notes[0])) {
                const stemWeight = notes.reduce((memo, note) => memo + note.getStemDirection(), 0);
                stemDirection = stemWeight > -1 ? Stem.UP : Stem.DOWN;
            }
            for (i = 0; i < notes.length; ++i) {
                note = notes[i];
                if (autoStem) {
                    note.setStemDirection(stemDirection);
                    this._stemDirection = stemDirection;
                }
                note.setBeam(this);
            }
            this.postFormatted = false;
            this.notes = notes;
            this._beamCount = this.getBeamCount();
            this.breakOnIndexes = [];
            this.renderOptions = {
                beamWidth: 5,
                maxSlope: 0.25,
                minSlope: -0.25,
                slopeIterations: 20,
                slopeCost: 100,
                showStemlets: false,
                stemletExtension: 7,
                partialBeamLength: 10,
                flatBeams: false,
                minFlatBeamOffset: 15,
            };
        }
        getNotes() {
            return this.notes;
        }
        getBeamCount() {
            const beamCounts = this.notes.map((note) => note.getGlyphProps().beamCount);
            const maxBeamCount = beamCounts.reduce((max, beamCount) => (beamCount > max ? beamCount : max));
            return maxBeamCount;
        }
        breakSecondaryAt(indexes) {
            this.breakOnIndexes = indexes;
            return this;
        }
        setPartialBeamSideAt(noteIndex, side) {
            this.forcedPartialDirections[noteIndex] = side;
            return this;
        }
        unsetPartialBeamSideAt(noteIndex) {
            delete this.forcedPartialDirections[noteIndex];
            return this;
        }
        getSlopeY(x, firstX, firstY, slope) {
            return firstY + (x - firstX) * slope;
        }
        calculateSlope() {
            const { notes, renderOptions: { maxSlope, minSlope, slopeIterations, slopeCost }, } = this;
            const stemDirection = this._stemDirection;
            const firstNote = notes[0];
            const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);
            const increment = (maxSlope - minSlope) / slopeIterations;
            let minCost = Number.MAX_VALUE;
            let bestSlope = 0;
            let yShift = 0;
            for (let slope = minSlope; slope <= maxSlope; slope += increment) {
                let totalStemExtension = 0;
                let yShiftTemp = 0;
                for (let i = 1; i < notes.length; ++i) {
                    const note = notes[i];
                    if (note.hasStem() || note.isRest()) {
                        const adjustedStemTipY = this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;
                        const stemTipY = note.getStemExtents().topY;
                        if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {
                            const diff = Math.abs(stemTipY - adjustedStemTipY);
                            yShiftTemp += diff * -stemDirection;
                            totalStemExtension += diff * i;
                        }
                        else {
                            totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;
                        }
                    }
                }
                const idealSlope = initialSlope / 2;
                const distanceFromIdeal = Math.abs(idealSlope - slope);
                const cost = slopeCost * distanceFromIdeal + Math.abs(totalStemExtension);
                if (cost < minCost) {
                    minCost = cost;
                    bestSlope = slope;
                    yShift = yShiftTemp;
                }
            }
            this.slope = bestSlope;
            this.yShift = yShift;
        }
        calculateFlatSlope() {
            const { notes, renderOptions: { beamWidth, minFlatBeamOffset, flatBeamOffset }, } = this;
            const stemDirection = this._stemDirection;
            let total = 0;
            let extremeY = 0;
            let extremeBeamCount = 0;
            let currentExtreme = 0;
            for (let i = 0; i < notes.length; i++) {
                const note = notes[i];
                const stemTipY = note.getStemExtents().topY;
                total += stemTipY;
                if (stemDirection === Stem.DOWN && currentExtreme < stemTipY) {
                    currentExtreme = stemTipY;
                    extremeY = Math.max(...note.getYs());
                    extremeBeamCount = note.getBeamCount();
                }
                else if (stemDirection === Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {
                    currentExtreme = stemTipY;
                    extremeY = Math.min(...note.getYs());
                    extremeBeamCount = note.getBeamCount();
                }
            }
            let offset = total / notes.length;
            const extremeTest = minFlatBeamOffset + extremeBeamCount * beamWidth * 1.5;
            const newOffset = extremeY + extremeTest * -stemDirection;
            if (stemDirection === Stem.DOWN && offset < newOffset) {
                offset = extremeY + extremeTest;
            }
            else if (stemDirection === Stem.UP && offset > newOffset) {
                offset = extremeY - extremeTest;
            }
            if (!flatBeamOffset) {
                this.renderOptions.flatBeamOffset = offset;
            }
            else if (stemDirection === Stem.DOWN && offset > flatBeamOffset) {
                this.renderOptions.flatBeamOffset = offset;
            }
            else if (stemDirection === Stem.UP && offset < flatBeamOffset) {
                this.renderOptions.flatBeamOffset = offset;
            }
            this.slope = 0;
            this.yShift = 0;
        }
        getBeamYToDraw() {
            const firstNote = this.notes[0];
            const firstStemTipY = firstNote.getStemExtents().topY;
            let beamY = firstStemTipY;
            if (this.renderOptions.flatBeams && this.renderOptions.flatBeamOffset) {
                beamY = this.renderOptions.flatBeamOffset;
            }
            return beamY;
        }
        applyStemExtensions() {
            const { notes, slope, renderOptions: { showStemlets, stemletExtension, beamWidth }, } = this;
            const yShift = this.yShift;
            const beamCount = this._beamCount;
            const firstNote = notes[0];
            const firstStemTipY = this.getBeamYToDraw();
            const firstStemX = firstNote.getStemX();
            for (let i = 0; i < notes.length; ++i) {
                const note = notes[i];
                const stem = note.getStem();
                if (stem) {
                    const stemX = note.getStemX();
                    const { topY: stemTipY } = note.getStemExtents();
                    const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + yShift;
                    const preBeamExtension = stem.getExtension();
                    const beamExtension = note.getStemDirection() === Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;
                    let crossStemExtension = 0;
                    if (note.getStemDirection() !== this._stemDirection) {
                        const beamCount = note.getGlyphProps().beamCount;
                        crossStemExtension = (1 + (beamCount - 1) * 1.5) * this.renderOptions.beamWidth;
                    }
                    stem.setExtension(preBeamExtension + beamExtension + crossStemExtension);
                    stem.adjustHeightForBeam();
                    if (note.isRest() && showStemlets) {
                        const totalBeamWidth = (beamCount - 1) * beamWidth * 1.5 + beamWidth;
                        stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemletExtension);
                    }
                }
            }
        }
        lookupBeamDirection(duration, prevTick, tick, nextTick, noteIndex) {
            if (duration === '4') {
                return BEAM_LEFT;
            }
            const forcedBeamDirection = this.forcedPartialDirections[noteIndex];
            if (forcedBeamDirection)
                return forcedBeamDirection;
            const lookupDuration = `${Tables.durationToNumber(duration) / 2}`;
            const prevNoteGetsBeam = prevTick < Tables.durationToTicks(lookupDuration);
            const nextNoteGetsBeam = nextTick < Tables.durationToTicks(lookupDuration);
            const noteGetsBeam = tick < Tables.durationToTicks(lookupDuration);
            if (prevNoteGetsBeam && nextNoteGetsBeam && noteGetsBeam) {
                return BEAM_BOTH;
            }
            else if (prevNoteGetsBeam && !nextNoteGetsBeam && noteGetsBeam) {
                return BEAM_LEFT;
            }
            else if (!prevNoteGetsBeam && nextNoteGetsBeam && noteGetsBeam) {
                return BEAM_RIGHT;
            }
            return this.lookupBeamDirection(lookupDuration, prevTick, tick, nextTick, noteIndex);
        }
        getBeamLines(duration) {
            const tickOfDuration = Tables.durationToTicks(duration);
            let beamStarted = false;
            const beamLines = [];
            let currentBeam = undefined;
            const partialBeamLength = this.renderOptions.partialBeamLength;
            let previousShouldBreak = false;
            let tickTally = 0;
            for (let i = 0; i < this.notes.length; ++i) {
                const note = this.notes[i];
                const ticks = note.getTicks().value();
                tickTally += ticks;
                let shouldBreak = false;
                if (parseInt(duration, 10) >= 8) {
                    shouldBreak = this.breakOnIndexes.indexOf(i) !== -1;
                    if (this.renderOptions.secondaryBreakTicks && tickTally >= this.renderOptions.secondaryBreakTicks) {
                        tickTally = 0;
                        shouldBreak = true;
                    }
                }
                const noteGetsBeam = note.getIntrinsicTicks() < tickOfDuration;
                const stemX = note.getStemX() - Stem.WIDTH / 2;
                const prevNote = this.notes[i - 1];
                const nextNote = this.notes[i + 1];
                const nextNoteGetsBeam = nextNote && nextNote.getIntrinsicTicks() < tickOfDuration;
                const prevNoteGetsBeam = prevNote && prevNote.getIntrinsicTicks() < tickOfDuration;
                const beamAlone = prevNote && nextNote && noteGetsBeam && !prevNoteGetsBeam && !nextNoteGetsBeam;
                if (noteGetsBeam) {
                    if (beamStarted) {
                        currentBeam = beamLines[beamLines.length - 1];
                        currentBeam.end = stemX;
                        if (shouldBreak) {
                            beamStarted = false;
                            if (nextNote && !nextNoteGetsBeam && currentBeam.end === undefined) {
                                currentBeam.end = currentBeam.start - partialBeamLength;
                            }
                        }
                    }
                    else {
                        currentBeam = { start: stemX, end: undefined };
                        beamStarted = true;
                        if (beamAlone) {
                            const prevTick = prevNote.getIntrinsicTicks();
                            const nextTick = nextNote.getIntrinsicTicks();
                            const tick = note.getIntrinsicTicks();
                            const beamDirection = this.lookupBeamDirection(duration, prevTick, tick, nextTick, i);
                            if ([BEAM_LEFT, BEAM_BOTH].includes(beamDirection)) {
                                currentBeam.end = currentBeam.start - partialBeamLength;
                            }
                            else {
                                currentBeam.end = currentBeam.start + partialBeamLength;
                            }
                        }
                        else if (!nextNoteGetsBeam) {
                            if ((previousShouldBreak || i === 0) && nextNote) {
                                currentBeam.end = currentBeam.start + partialBeamLength;
                            }
                            else {
                                currentBeam.end = currentBeam.start - partialBeamLength;
                            }
                        }
                        else if (shouldBreak) {
                            currentBeam.end = currentBeam.start - partialBeamLength;
                            beamStarted = false;
                        }
                        beamLines.push(currentBeam);
                    }
                }
                else {
                    beamStarted = false;
                }
                previousShouldBreak = shouldBreak;
            }
            const lastBeam = beamLines[beamLines.length - 1];
            if (lastBeam && lastBeam.end === undefined) {
                lastBeam.end = lastBeam.start - partialBeamLength;
            }
            return beamLines;
        }
        drawStems(ctx) {
            this.notes.forEach((note) => {
                const stem = note.getStem();
                if (stem) {
                    const stemX = note.getStemX();
                    stem.setNoteHeadXBounds(stemX, stemX);
                    stem.setContext(ctx).drawWithStyle();
                }
            }, this);
        }
        drawBeamLines(ctx) {
            const validBeamDurations = ['4', '8', '16', '32', '64'];
            const firstNote = this.notes[0];
            let beamY = this.getBeamYToDraw();
            const firstStemX = firstNote.getStemX();
            const beamThickness = this.renderOptions.beamWidth * this._stemDirection;
            for (let i = 0; i < validBeamDurations.length; ++i) {
                const duration = validBeamDurations[i];
                const beamLines = this.getBeamLines(duration);
                for (let j = 0; j < beamLines.length; ++j) {
                    const beamLine = beamLines[j];
                    const startBeamX = beamLine.start;
                    const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);
                    const lastBeamX = beamLine.end;
                    if (lastBeamX) {
                        const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);
                        ctx.beginPath();
                        ctx.moveTo(startBeamX, startBeamY);
                        ctx.lineTo(startBeamX, startBeamY + beamThickness);
                        ctx.lineTo(lastBeamX + 1, lastBeamY + beamThickness);
                        ctx.lineTo(lastBeamX + 1, lastBeamY);
                        ctx.closePath();
                        ctx.fill();
                    }
                    else {
                        throw new RuntimeError('NoLastBeamX', 'lastBeamX undefined.');
                    }
                }
                beamY += beamThickness * 1.5;
            }
        }
        preFormat() {
            return this;
        }
        postFormat() {
            if (this.postFormatted)
                return;
            if (isTabNote(this.notes[0]) || this.renderOptions.flatBeams) {
                this.calculateFlatSlope();
            }
            else {
                this.calculateSlope();
            }
            this.applyStemExtensions();
            this.postFormatted = true;
        }
        draw() {
            const ctx = this.checkContext();
            this.setRendered();
            if (this.unbeamable)
                return;
            if (!this.postFormatted) {
                this.postFormat();
            }
            ctx.openGroup('beam', this.getAttribute('id'));
            this.drawStems(ctx);
            this.drawBeamLines(ctx);
            ctx.closeGroup();
        }
    }

    class Bend extends Modifier$1 {
        static get CATEGORY() {
            return "Bend";
        }
        static get UP() {
            return 0;
        }
        static get DOWN() {
            return 1;
        }
        static format(bends, state) {
            if (!bends || bends.length === 0)
                return false;
            let lastWidth = 0;
            for (let i = 0; i < bends.length; ++i) {
                const bend = bends[i];
                const note = bend.checkAttachedNote();
                if (isTabNote(note)) {
                    const stringPos = note.leastString() - 1;
                    if (state.topTextLine < stringPos) {
                        state.topTextLine = stringPos;
                    }
                }
                bend.setXShift(lastWidth);
                lastWidth = bend.getWidth();
                bend.setTextLine(state.topTextLine);
            }
            state.rightShift += lastWidth;
            state.topTextLine += 1;
            return true;
        }
        setStyleLine(style) {
            this.styleLine = style;
            return this;
        }
        getStyleLine() {
            return this.styleLine;
        }
        constructor(phrase) {
            super();
            this.styleLine = Metrics.getStyle('Bend.line');
            this.xShift = 0;
            this.tap = '';
            this.renderOptions = {
                bendWidth: 8,
                releaseWidth: 8,
            };
            this.phrase = phrase;
            this.updateWidth();
        }
        setXShift(value) {
            this.xShift = value;
            this.updateWidth();
            return this;
        }
        setTap(value) {
            this.tap = value;
            return this;
        }
        getTextHeight() {
            const element = new Element("Bend");
            element.setText(this.phrase[0].text);
            return element.getHeight();
        }
        updateWidth() {
            const measureText = (text) => {
                const element = new Element("Bend");
                element.setText(text);
                return element.getWidth();
            };
            let totalWidth = 0;
            for (let i = 0; i < this.phrase.length; ++i) {
                const bend = this.phrase[i];
                if (bend.width !== undefined) {
                    totalWidth += bend.width;
                }
                else {
                    const additionalWidth = bend.type === Bend.UP ? this.renderOptions.bendWidth : this.renderOptions.releaseWidth;
                    bend.width = Math.max(additionalWidth, measureText(bend.text)) + 3;
                    bend.drawWidth = bend.width / 2;
                    totalWidth += bend.width;
                }
            }
            this.setWidth(totalWidth + this.xShift);
            return this;
        }
        draw() {
            var _a;
            const ctx = this.checkContext();
            const note = this.checkAttachedNote();
            this.setRendered();
            const start = note.getModifierStartXY(Modifier$1.Position.RIGHT, this.index);
            start.x += 3;
            start.y += 0.5;
            const xShift = this.xShift;
            const stave = note.checkStave();
            const spacing = stave.getSpacingBetweenLines();
            const lowestY = note.getYs().reduce((a, b) => (a < b ? a : b));
            const bendHeight = start.y - ((this.textLine + 1) * spacing + start.y - lowestY) + 3;
            const annotationY = start.y - ((this.textLine + 1) * spacing + start.y - lowestY) - 1;
            const renderBend = (x, y, width, height) => {
                const cpX = x + width;
                const cpY = y;
                this.applyStyle(ctx, this.styleLine);
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.quadraticCurveTo(cpX, cpY, x + width, height);
                ctx.stroke();
            };
            const renderRelease = (x, y, width, height) => {
                this.applyStyle(ctx, this.styleLine);
                ctx.beginPath();
                ctx.moveTo(x, height);
                ctx.quadraticCurveTo(x + width, height, x + width, y);
                ctx.stroke();
            };
            const renderArrowHead = (x, y, direction) => {
                const width = 4;
                const yBase = y + width * direction;
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(x - width, yBase);
                ctx.lineTo(x + width, yBase);
                ctx.closePath();
                ctx.fill();
            };
            const renderText = (x, text) => {
                ctx.setFont(this.fontInfo);
                const renderX = x - ctx.measureText(text).width / 2;
                ctx.fillText(text, renderX, annotationY);
            };
            let lastBend = undefined;
            let lastBendDrawWidth = 0;
            let lastDrawnWidth = 0;
            if ((_a = this.tap) === null || _a === void 0 ? void 0 : _a.length) {
                const tapStart = note.getModifierStartXY(Modifier$1.Position.CENTER, this.index);
                renderText(tapStart.x, this.tap);
            }
            for (let i = 0; i < this.phrase.length; ++i) {
                const bend = this.phrase[i];
                if (!bend.drawWidth)
                    bend.drawWidth = 0;
                if (i === 0)
                    bend.drawWidth += xShift;
                lastDrawnWidth = bend.drawWidth + lastBendDrawWidth - (i === 1 ? xShift : 0);
                if (bend.type === Bend.UP) {
                    if (lastBend && lastBend.type === Bend.UP) {
                        renderArrowHead(start.x, bendHeight, 1);
                    }
                    renderBend(start.x, start.y, lastDrawnWidth, bendHeight);
                }
                if (bend.type === Bend.DOWN) {
                    if (lastBend && lastBend.type === Bend.UP) {
                        renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);
                    }
                    if (lastBend && lastBend.type === Bend.DOWN) {
                        renderArrowHead(start.x, start.y, -1);
                        renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);
                    }
                    if (!lastBend) {
                        lastDrawnWidth = bend.drawWidth;
                        renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);
                    }
                }
                renderText(start.x + lastDrawnWidth, bend.text);
                lastBend = bend;
                lastBendDrawWidth = bend.drawWidth;
                lastBend.x = start.x;
                start.x += lastDrawnWidth;
            }
            if (!lastBend || lastBend.x === undefined) {
                throw new RuntimeError('NoLastBendForBend', 'Internal error.');
            }
            if (lastBend.type === Bend.UP) {
                renderArrowHead(lastBend.x + lastDrawnWidth, bendHeight, 1);
            }
            else if (lastBend.type === Bend.DOWN) {
                renderArrowHead(lastBend.x + lastDrawnWidth, start.y, -1);
            }
        }
    }

    function isHTMLCanvas(element) {
        if (!element)
            return false;
        const global = globalObject();
        return ((typeof global.HTMLCanvasElement === 'function' && element instanceof global.HTMLCanvasElement) ||
            (typeof element.getContext === 'function' && typeof element.toDataURL === 'function'));
    }
    function isHTMLDiv(element) {
        if (!element)
            return false;
        const global = globalObject();
        return ((typeof global.HTMLDivElement === 'function' && element instanceof global.HTMLDivElement) ||
            (typeof element.appendChild === 'function' && typeof element.style === 'object'));
    }

    class CanvasContext extends RenderContext {
        static get WIDTH() {
            return 600;
        }
        static get HEIGHT() {
            return 400;
        }
        static get CANVAS_BROWSER_SIZE_LIMIT() {
            return 32767;
        }
        static sanitizeCanvasDims(width, height) {
            const limit = this.CANVAS_BROWSER_SIZE_LIMIT;
            if (Math.max(width, height) > limit) {
                warn('Canvas dimensions exceed browser limit. Cropping to ' + limit);
                if (width > limit) {
                    width = limit;
                }
                if (height > limit) {
                    height = limit;
                }
            }
            return [width, height];
        }
        constructor(context) {
            super();
            this.textHeight = 0;
            this.context2D = context;
            this.curTransfrom = context.getTransform();
            if (!context.canvas) {
                this.canvas = {
                    width: CanvasContext.WIDTH,
                    height: CanvasContext.HEIGHT,
                };
            }
            else {
                this.canvas = context.canvas;
            }
        }
        clear() {
            this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);
        }
        openGroup(cls, id) {
        }
        closeGroup() {
        }
        openRotation(angleDegrees, x, y) {
            this.curTransfrom = this.context2D.getTransform();
            this.context2D.translate(x, y);
            this.context2D.rotate((angleDegrees * Math.PI) / 180);
            this.context2D.translate(-x, -y);
        }
        closeRotation() {
            this.context2D.setTransform(this.curTransfrom);
        }
        add(child) {
        }
        setFillStyle(style) {
            this.context2D.fillStyle = style;
            return this;
        }
        setBackgroundFillStyle(style) {
            return this;
        }
        setStrokeStyle(style) {
            this.context2D.strokeStyle = style;
            return this;
        }
        setShadowColor(color) {
            this.context2D.shadowColor = color;
            return this;
        }
        setShadowBlur(blur) {
            const t = this.context2D.getTransform();
            const scale = Math.sqrt(t.a * t.a + t.b * t.b + t.c * t.c + t.d * t.d);
            this.context2D.shadowBlur = scale * blur;
            return this;
        }
        setLineWidth(width) {
            this.context2D.lineWidth = width;
            return this;
        }
        setLineCap(capType) {
            this.context2D.lineCap = capType;
            return this;
        }
        setLineDash(dash) {
            this.context2D.setLineDash(dash);
            return this;
        }
        scale(x, y) {
            this.context2D.scale(x, y);
            return this;
        }
        resize(width, height, devicePixelRatio) {
            var _a;
            const canvas = this.context2D.canvas;
            const dpr = (_a = devicePixelRatio !== null && devicePixelRatio !== void 0 ? devicePixelRatio : globalObject().devicePixelRatio) !== null && _a !== void 0 ? _a : 1;
            [width, height] = CanvasContext.sanitizeCanvasDims(width * dpr, height * dpr);
            width = (width / dpr) | 0;
            height = (height / dpr) | 0;
            canvas.width = width * dpr;
            canvas.height = height * dpr;
            if (isHTMLCanvas(canvas)) {
                canvas.style.width = width + 'px';
                canvas.style.height = height + 'px';
            }
            return this.scale(dpr, dpr);
        }
        rect(x, y, width, height) {
            this.context2D.rect(x, y, width, height);
            return this;
        }
        fillRect(x, y, width, height) {
            this.context2D.fillRect(x, y, width, height);
            return this;
        }
        pointerRect(x, y, width, height) {
            return this;
        }
        clearRect(x, y, width, height) {
            this.context2D.clearRect(x, y, width, height);
            return this;
        }
        beginPath() {
            this.context2D.beginPath();
            return this;
        }
        moveTo(x, y) {
            this.context2D.moveTo(x, y);
            return this;
        }
        lineTo(x, y) {
            this.context2D.lineTo(x, y);
            return this;
        }
        bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
            this.context2D.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
            return this;
        }
        quadraticCurveTo(cpx, cpy, x, y) {
            this.context2D.quadraticCurveTo(cpx, cpy, x, y);
            return this;
        }
        arc(x, y, radius, startAngle, endAngle, counterclockwise) {
            this.context2D.arc(x, y, radius, startAngle, endAngle, counterclockwise);
            return this;
        }
        fill() {
            this.context2D.fill();
            return this;
        }
        stroke() {
            this.context2D.stroke();
            return this;
        }
        closePath() {
            this.context2D.closePath();
            return this;
        }
        measureText(text) {
            const metrics = this.context2D.measureText(text);
            let y = 0;
            let height = 0;
            if (metrics.fontBoundingBoxAscent) {
                y = -metrics.fontBoundingBoxAscent;
                height = metrics.fontBoundingBoxDescent + metrics.fontBoundingBoxAscent;
            }
            else {
                y = -metrics.actualBoundingBoxAscent;
                height = metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent;
            }
            return {
                x: 0,
                y: y,
                width: metrics.width,
                height: height,
            };
        }
        fillText(text, x, y) {
            this.context2D.fillText(text, x, y);
            return this;
        }
        save() {
            this.context2D.save();
            return this;
        }
        restore() {
            this.context2D.restore();
            return this;
        }
        set fillStyle(style) {
            this.context2D.fillStyle = style;
        }
        get fillStyle() {
            return this.context2D.fillStyle;
        }
        set strokeStyle(style) {
            this.context2D.strokeStyle = style;
        }
        get strokeStyle() {
            return this.context2D.strokeStyle;
        }
        setFont(f, size, weight, style) {
            const fontInfo = Font.validate(f, size, weight, style);
            this.context2D.font = Font.toCSSString(fontInfo);
            this.textHeight = Font.convertSizeToPixelValue(fontInfo.size);
            return this;
        }
        getFont() {
            return this.context2D.font;
        }
    }

    function L$g(...args) {
        if (ChordSymbol.DEBUG)
            log('VexFlow.ChordSymbol', args);
    }
    class ChordSymbolBlock extends Element {
        constructor(text, symbolModifier, xShift, yShift, vAlign) {
            super();
            this.text = text;
            this.symbolModifier = symbolModifier;
            this.xShift = xShift;
            this.yShift = yShift;
            this.vAlign = vAlign;
        }
        isSuperscript() {
            return this.symbolModifier === SymbolModifiers.SUPERSCRIPT;
        }
        isSubscript() {
            return this.symbolModifier === SymbolModifiers.SUBSCRIPT;
        }
    }
    var ChordSymbolHorizontalJustify;
    (function (ChordSymbolHorizontalJustify) {
        ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify["LEFT"] = 1] = "LEFT";
        ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify["CENTER"] = 2] = "CENTER";
        ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify["RIGHT"] = 3] = "RIGHT";
        ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify["CENTER_STEM"] = 4] = "CENTER_STEM";
    })(ChordSymbolHorizontalJustify || (ChordSymbolHorizontalJustify = {}));
    var ChordSymbolVerticalJustify;
    (function (ChordSymbolVerticalJustify) {
        ChordSymbolVerticalJustify[ChordSymbolVerticalJustify["TOP"] = 1] = "TOP";
        ChordSymbolVerticalJustify[ChordSymbolVerticalJustify["BOTTOM"] = 2] = "BOTTOM";
    })(ChordSymbolVerticalJustify || (ChordSymbolVerticalJustify = {}));
    var SymbolModifiers;
    (function (SymbolModifiers) {
        SymbolModifiers[SymbolModifiers["NONE"] = 1] = "NONE";
        SymbolModifiers[SymbolModifiers["SUBSCRIPT"] = 2] = "SUBSCRIPT";
        SymbolModifiers[SymbolModifiers["SUPERSCRIPT"] = 3] = "SUPERSCRIPT";
    })(SymbolModifiers || (SymbolModifiers = {}));
    class ChordSymbol extends Modifier$1 {
        static get CATEGORY() {
            return "ChordSymbol";
        }
        static get superSubRatio() {
            return Metrics.get('ChordSymbol.superSubRatio');
        }
        static get spacingBetweenBlocks() {
            return Metrics.get('ChordSymbol.spacing');
        }
        static get superscriptOffset() {
            return Metrics.get('ChordSymbol.superscriptOffset');
        }
        static get subscriptOffset() {
            return Metrics.get('ChordSymbol.subscriptOffset');
        }
        static get minPadding() {
            return Metrics.get('NoteHead.minPadding');
        }
        static format(symbols, state) {
            if (!symbols || symbols.length === 0)
                return false;
            let width = 0;
            let leftWidth = 0;
            let rightWidth = 0;
            let maxLeftGlyphWidth = 0;
            let maxRightGlyphWidth = 0;
            for (const symbol of symbols) {
                const note = symbol.checkAttachedNote();
                let lineSpaces = 1;
                for (let j = 0; j < symbol.symbolBlocks.length; ++j) {
                    const block = symbol.symbolBlocks[j];
                    const sup = block.isSuperscript();
                    const sub = block.isSubscript();
                    block.setXShift(width);
                    if (sup || sub) {
                        lineSpaces = 2;
                    }
                    if (sub && j > 0) {
                        const prev = symbol.symbolBlocks[j - 1];
                        if (prev.isSuperscript()) {
                            block.setXShift(width - prev.getWidth() - ChordSymbol.minPadding);
                            block.vAlign = true;
                            width +=
                                -prev.getWidth() -
                                    ChordSymbol.minPadding +
                                    (prev.getWidth() > block.getWidth() ? prev.getWidth() - block.getWidth() : 0);
                        }
                    }
                    width += block.getWidth() + ChordSymbol.minPadding;
                }
                if (symbol.getVertical() === ChordSymbolVerticalJustify.TOP) {
                    symbol.setTextLine(state.topTextLine);
                    state.topTextLine += lineSpaces;
                }
                else {
                    symbol.setTextLine(state.textLine + 1);
                    state.textLine += lineSpaces + 1;
                }
                if (symbol.getReportWidth()) {
                    if (isStemmableNote(note)) {
                        const glyphWidth = note.getGlyphWidth();
                        if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.RIGHT) {
                            maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);
                            leftWidth = Math.max(leftWidth, width) + ChordSymbol.minPadding;
                        }
                        else if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.LEFT) {
                            maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);
                            rightWidth = Math.max(rightWidth, width);
                        }
                        else {
                            leftWidth = Math.max(leftWidth, width / 2) + ChordSymbol.minPadding;
                            rightWidth = Math.max(rightWidth, width / 2);
                            maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);
                            maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);
                        }
                    }
                    symbol.width = width;
                }
                width = 0;
            }
            const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.rightShift, 0));
            const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.leftShift, 0));
            state.leftShift += leftOverlap;
            state.rightShift += rightOverlap;
            return true;
        }
        constructor() {
            super();
            this.symbolBlocks = [];
            this.horizontal = ChordSymbolHorizontalJustify.LEFT;
            this.vertical = ChordSymbolVerticalJustify.TOP;
            this.reportWidth = true;
        }
        get superscriptOffset() {
            return ChordSymbol.superscriptOffset * Font.convertSizeToPixelValue(this.fontInfo.size);
        }
        get subscriptOffset() {
            return ChordSymbol.subscriptOffset * Font.convertSizeToPixelValue(this.fontInfo.size);
        }
        setReportWidth(value) {
            this.reportWidth = value;
            return this;
        }
        getReportWidth() {
            return this.reportWidth;
        }
        getSymbolBlock(params = {}) {
            var _a, _b;
            const symbolBlock = new ChordSymbolBlock((_a = params.text) !== null && _a !== void 0 ? _a : '', (_b = params.symbolModifier) !== null && _b !== void 0 ? _b : SymbolModifiers.NONE, 0, 0, false);
            if (symbolBlock.isSubscript()) {
                symbolBlock.setYShift(this.subscriptOffset);
            }
            if (symbolBlock.isSuperscript()) {
                symbolBlock.setYShift(this.superscriptOffset);
            }
            if (symbolBlock.isSubscript() || symbolBlock.isSuperscript()) {
                const { family, size, weight, style } = this.fontInfo;
                const smallerFontSize = Font.scaleSize(size, ChordSymbol.superSubRatio);
                symbolBlock.setFont(family, smallerFontSize, weight, style);
            }
            else {
                symbolBlock.setFont(this.fontInfo);
            }
            return symbolBlock;
        }
        addSymbolBlock(parameters) {
            this.symbolBlocks.push(this.getSymbolBlock(parameters));
            return this;
        }
        addText(text, parameters = {}) {
            return this.addSymbolBlock(Object.assign(Object.assign({}, parameters), { text }));
        }
        addTextSuperscript(text) {
            const symbolModifier = SymbolModifiers.SUPERSCRIPT;
            return this.addSymbolBlock({ text, symbolModifier });
        }
        addTextSubscript(text) {
            const symbolModifier = SymbolModifiers.SUBSCRIPT;
            return this.addSymbolBlock({ text, symbolModifier });
        }
        addGlyphSuperscript(glyph) {
            return this.addTextSuperscript(ChordSymbol.glyphs[glyph]);
        }
        addGlyph(glyph, params = {}) {
            return this.addText(ChordSymbol.glyphs[glyph], params);
        }
        addGlyphOrText(text, params = {}) {
            let str = '';
            for (let i = 0; i < text.length; ++i) {
                const char = text[i];
                const glyph = ChordSymbol.glyphs[char];
                if (glyph) {
                    str += glyph;
                }
                else {
                    str += char;
                }
            }
            if (str.length > 0) {
                this.addText(str, params);
            }
            return this;
        }
        addLine(params = {}) {
            return this.addText('\ue874\ue874', params);
        }
        setVertical(vj) {
            this.vertical = typeof vj === 'string' ? ChordSymbol.VerticalJustifyString[vj] : vj;
            return this;
        }
        getVertical() {
            return this.vertical;
        }
        setHorizontal(hj) {
            this.horizontal = typeof hj === 'string' ? ChordSymbol.HorizontalJustifyString[hj] : hj;
            return this;
        }
        getHorizontal() {
            return this.horizontal;
        }
        draw() {
            const ctx = this.checkContext();
            const note = this.checkAttachedNote();
            this.setRendered();
            ctx.openGroup('chordsymbol', this.getAttribute('id'));
            const start = note.getModifierStartXY(Modifier$1.Position.ABOVE, this.index);
            ctx.setFont(this.fontInfo);
            let y;
            const hasStem = note.hasStem();
            const stave = note.checkStave();
            if (this.vertical === ChordSymbolVerticalJustify.BOTTOM) {
                y = stave.getYForBottomText(this.textLine + Tables.TEXT_HEIGHT_OFFSET_HACK);
                if (hasStem) {
                    const stemExt = note.checkStem().getExtents();
                    const spacing = stave.getSpacingBetweenLines();
                    const stemBase = note.getStemDirection() === 1 ? stemExt.baseY : stemExt.topY;
                    y = Math.max(y, stemBase + spacing * (this.textLine + 2));
                }
            }
            else {
                const topY = Math.min(...note.getYs());
                y = Math.min(stave.getYForTopText(this.textLine), topY - 10);
                if (hasStem) {
                    const stemExt = note.checkStem().getExtents();
                    const spacing = stave.getSpacingBetweenLines();
                    y = Math.min(y, stemExt.topY - 5 - spacing * this.textLine);
                }
            }
            let x = start.x;
            if (this.horizontal === ChordSymbolHorizontalJustify.LEFT) {
                x = start.x;
            }
            else if (this.horizontal === ChordSymbolHorizontalJustify.RIGHT) {
                x = start.x + this.getWidth();
            }
            else if (this.horizontal === ChordSymbolHorizontalJustify.CENTER) {
                x = start.x - this.getWidth() / 2;
            }
            else {
                x = note.getStemX() - this.getWidth() / 2;
            }
            L$g('Rendering ChordSymbol: ', x, y);
            this.symbolBlocks.forEach((symbol) => {
                L$g('Rendering Text: ', symbol.getText(), x + symbol.getXShift(), y + symbol.getYShift());
                symbol.setX(x);
                symbol.setY(y);
                symbol.renderText(ctx, 0, 0);
            });
            ctx.closeGroup();
        }
        getBoundingBox() {
            const boundingBox = this.symbolBlocks[0].getBoundingBox();
            for (let i = 1; i < this.symbolBlocks.length; i++) {
                boundingBox.mergeWith(this.symbolBlocks[i].getBoundingBox());
            }
            return boundingBox;
        }
    }
    ChordSymbol.DEBUG = false;
    ChordSymbol.HorizontalJustify = ChordSymbolHorizontalJustify;
    ChordSymbol.HorizontalJustifyString = {
        left: ChordSymbolHorizontalJustify.LEFT,
        right: ChordSymbolHorizontalJustify.RIGHT,
        center: ChordSymbolHorizontalJustify.CENTER,
        centerStem: ChordSymbolHorizontalJustify.CENTER_STEM,
    };
    ChordSymbol.VerticalJustify = ChordSymbolVerticalJustify;
    ChordSymbol.VerticalJustifyString = {
        top: ChordSymbolVerticalJustify.TOP,
        above: ChordSymbolVerticalJustify.TOP,
        below: ChordSymbolVerticalJustify.BOTTOM,
        bottom: ChordSymbolVerticalJustify.BOTTOM,
    };
    ChordSymbol.glyphs = {
        diminished: Glyphs.csymDiminished,
        dim: Glyphs.csymDiminished,
        halfDiminished: Glyphs.csymHalfDiminished,
        '+': Glyphs.csymAugmented,
        augmented: Glyphs.csymAugmented,
        majorSeventh: Glyphs.csymMajorSeventh,
        minor: Glyphs.csymMinor,
        '-': Glyphs.csymMinor,
        '(': '(',
        leftParen: '(',
        ')': ')',
        rightParen: ')',
        leftBracket: Glyphs.csymBracketLeftTall,
        rightBracket: Glyphs.csymBracketRightTall,
        leftParenTall: '(',
        rightParenTall: ')',
        '/': Glyphs.csymDiagonalArrangementSlash,
        over: Glyphs.csymDiagonalArrangementSlash,
        '#': Glyphs.csymAccidentalSharp,
        b: Glyphs.csymAccidentalFlat,
    };
    ChordSymbol.symbolModifiers = SymbolModifiers;

    function L$f(...args) {
        if (Clef.DEBUG)
            log('VexFlow.Clef', args);
    }
    class Clef extends StaveModifier {
        static get CATEGORY() {
            return "Clef";
        }
        static get types() {
            const { gClef, fClef, cClef, unpitchedPercussionClef1, sixStringTabClef } = Glyphs;
            return {
                treble: {
                    code: gClef,
                    line: 3,
                },
                bass: {
                    code: fClef,
                    line: 1,
                },
                alto: {
                    code: cClef,
                    line: 2,
                },
                tenor: {
                    code: cClef,
                    line: 1,
                },
                percussion: {
                    code: unpitchedPercussionClef1,
                    line: 2,
                },
                soprano: {
                    code: cClef,
                    line: 4,
                },
                'mezzo-soprano': {
                    code: cClef,
                    line: 3,
                },
                'baritone-c': {
                    code: cClef,
                    line: 0,
                },
                'baritone-f': {
                    code: fClef,
                    line: 2,
                },
                subbass: {
                    code: fClef,
                    line: 0,
                },
                french: {
                    code: gClef,
                    line: 4,
                },
                tab: {
                    code: sixStringTabClef,
                    line: 2.5,
                },
            };
        }
        constructor(type, size, annotation) {
            super();
            this.code = Clef.types['treble'].code;
            this.line = Clef.types['treble'].line;
            this.size = 'default';
            this.type = 'treble';
            this.setPosition(StaveModifierPosition.BEGIN);
            this.setType(type, size, annotation);
            L$f('Creating clef:', type);
        }
        setType(type, size = 'default', annotation) {
            this.type = type;
            this.code = Clef.types[type].code;
            this.line = Clef.types[type].line;
            this.size = size !== null && size !== void 0 ? size : 'default';
            if (annotation === '8va') {
                if (this.code === Glyphs.gClef) {
                    this.code = Glyphs.gClef8va;
                }
                if (this.code === Glyphs.fClef) {
                    this.code = Glyphs.fClef8va;
                }
            }
            if (annotation === '8vb') {
                if (this.code === Glyphs.gClef) {
                    this.code = Glyphs.gClef8vb;
                }
                if (this.code === Glyphs.fClef) {
                    this.code = Glyphs.fClef8vb;
                }
            }
            this.text = this.code;
            this.fontInfo.size = Math.floor(Clef.getPoint(this.size));
            return this;
        }
        static getPoint(size) {
            return size === 'default' ? Metrics.get('fontSize') : (Metrics.get('fontSize') * 2) / 3;
        }
        setStave(stave) {
            this.stave = stave;
            return this;
        }
        draw() {
            const stave = this.checkStave();
            const ctx = stave.checkContext();
            this.setRendered();
            ctx.openGroup('clef', this.getAttribute('id'));
            this.y = stave.getYForLine(this.line);
            this.renderText(ctx, 0, 0);
            ctx.closeGroup();
        }
    }
    Clef.DEBUG = false;

    class ClefNote extends Note {
        static get CATEGORY() {
            return "ClefNote";
        }
        constructor(type, size = 'default', annotation) {
            super({ duration: 'b' });
            this.setType(type, size, annotation);
            this.ignoreTicks = true;
        }
        setType(type, size, annotation) {
            this.clef = new Clef(type, size, annotation);
            this.setWidth(this.clef.getWidth());
            return this;
        }
        getClef() {
            return this.clef;
        }
        preFormat() {
            this.preFormatted = true;
            return this;
        }
        draw() {
            const stave = this.checkStave();
            const ctx = this.checkContext();
            this.setRendered();
            this.clef.setX(this.getAbsoluteX());
            this.clef.setY(stave.getYForLine(this.clef.line));
            this.clef.renderText(ctx, 0, 0);
        }
        getBoundingBox() {
            return this.clef.getBoundingBox();
        }
    }

    class TickContext {
        static getNextContext(tContext) {
            const contexts = tContext.tContexts;
            const index = contexts.indexOf(tContext);
            if (index + 1 < contexts.length)
                return contexts[index + 1];
        }
        constructor(options) {
            var _a;
            this.preFormatted = false;
            this.postFormatted = false;
            this.tickID = (_a = options === null || options === void 0 ? void 0 : options.tickID) !== null && _a !== void 0 ? _a : 0;
            this.currentTick = new Fraction(0, 1);
            this.maxTicks = new Fraction(0, 1);
            this.maxTickable = undefined;
            this.minTicks = undefined;
            this.minTickable = undefined;
            this.padding = 1;
            this.x = 0;
            this.xBase = 0;
            this.xOffset = 0;
            this.tickables = [];
            this.tickablesByVoice = {};
            this.notePx = 0;
            this.glyphPx = 0;
            this.leftDisplacedHeadPx = 0;
            this.rightDisplacedHeadPx = 0;
            this.modLeftPx = 0;
            this.modRightPx = 0;
            this.totalLeftPx = 0;
            this.totalRightPx = 0;
            this.tContexts = [];
            this.width = 0;
            this.formatterMetrics = {
                freedom: { left: 0, right: 0 },
            };
        }
        getTickID() {
            return this.tickID;
        }
        getX() {
            return this.x;
        }
        setX(x) {
            this.x = x;
            this.xBase = x;
            this.xOffset = 0;
            return this;
        }
        getXBase() {
            return this.xBase;
        }
        setXBase(xBase) {
            this.xBase = xBase;
            this.x = xBase + this.xOffset;
        }
        getXOffset() {
            return this.xOffset;
        }
        setXOffset(xOffset) {
            this.xOffset = xOffset;
            this.x = this.xBase + xOffset;
        }
        getWidth() {
            return this.width + this.padding * 2;
        }
        setPadding(padding) {
            this.padding = padding;
            return this;
        }
        getMaxTicks() {
            return this.maxTicks;
        }
        getMinTicks() {
            return this.minTicks;
        }
        getMaxTickable() {
            return this.maxTickable;
        }
        getMinTickable() {
            return this.minTickable;
        }
        getTickables() {
            return this.tickables;
        }
        getTickableForVoice(voiceIndex) {
            return this.tickablesByVoice[voiceIndex];
        }
        getTickablesByVoice() {
            return this.tickablesByVoice;
        }
        getCenterAlignedTickables() {
            return this.tickables.filter((tickable) => tickable.isCenterAligned());
        }
        getMetrics() {
            const { width, glyphPx, notePx, leftDisplacedHeadPx, rightDisplacedHeadPx, modLeftPx, modRightPx, totalLeftPx, totalRightPx, } = this;
            return {
                width,
                glyphPx,
                notePx,
                leftDisplacedHeadPx,
                rightDisplacedHeadPx,
                modLeftPx,
                modRightPx,
                totalLeftPx,
                totalRightPx,
            };
        }
        getCurrentTick() {
            return this.currentTick;
        }
        setCurrentTick(tick) {
            this.currentTick = tick;
            this.preFormatted = false;
        }
        addTickable(tickable, voiceIndex) {
            if (!tickable) {
                throw new RuntimeError('BadArgument', 'Invalid tickable added.');
            }
            if (!tickable.shouldIgnoreTicks()) {
                const ticks = tickable.getTicks();
                if (ticks.greaterThan(this.maxTicks)) {
                    this.maxTicks = ticks.clone();
                    this.maxTickable = tickable;
                }
                if (this.minTicks === undefined) {
                    this.minTicks = ticks.clone();
                    this.minTickable = tickable;
                }
                else if (ticks.lessThan(this.minTicks)) {
                    this.minTicks = ticks.clone();
                    this.minTickable = tickable;
                }
            }
            tickable.setTickContext(this);
            this.tickables.push(tickable);
            this.tickablesByVoice[voiceIndex !== null && voiceIndex !== void 0 ? voiceIndex : 0] = tickable;
            this.preFormatted = false;
            return this;
        }
        preFormat() {
            var _a;
            if (this.preFormatted)
                return this;
            for (let i = 0; i < this.tickables.length; ++i) {
                const tickable = this.tickables[i];
                tickable.preFormat();
                const metrics = tickable.getMetrics();
                this.leftDisplacedHeadPx = Math.max(this.leftDisplacedHeadPx, metrics.leftDisplacedHeadPx);
                this.rightDisplacedHeadPx = Math.max(this.rightDisplacedHeadPx, metrics.rightDisplacedHeadPx);
                this.notePx = Math.max(this.notePx, metrics.notePx);
                this.glyphPx = Math.max(this.glyphPx, (_a = metrics.glyphWidth) !== null && _a !== void 0 ? _a : 0);
                this.modLeftPx = Math.max(this.modLeftPx, metrics.modLeftPx);
                this.modRightPx = Math.max(this.modRightPx, metrics.modRightPx);
                this.totalLeftPx = Math.max(this.totalLeftPx, metrics.modLeftPx + metrics.leftDisplacedHeadPx);
                this.totalRightPx = Math.max(this.totalRightPx, metrics.modRightPx + metrics.rightDisplacedHeadPx);
                this.width = this.notePx + this.totalLeftPx + this.totalRightPx;
            }
            return this;
        }
        postFormat() {
            if (this.postFormatted)
                return this;
            this.postFormatted = true;
            return this;
        }
        getFormatterMetrics() {
            return this.formatterMetrics;
        }
        move(shift, prev, next) {
            this.setX(this.getX() + shift);
            this.getFormatterMetrics().freedom.left += shift;
            this.getFormatterMetrics().freedom.right -= shift;
            if (prev)
                prev.getFormatterMetrics().freedom.right += shift;
            if (next)
                next.getFormatterMetrics().freedom.left -= shift;
        }
        getDeviationCost() {
            return sumArray(this.tickables.map((t) => t.getFormatterMetrics().space.deviation));
        }
        getAverageDeviationCost() {
            if (!this.tickables.length)
                return 0;
            return this.getDeviationCost() / this.tickables.length;
        }
    }

    function L$e(...args) {
        if (Crescendo.DEBUG)
            log('VexFlow.Crescendo', args);
    }
    function renderHairpin(ctx, params) {
        const beginX = params.beginX;
        const endX = params.endX;
        const y = params.y;
        const halfHeight = params.height / 2;
        ctx.beginPath();
        if (params.reverse) {
            ctx.moveTo(beginX, y - halfHeight);
            ctx.lineTo(endX, y);
            ctx.lineTo(beginX, y + halfHeight);
        }
        else {
            ctx.moveTo(endX, y - halfHeight);
            ctx.lineTo(beginX, y);
            ctx.lineTo(endX, y + halfHeight);
        }
        ctx.stroke();
        ctx.closePath();
    }
    class Crescendo extends Note {
        static get CATEGORY() {
            return "Crescendo";
        }
        constructor(noteStruct) {
            var _a;
            super(noteStruct);
            this.options = {
                extendLeft: 0,
                extendRight: 0,
                yShift: 0,
            };
            this.decrescendo = false;
            this.line = (_a = noteStruct.line) !== null && _a !== void 0 ? _a : 0;
            this.height = 15;
        }
        setLine(line) {
            this.line = line;
            return this;
        }
        setHeight(height) {
            this.height = height;
            return this;
        }
        setDecrescendo(decresc) {
            this.decrescendo = decresc;
            return this;
        }
        preFormat() {
            this.preFormatted = true;
            return this;
        }
        draw() {
            const ctx = this.checkContext();
            const stave = this.checkStave();
            this.setRendered();
            const tickContext = this.getTickContext();
            const nextContext = TickContext.getNextContext(tickContext);
            const beginX = this.getAbsoluteX();
            const endX = nextContext ? nextContext.getX() : stave.getX() + stave.getWidth();
            const y = stave.getYForLine(this.line + -3) + 1;
            L$e('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', beginX - endX);
            renderHairpin(ctx, {
                beginX: beginX - this.options.extendLeft,
                endX: endX + this.options.extendRight,
                y: y + this.options.yShift,
                height: this.height,
                reverse: this.decrescendo,
            });
        }
    }
    Crescendo.DEBUG = false;

    var CurvePosition;
    (function (CurvePosition) {
        CurvePosition[CurvePosition["NEAR_HEAD"] = 1] = "NEAR_HEAD";
        CurvePosition[CurvePosition["NEAR_TOP"] = 2] = "NEAR_TOP";
    })(CurvePosition || (CurvePosition = {}));
    class Curve extends Element {
        static get CATEGORY() {
            return "Curve";
        }
        static get Position() {
            return CurvePosition;
        }
        static get PositionString() {
            return {
                nearHead: CurvePosition.NEAR_HEAD,
                nearTop: CurvePosition.NEAR_TOP,
            };
        }
        constructor(from, to, options) {
            super();
            this.renderOptions = Object.assign({ thickness: 2, xShift: 0, yShift: 10, position: CurvePosition.NEAR_HEAD, positionEnd: CurvePosition.NEAR_HEAD, invert: false, cps: [
                    { x: 0, y: 10 },
                    { x: 0, y: 10 },
                ], openingDirection: 'auto' }, options);
            this.setNotes(from, to);
        }
        setNotes(from, to) {
            if (!from && !to) {
                throw new RuntimeError('BadArguments', 'Curve needs to have either `from` or `to` set.');
            }
            this.from = from;
            this.to = to;
            return this;
        }
        isPartial() {
            return !this.from || !this.to;
        }
        renderCurve(params) {
            var _a, _b;
            const ctx = this.checkContext();
            const xShift = this.renderOptions.xShift;
            const yShift = this.renderOptions.yShift * params.direction;
            const firstX = params.firstX + xShift;
            const firstY = params.firstY + yShift;
            const lastX = params.lastX - xShift;
            const lastY = params.lastY + yShift;
            const thickness = this.renderOptions.thickness;
            const cps = this.renderOptions.cps;
            const { x: cp0x, y: cp0y } = cps[0];
            const { x: cp1x, y: cp1y } = cps[1];
            const controlPointSpacing = (lastX - firstX) / (cps.length + 2);
            ctx.beginPath();
            ctx.moveTo(firstX, firstY);
            ctx.bezierCurveTo(firstX + controlPointSpacing + cp0x, firstY + cp0y * params.direction, lastX - controlPointSpacing + cp1x, lastY + cp1y * params.direction, lastX, lastY);
            if (!((_a = this.style) === null || _a === void 0 ? void 0 : _a.lineDash))
                ctx.bezierCurveTo(lastX - controlPointSpacing + cp1x, lastY + (cp1y + thickness) * params.direction, firstX + controlPointSpacing + cp0x, firstY + (cp0y + thickness) * params.direction, firstX, firstY);
            ctx.stroke();
            ctx.closePath();
            if (!((_b = this.style) === null || _b === void 0 ? void 0 : _b.lineDash))
                ctx.fill();
        }
        draw() {
            this.checkContext();
            this.setRendered();
            const firstNote = this.from;
            const lastNote = this.to;
            let firstX;
            let lastX;
            let firstY;
            let lastY;
            let stemDirection = 0;
            let metric = 'baseY';
            let endMetric = 'baseY';
            function getPosition(position) {
                return typeof position === 'string' ? Curve.PositionString[position] : position;
            }
            const position = getPosition(this.renderOptions.position);
            const positionEnd = getPosition(this.renderOptions.positionEnd);
            if (position === CurvePosition.NEAR_TOP) {
                metric = 'topY';
                endMetric = 'topY';
            }
            if (positionEnd === CurvePosition.NEAR_HEAD) {
                endMetric = 'baseY';
            }
            else if (positionEnd === CurvePosition.NEAR_TOP) {
                endMetric = 'topY';
            }
            if (firstNote) {
                firstX = firstNote.getTieRightX();
                stemDirection = firstNote.getStemDirection();
                firstY = firstNote.getStemExtents()[metric];
            }
            else {
                const stave = lastNote.checkStave();
                firstX = stave.getTieStartX();
                firstY = lastNote.getStemExtents()[metric];
            }
            if (lastNote) {
                lastX = lastNote.getTieLeftX();
                stemDirection = lastNote.getStemDirection();
                lastY = lastNote.getStemExtents()[endMetric];
            }
            else {
                const stave = firstNote.checkStave();
                lastX = stave.getTieEndX();
                lastY = firstNote.getStemExtents()[endMetric];
            }
            if (this.renderOptions.openingDirection === 'up') {
                stemDirection = 1;
            }
            if (this.renderOptions.openingDirection === 'down') {
                stemDirection = -1;
            }
            this.renderCurve({
                firstX,
                lastX,
                firstY,
                lastY,
                direction: stemDirection * (this.renderOptions.invert === true ? -1 : 1),
            });
            return true;
        }
    }

    class Dot extends Modifier$1 {
        static get CATEGORY() {
            return "Dot";
        }
        static getDots(note) {
            return note.getModifiersByType(Dot.CATEGORY);
        }
        static buildAndAttach(notes, options) {
            for (const note of notes) {
                if (options === null || options === void 0 ? void 0 : options.all) {
                    for (let i = 0; i < note.keys.length; i++) {
                        const dot = new Dot();
                        note.addModifier(dot, i);
                    }
                }
                else if ((options === null || options === void 0 ? void 0 : options.index) !== undefined) {
                    const dot = new Dot();
                    note.addModifier(dot, options === null || options === void 0 ? void 0 : options.index);
                }
                else {
                    const dot = new Dot();
                    note.addModifier(dot, 0);
                }
            }
        }
        static format(dots, state) {
            const rightShift = state.rightShift;
            const dotSpacing = 1;
            if (!dots || dots.length === 0)
                return false;
            const dotList = [];
            const maxShiftMap = {};
            for (let i = 0; i < dots.length; ++i) {
                const dot = dots[i];
                const note = dot.getNote();
                let props;
                let shift;
                if (isStaveNote(note)) {
                    const index = dot.checkIndex();
                    props = note.getKeyProps()[index];
                    shift = note.getFirstDotPx();
                }
                else if (isTabNote(note)) {
                    props = { line: 0.5 };
                    shift = rightShift;
                }
                else {
                    throw new RuntimeError('Internal', 'Unexpected instance.');
                }
                const noteId = note.getAttribute('id');
                dotList.push({ line: props.line, note, noteId, dot });
                maxShiftMap[noteId] = Math.max(maxShiftMap[noteId] || shift, shift);
            }
            dotList.sort((a, b) => b.line - a.line);
            let dotShift = rightShift;
            let xWidth = 0;
            let lastLine = null;
            let lastNote = null;
            let prevDottedSpace = null;
            let halfShiftY = 0;
            for (let i = 0; i < dotList.length; ++i) {
                const { dot, note, noteId, line } = dotList[i];
                if (line !== lastLine || note !== lastNote) {
                    dotShift = maxShiftMap[noteId];
                }
                if (!note.isRest() && line !== lastLine) {
                    if (Math.abs(line % 1) === 0.5) {
                        halfShiftY = 0;
                    }
                    else {
                        halfShiftY = 0.5;
                        if (lastNote !== null && !lastNote.isRest() && lastLine !== null && lastLine - line === 0.5) {
                            halfShiftY = -0.5;
                        }
                        else if (line + halfShiftY === prevDottedSpace) {
                            halfShiftY = -0.5;
                        }
                    }
                }
                if (note.isRest()) {
                    dot.dotShiftY += -halfShiftY;
                }
                else {
                    dot.dotShiftY = -halfShiftY;
                }
                prevDottedSpace = line + halfShiftY;
                dot.setXShift(dotShift);
                dotShift += dot.getWidth() + dotSpacing;
                xWidth = dotShift > xWidth ? dotShift : xWidth;
                lastLine = line;
                lastNote = note;
            }
            state.rightShift += xWidth;
            return true;
        }
        constructor() {
            super();
            this.position = Modifier$1.Position.RIGHT;
            this.setText(Glyphs.augmentationDot);
            this.dotShiftY = 0;
        }
        setNote(note) {
            this.note = note;
            this.font = note.font;
            return this;
        }
        setDotShiftY(y) {
            this.dotShiftY = y;
            return this;
        }
        draw() {
            const ctx = this.checkContext();
            const note = this.checkAttachedNote();
            this.setRendered();
            const stave = note.checkStave();
            const lineSpace = stave.getSpacingBetweenLines();
            const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });
            if (isTabNote(note)) {
                start.y = note.getStemExtents().baseY;
            }
            this.x = start.x;
            this.y = start.y + this.dotShiftY * lineSpace;
            this.renderText(ctx, 0, 0);
        }
    }

    class FretHandFinger extends Modifier$1 {
        static get CATEGORY() {
            return "FretHandFinger";
        }
        static format(nums, state) {
            const { leftShift, rightShift } = state;
            const numSpacing = 1;
            if (!nums || nums.length === 0)
                return false;
            const numsList = [];
            let prevNote = null;
            let shiftLeft = 0;
            let shiftRight = 0;
            for (let i = 0; i < nums.length; ++i) {
                const num = nums[i];
                const note = num.getNote();
                const pos = num.getPosition();
                const index = num.checkIndex();
                const props = note.getKeyProps()[index];
                const textHeight = Metrics.get('FretHandFinger.fontSize');
                if (num.position === ModifierPosition.ABOVE) {
                    state.topTextLine += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;
                }
                if (num.position === ModifierPosition.BELOW) {
                    state.textLine += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;
                }
                if (note !== prevNote) {
                    for (let n = 0; n < note.keys.length; ++n) {
                        if (leftShift === 0) {
                            shiftLeft = Math.max(note.getLeftDisplacedHeadPx(), shiftLeft);
                        }
                        if (rightShift === 0) {
                            shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);
                        }
                    }
                    prevNote = note;
                }
                numsList.push({
                    note,
                    num,
                    pos,
                    line: props.line,
                    shiftL: shiftLeft,
                    shiftR: shiftRight,
                });
            }
            numsList.sort((a, b) => b.line - a.line);
            let numShiftL = 0;
            let numShiftR = 0;
            let xWidthL = 0;
            let xWidthR = 0;
            let lastLine = null;
            let lastNote = null;
            for (let i = 0; i < numsList.length; ++i) {
                let numShift = 0;
                const { note, pos, num, line, shiftL, shiftR } = numsList[i];
                if (line !== lastLine || note !== lastNote) {
                    numShiftL = leftShift + shiftL;
                    numShiftR = rightShift + shiftR;
                }
                const numWidth = num.getWidth() + numSpacing;
                if (pos === Modifier$1.Position.LEFT) {
                    num.setXShift(leftShift + numShiftL);
                    numShift = leftShift + numWidth;
                    xWidthL = numShift > xWidthL ? numShift : xWidthL;
                }
                else if (pos === Modifier$1.Position.RIGHT) {
                    num.setXShift(numShiftR);
                    numShift = shiftRight + numWidth;
                    xWidthR = numShift > xWidthR ? numShift : xWidthR;
                }
                lastLine = line;
                lastNote = note;
            }
            state.leftShift += xWidthL;
            state.rightShift += xWidthR;
            return true;
        }
        static easyScoreHook({ fingerings } = {}, note, builder) {
            fingerings === null || fingerings === void 0 ? void 0 : fingerings.split(',').map((fingeringString) => {
                const split = fingeringString.trim().split('.');
                const params = { number: split[0] };
                if (split[1])
                    params.position = split[1];
                return builder.getFactory().Fingering(params);
            }).map((fingering, index) => note.addModifier(fingering, index));
        }
        constructor(finger) {
            super();
            this.setFretHandFinger(finger);
            this.position = Modifier$1.Position.LEFT;
            this.xOffset = 0;
            this.yOffset = 0;
        }
        setFretHandFinger(finger) {
            this.text = finger;
            return this;
        }
        getFretHandFinger() {
            return this.text;
        }
        setOffsetX(x) {
            this.xOffset = x;
            return this;
        }
        setOffsetY(y) {
            this.yOffset = y;
            return this;
        }
        draw() {
            const ctx = this.checkContext();
            const note = this.checkAttachedNote();
            this.setRendered();
            const start = note.getModifierStartXY(this.position, this.index);
            let dotX = start.x + this.xOffset;
            let dotY = start.y + this.yOffset + 5;
            switch (this.position) {
                case Modifier$1.Position.ABOVE:
                    dotX -= 4;
                    dotY -= 12;
                    break;
                case Modifier$1.Position.BELOW:
                    dotX -= 2;
                    dotY += 10;
                    break;
                case Modifier$1.Position.LEFT:
                    dotX -= this.width;
                    break;
                case Modifier$1.Position.RIGHT:
                    dotX += 1;
                    break;
                default:
                    throw new RuntimeError('InvalidPosition', `The position ${this.position} does not exist`);
            }
            this.renderText(ctx, dotX, dotY);
        }
    }

    function L$d(...args) {
        if (Parser$1.DEBUG)
            log('VexFlow.Parser', args);
    }
    const NO_ERROR_POS = -1;
    function flattenMatches(r) {
        if ('matchedString' in r)
            return r.matchedString;
        if ('results' in r)
            return flattenMatches(r.results);
        const results = r;
        if (results.length === 1)
            return flattenMatches(results[0]);
        if (results.length === 0)
            return null;
        return results.map(flattenMatches);
    }
    let Parser$1 = class Parser {
        constructor(grammar) {
            this.grammar = grammar;
            this.line = '';
            this.pos = 0;
            this.errorPos = NO_ERROR_POS;
        }
        parse(line) {
            this.line = line;
            this.pos = 0;
            this.errorPos = NO_ERROR_POS;
            const result = this.expect(this.grammar.begin());
            result.errorPos = this.errorPos;
            return result;
        }
        matchFail(returnPos) {
            if (this.errorPos === NO_ERROR_POS)
                this.errorPos = this.pos;
            this.pos = returnPos;
        }
        matchSuccess() {
            this.errorPos = NO_ERROR_POS;
        }
        matchToken(token, noSpace = false) {
            const regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\s*)');
            const workingLine = this.line.slice(this.pos);
            const result = workingLine.match(regexp);
            if (result !== null) {
                return {
                    success: true,
                    matchedString: result[2],
                    incrementPos: result[1].length,
                    pos: this.pos,
                };
            }
            else {
                return { success: false, pos: this.pos };
            }
        }
        expectOne(rule, maybe = false) {
            const results = [];
            const pos = this.pos;
            let allMatches = true;
            let oneMatch = false;
            maybe = maybe === true || rule.maybe === true;
            if (rule.expect) {
                for (const next of rule.expect) {
                    const localPos = this.pos;
                    const result = this.expect(next);
                    if (result.success) {
                        results.push(result);
                        oneMatch = true;
                        if (rule.or)
                            break;
                    }
                    else {
                        allMatches = false;
                        if (!rule.or) {
                            this.pos = localPos;
                            break;
                        }
                    }
                }
            }
            const gotOne = (rule.or && oneMatch) || allMatches;
            const success = gotOne || maybe === true;
            const numMatches = gotOne ? 1 : 0;
            if (maybe && !gotOne)
                this.pos = pos;
            if (success) {
                this.matchSuccess();
            }
            else {
                this.matchFail(pos);
            }
            return { success, results, numMatches };
        }
        expectOneOrMore(rule, maybe = false) {
            const results = [];
            const pos = this.pos;
            let numMatches = 0;
            let more = true;
            do {
                const result = this.expectOne(rule);
                if (result.success && result.results) {
                    numMatches++;
                    results.push(result.results);
                }
                else {
                    more = false;
                }
            } while (more);
            const success = numMatches > 0 || maybe === true;
            if (maybe && !(numMatches > 0))
                this.pos = pos;
            if (success) {
                this.matchSuccess();
            }
            else {
                this.matchFail(pos);
            }
            return { success, results, numMatches };
        }
        expectZeroOrMore(rule) {
            return this.expectOneOrMore(rule, true);
        }
        expect(ruleFunc) {
            L$d('Evaluating rule function:', ruleFunc);
            if (!ruleFunc) {
                throw new RuntimeError('Invalid rule function');
            }
            let result;
            const rule = ruleFunc.bind(this.grammar)();
            if (rule.token) {
                result = this.matchToken(rule.token, rule.noSpace === true);
                if (result.success) {
                    this.pos += result.incrementPos;
                }
            }
            else if (rule.expect) {
                if (rule.oneOrMore) {
                    result = this.expectOneOrMore(rule);
                }
                else if (rule.zeroOrMore) {
                    result = this.expectZeroOrMore(rule);
                }
                else {
                    result = this.expectOne(rule);
                }
            }
            else {
                L$d(rule);
                throw new RuntimeError('Bad grammar! No `token` or `expect` property ' + rule);
            }
            const matches = [];
            result.matches = matches;
            if (result.results) {
                result.results.forEach((r) => matches.push(flattenMatches(r)));
            }
            if (rule.run && result.success) {
                rule.run({ matches });
            }
            return result;
        }
    };
    Parser$1.DEBUG = false;

    function L$c(...args) {
        if (EasyScore.DEBUG)
            log('VexFlow.EasyScore', args);
    }
    class EasyScoreGrammar {
        constructor(builder) {
            this.builder = builder;
        }
        begin() {
            return this.LINE;
        }
        LINE() {
            return {
                expect: [this.PIECE, this.PIECES, this.EOL],
            };
        }
        PIECE() {
            return {
                expect: [this.CHORDORNOTE, this.PARAMS],
                run: () => this.builder.commitPiece(),
            };
        }
        PIECES() {
            return {
                expect: [this.COMMA, this.PIECE],
                zeroOrMore: true,
            };
        }
        PARAMS() {
            return {
                expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],
            };
        }
        CHORDORNOTE() {
            return {
                expect: [this.CHORD, this.SINGLENOTE],
                or: true,
            };
        }
        CHORD() {
            return {
                expect: [this.LPAREN, this.NOTES, this.RPAREN],
                run: (state) => this.builder.addChord(state.matches[1]),
            };
        }
        NOTES() {
            return {
                expect: [this.NOTE],
                oneOrMore: true,
            };
        }
        NOTE() {
            return {
                expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],
            };
        }
        SINGLENOTE() {
            return {
                expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],
                run: (state) => {
                    const s = state;
                    this.builder.addSingleNote(s.matches[0], s.matches[1], s.matches[2]);
                },
            };
        }
        ACCIDENTAL() {
            return {
                expect: [this.MICROTONES, this.ACCIDENTALS],
                maybe: true,
                or: true,
            };
        }
        DOTS() {
            return {
                expect: [this.DOT],
                zeroOrMore: true,
                run: (state) => this.builder.setNoteDots(state.matches),
            };
        }
        TYPE() {
            return {
                expect: [this.SLASH, this.MAYBESLASH, this.TYPES],
                maybe: true,
                run: (state) => this.builder.setNoteType(state.matches[2]),
            };
        }
        DURATION() {
            return {
                expect: [this.SLASH, this.DURATIONS],
                maybe: true,
                run: (state) => this.builder.setNoteDuration(state.matches[1]),
            };
        }
        OPTS() {
            return {
                expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],
                maybe: true,
            };
        }
        KEYVALS() {
            return {
                expect: [this.COMMA, this.KEYVAL],
                zeroOrMore: true,
            };
        }
        KEYVAL() {
            const unquote = (str) => str.slice(1, -1);
            return {
                expect: [this.KEY, this.EQUALS, this.VAL],
                run: (state) => this.builder.addNoteOption(state.matches[0], unquote(state.matches[2])),
            };
        }
        VAL() {
            return {
                expect: [this.SVAL, this.DVAL],
                or: true,
            };
        }
        KEY() {
            return { token: '[a-zA-Z][a-zA-Z0-9]*' };
        }
        DVAL() {
            return { token: '["][^"]*["]' };
        }
        SVAL() {
            return { token: "['][^']*[']" };
        }
        NOTENAME() {
            return { token: '[a-gA-G]' };
        }
        OCTAVE() {
            return { token: '[0-9]+' };
        }
        ACCIDENTALS() {
            return { token: 'bb|b|##|#|n' };
        }
        MICROTONES() {
            return { token: 'bbs|bss|bs|db|d|\\+\\+-|\\+-|\\+\\+|\\+|k|o' };
        }
        DURATIONS() {
            return { token: '[0-9whq]+' };
        }
        TYPES() {
            return { token: '[rRsSmMhHgG]' };
        }
        LPAREN() {
            return { token: '[(]' };
        }
        RPAREN() {
            return { token: '[)]' };
        }
        COMMA() {
            return { token: '[,]' };
        }
        DOT() {
            return { token: '[.]' };
        }
        SLASH() {
            return { token: '[/]' };
        }
        MAYBESLASH() {
            return { token: '[/]?' };
        }
        EQUALS() {
            return { token: '[=]' };
        }
        LBRACKET() {
            return { token: '\\[' };
        }
        RBRACKET() {
            return { token: '\\]' };
        }
        EOL() {
            return { token: '$' };
        }
    }
    class Piece {
        constructor(duration) {
            this.chord = [];
            this.dots = 0;
            this.options = {};
            this.duration = duration;
        }
    }
    class Builder {
        constructor(factory) {
            this.commitHooks = [];
            this.factory = factory;
            this.reset();
        }
        reset(options) {
            this.options = Object.assign({ stem: 'auto', clef: 'treble' }, options);
            this.elements = { notes: [], accidentals: [] };
            this.rollingDuration = '8';
            this.resetPiece();
        }
        getFactory() {
            return this.factory;
        }
        getElements() {
            return this.elements;
        }
        addCommitHook(commitHook) {
            this.commitHooks.push(commitHook);
        }
        resetPiece() {
            L$c('resetPiece');
            this.piece = new Piece(this.rollingDuration);
        }
        setNoteDots(dots) {
            L$c('setNoteDots:', dots);
            if (dots)
                this.piece.dots = dots.length;
        }
        setNoteDuration(duration) {
            L$c('setNoteDuration:', duration);
            this.rollingDuration = this.piece.duration = duration || this.rollingDuration;
        }
        setNoteType(type) {
            L$c('setNoteType:', type);
            if (type)
                this.piece.type = type;
        }
        addNoteOption(key, value) {
            L$c('addNoteOption: key:', key, 'value:', value);
            this.piece.options[key] = value;
        }
        addNote(key, accid, octave) {
            L$c('addNote:', key, accid, octave);
            this.piece.chord.push({
                key: key,
                accid,
                octave,
            });
        }
        addSingleNote(key, accid, octave) {
            L$c('addSingleNote:', key, accid, octave);
            this.addNote(key, accid, octave);
        }
        addChord(notes) {
            L$c('startChord');
            if (typeof notes[0] !== 'object') {
                this.addSingleNote(notes[0]);
            }
            else {
                notes.forEach((n) => {
                    if (n)
                        this.addNote(...n);
                });
            }
            L$c('endChord');
        }
        commitPiece() {
            L$c('commitPiece');
            const { factory } = this;
            if (!factory)
                return;
            const options = Object.assign(Object.assign({}, this.options), this.piece.options);
            const stem = defined(options.stem, 'BadArguments', 'options.stem is not defined').toLowerCase();
            const clef = defined(options.clef, 'BadArguments', 'options.clef is not defined').toLowerCase();
            const { chord, duration, dots, type } = this.piece;
            const standardAccidentals = Music.accidentals;
            const keys = chord.map((notePiece) => {
                var _a;
                return notePiece.key +
                    (standardAccidentals.includes((_a = notePiece.accid) !== null && _a !== void 0 ? _a : '') ? notePiece.accid : '') +
                    '/' +
                    notePiece.octave;
            });
            const autoStem = stem === 'auto';
            const note = (type === null || type === void 0 ? void 0 : type.toLowerCase()) === 'g'
                ? factory.GhostNote({ duration, dots })
                : factory.StaveNote({ keys, duration, dots, type, clef, autoStem });
            if (!autoStem)
                note.setStemDirection(stem === 'up' ? Stem.UP : Stem.DOWN);
            const accidentals = [];
            chord.forEach((notePiece, index) => {
                const accid = notePiece.accid;
                if (typeof accid === 'string') {
                    const accidental = factory.Accidental({ type: accid });
                    note.addModifier(accidental, index);
                    accidentals.push(accidental);
                }
                else {
                    accidentals.push(undefined);
                }
            });
            for (let i = 0; i < dots; i++)
                Dot.buildAndAttach([note], { all: true });
            this.commitHooks.forEach((commitHook) => commitHook(options, note, this));
            this.elements.notes.push(note);
            this.elements.accidentals.push(accidentals);
            this.resetPiece();
        }
    }
    function setId(options, note) {
        if (options.id === undefined)
            return;
        note.setAttribute('id', options.id);
    }
    const commaSeparatedRegex = /\s*,\s*/;
    function setClass(options, note) {
        if (options.class === undefined)
            return;
        options.class.split(commaSeparatedRegex).forEach((className) => note.addClass(className));
    }
    class EasyScore {
        constructor(options = {}) {
            this.defaults = {
                clef: 'treble',
                time: '4/4',
                stem: 'auto',
            };
            this.setOptions(options);
        }
        set(defaults) {
            this.defaults = Object.assign(Object.assign({}, this.defaults), defaults);
            return this;
        }
        setOptions(options) {
            var _a, _b;
            const factory = options.factory;
            const builder = (_a = options.builder) !== null && _a !== void 0 ? _a : new Builder(factory);
            this.options = Object.assign(Object.assign({ commitHooks: [setId, setClass, Articulation.easyScoreHook, FretHandFinger.easyScoreHook], throwOnError: false }, options), { factory,
                builder });
            this.factory = factory;
            this.builder = builder;
            this.grammar = new EasyScoreGrammar(this.builder);
            this.parser = new Parser$1(this.grammar);
            (_b = this.options.commitHooks) === null || _b === void 0 ? void 0 : _b.forEach((commitHook) => this.addCommitHook(commitHook));
            return this;
        }
        setContext(context) {
            this.factory.setContext(context);
            return this;
        }
        parse(line, options = {}) {
            this.builder.reset(options);
            const result = this.parser.parse(line);
            if (!result.success && this.options.throwOnError) {
                L$c(result);
                throw new RuntimeError('Error parsing line: ' + line);
            }
            return result;
        }
        beam(notes, options) {
            this.factory.Beam({ notes, options });
            return notes;
        }
        tuplet(notes, options) {
            this.factory.Tuplet({ notes, options });
            return notes;
        }
        notes(line, options = {}) {
            options = Object.assign({ clef: this.defaults.clef, stem: this.defaults.stem }, options);
            this.parse(line, options);
            return this.builder.getElements().notes;
        }
        voice(notes, options = {}) {
            options = Object.assign({ time: this.defaults.time }, options);
            return this.factory.Voice(options).addTickables(notes);
        }
        addCommitHook(commitHook) {
            this.builder.addCommitHook(commitHook);
        }
    }
    EasyScore.DEBUG = false;

    function L$b(...args) {
        if (NoteHead.DEBUG)
            log('VexFlow.NoteHead', args);
    }
    class NoteHead extends Note {
        static get CATEGORY() {
            return "NoteHead";
        }
        constructor(noteStruct) {
            var _a;
            super(noteStruct);
            this.customGlyph = false;
            this.ledger = {
                '\ue4e3': '\ue4f4',
                '\ue4e4': '\ue4f5',
            };
            this.index = noteStruct.index;
            this.x = noteStruct.x || 0;
            this.y = noteStruct.y || 0;
            if (noteStruct.noteType)
                this.noteType = noteStruct.noteType;
            this.displaced = noteStruct.displaced || false;
            this.stemDirection = noteStruct.stemDirection || Stem.UP;
            this.line = noteStruct.line || 0;
            this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);
            defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);
            if ((this.line > 5 || this.line < 0) && this.ledger[this.glyphProps.codeHead]) {
                this.glyphProps.codeHead = this.ledger[this.glyphProps.codeHead];
            }
            this.text = this.glyphProps.codeHead;
            if (noteStruct.customGlyphCode) {
                this.customGlyph = true;
                this.text = noteStruct.customGlyphCode;
            }
            this.setStyle((_a = noteStruct.style) !== null && _a !== void 0 ? _a : {});
            this.slashed = noteStruct.slashed || false;
            this.renderOptions = Object.assign({}, this.renderOptions);
        }
        getWidth() {
            return this.width;
        }
        isDisplaced() {
            return this.displaced === true;
        }
        getLine() {
            return this.line;
        }
        setLine(line) {
            this.line = line;
            return this;
        }
        getAbsoluteX() {
            const x = !this.preFormatted ? this.x : super.getAbsoluteX();
            const displacementStemAdjustment = Stem.WIDTH / 2;
            return x + (this.displaced ? (this.width - displacementStemAdjustment) * this.stemDirection : 0);
        }
        setStave(stave) {
            const line = this.getLine();
            this.stave = stave;
            if (this.stave) {
                this.setY(this.stave.getYForNote(line));
                this.setContext(this.stave.getContext());
            }
            return this;
        }
        preFormat() {
            if (this.preFormatted)
                return this;
            this.preFormatted = true;
            return this;
        }
        draw() {
            var _a;
            const ctx = this.checkContext();
            this.setRendered();
            ctx.openGroup('notehead', this.getAttribute('id'));
            L$b("Drawing note head '", this.noteType, this.duration, "' at", this.x, this.y);
            this.x = this.getAbsoluteX();
            this.renderText(ctx, 0, 0);
            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.drawModifiers(this);
            ctx.closeGroup();
        }
    }
    NoteHead.DEBUG = false;

    function L$a(...args) {
        if (Flag.DEBUG)
            log('VexFlow.Flag', args);
    }
    class Flag extends Element {
        static get CATEGORY() {
            return "Flag";
        }
        draw() {
            const ctx = this.checkContext();
            this.setRendered();
            ctx.openGroup('flag', this.getAttribute('id'));
            L$a("Drawing flag '", this.text, "' at", this.x, this.y);
            this.renderText(ctx, 0, 0);
            ctx.closeGroup();
        }
    }
    Flag.DEBUG = false;

    class StemmableNote extends Note {
        static get CATEGORY() {
            return "StemmableNote";
        }
        constructor(noteStruct) {
            super(noteStruct);
            this.flag = new Flag();
        }
        getStem() {
            return this.stem;
        }
        checkStem() {
            if (!this.stem) {
                throw new RuntimeError('NoStem', 'No stem attached to instance');
            }
            return this.stem;
        }
        setStem(stem) {
            this.stem = stem;
            this.addChild(stem);
            return this;
        }
        buildStem() {
            const stem = new Stem();
            this.setStem(stem);
            return this;
        }
        buildFlag() {
            var _a, _b, _c;
            const { glyphProps } = this;
            if (this.hasFlag()) {
                const flagCode = this.getStemDirection() === Stem.DOWN
                    ? String.fromCodePoint(((_b = (_a = glyphProps.codeFlagUp) === null || _a === void 0 ? void 0 : _a.codePointAt(0)) !== null && _b !== void 0 ? _b : -1) + 1)
                    : ((_c = glyphProps.codeFlagUp) !== null && _c !== void 0 ? _c : Glyphs.null);
                this.flag.setText(flagCode);
                this.flag.fontInfo = this.fontInfo;
            }
        }
        getBaseCustomNoteHeadGlyphProps() {
            if (this.getStemDirection() === Stem.DOWN) {
                return this.customGlyphs[this.customGlyphs.length - 1];
            }
            else {
                return this.customGlyphs[0];
            }
        }
        getStemLength() {
            return Stem.HEIGHT + this.getStemExtension();
        }
        getBeamCount() {
            const glyphProps = this.getGlyphProps();
            if (glyphProps) {
                return glyphProps.beamCount;
            }
            else {
                return 0;
            }
        }
        getStemMinimumLength() {
            const frac = Tables.durationToFraction(this.duration);
            const beamIsUndefined = this.beam === undefined;
            let length = frac.value() <= 1 ? 0 : 20;
            switch (this.duration) {
                case '8':
                case '16':
                    length = beamIsUndefined ? 35 : 25;
                    break;
                case '32':
                    length = beamIsUndefined ? 45 : 35;
                    break;
                case '64':
                    length = beamIsUndefined ? 50 : 40;
                    break;
                case '128':
                    length = beamIsUndefined ? 55 : 45;
                    break;
            }
            return length;
        }
        getStemDirection() {
            if (!this.stemDirection)
                throw new RuntimeError('NoStem', 'No stem attached to this note.');
            return this.stemDirection;
        }
        setStemDirection(direction) {
            if (!direction)
                direction = Stem.UP;
            if (direction !== Stem.UP && direction !== Stem.DOWN) {
                throw new RuntimeError('BadArgument', `Invalid stem direction: ${direction}`);
            }
            this.stemDirection = direction;
            this.reset();
            if (this.hasFlag()) {
                this.buildFlag();
            }
            this.beam = undefined;
            if (this.stem) {
                this.stem.setDirection(direction);
                this.stem.setExtension(this.getStemExtension());
            }
            if (this.preFormatted) {
                this.preFormat();
            }
            return this;
        }
        getStemX() {
            const xBegin = this.getAbsoluteX() + this.xShift;
            const xEnd = this.getAbsoluteX() + this.xShift + this.getGlyphWidth();
            const stemX = this.stemDirection === Stem.DOWN ? xBegin : xEnd;
            return stemX;
        }
        getCenterGlyphX() {
            return this.getAbsoluteX() + this.xShift + this.getGlyphWidth() / 2;
        }
        getStemExtension() {
            const glyphProps = this.getGlyphProps();
            const flagHeight = this.flag.getHeight();
            const scale = this.getFontScale();
            if (this.stemExtensionOverride !== undefined) {
                return this.stemExtensionOverride;
            }
            if (this.beam) {
                return glyphProps.stemBeamExtension * scale;
            }
            return flagHeight > Stem.HEIGHT * scale ? flagHeight - Stem.HEIGHT * scale : 0;
        }
        setStemLength(height) {
            this.stemExtensionOverride = height - Stem.HEIGHT;
            return this;
        }
        getStemExtents() {
            if (!this.stem)
                throw new RuntimeError('NoStem', 'No stem attached to this note.');
            return this.stem.getExtents();
        }
        getYForTopText(textLine) {
            const stave = this.checkStave();
            if (this.hasStem()) {
                const extents = this.getStemExtents();
                if (!extents)
                    throw new RuntimeError('InvalidState', 'Stem does not have extents.');
                return Math.min(stave.getYForTopText(textLine), extents.topY - this.renderOptions.annotationSpacing * (textLine + 1));
            }
            else {
                return stave.getYForTopText(textLine);
            }
        }
        getYForBottomText(textLine) {
            const stave = this.checkStave();
            if (this.hasStem()) {
                const extents = this.getStemExtents();
                if (!extents)
                    throw new RuntimeError('InvalidState', 'Stem does not have extents.');
                return Math.max(stave.getYForTopText(textLine), extents.baseY + this.renderOptions.annotationSpacing * textLine);
            }
            else {
                return stave.getYForBottomText(textLine);
            }
        }
        hasFlag() {
            return this.glyphProps.codeFlagUp !== undefined && !this.beam && !this.isRest();
        }
        postFormat() {
            var _a;
            (_a = this.beam) === null || _a === void 0 ? void 0 : _a.postFormat();
            this.postFormatted = true;
            return this;
        }
        drawStem(stemOptions) {
            var _a;
            this.checkContext();
            this.setRendered();
            this.setStem(new Stem(stemOptions));
            (_a = this.stem) === null || _a === void 0 ? void 0 : _a.setContext(this.getContext()).drawWithStyle();
        }
    }

    function L$9(...args) {
        if (StaveNote.DEBUG)
            log('VexFlow.StaveNote', args);
    }
    const isInnerNoteIndex = (note, index) => index === (note.getStemDirection() === Stem.UP ? note.keyProps.length - 1 : 0);
    function shiftRestVertical(rest, note, dir) {
        const delta = dir;
        rest.line += delta;
        rest.maxLine += delta;
        rest.minLine += delta;
        rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);
    }
    function centerRest(rest, noteU, noteL) {
        const delta = rest.line - midLine(noteU.minLine, noteL.maxLine);
        rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);
        rest.line -= delta;
        rest.maxLine -= delta;
        rest.minLine -= delta;
    }
    class StaveNote extends StemmableNote {
        static get CATEGORY() {
            return "StaveNote";
        }
        static get LEDGER_LINE_OFFSET() {
            return 3;
        }
        static get minNoteheadPadding() {
            return Metrics.get('NoteHead.minPadding');
        }
        static format(notes, state) {
            if (!notes || notes.length < 2)
                return false;
            const notesList = [];
            for (let i = 0; i < notes.length; i++) {
                const props = notes[i].sortedKeyProps;
                const line = props[0].keyProps.line;
                let minL = props[props.length - 1].keyProps.line;
                const stemDirection = notes[i].getStemDirection();
                const stemMax = notes[i].getStemLength() / 10;
                const stemMin = notes[i].getStemMinimumLength() / 10;
                let maxL;
                if (notes[i].isRest()) {
                    maxL =
                        line +
                            Math.ceil(notes[i]._noteHeads[0].getTextMetrics().actualBoundingBoxAscent / Tables.STAVE_LINE_DISTANCE);
                    minL =
                        line -
                            Math.ceil(notes[i]._noteHeads[0].getTextMetrics().actualBoundingBoxDescent / Tables.STAVE_LINE_DISTANCE);
                }
                else {
                    maxL =
                        stemDirection === 1 ? props[props.length - 1].keyProps.line + stemMax : props[props.length - 1].keyProps.line;
                    minL = stemDirection === 1 ? props[0].keyProps.line : props[0].keyProps.line - stemMax;
                }
                notesList.push({
                    line: props[0].keyProps.line,
                    maxLine: maxL,
                    minLine: minL,
                    isrest: notes[i].isRest(),
                    stemDirection,
                    stemMax,
                    stemMin,
                    voiceShift: notes[i].getVoiceShiftWidth(),
                    isDisplaced: notes[i].isDisplaced(),
                    note: notes[i],
                });
            }
            let voices = 0;
            let noteU = undefined;
            let noteM = undefined;
            let noteL = undefined;
            const draw = [false, false, false];
            for (let i = 0; i < notesList.length; i++) {
                draw[i] = notesList[i].note.renderOptions.draw !== false;
            }
            if (draw[0] && draw[1] && draw[2]) {
                voices = 3;
                noteU = notesList[0];
                noteM = notesList[1];
                noteL = notesList[2];
            }
            else if (draw[0] && draw[1]) {
                voices = 2;
                noteU = notesList[0];
                noteL = notesList[1];
            }
            else if (draw[0] && draw[2]) {
                voices = 2;
                noteU = notesList[0];
                noteL = notesList[2];
            }
            else if (draw[1] && draw[2]) {
                voices = 2;
                noteU = notesList[1];
                noteL = notesList[2];
            }
            else {
                return true;
            }
            if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {
                noteU = notesList[1];
                noteL = notesList[0];
            }
            const voiceXShift = Math.max(noteU.voiceShift, noteL.voiceShift);
            let xShift = 0;
            if (voices === 2) {
                const lineSpacing = noteU.note.hasStem() && noteL.note.hasStem() && noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;
                if (noteL.isrest && noteU.isrest && noteU.note.duration === noteL.note.duration) {
                    noteL.note.renderOptions.draw = false;
                }
                else if (noteU.minLine <= noteL.maxLine + lineSpacing) {
                    if (noteU.isrest) {
                        shiftRestVertical(noteU, noteL, 1);
                    }
                    else if (noteL.isrest) {
                        shiftRestVertical(noteL, noteU, -1);
                    }
                    else {
                        const lineDiff = Math.abs(noteU.line - noteL.line);
                        if (noteU.note.hasStem() && noteL.note.hasStem()) {
                            const noteUHead = noteU.note.sortedKeyProps[0].keyProps.code;
                            const noteLHead = noteL.note.sortedKeyProps[noteL.note.sortedKeyProps.length - 1].keyProps.code;
                            if (!Tables.UNISON ||
                                noteUHead !== noteLHead ||
                                noteU.note.getModifiers().filter((item) => item.getCategory() === "Dot" && item.getIndex() === 0)
                                    .length !==
                                    noteL.note.getModifiers().filter((item) => item.getCategory() === "Dot" && item.getIndex() === 0)
                                        .length ||
                                (lineDiff < 1 && lineDiff > 0) ||
                                JSON.stringify(noteU.note.getStyle()) !== JSON.stringify(noteL.note.getStyle())) {
                                xShift = voiceXShift + 2;
                                if (noteU.stemDirection === noteL.stemDirection) {
                                    noteU.note.setXShift(xShift);
                                }
                                else {
                                    noteL.note.setXShift(xShift);
                                }
                            }
                            else if (noteU.note.voice !== noteL.note.voice) {
                                if (noteU.stemDirection === noteL.stemDirection) {
                                    if (noteU.line !== noteL.line) {
                                        xShift = voiceXShift + 2;
                                        noteU.note.setXShift(xShift);
                                    }
                                    else {
                                        if (noteL.stemDirection === 1) {
                                            noteL.stemDirection = -1;
                                            noteL.note.setStemDirection(-1);
                                        }
                                    }
                                }
                            }
                        }
                        else if (lineDiff < 1) {
                            xShift = voiceXShift + 2;
                            if (noteU.note.duration < noteL.note.duration) {
                                noteU.note.setXShift(xShift);
                            }
                            else {
                                noteL.note.setXShift(xShift);
                            }
                        }
                        else if (noteU.note.hasStem()) {
                            noteU.stemDirection = -noteU.note.getStemDirection();
                            noteU.note.setStemDirection(noteU.stemDirection);
                        }
                        else if (noteL.note.hasStem()) {
                            noteL.stemDirection = -noteL.note.getStemDirection();
                            noteL.note.setStemDirection(noteL.stemDirection);
                        }
                    }
                }
                state.rightShift += xShift;
                return true;
            }
            if (!noteM)
                throw new RuntimeError('InvalidState', 'noteM not defined.');
            if (noteM.isrest && !noteU.isrest && !noteL.isrest) {
                if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {
                    const restHeight = noteM.maxLine - noteM.minLine;
                    const space = noteU.minLine - noteL.maxLine;
                    if (restHeight < space) {
                        centerRest(noteM, noteU, noteL);
                    }
                    else {
                        xShift = voiceXShift + 2;
                        noteM.note.setXShift(xShift);
                        if (noteL.note.hasBeam() === false) {
                            noteL.stemDirection = -1;
                            noteL.note.setStemDirection(-1);
                        }
                        if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {
                            noteU.stemDirection = 1;
                            noteU.note.setStemDirection(1);
                        }
                    }
                    state.rightShift += xShift;
                    return true;
                }
            }
            if (noteU.isrest && noteM.isrest && noteL.isrest) {
                noteU.note.renderOptions.draw = false;
                noteL.note.renderOptions.draw = false;
                state.rightShift += xShift;
                return true;
            }
            if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {
                noteM.note.renderOptions.draw = false;
            }
            if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {
                noteM.note.renderOptions.draw = false;
            }
            if (noteU.isrest && noteU.minLine <= noteM.maxLine) {
                shiftRestVertical(noteU, noteM, 1);
            }
            if (noteL.isrest && noteM.minLine <= noteL.maxLine) {
                shiftRestVertical(noteL, noteM, -1);
            }
            if (noteU.minLine <= noteM.maxLine + 0.5 || noteM.minLine <= noteL.maxLine) {
                xShift = voiceXShift + 2;
                noteM.note.setXShift(xShift);
                if (noteL.note.hasBeam() === false) {
                    noteL.stemDirection = -1;
                    noteL.note.setStemDirection(-1);
                }
                if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {
                    noteU.stemDirection = 1;
                    noteU.note.setStemDirection(1);
                }
            }
            state.rightShift += xShift;
            return true;
        }
        static postFormat(notes) {
            if (!notes)
                return false;
            notes.forEach((note) => note.postFormat());
            return true;
        }
        constructor(noteStruct) {
            var _a, _b, _c;
            super(noteStruct);
            this.minLine = 0;
            this.maxLine = 0;
            this.sortedKeyProps = [];
            this.ledgerLineStyle = {};
            this.clef = (_a = noteStruct.clef) !== null && _a !== void 0 ? _a : 'treble';
            this.octaveShift = (_b = noteStruct.octaveShift) !== null && _b !== void 0 ? _b : 0;
            this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);
            defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);
            this.displaced = false;
            this.dotShiftY = 0;
            this.useDefaultHeadX = false;
            this._noteHeads = [];
            this.modifiers = [];
            this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { strokePx: noteStruct.strokePx || StaveNote.LEDGER_LINE_OFFSET });
            this.calculateKeyProps();
            this.buildStem();
            if (noteStruct.autoStem) {
                this.autoStem();
            }
            else {
                this.setStemDirection((_c = noteStruct.stemDirection) !== null && _c !== void 0 ? _c : Stem.UP);
            }
            this.reset();
            this.buildFlag();
        }
        reset() {
            super.reset();
            const noteHeadStyles = this._noteHeads.map((noteHead) => noteHead.getStyle());
            this.buildNoteHeads();
            this._noteHeads.forEach((noteHead, index) => {
                const noteHeadStyle = noteHeadStyles[index];
                if (noteHeadStyle)
                    noteHead.setStyle(noteHeadStyle);
            });
            const stave = this.stave;
            if (stave) {
                this.setStave(stave);
            }
            this.calcNoteDisplacements();
            return this;
        }
        setBeam(beam) {
            this.beam = beam;
            this.calcNoteDisplacements();
            if (this.stem) {
                this.stem.setExtension(this.getStemExtension());
            }
            return this;
        }
        buildStem() {
            this.setStem(new Stem({ hide: this.isRest() }));
            return this;
        }
        buildNoteHeads() {
            this._noteHeads = [];
            const stemDirection = this.getStemDirection();
            const keys = this.getKeys();
            let lastLine = undefined;
            let lineDiff = undefined;
            let displaced = false;
            let start;
            let end;
            let step;
            if (stemDirection === Stem.UP) {
                start = 0;
                end = keys.length;
                step = 1;
            }
            else {
                start = keys.length - 1;
                end = -1;
                step = -1;
            }
            for (let i = start; i !== end; i += step) {
                const noteProps = this.sortedKeyProps[i].keyProps;
                const line = noteProps.line;
                if (lastLine === undefined) {
                    lastLine = line;
                }
                else {
                    lineDiff = Math.abs(lastLine - line);
                    if (lineDiff === 0 || lineDiff === 0.5) {
                        displaced = !displaced;
                    }
                    else {
                        displaced = false;
                        this.useDefaultHeadX = true;
                    }
                }
                lastLine = line;
                const notehead = new NoteHead({
                    duration: this.duration,
                    noteType: this.noteType,
                    displaced,
                    stemDirection,
                    customGlyphCode: noteProps.code,
                    line: noteProps.line,
                });
                notehead.fontInfo = this.fontInfo;
                this.addChild(notehead);
                this._noteHeads[this.sortedKeyProps[i].index] = notehead;
            }
            return this._noteHeads;
        }
        autoStem() {
            this.setStemDirection(this.calculateOptimalStemDirection());
        }
        calculateOptimalStemDirection() {
            this.minLine = this.sortedKeyProps[0].keyProps.line;
            this.maxLine = this.sortedKeyProps[this.keyProps.length - 1].keyProps.line;
            const MIDDLE_LINE = 3;
            const decider = (this.minLine + this.maxLine) / 2;
            const stemDirection = decider < MIDDLE_LINE ? Stem.UP : Stem.DOWN;
            return stemDirection;
        }
        calculateKeyProps() {
            var _a;
            let lastLine;
            for (let i = 0; i < this.keys.length; ++i) {
                const key = this.keys[i];
                const options = { octaveShift: (_a = this.octaveShift) !== null && _a !== void 0 ? _a : 0, duration: this.duration };
                const props = Tables.keyProperties(key, this.clef, this.noteType, options);
                if (!props) {
                    throw new RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);
                }
                if (props.key === 'R') {
                    if (this.duration === '1' || this.duration === 'w') {
                        props.line = 4;
                    }
                    else {
                        props.line = 3;
                    }
                }
                const line = props.line;
                if (lastLine === undefined) {
                    lastLine = line;
                }
                else {
                    if (Math.abs(lastLine - line) < 1) {
                        this.displaced = true;
                        props.displaced = true;
                        if (this.keyProps.length > 0) {
                            this.keyProps[i - 1].displaced = true;
                        }
                    }
                }
                lastLine = line;
                this.keyProps.push(props);
            }
            this.keyProps.forEach((keyProps, index) => {
                this.sortedKeyProps.push({ keyProps, index });
            });
            this.sortedKeyProps.sort((a, b) => a.keyProps.line - b.keyProps.line);
        }
        getBoundingBox() {
            const boundingBox = new BoundingBox(this.getAbsoluteX(), this.ys[0], 0, 0);
            this._noteHeads.forEach((notehead) => {
                boundingBox.mergeWith(notehead.getBoundingBox());
            });
            const { yTop, yBottom } = this.getNoteHeadBounds();
            if (!this.isRest() && this.hasStem()) {
                const noteStemHeight = this.stem.getHeight();
                const stemY = this.getStemDirection() === Stem.DOWN
                    ? yTop - noteStemHeight - this.flag.getTextMetrics().actualBoundingBoxDescent
                    : yBottom - noteStemHeight + this.flag.getTextMetrics().actualBoundingBoxAscent;
                boundingBox.mergeWith(new BoundingBox(this.getAbsoluteX(), stemY, 0, 0));
            }
            if (this.hasFlag()) {
                const bbFlag = this.flag.getBoundingBox();
                boundingBox.mergeWith(bbFlag);
            }
            for (let i = 0; i < this.modifiers.length; i++) {
                boundingBox.mergeWith(this.modifiers[i].getBoundingBox());
            }
            return boundingBox;
        }
        getLineNumber(isTopNote) {
            if (!this.keyProps.length) {
                throw new RuntimeError('NoKeyProps', "Can't get bottom note line, because note is not initialized properly.");
            }
            let resultLine = this.keyProps[0].line;
            for (let i = 0; i < this.keyProps.length; i++) {
                const thisLine = this.keyProps[i].line;
                if (isTopNote) {
                    if (thisLine > resultLine)
                        resultLine = thisLine;
                }
                else {
                    if (thisLine < resultLine)
                        resultLine = thisLine;
                }
            }
            return resultLine;
        }
        isRest() {
            const val = this.glyphProps.codeHead;
            return val >= '\ue4e0' && val <= '\ue4ff';
        }
        isChord() {
            return !this.isRest() && this.keys.length > 1;
        }
        hasStem() {
            return this.glyphProps.stem;
        }
        hasFlag() {
            return super.hasFlag() && !this.isRest();
        }
        getStemX() {
            if (this.noteType === 'r') {
                return this.getCenterGlyphX();
            }
            else {
                return super.getStemX() + (this.stemDirection ? Stem.WIDTH / (2 * -this.stemDirection) : 0);
            }
        }
        getYForTopText(textLine) {
            const extents = this.getStemExtents();
            return Math.min(this.checkStave().getYForTopText(textLine), extents.topY - this.renderOptions.annotationSpacing * (textLine + 1));
        }
        getYForBottomText(textLine) {
            const extents = this.getStemExtents();
            return Math.max(this.checkStave().getYForTopText(textLine), extents.baseY + this.renderOptions.annotationSpacing * textLine);
        }
        setStave(stave) {
            super.setStave(stave);
            const ys = this._noteHeads.map((notehead) => {
                notehead.setStave(stave);
                return notehead.getY();
            });
            this.setYs(ys);
            if (this.stem) {
                const { yTop, yBottom } = this.getNoteHeadBounds();
                this.stem.setYBounds(yTop, yBottom);
            }
            return this;
        }
        isDisplaced() {
            return this.displaced;
        }
        setNoteDisplaced(displaced) {
            this.displaced = displaced;
            return this;
        }
        getTieRightX() {
            let tieStartX = this.getAbsoluteX();
            tieStartX += this.getGlyphWidth() + this.xShift + this.rightDisplacedHeadPx;
            if (this.modifierContext)
                tieStartX += this.modifierContext.getRightShift();
            return tieStartX;
        }
        getTieLeftX() {
            let tieEndX = this.getAbsoluteX();
            tieEndX += this.xShift - this.leftDisplacedHeadPx;
            return tieEndX;
        }
        getLineForRest() {
            let restLine = this.keyProps[0].line;
            if (this.keyProps.length > 1) {
                const lastLine = this.keyProps[this.keyProps.length - 1].line;
                const top = Math.max(restLine, lastLine);
                const bot = Math.min(restLine, lastLine);
                restLine = midLine(top, bot);
            }
            return restLine;
        }
        getModifierStartXY(position, index, options = {}) {
            if (!this.preFormatted) {
                throw new RuntimeError('UnformattedNote', "Can't call GetModifierStartXY on an unformatted note");
            }
            if (this.ys.length === 0) {
                throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');
            }
            const { ABOVE, BELOW, LEFT, RIGHT } = Modifier$1.Position;
            let x = 0;
            if (position === LEFT) {
                x = -1 * 2;
            }
            else if (position === RIGHT) {
                x = this.getGlyphWidth() + this.xShift + 2;
                if (this.stemDirection === Stem.UP &&
                    this.hasFlag() &&
                    (options.forceFlagRight || isInnerNoteIndex(this, index))) {
                    x += this.flag.getWidth();
                }
            }
            else if (position === BELOW || position === ABOVE) {
                x = this.getGlyphWidth() / 2;
            }
            let restShift = 0;
            switch (this._noteHeads[index].getText()) {
                case Glyphs.restDoubleWhole:
                case Glyphs.restWhole:
                    restShift += 0.5;
                    break;
                case Glyphs.restHalf:
                case Glyphs.restQuarter:
                case Glyphs.rest8th:
                case Glyphs.rest16th:
                    restShift -= 0.5;
                    break;
                case Glyphs.rest32nd:
                case Glyphs.rest64th:
                    restShift -= 1.5;
                    break;
                case Glyphs.rest128th:
                    restShift -= 2.5;
                    break;
            }
            return {
                x: this.getAbsoluteX() + x,
                y: this.ys[index] + restShift * this.checkStave().getSpacingBetweenLines(),
            };
        }
        setStyle(style) {
            return super.setGroupStyle(style);
        }
        setStemStyle(style) {
            const stem = this.getStem();
            if (stem)
                stem.setStyle(style);
            return this;
        }
        getStemStyle() {
            var _a;
            return (_a = this.stem) === null || _a === void 0 ? void 0 : _a.getStyle();
        }
        setLedgerLineStyle(style) {
            this.ledgerLineStyle = style;
        }
        getLedgerLineStyle() {
            return this.ledgerLineStyle;
        }
        setFlagStyle(style) {
            this.flag.setStyle(style);
        }
        getFlagStyle() {
            return this.flag.getStyle();
        }
        getGlyphWidth() {
            return this.noteHeads[0].getWidth();
        }
        setKeyStyle(index, style) {
            this._noteHeads[index].setStyle(style);
            return this;
        }
        setKeyLine(index, line) {
            this.keyProps[index].line = line;
            this.reset();
            return this;
        }
        getKeyLine(index) {
            return this.keyProps[index].line;
        }
        getVoiceShiftWidth() {
            return this.getGlyphWidth() * (this.displaced ? 2 : 1);
        }
        calcNoteDisplacements() {
            this.setLeftDisplacedHeadPx(this.displaced && this.stemDirection === Stem.DOWN ? this.getGlyphWidth() : 0);
            this.setRightDisplacedHeadPx(!this.hasFlag() && this.displaced && this.stemDirection === Stem.UP ? this.getGlyphWidth() : 0);
        }
        preFormat() {
            if (this.preFormatted)
                return;
            let noteHeadPadding = 0;
            if (this.modifierContext) {
                this.modifierContext.preFormat();
                if (this.modifierContext.getWidth() === 0) {
                    noteHeadPadding = StaveNote.minNoteheadPadding;
                }
            }
            let width = this.getGlyphWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx + noteHeadPadding;
            if (this.shouldDrawFlag() && this.stemDirection === Stem.UP) {
                width += this.getGlyphWidth();
            }
            this.setWidth(width);
            this.preFormatted = true;
        }
        getNoteHeadBounds() {
            let yTop = +Infinity;
            let yBottom = -Infinity;
            let nonDisplacedX;
            let displacedX;
            let highestLine = this.checkStave().getNumLines();
            let lowestLine = 1;
            let highestDisplacedLine;
            let lowestDisplacedLine;
            let highestNonDisplacedLine = highestLine;
            let lowestNonDisplacedLine = lowestLine;
            this._noteHeads.forEach((notehead) => {
                const line = notehead.getLine();
                const y = notehead.getY();
                yTop = Math.min(y, yTop);
                yBottom = Math.max(y, yBottom);
                if (displacedX === undefined && notehead.isDisplaced()) {
                    displacedX = notehead.getAbsoluteX();
                }
                if (nonDisplacedX === undefined && !notehead.isDisplaced()) {
                    nonDisplacedX = notehead.getAbsoluteX();
                }
                highestLine = Math.max(line, highestLine);
                lowestLine = Math.min(line, lowestLine);
                if (notehead.isDisplaced()) {
                    highestDisplacedLine = highestDisplacedLine === undefined ? line : Math.max(line, highestDisplacedLine);
                    lowestDisplacedLine = lowestDisplacedLine === undefined ? line : Math.min(line, lowestDisplacedLine);
                }
                else {
                    highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);
                    lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);
                }
            }, this);
            return {
                yTop,
                yBottom,
                displacedX,
                nonDisplacedX,
                highestLine,
                lowestLine,
                highestDisplacedLine,
                lowestDisplacedLine,
                highestNonDisplacedLine,
                lowestNonDisplacedLine,
            };
        }
        getNoteHeadBeginX() {
            return this.getAbsoluteX() + this.xShift;
        }
        getNoteHeadEndX() {
            const xBegin = this.getNoteHeadBeginX();
            return xBegin + this.getGlyphWidth();
        }
        get noteHeads() {
            return this._noteHeads.slice();
        }
        drawLedgerLines() {
            const stave = this.checkStave();
            const { renderOptions: { strokePx }, } = this;
            const ctx = this.checkContext();
            const width = this.getGlyphWidth() + strokePx * 2;
            const doubleWidth = 2 * (this.getGlyphWidth() + strokePx) - Stem.WIDTH / 2;
            if (this.isRest())
                return;
            if (!ctx) {
                throw new RuntimeError('NoCanvasContext', "Can't draw without a canvas context.");
            }
            const { highestLine, lowestLine, highestDisplacedLine, highestNonDisplacedLine, lowestDisplacedLine, lowestNonDisplacedLine, displacedX, nonDisplacedX, } = this.getNoteHeadBounds();
            if (highestLine < 6 && lowestLine > 0)
                return;
            const minX = Math.min(displacedX !== null && displacedX !== void 0 ? displacedX : 0, nonDisplacedX !== null && nonDisplacedX !== void 0 ? nonDisplacedX : 0);
            const drawLedgerLine = (y, normal, displaced) => {
                let x;
                if (displaced && normal)
                    x = minX - strokePx;
                else if (normal)
                    x = (nonDisplacedX !== null && nonDisplacedX !== void 0 ? nonDisplacedX : 0) - strokePx;
                else
                    x = (displacedX !== null && displacedX !== void 0 ? displacedX : 0) - strokePx;
                const ledgerWidth = normal && displaced ? doubleWidth : width;
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(x + ledgerWidth, y);
                ctx.stroke();
            };
            const style = Object.assign(Object.assign({}, stave.getDefaultLedgerLineStyle()), this.getLedgerLineStyle());
            ctx.save();
            this.applyStyle(ctx, style);
            for (let line = 6; line <= highestLine; ++line) {
                const normal = nonDisplacedX !== undefined && line <= highestNonDisplacedLine;
                const displaced = highestDisplacedLine !== undefined && line <= highestDisplacedLine;
                drawLedgerLine(stave.getYForNote(line), normal, displaced);
            }
            for (let line = 0; line >= lowestLine; --line) {
                const normal = nonDisplacedX !== undefined && line >= lowestNonDisplacedLine;
                const displaced = lowestDisplacedLine !== undefined && line >= lowestDisplacedLine;
                drawLedgerLine(stave.getYForNote(line), normal, displaced);
            }
            ctx.restore();
        }
        drawModifiers(noteheadParam) {
            const ctx = this.checkContext();
            for (let i = 0; i < this.modifiers.length; i++) {
                const modifier = this.modifiers[i];
                const index = modifier.checkIndex();
                const notehead = this._noteHeads[index];
                if (notehead === noteheadParam) {
                    modifier.setContext(ctx);
                    modifier.drawWithStyle();
                }
            }
        }
        shouldDrawFlag() {
            const hasStem = this.stem !== undefined;
            const hasFlag = this.glyphProps.codeFlagUp !== undefined;
            const hasNoBeam = this.beam === undefined;
            return hasStem && hasFlag && hasNoBeam && !this.isRest();
        }
        drawFlag() {
            const ctx = this.checkContext();
            if (!ctx) {
                throw new RuntimeError('NoCanvasContext', "Can't draw without a canvas context.");
            }
            if (this.shouldDrawFlag()) {
                const { yTop, yBottom } = this.getNoteHeadBounds();
                const noteStemHeight = this.stem.getHeight();
                const flagX = this.getStemX() - Tables.STEM_WIDTH / 2;
                const flagY = this.getStemDirection() === Stem.DOWN
                    ?
                        yTop - noteStemHeight - this.flag.getTextMetrics().actualBoundingBoxDescent
                    :
                        yBottom - noteStemHeight + this.flag.getTextMetrics().actualBoundingBoxAscent;
                this.flag.setContext(ctx).setX(flagX).setY(flagY).drawWithStyle();
            }
        }
        drawNoteHeads() {
            const ctx = this.checkContext();
            this._noteHeads.forEach((notehead) => {
                notehead.setContext(ctx).drawWithStyle();
            });
        }
        drawStem(stemOptions) {
            const ctx = this.checkContext();
            if (stemOptions) {
                this.setStem(new Stem(stemOptions));
            }
            if (this.shouldDrawFlag() && this.stem) {
                this.stem.adjustHeightForFlag();
            }
            if (this.stem) {
                this.stem.setContext(ctx).drawWithStyle();
            }
        }
        getStemExtension() {
            const superStemExtension = super.getStemExtension();
            if (!this.glyphProps.stem) {
                return superStemExtension;
            }
            const stemDirection = this.getStemDirection();
            if (stemDirection !== this.calculateOptimalStemDirection()) {
                return superStemExtension;
            }
            let midLineDistance;
            const MIDDLE_LINE = 3;
            if (stemDirection === Stem.UP) {
                midLineDistance = MIDDLE_LINE - this.maxLine;
            }
            else {
                midLineDistance = this.minLine - MIDDLE_LINE;
            }
            const linesOverOctaveFromMidLine = midLineDistance - 3.5;
            if (linesOverOctaveFromMidLine <= 0) {
                return superStemExtension;
            }
            const stave = this.getStave();
            let spacingBetweenLines = 10;
            if (stave !== undefined) {
                spacingBetweenLines = stave.getSpacingBetweenLines();
            }
            return superStemExtension + linesOverOctaveFromMidLine * spacingBetweenLines;
        }
        draw() {
            if (this.renderOptions.draw === false)
                return;
            if (this.ys.length === 0) {
                throw new RuntimeError('NoYValues', "Can't draw note without Y values.");
            }
            const ctx = this.checkContext();
            const xBegin = this.getNoteHeadBeginX();
            const shouldRenderStem = this.hasStem() && !this.beam;
            this._noteHeads.forEach((notehead) => notehead.setX(xBegin));
            if (this.stem) {
                const stemX = this.getStemX();
                this.stem.setNoteHeadXBounds(stemX, stemX);
            }
            L$9('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);
            ctx.openGroup('stavenote', this.getAttribute('id'));
            this.drawLedgerLines();
            if (shouldRenderStem)
                this.drawStem();
            this.drawNoteHeads();
            this.drawFlag();
            const bb = this.getBoundingBox();
            ctx.pointerRect(bb.getX(), bb.getY(), bb.getW(), bb.getH());
            ctx.closeGroup();
            this.setRendered();
        }
    }
    StaveNote.DEBUG = false;

    class StaveTie extends Element {
        static get CATEGORY() {
            return "StaveTie";
        }
        constructor(notes, text = '') {
            super();
            this.setNotes(notes);
            this.text = text;
            this.renderOptions = {
                cp1: 8,
                cp2: 12,
                shortTieCutoff: 10,
                cp1Short: 2,
                cp2Short: 8,
                textShiftX: 0,
                firstXShift: 0,
                lastXShift: 0,
                yShift: 7,
                tieSpacing: 0,
            };
        }
        getDirection() {
            if (this.direction !== undefined && this.direction !== null) {
                return this.direction;
            }
            else if (this.notes.lastNote) {
                return this.notes.lastNote.getStemDirection();
            }
            else if (this.notes.firstNote) {
                return this.notes.firstNote.getStemDirection();
            }
            else {
                return 0;
            }
        }
        setDirection(direction) {
            this.direction = direction;
            return this;
        }
        setNotes(notes) {
            if (!notes.firstNote && !notes.lastNote) {
                throw new RuntimeError('BadArguments', 'Tie needs to have either firstNote or lastNote set.');
            }
            if (!notes.firstIndexes) {
                notes.firstIndexes = [0];
            }
            if (!notes.lastIndexes) {
                notes.lastIndexes = [0];
            }
            if (notes.firstIndexes.length !== notes.lastIndexes.length) {
                throw new RuntimeError('BadArguments', 'Tied notes must have same number of indexes.');
            }
            this.notes = notes;
            return this;
        }
        isPartial() {
            return !this.notes.firstNote || !this.notes.lastNote;
        }
        renderTie(params) {
            if (params.firstYs.length === 0 || params.lastYs.length === 0) {
                throw new RuntimeError('BadArguments', 'No Y-values to render');
            }
            const ctx = this.checkContext();
            let cp1 = this.renderOptions.cp1;
            let cp2 = this.renderOptions.cp2;
            if (Math.abs(params.lastX - params.firstX) < this.renderOptions.shortTieCutoff) {
                cp1 = this.renderOptions.cp1Short;
                cp2 = this.renderOptions.cp2Short;
            }
            const firstXShift = this.renderOptions.firstXShift;
            const lastXShift = this.renderOptions.lastXShift;
            const yShift = this.renderOptions.yShift * params.direction;
            const firstIndexes = this.notes.firstIndexes;
            const lastIndexes = this.notes.lastIndexes;
            ctx.openGroup('stavetie', this.getAttribute('id'));
            for (let i = 0; i < firstIndexes.length; ++i) {
                const cpX = (params.lastX + lastXShift + (params.firstX + firstXShift)) / 2;
                const firstY = params.firstYs[firstIndexes[i]] + yShift;
                const lastY = params.lastYs[lastIndexes[i]] + yShift;
                if (isNaN(firstY) || isNaN(lastY)) {
                    throw new RuntimeError('BadArguments', 'Bad indexes for tie rendering.');
                }
                const topControlPointY = (firstY + lastY) / 2 + cp1 * params.direction;
                const bottomControlPointY = (firstY + lastY) / 2 + cp2 * params.direction;
                ctx.beginPath();
                ctx.moveTo(params.firstX + firstXShift, firstY);
                ctx.quadraticCurveTo(cpX, topControlPointY, params.lastX + lastXShift, lastY);
                ctx.quadraticCurveTo(cpX, bottomControlPointY, params.firstX + firstXShift, firstY);
                ctx.closePath();
                ctx.fill();
            }
            ctx.closeGroup();
        }
        renderTieText(firstX, lastX) {
            var _a, _b, _c;
            const ctx = this.checkContext();
            let centerX = (firstX + lastX) / 2;
            centerX -= ctx.measureText(this.text).width / 2;
            const stave = (_b = (_a = this.notes.firstNote) === null || _a === void 0 ? void 0 : _a.checkStave()) !== null && _b !== void 0 ? _b : (_c = this.notes.lastNote) === null || _c === void 0 ? void 0 : _c.checkStave();
            if (stave) {
                ctx.setFont(this.fontInfo);
                ctx.fillText(this.text, centerX + this.renderOptions.textShiftX, stave.getYForTopText() - 1);
            }
        }
        getNotes() {
            return this.notes;
        }
        getFirstX() {
            if (this.notes.firstNote) {
                return this.notes.firstNote.getTieRightX() + this.renderOptions.tieSpacing;
            }
            else if (this.notes.lastNote) {
                return this.notes.lastNote.checkStave().getTieStartX();
            }
            else {
                return 0;
            }
        }
        getLastX() {
            if (this.notes.lastNote) {
                return this.notes.lastNote.getTieLeftX() + this.renderOptions.tieSpacing;
            }
            else if (this.notes.firstNote) {
                return this.notes.firstNote.checkStave().getTieEndX();
            }
            else {
                return 0;
            }
        }
        getFirstYs() {
            if (this.notes.firstNote) {
                return this.notes.firstNote.getYs();
            }
            else if (this.notes.lastNote) {
                return this.notes.lastNote.getYs();
            }
            else {
                return [0];
            }
        }
        getLastYs() {
            if (this.notes.lastNote) {
                return this.notes.lastNote.getYs();
            }
            else if (this.notes.firstNote) {
                return this.notes.firstNote.getYs();
            }
            else {
                return [0];
            }
        }
        synchronizeIndexes() {
            if (this.notes.firstNote && this.notes.lastNote) {
                return;
            }
            else if (!this.notes.firstNote && !this.notes.lastNote) {
                return;
            }
            else if (this.notes.firstNote) {
                this.notes.lastIndexes = this.notes.firstIndexes;
            }
            else {
                this.notes.firstIndexes = this.notes.lastIndexes;
            }
        }
        draw() {
            this.checkContext();
            this.setRendered();
            this.synchronizeIndexes();
            const firstX = this.getFirstX();
            const lastX = this.getLastX();
            this.renderTie({
                firstX,
                lastX,
                firstYs: this.getFirstYs(),
                lastYs: this.getLastYs(),
                direction: this.getDirection(),
            });
            this.renderTieText(firstX, lastX);
            return true;
        }
    }

    class TabTie extends StaveTie {
        static get CATEGORY() {
            return "TabTie";
        }
        static createHammeron(notes) {
            return new TabTie(notes, 'H');
        }
        static createPulloff(notes) {
            return new TabTie(notes, 'P');
        }
        constructor(notes, text) {
            super(notes, text);
            this.renderOptions.cp1 = 9;
            this.renderOptions.cp2 = 11;
            this.renderOptions.yShift = 3;
            this.direction = -1;
        }
    }

    var VoiceMode;
    (function (VoiceMode) {
        VoiceMode[VoiceMode["STRICT"] = 1] = "STRICT";
        VoiceMode[VoiceMode["SOFT"] = 2] = "SOFT";
        VoiceMode[VoiceMode["FULL"] = 3] = "FULL";
    })(VoiceMode || (VoiceMode = {}));
    class Voice extends Element {
        static get CATEGORY() {
            return "Voice";
        }
        static get Mode() {
            return VoiceMode;
        }
        constructor(time) {
            super();
            this.resolutionMultiplier = 1;
            this.mode = VoiceMode.STRICT;
            this.preFormatted = false;
            this.ticksUsed = new Fraction(0, 1);
            this.largestTickWidth = 0;
            this.tickables = [];
            this.options = {
                softmaxFactor: Tables.SOFTMAX_FACTOR,
            };
            let voiceTime;
            if (typeof time === 'string') {
                const match = time.match(/(\d+)\/(\d+)/);
                if (match) {
                    voiceTime = {
                        numBeats: parseInt(match[1]),
                        beatValue: parseInt(match[2]),
                    };
                }
            }
            else {
                voiceTime = time;
            }
            this.time = Object.assign({ numBeats: 4, beatValue: 4, resolution: Tables.RESOLUTION }, voiceTime);
            this.totalTicks = new Fraction(this.time.numBeats * (this.time.resolution / this.time.beatValue), 1);
            this.smallestTickCount = this.totalTicks.clone();
        }
        getTotalTicks() {
            return this.totalTicks;
        }
        getTicksUsed() {
            return this.ticksUsed;
        }
        getLargestTickWidth() {
            return this.largestTickWidth;
        }
        getSmallestTickCount() {
            return this.smallestTickCount;
        }
        getTickables() {
            return this.tickables;
        }
        getMode() {
            return this.mode;
        }
        setMode(mode) {
            this.mode = mode;
            return this;
        }
        getResolutionMultiplier() {
            return this.resolutionMultiplier;
        }
        getActualResolution() {
            return this.resolutionMultiplier * this.time.resolution;
        }
        setStave(stave) {
            this.stave = stave;
            return this;
        }
        getStave() {
            return this.stave;
        }
        getBoundingBox() {
            const boundingBox = this.tickables[0].getBoundingBox();
            for (let i = 1; i < this.tickables.length; ++i) {
                const tickable = this.tickables[i];
                if (!tickable.getStave() && this.stave)
                    tickable.setStave(this.stave);
                const bb = tickable.getBoundingBox();
                boundingBox.mergeWith(bb);
            }
            return boundingBox;
        }
        setStrict(strict) {
            this.mode = strict ? VoiceMode.STRICT : VoiceMode.SOFT;
            return this;
        }
        isComplete() {
            if (this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) {
                return this.ticksUsed.equals(this.totalTicks);
            }
            else {
                return true;
            }
        }
        setSoftmaxFactor(factor) {
            this.options.softmaxFactor = factor;
            this.expTicksUsed = 0;
            return this;
        }
        reCalculateExpTicksUsed() {
            const totalTicks = this.ticksUsed.value();
            const exp = (tickable) => Math.pow(this.options.softmaxFactor, tickable.getTicks().value() / totalTicks);
            this.expTicksUsed = sumArray(this.tickables.map(exp));
            return this.expTicksUsed;
        }
        softmax(tickValue) {
            if (!this.expTicksUsed) {
                this.expTicksUsed = this.reCalculateExpTicksUsed();
            }
            const totalTicks = this.ticksUsed.value();
            const exp = (v) => Math.pow(this.options.softmaxFactor, v / totalTicks);
            const sm = exp(tickValue) / this.expTicksUsed;
            return sm;
        }
        addTickable(tickable) {
            if (!tickable.shouldIgnoreTicks()) {
                const ticks = tickable.getTicks();
                this.ticksUsed.add(ticks);
                this.expTicksUsed = 0;
                if ((this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) &&
                    this.ticksUsed.greaterThan(this.totalTicks)) {
                    this.ticksUsed.subtract(ticks);
                    throw new RuntimeError('BadArgument', 'Too many ticks.');
                }
                if (ticks.lessThan(this.smallestTickCount)) {
                    this.smallestTickCount = ticks.clone();
                }
                this.resolutionMultiplier = this.ticksUsed.denominator;
                this.totalTicks.add(0, this.ticksUsed.denominator);
            }
            this.tickables.push(tickable);
            tickable.setVoice(this);
            return this;
        }
        addTickables(tickables) {
            for (let i = 0; i < tickables.length; ++i) {
                this.addTickable(tickables[i]);
            }
            return this;
        }
        preFormat() {
            if (this.preFormatted)
                return this;
            const stave = this.checkStave();
            this.tickables.forEach((tickable) => {
                if (!tickable.getStave()) {
                    tickable.setStave(stave);
                }
            });
            this.preFormatted = true;
            return this;
        }
        checkStave() {
            return defined(this.stave, 'NoStave', 'No stave attached to instance.');
        }
        draw(context = this.checkContext(), stave) {
            stave = stave !== null && stave !== void 0 ? stave : this.stave;
            this.setRendered();
            for (let i = 0; i < this.tickables.length; ++i) {
                const tickable = this.tickables[i];
                if (stave) {
                    tickable.setStave(stave);
                }
                defined(tickable.getStave(), 'MissingStave', 'The voice cannot draw tickables without staves.');
                tickable.setContext(context);
                tickable.drawWithStyle();
            }
        }
    }

    function L$8(...args) {
        if (GraceNoteGroup.DEBUG)
            log('VexFlow.GraceNoteGroup', args);
    }
    class GraceNoteGroup extends Modifier$1 {
        static get CATEGORY() {
            return "GraceNoteGroup";
        }
        static format(gracenoteGroups, state) {
            const groupSpacingStave = 4;
            const groupSpacingTab = 0;
            if (!gracenoteGroups || gracenoteGroups.length === 0)
                return false;
            const groupList = [];
            let prevNote = null;
            let shift = 0;
            for (let i = 0; i < gracenoteGroups.length; ++i) {
                const gracenoteGroup = gracenoteGroups[i];
                const note = gracenoteGroup.getNote();
                const isStavenote = isStaveNote(note);
                const spacing = isStavenote ? groupSpacingStave : groupSpacingTab;
                if (isStavenote && note !== prevNote) {
                    for (let n = 0; n < note.keys.length; ++n) {
                        shift = Math.max(note.getLeftDisplacedHeadPx(), shift);
                    }
                    prevNote = note;
                }
                groupList.push({ shift: shift, gracenoteGroup, spacing });
            }
            let groupShift = groupList[0].shift;
            let formatWidth;
            let right = false;
            let left = false;
            for (let i = 0; i < groupList.length; ++i) {
                const gracenoteGroup = groupList[i].gracenoteGroup;
                if (gracenoteGroup.position === Modifier$1.Position.RIGHT)
                    right = true;
                else
                    left = true;
                gracenoteGroup.preFormat();
                formatWidth = gracenoteGroup.getWidth() + groupList[i].spacing;
                groupShift = Math.max(formatWidth, groupShift);
            }
            for (let i = 0; i < groupList.length; ++i) {
                const gracenoteGroup = groupList[i].gracenoteGroup;
                formatWidth = gracenoteGroup.getWidth() + groupList[i].spacing;
                gracenoteGroup.setSpacingFromNextModifier(groupShift - Math.min(formatWidth, groupShift) + StaveNote.minNoteheadPadding);
            }
            if (right)
                state.rightShift += groupShift;
            if (left)
                state.leftShift += groupShift;
            return true;
        }
        constructor(graceNotes, showSlur) {
            super();
            this.preFormatted = false;
            this.position = Modifier$1.Position.LEFT;
            this.graceNotes = graceNotes;
            this.width = 0;
            this.showSlur = showSlur;
            this.slur = undefined;
            this.voice = new Voice({
                numBeats: 4,
                beatValue: 4,
                resolution: Tables.RESOLUTION,
            }).setStrict(false);
            this.renderOptions = {
                slurYShift: 0,
            };
            this.beams = [];
            this.voice.addTickables(this.graceNotes);
            return this;
        }
        preFormat() {
            if (this.preFormatted)
                return;
            if (!this.formatter) {
                this.formatter = new Formatter();
            }
            this.formatter.joinVoices([this.voice]).format([this.voice], 0, {});
            this.setWidth(this.formatter.getMinTotalWidth());
            this.preFormatted = true;
        }
        beamNotes(graceNotes) {
            graceNotes = graceNotes || this.graceNotes;
            if (graceNotes.length > 1) {
                const beam = new Beam(graceNotes);
                beam.renderOptions.beamWidth = 3;
                beam.renderOptions.partialBeamLength = 4;
                this.beams.push(beam);
            }
            return this;
        }
        setWidth(width) {
            this.width = width;
            return this;
        }
        getWidth() {
            return this.width + StaveNote.minNoteheadPadding;
        }
        getGraceNotes() {
            return this.graceNotes;
        }
        draw() {
            const ctx = this.checkContext();
            const note = this.checkAttachedNote();
            this.setRendered();
            L$8('Drawing grace note group for:', note);
            this.alignSubNotesWithNote(this.getGraceNotes(), note, this.position);
            this.graceNotes.forEach((graceNote) => graceNote.setContext(ctx).drawWithStyle());
            this.beams.forEach((beam) => beam.setContext(ctx).drawWithStyle());
            if (this.showSlur) {
                const isStavenote = isStaveNote(note);
                const TieClass = isStavenote ? StaveTie : TabTie;
                this.slur = new TieClass({
                    lastNote: this.graceNotes[0],
                    firstNote: note,
                    firstIndexes: [0],
                    lastIndexes: [0],
                });
                this.slur.renderOptions.cp2 = 12;
                this.slur.renderOptions.yShift = (isStavenote ? 7 : 5) + this.renderOptions.slurYShift;
                this.slur.setContext(ctx).drawWithStyle();
            }
        }
    }
    GraceNoteGroup.DEBUG = false;

    class NoteSubGroup extends Modifier$1 {
        static get CATEGORY() {
            return "NoteSubGroup";
        }
        static format(groups, state) {
            if (!groups || groups.length === 0)
                return false;
            let width = 0;
            for (let i = 0; i < groups.length; ++i) {
                const group = groups[i];
                group.preFormat();
                width += group.getWidth();
            }
            state.leftShift += width;
            return true;
        }
        constructor(subNotes) {
            super();
            this.preFormatted = false;
            this.position = Modifier$1.Position.LEFT;
            this.subNotes = subNotes;
            this.subNotes.forEach((subNote) => {
                subNote.setIgnoreTicks(false);
            });
            this.width = 0;
            this.formatter = new Formatter();
            this.voice = new Voice({
                numBeats: 4,
                beatValue: 4,
                resolution: Tables.RESOLUTION,
            }).setStrict(false);
            this.voice.addTickables(this.subNotes);
        }
        preFormat() {
            if (this.preFormatted)
                return;
            this.formatter.joinVoices([this.voice]).format([this.voice], 0);
            this.setWidth(this.formatter.getMinTotalWidth());
            this.preFormatted = true;
        }
        setWidth(width) {
            this.width = width;
            return this;
        }
        getWidth() {
            return this.width;
        }
        draw() {
            const ctx = this.checkContext();
            const note = this.checkAttachedNote();
            this.setRendered();
            this.alignSubNotesWithNote(this.subNotes, note);
            this.subNotes.forEach((subNote) => subNote.setContext(ctx).drawWithStyle());
        }
    }

    function L$7(...args) {
        if (Ornament.DEBUG)
            log('VexFlow.Ornament', args);
    }
    class Ornament extends Modifier$1 {
        static get CATEGORY() {
            return "Ornament";
        }
        static get minPadding() {
            return Metrics.get('NoteHead.minPadding');
        }
        static format(ornaments, state) {
            var _a, _b;
            if (!ornaments || ornaments.length === 0)
                return false;
            let width = 0;
            let rightShift = state.rightShift;
            let leftShift = state.leftShift;
            for (let i = 0; i < ornaments.length; ++i) {
                const ornament = ornaments[i];
                const increment = 2;
                if (ornament.position === ModifierPosition.RIGHT) {
                    ornament.xShift += rightShift + 2;
                    rightShift += ornament.width + Ornament.minPadding;
                }
                else if (ornament.position === ModifierPosition.LEFT) {
                    ornament.xShift -= leftShift + ornament.width + 2;
                    leftShift += ornament.width + Ornament.minPadding;
                }
                else if (ornament.position === ModifierPosition.ABOVE) {
                    width = Math.max(ornament.getWidth(), width);
                    const note = ornament.getNote();
                    let curTop = note.getLineNumber(true) + state.topTextLine;
                    const stem = note.getStem();
                    if (stem && note.getStemDirection() === Stem.UP) {
                        curTop += Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;
                    }
                    const numLines = (_b = (_a = note.getStave()) === null || _a === void 0 ? void 0 : _a.getNumLines()) !== null && _b !== void 0 ? _b : 0;
                    if (curTop < numLines)
                        state.topTextLine += numLines - curTop;
                    ornament.setTextLine(state.topTextLine);
                    state.topTextLine += increment;
                }
                else {
                    width = Math.max(ornament.getWidth(), width);
                    ornament.setTextLine(state.textLine);
                    state.textLine += increment;
                }
            }
            state.leftShift = leftShift + width / 2;
            state.rightShift = rightShift + width / 2;
            return true;
        }
        static get ornamentNoteTransition() {
            return ['flip', 'jazzTurn', 'smear'];
        }
        static get ornamentAttack() {
            return ['scoop'];
        }
        static get ornamentAlignWithNoteHead() {
            return ['doit', 'fall', 'fallLong', 'doitLong', 'scoop'];
        }
        static get ornamentRelease() {
            return ['doit', 'fall', 'fallLong', 'doitLong', 'jazzTurn', 'smear', 'flip'];
        }
        static get ornamentLeft() {
            return ['scoop'];
        }
        static get ornamentRight() {
            return ['doit', 'fall', 'fallLong', 'doitLong'];
        }
        static get ornamentYShift() {
            return ['fallLong'];
        }
        static get ornamentArticulation() {
            return ['bend', 'plungerClosed', 'plungerOpen'];
        }
        constructor(type) {
            super();
            this.position = ModifierPosition.ABOVE;
            if (Ornament.ornamentRight.indexOf(type) >= 0) {
                this.position = ModifierPosition.RIGHT;
            }
            if (Ornament.ornamentLeft.indexOf(type) >= 0) {
                this.position = ModifierPosition.LEFT;
            }
            this.type = type;
            this.delayed = false;
            this.renderOptions = {
                accidentalLowerPadding: 3,
                accidentalUpperPadding: 3,
            };
            this.adjustForStemDirection = false;
            this.ornamentAlignWithNoteHead = Ornament.ornamentAlignWithNoteHead.indexOf(this.type) >= 0;
            if (Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {
                this.delayed = true;
            }
            this.text = Tables.ornamentCodes(this.type);
        }
        setNote(note) {
            super.setNote(note);
            if (Ornament.ornamentArticulation.indexOf(this.type) >= 0) {
                if (note.getLineNumber() >= 3) {
                    this.position = Modifier$1.Position.ABOVE;
                }
                else {
                    this.position = Modifier$1.Position.BELOW;
                }
            }
            return this;
        }
        setDelayed(delayed) {
            this.delayed = delayed;
            return this;
        }
        setUpperAccidental(accid) {
            this.accidentalUpper = new Element();
            this.accidentalUpper.setText(Tables.accidentalCodes(accid));
            return this;
        }
        setLowerAccidental(accid) {
            this.accidentalLower = new Element();
            this.accidentalLower.setText(Tables.accidentalCodes(accid));
            return this;
        }
        draw() {
            const ctx = this.checkContext();
            const note = this.checkAttachedNote();
            this.setRendered();
            const stave = note.checkStave();
            ctx.openGroup('ornament', this.getAttribute('id'));
            const start = note.getModifierStartXY(this.position, this.index);
            let glyphX = start.x;
            const staffSpace = stave.getSpacingBetweenLines();
            const initialOffset = getInitialOffset(note, this.position);
            let glyphY = this.ornamentAlignWithNoteHead ? start.y : 0;
            if (this.position === ModifierPosition.ABOVE) {
                glyphY = getTopY(note, this.textLine) - (this.textLine + initialOffset) * staffSpace;
            }
            if (this.position === ModifierPosition.BELOW) {
                glyphY = getBottomY(note, this.textLine) + (this.textLine + initialOffset + 1.5) * staffSpace;
            }
            if (this.delayed) {
                let delayXShift = 0;
                const startX = note.getTickContext().getX();
                if (this.delayXShift !== undefined) {
                    delayXShift = this.delayXShift;
                }
                else {
                    const tickables = note.getVoice().getTickables();
                    const index = tickables.indexOf(note);
                    const nextContext = index + 1 < tickables.length ? tickables[index + 1].checkTickContext() : undefined;
                    if (nextContext) {
                        delayXShift += (nextContext.getX() - startX) * 0.5;
                    }
                    else {
                        delayXShift += (stave.getX() + stave.getWidth() - glyphX) * 0.5;
                    }
                    this.delayXShift = delayXShift;
                }
                glyphX += delayXShift;
            }
            L$7('Rendering ornament: ', this.text.charCodeAt(0), glyphX, glyphY);
            if (this.accidentalLower) {
                this.accidentalLower.renderText(ctx, glyphX + this.xShift - this.accidentalLower.getWidth() * 0.5, glyphY + this.yShift - this.accidentalLower.getTextMetrics().actualBoundingBoxDescent);
                glyphY -= this.accidentalLower.getHeight() + this.renderOptions.accidentalLowerPadding;
            }
            if (Ornament.ornamentYShift.indexOf(this.type) >= 0) {
                this.yShift += this.getHeight();
            }
            this.x =
                glyphX -
                    (this.position === ModifierPosition.ABOVE || this.position === ModifierPosition.BELOW ? this.width * 0.5 : 0);
            this.y = glyphY;
            this.renderText(ctx, 0, 0);
            if (this.accidentalUpper) {
                glyphY -= this.getHeight() + this.renderOptions.accidentalUpperPadding;
                this.accidentalUpper.renderText(ctx, glyphX + this.xShift - this.accidentalUpper.getWidth() * 0.5, glyphY + this.yShift - this.accidentalUpper.getTextMetrics().actualBoundingBoxDescent);
            }
            ctx.closeGroup();
        }
    }
    Ornament.DEBUG = false;

    class Parenthesis extends Modifier$1 {
        static get CATEGORY() {
            return "Parenthesis";
        }
        static buildAndAttach(notes) {
            for (const note of notes) {
                for (let i = 0; i < note.keys.length; i++) {
                    note.addModifier(new Parenthesis(ModifierPosition.LEFT), i);
                    note.addModifier(new Parenthesis(ModifierPosition.RIGHT), i);
                }
            }
        }
        static format(parentheses, state) {
            if (!parentheses || parentheses.length === 0)
                return false;
            let xWidthL = 0;
            let xWidthR = 0;
            for (let i = 0; i < parentheses.length; ++i) {
                const parenthesis = parentheses[i];
                const note = parenthesis.getNote();
                const pos = parenthesis.getPosition();
                const index = parenthesis.checkIndex();
                let shift = 0;
                if (pos === ModifierPosition.RIGHT) {
                    shift = note.getRightParenthesisPx(index);
                    xWidthR = xWidthR > shift + parenthesis.width ? xWidthR : shift + parenthesis.width;
                }
                if (pos === ModifierPosition.LEFT) {
                    shift = note.getLeftParenthesisPx(index) + parenthesis.width;
                    xWidthL = xWidthL > shift + parenthesis.width ? xWidthL : shift + parenthesis.width;
                }
                parenthesis.setXShift(shift);
            }
            state.leftShift += xWidthL;
            state.rightShift += xWidthR;
            return true;
        }
        constructor(position) {
            super();
            this.position = position !== null && position !== void 0 ? position : Modifier$1.Position.LEFT;
            if (this.position === Modifier$1.Position.RIGHT) {
                this.text = '\uE0F6';
            }
            else if (this.position === Modifier$1.Position.LEFT) {
                this.text = '\uE0F5';
            }
        }
        setNote(note) {
            this.note = note;
            this.setFont(note.getFont());
            return this;
        }
        draw() {
            const ctx = this.checkContext();
            const note = this.checkAttachedNote();
            this.setRendered();
            const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });
            this.renderText(ctx, start.x, start.y);
        }
    }

    const ATTRIBUTES_TO_IGNORE = {
        path: {
            x: true,
            y: true,
            width: true,
            height: true,
            'font-family': true,
            'font-weight': true,
            'font-style': true,
            'font-size': true,
        },
        rect: {
            'font-family': true,
            'font-weight': true,
            'font-style': true,
            'font-size': true,
        },
        text: {
            width: true,
            height: true,
        },
    };
    const SVG_NS = 'http://www.w3.org/2000/svg';
    const TWO_PI = 2 * Math.PI;
    class SVGContext extends RenderContext {
        constructor(element) {
            super();
            this.width = 0;
            this.height = 0;
            this.precision = 1;
            this.backgroundFillStyle = 'white';
            this.fontCSSString = '';
            this.element = element;
            this.precision = Math.pow(10, Tables.RENDER_PRECISION_PLACES);
            const svg = this.create('svg');
            svg.setAttribute('pointer-events', 'none');
            this.element.appendChild(svg);
            this.svg = svg;
            this.parent = this.svg;
            this.groups = [this.svg];
            this.path = '';
            this.pen = { x: NaN, y: NaN };
            const defaultFontAttributes = {
                'font-family': Metrics.get('fontFamily'),
                'font-size': '10pt',
                'font-weight': FontWeight.NORMAL,
                'font-style': FontStyle.NORMAL,
            };
            this.state = Object.assign({ scaleX: 1, scaleY: 1 }, defaultFontAttributes);
            this.attributes = Object.assign({ 'stroke-width': 1.0, 'stroke-dasharray': 'none', fill: 'black', stroke: 'black', shadowBlur: 0, shadowColor: 'black' }, defaultFontAttributes);
            this.groupAttributes = [];
            this.applyAttributes(svg, this.attributes);
            this.groupAttributes.push(Object.assign({}, this.attributes));
            this.stateStack = [];
        }
        round(n) {
            return Math.round(n * this.precision) / this.precision;
        }
        create(svgElementType) {
            return document.createElementNS(SVG_NS, svgElementType);
        }
        openGroup(cls, id) {
            const group = this.create('g');
            this.groups.push(group);
            this.parent.appendChild(group);
            this.parent = group;
            if (cls)
                group.setAttribute('class', prefix(cls));
            if (id)
                group.setAttribute('id', prefix(id));
            this.applyAttributes(group, this.attributes);
            this.groupAttributes.push(Object.assign(Object.assign({}, this.groupAttributes[this.groupAttributes.length - 1]), this.attributes));
            return group;
        }
        closeGroup() {
            this.groups.pop();
            this.groupAttributes.pop();
            this.parent = this.groups[this.groups.length - 1];
        }
        openRotation(angleDegrees, x, y) {
            this.openGroup().setAttribute('transform', `translate(${x},${y}) rotate(${angleDegrees}) translate(-${x},-${y})`);
        }
        closeRotation() {
            this.closeGroup();
        }
        add(elem) {
            this.parent.appendChild(elem);
        }
        setFillStyle(style) {
            this.attributes.fill = style;
            return this;
        }
        setBackgroundFillStyle(style) {
            this.backgroundFillStyle = style;
            return this;
        }
        setStrokeStyle(style) {
            this.attributes.stroke = style;
            return this;
        }
        setShadowColor(color) {
            this.attributes.shadowColor = color;
            return this;
        }
        setShadowBlur(blur) {
            this.attributes.shadowBlur = blur;
            return this;
        }
        setLineWidth(width) {
            this.attributes['stroke-width'] = width;
            return this;
        }
        setLineDash(lineDash) {
            if (Object.prototype.toString.call(lineDash) === '[object Array]') {
                this.attributes['stroke-dasharray'] = lineDash.join(',');
                return this;
            }
            else {
                throw new RuntimeError('ArgumentError', 'lineDash must be an array of integers.');
            }
        }
        setLineCap(capType) {
            this.attributes['stroke-linecap'] = capType;
            return this;
        }
        resize(width, height) {
            this.width = width;
            this.height = height;
            this.element.style.width = width.toString();
            this.svg.style.width = width.toString();
            this.svg.style.height = height.toString();
            const attributes = {
                width,
                height,
            };
            this.applyAttributes(this.svg, attributes);
            this.scale(this.state.scaleX, this.state.scaleY);
            return this;
        }
        scale(x, y) {
            this.state.scaleX = this.state.scaleX ? this.state.scaleX * x : x;
            this.state.scaleY = this.state.scaleY ? this.state.scaleY * y : y;
            const visibleWidth = this.width / this.state.scaleX;
            const visibleHeight = this.height / this.state.scaleY;
            this.setViewBox(0, 0, visibleWidth, visibleHeight);
            return this;
        }
        setViewBox(viewBoxOrMinX, minY, width, height) {
            if (typeof viewBoxOrMinX === 'string') {
                this.svg.setAttribute('viewBox', viewBoxOrMinX);
            }
            else {
                const viewBoxString = viewBoxOrMinX + ' ' + minY + ' ' + width + ' ' + height;
                this.svg.setAttribute('viewBox', viewBoxString);
            }
        }
        applyAttributes(element, attributes) {
            const attrNamesToIgnore = ATTRIBUTES_TO_IGNORE[element.nodeName];
            for (const attrName in attributes) {
                if (attrNamesToIgnore && attrNamesToIgnore[attrName]) {
                    continue;
                }
                if (attributes[attrName] &&
                    (this.groupAttributes.length === 0 ||
                        attributes[attrName] != this.groupAttributes[this.groupAttributes.length - 1][attrName]))
                    element.setAttributeNS(null, attrName, attributes[attrName]);
            }
            return element;
        }
        clear() {
            while (this.svg.lastChild) {
                this.svg.removeChild(this.svg.lastChild);
            }
        }
        rect(x, y, width, height, attributes) {
            if (height < 0) {
                y += height;
                height *= -1;
            }
            const rectangle = this.create('rect');
            attributes = attributes !== null && attributes !== void 0 ? attributes : { fill: 'none', 'stroke-width': this.attributes['stroke-width'], stroke: 'black' };
            x = this.round(x);
            y = this.round(y);
            width = this.round(width);
            height = this.round(height);
            this.applyAttributes(rectangle, Object.assign({ x, y, width, height }, attributes));
            this.add(rectangle);
            return this;
        }
        fillRect(x, y, width, height) {
            const attributes = { fill: this.attributes.fill, stroke: 'none' };
            this.rect(x, y, width, height, attributes);
            return this;
        }
        pointerRect(x, y, width, height) {
            const attributes = { opacity: '0', 'pointer-events': 'auto' };
            this.rect(x, y, width, height, attributes);
            return this;
        }
        clearRect(x, y, width, height) {
            this.rect(x, y, width, height, { fill: this.backgroundFillStyle, stroke: 'none' });
            return this;
        }
        beginPath() {
            this.path = '';
            this.pen.x = NaN;
            this.pen.y = NaN;
            return this;
        }
        moveTo(x, y) {
            x = this.round(x);
            y = this.round(y);
            this.path += 'M' + x + ' ' + y;
            this.pen.x = x;
            this.pen.y = y;
            return this;
        }
        lineTo(x, y) {
            x = this.round(x);
            y = this.round(y);
            this.path += 'L' + x + ' ' + y;
            this.pen.x = x;
            this.pen.y = y;
            return this;
        }
        bezierCurveTo(x1, y1, x2, y2, x, y) {
            x = this.round(x);
            y = this.round(y);
            x1 = this.round(x1);
            y1 = this.round(y1);
            x2 = this.round(x2);
            y2 = this.round(y2);
            this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;
            this.pen.x = x;
            this.pen.y = y;
            return this;
        }
        quadraticCurveTo(x1, y1, x, y) {
            x = this.round(x);
            y = this.round(y);
            x1 = this.round(x1);
            y1 = this.round(y1);
            this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;
            this.pen.x = x;
            this.pen.y = y;
            return this;
        }
        arc(x, y, radius, startAngle, endAngle, counterclockwise) {
            let x0 = x + radius * Math.cos(startAngle);
            let y0 = y + radius * Math.sin(startAngle);
            x0 = this.round(x0);
            y0 = this.round(y0);
            const tmpStartTest = normalizeAngle(startAngle);
            const tmpEndTest = normalizeAngle(endAngle);
            if ((!counterclockwise && endAngle - startAngle >= TWO_PI) ||
                (counterclockwise && startAngle - endAngle >= TWO_PI) ||
                tmpStartTest === tmpEndTest) {
                let x1 = x + radius * Math.cos(startAngle + Math.PI);
                let y1 = y + radius * Math.sin(startAngle + Math.PI);
                x1 = this.round(x1);
                y1 = this.round(y1);
                radius = this.round(radius);
                this.path += `M${x0} ${y0} A${radius} ${radius} 0 0 0 ${x1} ${y1} `;
                this.path += `A${radius} ${radius} 0 0 0 ${x0} ${y0}`;
                this.pen.x = x0;
                this.pen.y = y0;
            }
            else {
                let x1 = x + radius * Math.cos(endAngle);
                let y1 = y + radius * Math.sin(endAngle);
                startAngle = tmpStartTest;
                endAngle = tmpEndTest;
                let large;
                if (Math.abs(endAngle - startAngle) < Math.PI) {
                    large = counterclockwise;
                }
                else {
                    large = !counterclockwise;
                }
                if (startAngle > endAngle) {
                    large = !large;
                }
                const sweep = !counterclockwise;
                x1 = this.round(x1);
                y1 = this.round(y1);
                radius = this.round(radius);
                this.path += `M${x0} ${y0} A${radius} ${radius} 0 ${+large} ${+sweep} ${x1} ${y1}`;
                this.pen.x = x1;
                this.pen.y = y1;
            }
            return this;
        }
        closePath() {
            this.path += 'Z';
            return this;
        }
        getShadowStyle() {
            return `filter: drop-shadow(0 0 ${this.attributes.shadowBlur / 1.5}px ${this.attributes.shadowColor})`;
        }
        fill(attributes) {
            const path = this.create('path');
            if (typeof attributes === 'undefined') {
                attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none' });
            }
            attributes.d = this.path;
            if (this.attributes.shadowBlur > 0) {
                attributes.style = this.getShadowStyle();
            }
            this.applyAttributes(path, attributes);
            this.add(path);
            return this;
        }
        stroke() {
            const path = this.create('path');
            const attributes = Object.assign(Object.assign({}, this.attributes), { fill: 'none', d: this.path });
            if (this.attributes.shadowBlur > 0) {
                attributes.style = this.getShadowStyle();
            }
            this.applyAttributes(path, attributes);
            this.add(path);
            return this;
        }
        measureText(text) {
            SVGContext.measureTextElement.setText(text);
            SVGContext.measureTextElement.setFont(this.attributes['font-family'], this.attributes['font-size'], this.attributes['font-weight'], this.attributes['font-style']);
            const bb = SVGContext.measureTextElement.getBoundingBox();
            return { x: bb.x, y: bb.y, width: bb.w, height: bb.h };
        }
        fillText(text, x, y) {
            if (!text || text.length <= 0) {
                return this;
            }
            x = this.round(x);
            y = this.round(y);
            const attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none', x,
                y });
            const txt = this.create('text');
            txt.textContent = text;
            this.applyAttributes(txt, attributes);
            this.add(txt);
            return this;
        }
        save() {
            this.stateStack.push({
                state: structuredClone(this.state),
                attributes: structuredClone(this.attributes),
            });
            return this;
        }
        restore() {
            const savedState = this.stateStack.pop();
            if (savedState) {
                const state = savedState;
                this.state = structuredClone(state.state);
                this.attributes = structuredClone(state.attributes);
            }
            return this;
        }
        set fillStyle(style) {
            this.setFillStyle(style);
        }
        get fillStyle() {
            return this.attributes.fill;
        }
        set strokeStyle(style) {
            this.setStrokeStyle(style);
        }
        get strokeStyle() {
            return this.attributes.stroke;
        }
        setFont(f, size, weight, style) {
            const fontInfo = Font.validate(f, size, weight, style);
            this.fontCSSString = Font.toCSSString(fontInfo);
            const fontAttributes = {
                'font-family': fontInfo.family,
                'font-size': fontInfo.size,
                'font-weight': fontInfo.weight,
                'font-style': fontInfo.style,
            };
            this.attributes = Object.assign(Object.assign({}, this.attributes), fontAttributes);
            this.state = Object.assign(Object.assign({}, this.state), fontAttributes);
            return this;
        }
        getFont() {
            return this.fontCSSString;
        }
    }
    SVGContext.measureTextElement = new Element();

    var RendererBackends;
    (function (RendererBackends) {
        RendererBackends[RendererBackends["CANVAS"] = 1] = "CANVAS";
        RendererBackends[RendererBackends["SVG"] = 2] = "SVG";
    })(RendererBackends || (RendererBackends = {}));
    var RendererLineEndType;
    (function (RendererLineEndType) {
        RendererLineEndType[RendererLineEndType["NONE"] = 1] = "NONE";
        RendererLineEndType[RendererLineEndType["UP"] = 2] = "UP";
        RendererLineEndType[RendererLineEndType["DOWN"] = 3] = "DOWN";
    })(RendererLineEndType || (RendererLineEndType = {}));
    class Renderer {
        static buildContext(elementId, backend, width, height, background = '#FFF') {
            const renderer = new Renderer(elementId, backend);
            if (width && height) {
                renderer.resize(width, height);
            }
            const ctx = renderer.getContext();
            ctx.setBackgroundFillStyle(background);
            Renderer.lastContext = ctx;
            return ctx;
        }
        static getCanvasContext(elementId, width, height, background) {
            return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);
        }
        static getSVGContext(elementId, width, height, background) {
            return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);
        }
        static drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {
            context.beginPath();
            const dx = toX - fromX;
            const dy = toY - fromY;
            const angle = Math.atan2(dy, dx);
            let x = fromX;
            let y = fromY;
            context.moveTo(fromX, fromY);
            let idx = 0;
            let draw = true;
            while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {
                const dashLength = dashPattern[idx++ % dashPattern.length];
                const nx = x + Math.cos(angle) * dashLength;
                x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);
                const ny = y + Math.sin(angle) * dashLength;
                y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);
                if (draw) {
                    context.lineTo(x, y);
                }
                else {
                    context.moveTo(x, y);
                }
                draw = !draw;
            }
            context.closePath();
            context.stroke();
        }
        constructor(arg0, arg1) {
            if (isRenderContext(arg0)) {
                this.ctx = arg0;
            }
            else {
                if (arg1 === undefined) {
                    throw new RuntimeError('InvalidArgument', 'Missing backend argument');
                }
                const backend = arg1;
                let element;
                if (typeof arg0 === 'string') {
                    const maybeElement = document.getElementById(arg0);
                    if (!maybeElement) {
                        throw new RuntimeError('BadElementId', `Can't find element with ID "${maybeElement}"`);
                    }
                    element = maybeElement;
                }
                else {
                    element = arg0;
                }
                if (backend === Renderer.Backends.CANVAS) {
                    if (!isHTMLCanvas(element)) {
                        throw new RuntimeError('BadElement', 'CANVAS context requires an HTMLCanvasElement.');
                    }
                    const context = element.getContext('2d', { willReadFrequently: true });
                    if (!context) {
                        throw new RuntimeError('BadElement', "Can't get canvas context");
                    }
                    this.ctx = new CanvasContext(context);
                }
                else if (backend === Renderer.Backends.SVG) {
                    if (!isHTMLDiv(element)) {
                        throw new RuntimeError('BadElement', 'SVG context requires an HTMLDivElement.');
                    }
                    this.ctx = new SVGContext(element);
                }
                else {
                    throw new RuntimeError('InvalidBackend', `No support for backend: ${backend}`);
                }
            }
        }
        resize(width, height) {
            this.ctx.resize(width, height);
            return this;
        }
        getContext() {
            return this.ctx;
        }
    }
    Renderer.Backends = RendererBackends;
    Renderer.LineEndType = RendererLineEndType;
    Renderer.lastContext = undefined;

    class StringNumber extends Modifier$1 {
        static get CATEGORY() {
            return "StringNumber";
        }
        static format(nums, state) {
            const leftShift = state.leftShift;
            const rightShift = state.rightShift;
            const numSpacing = 1;
            if (!nums || nums.length === 0)
                return false;
            const numsList = [];
            let prevNote = null;
            let extraXSpaceForDisplacedNotehead = 0;
            let shiftRight = 0;
            for (let i = 0; i < nums.length; ++i) {
                const num = nums[i];
                const note = num.getNote();
                const pos = num.getPosition();
                if (!isStaveNote(note)) {
                    throw new RuntimeError('NoStaveNote');
                }
                const index = num.checkIndex();
                const props = note.getKeyProps()[index];
                const mc = note.getModifierContext();
                const verticalSpaceNeeded = (num.radius * 2) / Tables.STAVE_LINE_DISTANCE + 0.5;
                if (mc) {
                    if (pos === ModifierPosition.ABOVE) {
                        num.textLine = mc.getState().topTextLine;
                        state.topTextLine += verticalSpaceNeeded;
                    }
                    else if (pos === ModifierPosition.BELOW) {
                        num.textLine = mc.getState().textLine;
                        state.textLine += verticalSpaceNeeded;
                    }
                }
                if (note !== prevNote) {
                    for (let n = 0; n < note.keys.length; ++n) {
                        if (pos === Modifier$1.Position.LEFT) {
                            extraXSpaceForDisplacedNotehead = Math.max(note.getLeftDisplacedHeadPx(), extraXSpaceForDisplacedNotehead);
                        }
                        if (rightShift === 0) {
                            shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);
                        }
                    }
                    prevNote = note;
                }
                const glyphLine = props.line ;
                numsList.push({
                    pos,
                    note,
                    num,
                    line: glyphLine,
                    shiftL: extraXSpaceForDisplacedNotehead,
                    shiftR: shiftRight,
                });
            }
            numsList.sort((a, b) => b.line - a.line);
            let numShiftR = 0;
            let xWidthL = 0;
            let xWidthR = 0;
            let lastLine = null;
            let lastNote = null;
            for (let i = 0; i < numsList.length; ++i) {
                const note = numsList[i].note;
                const pos = numsList[i].pos;
                const num = numsList[i].num;
                const line = numsList[i].line;
                const shiftR = numsList[i].shiftR;
                if (line !== lastLine || note !== lastNote) {
                    numShiftR = rightShift + shiftR;
                }
                const numWidth = num.getWidth() + numSpacing;
                let numXShift = 0;
                if (pos === Modifier$1.Position.LEFT) {
                    num.setXShift(leftShift + extraXSpaceForDisplacedNotehead);
                    numXShift = numWidth;
                    xWidthL = Math.max(numXShift, xWidthL);
                }
                else if (pos === Modifier$1.Position.RIGHT) {
                    num.setXShift(numShiftR);
                    numXShift += numWidth;
                    xWidthR = numXShift > xWidthR ? numXShift : xWidthR;
                }
                lastLine = line;
                lastNote = note;
            }
            state.leftShift += xWidthL;
            state.rightShift += xWidthR;
            return true;
        }
        constructor(number) {
            super();
            this.stringNumber = number;
            this.position = Modifier$1.Position.ABOVE;
            this.xShift = 0;
            this.yShift = 0;
            this.textLine = 0;
            this.stemOffset = 0;
            this.xOffset = 0;
            this.yOffset = 0;
            this.dashed = true;
            this.leg = Renderer.LineEndType.NONE;
            this.radius = 8;
            this.drawCircle = true;
            this.setWidth(this.radius * 2 + 4);
        }
        setLineEndType(leg) {
            if (leg >= Renderer.LineEndType.NONE && leg <= Renderer.LineEndType.DOWN) {
                this.leg = leg;
            }
            return this;
        }
        setStringNumber(number) {
            this.stringNumber = number;
            return this;
        }
        setOffsetX(x) {
            this.xOffset = x;
            return this;
        }
        setOffsetY(y) {
            this.yOffset = y;
            return this;
        }
        setLastNote(note) {
            this.lastNote = note;
            return this;
        }
        setDashed(dashed) {
            this.dashed = dashed;
            return this;
        }
        setDrawCircle(drawCircle) {
            this.drawCircle = drawCircle;
            return this;
        }
        draw() {
            const ctx = this.checkContext();
            const note = this.checkAttachedNote();
            this.setRendered();
            const start = note.getModifierStartXY(this.position, this.index);
            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;
            let dotX = start.x + this.xShift + this.xOffset;
            let stemExt = {};
            if (note.hasStem()) {
                stemExt = note.checkStem().getExtents();
            }
            let dotY = start.y + this.yShift + this.yOffset;
            switch (this.position) {
                case Modifier$1.Position.ABOVE:
                    {
                        const ys = note.getYs();
                        dotY = ys.reduce((a, b) => (a < b ? a : b));
                        if (note.hasStem() && stemDirection === Stem.UP) {
                            dotY = stemExt.topY + Metrics.get('StringNumber.stemPadding');
                        }
                        dotY -=
                            this.radius + Metrics.get('StringNumber.verticalPadding') + this.textLine * Tables.STAVE_LINE_DISTANCE;
                    }
                    break;
                case Modifier$1.Position.BELOW:
                    {
                        const ys = note.getYs();
                        dotY = ys.reduce((a, b) => (a > b ? a : b));
                        if (note.hasStem() && stemDirection === Stem.DOWN) {
                            dotY = stemExt.topY - Metrics.get('StringNumber.stemPadding');
                        }
                        dotY +=
                            this.radius + Metrics.get('StringNumber.verticalPadding') + this.textLine * Tables.STAVE_LINE_DISTANCE;
                    }
                    break;
                case Modifier$1.Position.LEFT:
                    dotX -= this.radius / 2 + Metrics.get('StringNumber.leftPadding');
                    break;
                case Modifier$1.Position.RIGHT:
                    dotX += this.radius / 2 + Metrics.get('StringNumber.rightPadding');
                    break;
                default:
                    throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid`);
            }
            if (this.drawCircle) {
                ctx.beginPath();
                ctx.arc(dotX, dotY, this.radius, 0, Math.PI * 2, false);
                ctx.setLineWidth(1.5);
                ctx.stroke();
            }
            ctx.setFont(this.fontInfo);
            const x = dotX - ctx.measureText(this.stringNumber).width / 2;
            ctx.fillText('' + this.stringNumber, x, dotY + 4.5);
            const lastNote = this.lastNote;
            if (isStemmableNote(lastNote)) {
                const end = lastNote.getStemX() - note.getX() + 5;
                ctx.setStrokeStyle('#000000');
                ctx.setLineCap('round');
                ctx.setLineWidth(0.6);
                if (this.dashed) {
                    Renderer.drawDashedLine(ctx, dotX + 10, dotY, dotX + end, dotY, [3, 3]);
                }
                else {
                    Renderer.drawDashedLine(ctx, dotX + 10, dotY, dotX + end, dotY, [3, 0]);
                }
                let len;
                let pattern;
                switch (this.leg) {
                    case Renderer.LineEndType.UP:
                        len = -10;
                        pattern = this.dashed ? [3, 3] : [3, 0];
                        Renderer.drawDashedLine(ctx, dotX + end, dotY, dotX + end, dotY + len, pattern);
                        break;
                    case Renderer.LineEndType.DOWN:
                        len = 10;
                        pattern = this.dashed ? [3, 3] : [3, 0];
                        Renderer.drawDashedLine(ctx, dotX + end, dotY, dotX + end, dotY + len, pattern);
                        break;
                }
            }
        }
    }

    class Stroke extends Modifier$1 {
        static get CATEGORY() {
            return "Stroke";
        }
        static format(strokes, state) {
            const leftShift = state.leftShift;
            const strokeSpacing = 5;
            if (!strokes || strokes.length === 0)
                return false;
            const strokeList = strokes.map((stroke) => {
                const note = stroke.getNote();
                const index = stroke.checkIndex();
                if (isStaveNote(note)) {
                    const { line } = note.getKeyProps()[index];
                    const shift = note.getLeftDisplacedHeadPx();
                    return { line, shift, stroke };
                }
                else if (isTabNote(note)) {
                    const { str: string } = note.getPositions()[index];
                    return { line: string, shift: 0, stroke };
                }
                else {
                    throw new RuntimeError('Internal', 'Unexpected instance.');
                }
            });
            const strokeShift = leftShift;
            const xShift = strokeList.reduce((xShift, { stroke, shift }) => {
                stroke.setXShift(strokeShift + shift);
                return Math.max(stroke.getWidth() + strokeSpacing, xShift);
            }, 0);
            state.leftShift += xShift;
            return true;
        }
        constructor(type, options) {
            super();
            this.options = Object.assign({ allVoices: true }, options);
            this.allVoices = this.options.allVoices;
            this.type = type;
            this.position = Modifier$1.Position.LEFT;
            this.renderOptions = {
                fontScale: Metrics.get('Stroke.fontSize'),
            };
            this.setXShift(0);
            this.setWidth(10);
        }
        getPosition() {
            return this.position;
        }
        addEndNote(note) {
            this.noteEnd = note;
            return this;
        }
        draw() {
            const ctx = this.checkContext();
            const note = this.checkAttachedNote();
            this.setRendered();
            const start = note.getModifierStartXY(this.position, this.index);
            let yPositions = note.getYs();
            let topY = start.y;
            let botY = start.y;
            const x = start.x - 5;
            const lineSpace = note.checkStave().getSpacingBetweenLines();
            const notes = this.checkModifierContext().getMembers(note.getCategory());
            for (let i = 0; i < notes.length; i++) {
                const note = notes[i];
                if (isNote(note)) {
                    yPositions = note.getYs();
                    for (let n = 0; n < yPositions.length; n++) {
                        if (this.note === notes[i] || this.allVoices) {
                            topY = Math.min(topY, yPositions[n]);
                            botY = Math.max(botY, yPositions[n]);
                        }
                    }
                }
            }
            let arrow = '';
            let arrowY = 0;
            let textY = 0;
            switch (this.type) {
                case Stroke.Type.BRUSH_DOWN:
                case Stroke.Type.ROLL_DOWN:
                case Stroke.Type.RASGUEADO_DOWN:
                    arrow = Glyphs.arrowheadBlackUp;
                    arrowY = topY;
                    topY -= lineSpace / 2;
                    botY += lineSpace / 2;
                    break;
                case Stroke.Type.BRUSH_UP:
                case Stroke.Type.ROLL_UP:
                case Stroke.Type.RASGUEADO_UP:
                    arrow = Glyphs.arrowheadBlackDown;
                    arrowY = botY + lineSpace;
                    topY -= lineSpace / 2;
                    break;
                case Stroke.Type.ARPEGGIO_DIRECTIONLESS:
                    topY -= lineSpace / 2;
                    botY += lineSpace / 2;
                    break;
                default:
                    throw new RuntimeError('InvalidType', `The stroke type ${this.type} does not exist`);
            }
            if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {
                ctx.fillRect(x + this.xShift, topY, 1, botY - topY);
            }
            else {
                const lineGlyph = arrow === Glyphs.arrowheadBlackDown ? Glyphs.wiggleArpeggiatoDown : Glyphs.wiggleArpeggiatoUp;
                let txt = '';
                const el = new Element();
                while (el.getWidth() < botY - topY) {
                    txt += lineGlyph;
                    el.setText(txt);
                }
                if (this.type === Stroke.Type.RASGUEADO_DOWN ||
                    this.type === Stroke.Type.ROLL_DOWN ||
                    this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {
                    ctx.openRotation(90, x + this.xShift, topY);
                    el.renderText(ctx, x + this.xShift, topY - el.getTextMetrics().actualBoundingBoxDescent + el.getHeight() / 2);
                    ctx.closeRotation();
                    textY = topY + el.getWidth() + 5;
                }
                else {
                    ctx.openRotation(-90, x + this.xShift, botY);
                    el.renderText(ctx, x + this.xShift, botY - el.getTextMetrics().actualBoundingBoxDescent + el.getHeight() / 2);
                    ctx.closeRotation();
                    textY = botY - el.getWidth() - 5;
                }
            }
            if (arrowY !== 0) {
                const el = new Element();
                el.setText(arrow);
                el.renderText(ctx, x + this.xShift - el.getWidth() / 2, arrowY);
            }
            if (this.type === Stroke.Type.RASGUEADO_DOWN || this.type === Stroke.Type.RASGUEADO_UP) {
                const el = new Element('Stroke.text');
                el.setText('R');
                el.renderText(ctx, x + this.xShift - el.getWidth() / 2, textY + (this.type === Stroke.Type.RASGUEADO_DOWN ? el.getHeight() : 0));
            }
        }
    }
    Stroke.Type = {
        BRUSH_DOWN: 1,
        BRUSH_UP: 2,
        ROLL_DOWN: 3,
        ROLL_UP: 4,
        RASGUEADO_DOWN: 5,
        RASGUEADO_UP: 6,
        ARPEGGIO_DIRECTIONLESS: 7,
    };

    class Vibrato extends Modifier$1 {
        static get CATEGORY() {
            return "Vibrato";
        }
        static format(vibratos, state, context) {
            if (!vibratos || vibratos.length === 0)
                return false;
            let textLine = state.topTextLine;
            let width = 0;
            let shift = state.rightShift - 7;
            const bends = context.getMembers(Bend.CATEGORY);
            if (bends && bends.length > 0) {
                const bendHeight = bends.map((bb) => bb.getTextHeight()).reduce((a, b) => (a > b ? a : b)) / Tables.STAVE_LINE_DISTANCE;
                textLine = textLine - (bendHeight + 1);
            }
            else {
                state.topTextLine += 1;
            }
            for (let i = 0; i < vibratos.length; ++i) {
                const vibrato = vibratos[i];
                vibrato.setXShift(shift);
                vibrato.setTextLine(textLine);
                width += vibrato.getWidth();
                shift += width;
            }
            state.rightShift += width;
            return true;
        }
        constructor() {
            super();
            this.position = Modifier$1.Position.RIGHT;
            this.renderOptions = {
                code: 0xeab0,
                width: 20,
            };
            this.setVibratoWidth(this.renderOptions.width);
        }
        setVibratoWidth(width) {
            this.renderOptions.width = width;
            this.text = String.fromCodePoint(this.renderOptions.code);
            const myWidth = this.getWidth();
            if (!myWidth) {
                throw new RuntimeError('Cannot set vibrato width if width is 0');
            }
            const items = Math.round(this.renderOptions.width / myWidth);
            for (let i = 1; i < items; i++) {
                this.text += String.fromCodePoint(this.renderOptions.code);
            }
            return this;
        }
        setVibratoCode(code) {
            this.renderOptions.code = code;
            return this.setVibratoWidth(this.renderOptions.width);
        }
        draw() {
            const ctx = this.checkContext();
            const note = this.checkAttachedNote();
            this.setRendered();
            const start = note.getModifierStartXY(Modifier$1.Position.RIGHT, this.index);
            const vx = start.x;
            const vy = note.getYForTopText(this.textLine) + 5;
            this.renderText(ctx, vx, vy);
        }
    }

    function L$6(...args) {
        if (ModifierContext.DEBUG)
            log('VexFlow.ModifierContext', args);
    }
    class ModifierContext {
        constructor() {
            this.state = {
                leftShift: 0,
                rightShift: 0,
                textLine: 0,
                topTextLine: 0,
            };
            this.members = {};
            this.preFormatted = false;
            this.postFormatted = false;
            this.formatted = false;
            this.width = 0;
            this.spacing = 0;
        }
        addModifier(member) {
            L$6('addModifier is deprecated, use addMember instead.');
            return this.addMember(member);
        }
        addMember(member) {
            const category = member.getCategory();
            if (!this.members[category]) {
                this.members[category] = [];
            }
            this.members[category].push(member);
            member.setModifierContext(this);
            this.preFormatted = false;
            return this;
        }
        getModifiers(category) {
            L$6('getModifiers is deprecated, use getMembers instead.');
            return this.getMembers(category);
        }
        getMembers(category) {
            var _a;
            return (_a = this.members[category]) !== null && _a !== void 0 ? _a : [];
        }
        getWidth() {
            return this.width;
        }
        getLeftShift() {
            return this.state.leftShift;
        }
        getRightShift() {
            return this.state.rightShift;
        }
        getState() {
            return this.state;
        }
        getMetrics() {
            if (!this.formatted) {
                throw new RuntimeError('UnformattedMember', 'Unformatted member has no metrics.');
            }
            return {
                width: this.state.leftShift + this.state.rightShift + this.spacing,
                spacing: this.spacing,
            };
        }
        preFormat() {
            if (this.preFormatted)
                return;
            L$6('Preformatting ModifierContext');
            const state = this.state;
            const members = this.members;
            StaveNote.format(members["StaveNote"], state);
            Parenthesis.format(members["Parenthesis"], state);
            Dot.format(members["Dot"], state);
            FretHandFinger.format(members["FretHandFinger"], state);
            Accidental.format(members["Accidental"], state);
            Stroke.format(members["Stroke"], state);
            GraceNoteGroup.format(members["GraceNoteGroup"], state);
            NoteSubGroup.format(members["NoteSubGroup"], state);
            StringNumber.format(members["StringNumber"], state);
            Articulation.format(members["Articulation"], state);
            Ornament.format(members["Ornament"], state);
            Annotation$1.format(members["Annotation"], state);
            ChordSymbol.format(members["ChordSymbol"], state);
            Bend.format(members["Bend"], state);
            Vibrato.format(members["Vibrato"], state, this);
            this.width = state.leftShift + state.rightShift;
            this.preFormatted = true;
        }
        postFormat() {
            if (this.postFormatted)
                return;
            L$6('Postformatting ModifierContext');
            StaveNote.postFormat(this.getMembers("StaveNote"));
        }
    }
    ModifierContext.DEBUG = false;

    class KeySignature extends StaveModifier {
        static get CATEGORY() {
            return "KeySignature";
        }
        constructor(keySpec, cancelKeySpec, alterKeySpec) {
            super();
            this.accList = [];
            this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);
            this.setPosition(StaveModifierPosition.BEGIN);
            this.children = [];
            this.paddingForced = false;
        }
        convertToGlyph(acc, nextAcc, stave) {
            const code = Tables.accidentalCodes(acc.type);
            const glyph = new Element("KeySignature");
            glyph.setText(code);
            let extraWidth = 1;
            glyph.setYShift(stave.getYForLine(acc.line));
            if (this.children.length > 0) {
                const prevGlyph = this.children[this.children.length - 1];
                const isNatural = (el) => el.getText() === Glyphs.accidentalNatural;
                const yShiftDiff = (el1, el2) => Math.abs(el2.getYShift() - el1.getYShift());
                if ((isNatural(prevGlyph) || isNatural(glyph)) && yShiftDiff(prevGlyph, glyph) < 10) {
                    extraWidth = 2;
                }
                glyph.setXShift(prevGlyph.getXShift() + prevGlyph.getWidth() + extraWidth);
            }
            this.children.push(glyph);
            this.width += glyph.getWidth() + extraWidth;
        }
        cancelKey(spec) {
            this.formatted = false;
            this.cancelKeySpec = spec;
            return this;
        }
        convertToCancelAccList(spec) {
            const cancelAccList = Tables.keySignature(spec);
            const differentTypes = this.accList.length > 0 && cancelAccList.length > 0 && cancelAccList[0].type !== this.accList[0].type;
            const naturals = differentTypes ? cancelAccList.length : cancelAccList.length - this.accList.length;
            if (naturals < 1)
                return undefined;
            const cancelled = [];
            for (let i = 0; i < naturals; i++) {
                let index = i;
                if (!differentTypes) {
                    index = cancelAccList.length - naturals + i;
                }
                const acc = cancelAccList[index];
                cancelled.push({ type: 'n', line: acc.line });
            }
            this.accList = cancelled.concat(this.accList);
            return {
                accList: cancelled,
                type: cancelAccList[0].type,
            };
        }
        addToStave(stave) {
            this.paddingForced = true;
            stave.addModifier(this);
            return this;
        }
        setStave(stave) {
            this.formatted = false;
            return super.setStave(stave);
        }
        getBoundingBox() {
            if (!this.formatted)
                this.format();
            return super.getBoundingBox();
        }
        calculateDimensions() {
            let boundingBox;
            if (this.children.length > 0) {
                boundingBox = this.children[0].getBoundingBox();
            }
            else {
                boundingBox = new BoundingBox(this.x + this.xShift, this.y + this.yShift, 0, 0);
            }
            this.children.forEach((glyph) => {
                boundingBox.mergeWith(glyph.getBoundingBox());
            });
            this.width = boundingBox.getW();
            this.height = boundingBox.getH();
            this.y = boundingBox.getY();
        }
        convertAccLines(clef, type, accList = this.accList) {
            let offset = 0.0;
            let customLines;
            switch (clef) {
                case 'soprano':
                    if (type === '#')
                        customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];
                    else
                        offset = -1;
                    break;
                case 'mezzo-soprano':
                    if (type === 'b')
                        customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];
                    else
                        offset = 1.5;
                    break;
                case 'alto':
                    offset = 0.5;
                    break;
                case 'tenor':
                    if (type === '#')
                        customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];
                    else
                        offset = -0.5;
                    break;
                case 'baritone-f':
                case 'baritone-c':
                    if (type === 'b')
                        customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];
                    else
                        offset = 2;
                    break;
                case 'bass':
                case 'french':
                    offset = 1;
                    break;
            }
            let i;
            if (typeof customLines !== 'undefined') {
                for (i = 0; i < accList.length; ++i) {
                    accList[i].line = customLines[i];
                }
            }
            else if (offset !== 0) {
                for (i = 0; i < accList.length; ++i) {
                    accList[i].line += offset;
                }
            }
        }
        getPadding(index) {
            if (!this.formatted)
                this.format();
            return this.children.length === 0 || (!this.paddingForced && index < 2) ? 0 : this.padding;
        }
        getWidth() {
            if (!this.formatted)
                this.format();
            return this.width;
        }
        setKeySig(keySpec, cancelKeySpec, alterKeySpec) {
            this.formatted = false;
            this.keySpec = keySpec;
            this.cancelKeySpec = cancelKeySpec;
            this.alterKeySpec = alterKeySpec;
            return this;
        }
        alterKey(alterKeySpec) {
            this.formatted = false;
            this.alterKeySpec = alterKeySpec;
            return this;
        }
        convertToAlterAccList(alterKeySpec) {
            const max = Math.min(alterKeySpec.length, this.accList.length);
            for (let i = 0; i < max; ++i) {
                if (alterKeySpec[i]) {
                    this.accList[i].type = alterKeySpec[i];
                }
            }
        }
        format() {
            let stave = this.getStave();
            if (!stave) {
                stave = new Stave(0, 0, 100);
                this.setStave(stave);
            }
            this.width = 0;
            this.children = [];
            this.accList = Tables.keySignature(defined(this.keySpec));
            const accList = this.accList;
            const firstAccidentalType = accList.length > 0 ? accList[0].type : undefined;
            let cancelAccList;
            if (this.cancelKeySpec) {
                cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);
            }
            if (this.alterKeySpec) {
                this.convertToAlterAccList(this.alterKeySpec);
            }
            if (this.accList.length > 0) {
                const clef = (this.position === StaveModifierPosition.END ? stave.getEndClef() : stave.getClef()) || stave.getClef();
                if (cancelAccList) {
                    this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);
                }
                this.convertAccLines(clef, firstAccidentalType, accList);
                for (let i = 0; i < this.accList.length; ++i) {
                    this.convertToGlyph(this.accList[i], this.accList[i + 1], stave);
                }
            }
            this.calculateDimensions();
            this.formatted = true;
        }
        draw() {
            const stave = this.checkStave();
            const ctx = stave.checkContext();
            if (!this.formatted)
                this.format();
            this.setRendered();
            ctx.openGroup('keysignature', this.getAttribute('id'));
            for (let i = 0; i < this.children.length; i++) {
                const glyph = this.children[i];
                glyph.renderText(ctx, this.x, 0);
            }
            ctx.closeGroup();
        }
    }

    class Repetition extends StaveModifier {
        static get CATEGORY() {
            return "Repetition";
        }
        constructor(type, x, yShift) {
            super();
            this.symbolType = type;
            this.x = x;
            this.xShift = 0;
            this.yShift = yShift;
        }
        setShiftX(x) {
            this.xShift = x;
            return this;
        }
        setShiftY(y) {
            this.yShift = y;
            return this;
        }
        draw() {
            const stave = this.checkStave();
            const x = stave.getModifierXShift(this.getPosition());
            this.setRendered();
            switch (this.symbolType) {
                case Repetition.type.CODA_RIGHT:
                    this.drawCodaFixed(stave, x + stave.getWidth());
                    break;
                case Repetition.type.CODA_LEFT:
                    this.drawSymbolText(stave, x, 'Coda', true);
                    break;
                case Repetition.type.SEGNO_LEFT:
                    this.drawSegnoFixed(stave, x);
                    break;
                case Repetition.type.SEGNO_RIGHT:
                    this.drawSegnoFixed(stave, x + stave.getWidth());
                    break;
                case Repetition.type.DC:
                    this.drawSymbolText(stave, x, 'D.C.', false);
                    break;
                case Repetition.type.DC_AL_CODA:
                    this.drawSymbolText(stave, x, 'D.C. al', true);
                    break;
                case Repetition.type.DC_AL_FINE:
                    this.drawSymbolText(stave, x, 'D.C. al Fine', false);
                    break;
                case Repetition.type.DS:
                    this.drawSymbolText(stave, x, 'D.S.', false);
                    break;
                case Repetition.type.DS_AL_CODA:
                    this.drawSymbolText(stave, x, 'D.S. al', true);
                    break;
                case Repetition.type.DS_AL_FINE:
                    this.drawSymbolText(stave, x, 'D.S. al Fine', false);
                    break;
                case Repetition.type.FINE:
                    this.drawSymbolText(stave, x, 'Fine', false);
                    break;
                case Repetition.type.TO_CODA:
                    this.drawSymbolText(stave, x, 'To', true);
                    break;
            }
        }
        drawCodaFixed(stave, x) {
            const y = stave.getYForTopText(stave.getNumLines());
            this.text = Glyphs.coda;
            this.renderText(stave.checkContext(), x, y + Metrics.get('Repetition.coda.offsetY'));
            return this;
        }
        drawSegnoFixed(stave, x) {
            const y = stave.getYForTopText(stave.getNumLines());
            this.text = Glyphs.segno;
            this.renderText(stave.checkContext(), x, y + Metrics.get('Repetition.segno.offsetY'));
            return this;
        }
        drawSymbolText(stave, x, text, drawCoda) {
            const ctx = stave.checkContext();
            let textX = 0;
            this.text = text;
            if (drawCoda) {
                this.text += ' \ue048';
            }
            this.setFont(Metrics.getFontInfo('Repetition.text'));
            switch (this.symbolType) {
                case Repetition.type.CODA_LEFT:
                    textX = stave.getVerticalBarWidth();
                    break;
                case Repetition.type.DC:
                case Repetition.type.DC_AL_FINE:
                case Repetition.type.DS:
                case Repetition.type.DS_AL_FINE:
                case Repetition.type.FINE:
                default:
                    textX =
                        x - (stave.getNoteStartX() - this.x) + stave.getWidth() - this.width - Metrics.get('Repetition.text.offsetX');
            }
            const y = stave.getYForTopText(stave.getNumLines()) + Metrics.get('Repetition.text.offsetY');
            this.renderText(ctx, textX, y);
            return this;
        }
    }
    Repetition.type = {
        NONE: 1,
        CODA_LEFT: 2,
        CODA_RIGHT: 3,
        SEGNO_LEFT: 4,
        SEGNO_RIGHT: 5,
        DC: 6,
        DC_AL_CODA: 7,
        DC_AL_FINE: 8,
        DS: 9,
        DS_AL_CODA: 10,
        DS_AL_FINE: 11,
        FINE: 12,
        TO_CODA: 13,
    };

    class StaveSection extends StaveModifier {
        static get CATEGORY() {
            return "StaveSection";
        }
        constructor(section, x = 0, yShift = 0, drawRect = true) {
            super();
            this.setText(section);
            this.x = x;
            this.yShift = yShift;
            this.drawRect = drawRect;
            this.padding = Metrics.get('StaveSection.padding');
        }
        setDrawRect(drawRect) {
            this.drawRect = drawRect;
            return this;
        }
        draw() {
            const stave = this.checkStave();
            const ctx = stave.checkContext();
            this.setRendered();
            this.x = stave.getX() + stave.getModifierXShift(this.getPosition());
            const headroom = -1 * this.textMetrics.actualBoundingBoxDescent;
            const width = this.width + 2 * this.padding;
            const height = this.height + 2 * this.padding;
            const y = stave.getYForTopText(1.5) + this.yShift;
            const x = this.x + this.xShift;
            if (this.drawRect) {
                ctx.beginPath();
                ctx.rect(x, y - height + headroom, width, height);
                ctx.stroke();
            }
            this.renderText(ctx, this.xShift + this.padding, y - this.padding);
        }
    }

    class StaveTempo extends StaveModifier {
        static get CATEGORY() {
            return "StaveTempo";
        }
        constructor(tempo, x, shiftY) {
            super();
            this.durationToCode = {
                '1/4': Glyphs.metNoteDoubleWholeSquare,
                long: Glyphs.metNoteDoubleWholeSquare,
                '1/2': Glyphs.metNoteDoubleWhole,
                breve: Glyphs.metNoteDoubleWhole,
                1: Glyphs.metNoteWhole,
                whole: Glyphs.metNoteWhole,
                w: Glyphs.metNoteWhole,
                2: Glyphs.metNoteHalfUp,
                half: Glyphs.metNoteHalfUp,
                h: Glyphs.metNoteHalfUp,
                4: Glyphs.metNoteQuarterUp,
                quarter: Glyphs.metNoteQuarterUp,
                q: Glyphs.metNoteQuarterUp,
                8: Glyphs.metNote8thUp,
                eighth: Glyphs.metNote8thUp,
                16: Glyphs.metNote16thUp,
                '16th': Glyphs.metNote16thUp,
                32: Glyphs.metNote32ndUp,
                '32nd': Glyphs.metNote32ndUp,
                64: Glyphs.metNote64thUp,
                '64th': Glyphs.metNote64thUp,
                128: Glyphs.metNote128thUp,
                '128th': Glyphs.metNote128thUp,
                256: Glyphs.metNote256thUp,
                '256th': Glyphs.metNote256thUp,
                512: Glyphs.metNote512thUp,
                '512th': Glyphs.metNote512thUp,
                1024: Glyphs.metNote1024thUp,
                '1024th': Glyphs.metNote1024thUp,
            };
            this.tempo = tempo;
            this.position = StaveModifierPosition.ABOVE;
            this.x = x;
            this.setXShift(10);
            this.setYShift(shiftY);
        }
        setTempo(tempo) {
            this.tempo = tempo;
            return this;
        }
        draw() {
            const stave = this.checkStave();
            const shiftX = stave.getModifierXShift(this.getPosition());
            const ctx = stave.checkContext();
            this.setRendered();
            const { name, duration, dots, bpm, duration2, dots2, parenthesis } = this.tempo;
            let x = this.x + shiftX;
            const y = stave.getYForTopText(1);
            const el = new Element('StaveTempo.glyph');
            const elText = new Element('StaveTempo');
            if (name) {
                this.text = name;
                this.fontInfo = Metrics.getFontInfo('StaveTempo.name');
                this.renderText(ctx, shiftX, y);
                x += this.getWidth() + 3;
            }
            if ((name && duration) || parenthesis) {
                elText.setText('(');
                elText.renderText(ctx, x + this.xShift, y + this.yShift);
                x += elText.getWidth() + 3;
            }
            if (duration) {
                el.setText(this.durationToCode[duration]);
                el.renderText(ctx, x + this.xShift, y + this.yShift);
                x += el.getWidth() + 3;
                if (dots) {
                    el.setText(Glyphs.metAugmentationDot);
                    for (let i = 0; i < dots; i++) {
                        el.renderText(ctx, x + this.xShift, y + 2 + this.yShift);
                        x += el.getWidth() + 3;
                    }
                }
                elText.setText('=');
                elText.renderText(ctx, x + this.xShift, y + this.yShift);
                x += elText.getWidth() + 3;
                if (duration2) {
                    el.setText(this.durationToCode[duration2]);
                    el.renderText(ctx, x + this.xShift, y + this.yShift);
                    x += el.getWidth() + 3;
                    if (dots2) {
                        el.setText(Glyphs.metAugmentationDot);
                        for (let i = 0; i < dots2; i++) {
                            el.renderText(ctx, x + this.xShift, y + 2 + this.yShift);
                            x += el.getWidth() + 3;
                        }
                    }
                }
                else if (bpm) {
                    elText.setText('' + bpm);
                    elText.renderText(ctx, x + this.xShift, y + this.yShift);
                    x += elText.getWidth() + 3;
                }
                if (name || parenthesis) {
                    elText.setText(')');
                    elText.renderText(ctx, x + this.xShift, y + this.yShift);
                }
            }
        }
    }

    var TextJustification;
    (function (TextJustification) {
        TextJustification[TextJustification["LEFT"] = 1] = "LEFT";
        TextJustification[TextJustification["CENTER"] = 2] = "CENTER";
        TextJustification[TextJustification["RIGHT"] = 3] = "RIGHT";
    })(TextJustification || (TextJustification = {}));
    class TextNote extends Note {
        static get CATEGORY() {
            return "TextNote";
        }
        static get GLYPHS() {
            return {
                segno: Glyphs.segno,
                tr: Glyphs.ornamentTrill,
                mordent: Glyphs.ornamentMordent,
                mordentUpper: Glyphs.ornamentShortTrill,
                mordentLower: Glyphs.ornamentMordent,
                f: Glyphs.dynamicForte,
                p: Glyphs.dynamicPiano,
                m: Glyphs.dynamicMezzo,
                s: Glyphs.dynamicSforzando,
                z: Glyphs.dynamicZ,
                coda: Glyphs.coda,
                pedalOpen: Glyphs.keyboardPedalPed,
                pedalClose: Glyphs.keyboardPedalUp,
                caesuraStraight: Glyphs.caesura,
                caesuraCurved: Glyphs.caesuraCurved,
                breath: Glyphs.breathMarkComma,
                tick: Glyphs.breathMarkTick,
                turn: Glyphs.ornamentTurn,
                turnInverted: Glyphs.ornamentTurnSlash,
            };
        }
        constructor(noteStruct) {
            var _a, _b;
            super(noteStruct);
            this.text = (_a = noteStruct.text) !== null && _a !== void 0 ? _a : '';
            if (noteStruct.glyph) {
                this.text += TextNote.GLYPHS[noteStruct.glyph] || noteStruct.glyph;
            }
            if (noteStruct.font) {
                this.setFont(noteStruct.font);
            }
            else if (noteStruct.glyph === undefined) {
                this.setFont(Metrics.getFontInfo('TextNote.text.fontSize'));
            }
            const smallerFontSize = Font.convertSizeToPointValue(this.fontInfo.size) * 0.769231;
            if (noteStruct.superscript) {
                this.superscript = new Element('TexNote.subSuper');
                this.superscript.setText(noteStruct.superscript);
                this.superscript.setFontSize(smallerFontSize);
            }
            if (noteStruct.subscript) {
                this.subscript = new Element('TexNote.subSuper');
                this.subscript.setText(noteStruct.subscript);
                this.subscript.setFontSize(smallerFontSize);
            }
            this.line = (_b = noteStruct.line) !== null && _b !== void 0 ? _b : 0;
            this.smooth = noteStruct.smooth || false;
            this.ignoreTicks = noteStruct.ignoreTicks || false;
            this.justification = TextJustification.LEFT;
        }
        setJustification(just) {
            this.justification = just;
            return this;
        }
        setLine(line) {
            this.line = line;
            return this;
        }
        getLine() {
            return this.line;
        }
        preFormat() {
            if (this.preFormatted)
                return;
            const tickContext = this.checkTickContext(`Can't preformat without a TickContext.`);
            if (this.justification === TextJustification.CENTER) {
                this.leftDisplacedHeadPx = this.width / 2;
            }
            else if (this.justification === TextJustification.RIGHT) {
                this.leftDisplacedHeadPx = this.width;
            }
            this.rightDisplacedHeadPx = tickContext.getMetrics().glyphPx / 2;
            this.preFormatted = true;
        }
        draw() {
            const ctx = this.checkContext();
            const stave = this.checkStave();
            const tickContext = this.checkTickContext(`Can't draw without a TickContext.`);
            this.setRendered();
            let x = this.getAbsoluteX() + tickContext.getMetrics().glyphPx / 2;
            const width = this.getWidth();
            if (this.justification === TextJustification.CENTER) {
                x -= width / 2;
            }
            else if (this.justification === TextJustification.RIGHT) {
                x -= width;
            }
            const y = stave.getYForLine(this.line + -3);
            this.renderText(ctx, x, y);
            const height = this.getHeight();
            if (this.superscript) {
                this.superscript.renderText(ctx, x + this.width + 2, y - height / 2.2);
            }
            if (this.subscript) {
                this.subscript.renderText(ctx, x + this.width + 2, y + height / 2.2 - 1);
            }
        }
    }
    TextNote.Justification = TextJustification;

    class StaveText extends StaveModifier {
        static get CATEGORY() {
            return "StaveText";
        }
        constructor(text, position, options = {}) {
            var _a, _b, _c;
            super();
            this.setText(text);
            this.setXShift((_a = options.shiftX) !== null && _a !== void 0 ? _a : 0);
            this.setYShift((_b = options.shiftY) !== null && _b !== void 0 ? _b : 0);
            this.position = position;
            this.justification = (_c = options.justification) !== null && _c !== void 0 ? _c : TextNote.Justification.CENTER;
        }
        draw() {
            const stave = this.checkStave();
            const ctx = stave.checkContext();
            this.setRendered();
            let x;
            let y;
            switch (this.position) {
                case StaveModifierPosition.LEFT:
                case StaveModifierPosition.RIGHT:
                    y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2;
                    if (this.position === StaveModifierPosition.LEFT) {
                        x = stave.getX() - this.width - 24;
                    }
                    else {
                        x = stave.getX() + stave.getWidth() + 24;
                    }
                    break;
                case StaveModifierPosition.ABOVE:
                case StaveModifierPosition.BELOW:
                    x = stave.getX();
                    if (this.justification === TextJustification.CENTER) {
                        x += stave.getWidth() / 2 - this.width / 2;
                    }
                    else if (this.justification === TextJustification.RIGHT) {
                        x += stave.getWidth() - this.width;
                    }
                    if (this.position === StaveModifierPosition.ABOVE) {
                        y = stave.getYForTopText(2);
                    }
                    else {
                        y = stave.getYForBottomText(2);
                    }
                    break;
                default:
                    throw new RuntimeError('InvalidPosition', 'Value Must be in Modifier.Position.');
            }
            this.renderText(ctx, x, y + 4);
        }
    }

    var VoltaType;
    (function (VoltaType) {
        VoltaType[VoltaType["NONE"] = 1] = "NONE";
        VoltaType[VoltaType["BEGIN"] = 2] = "BEGIN";
        VoltaType[VoltaType["MID"] = 3] = "MID";
        VoltaType[VoltaType["END"] = 4] = "END";
        VoltaType[VoltaType["BEGIN_END"] = 5] = "BEGIN_END";
    })(VoltaType || (VoltaType = {}));
    class Volta extends StaveModifier {
        static get CATEGORY() {
            return "Volta";
        }
        static get type() {
            return VoltaType;
        }
        constructor(type, label, x, yShift) {
            super();
            this.type = type;
            this.x = x;
            this.yShift = yShift;
            this.text = label;
        }
        draw() {
            const stave = this.checkStave();
            const x = stave.getModifierXShift(this.getPosition());
            const ctx = stave.checkContext();
            this.setRendered();
            let width = stave.getWidth() - x;
            const topY = stave.getYForTopText(stave.getNumLines()) + this.yShift;
            const vertHeight = 1.5 * stave.getSpacingBetweenLines();
            switch (this.type) {
                case VoltaType.BEGIN:
                    ctx.fillRect(this.x + x, topY, 1, vertHeight);
                    break;
                case VoltaType.END:
                    width -= 5;
                    ctx.fillRect(this.x + x + width, topY, 1, vertHeight);
                    break;
                case VoltaType.BEGIN_END:
                    width -= 3;
                    ctx.fillRect(this.x + x, topY, 1, vertHeight);
                    ctx.fillRect(this.x + x + width, topY, 1, vertHeight);
                    break;
            }
            if (this.type === VoltaType.BEGIN || this.type === VoltaType.BEGIN_END) {
                this.renderText(ctx, x + 5, topY - this.yShift + 15);
            }
            ctx.fillRect(this.x + x, topY, width, 1);
        }
    }

    const assertIsValidTimeSig = (timeSpec) => {
        const numbers = timeSpec.split('/');
        numbers.forEach((number) => {
            if (/^[0-9+\-()]+$/.test(number) === false) {
                throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain valid signatures.`);
            }
        });
    };
    class TimeSignature extends StaveModifier {
        static get CATEGORY() {
            return "TimeSignature";
        }
        constructor(timeSpec = '4/4', customPadding = 15, validateArgs = true) {
            super();
            this.timeSpec = '4/4';
            this.line = 0;
            this.isNumeric = true;
            this.topStartX = 0;
            this.botStartX = 0;
            this.lineShift = 0;
            this.topText = new Element();
            this.botText = new Element();
            this.validateArgs = validateArgs;
            const padding = customPadding;
            this.topLine = 1;
            this.bottomLine = 3;
            this.setPosition(StaveModifierPosition.BEGIN);
            this.setTimeSig(timeSpec);
            this.setPadding(padding);
        }
        static getTimeSigCode(key, smallSig = false) {
            let code = Glyphs.null;
            switch (key) {
                case 'C':
                    code = Glyphs.timeSigCommon;
                    break;
                case 'C|':
                    code = Glyphs.timeSigCutCommon;
                    break;
                case '+':
                    code = smallSig ? Glyphs.timeSigPlusSmall : Glyphs.timeSigPlus;
                    break;
                case '-':
                    code = Glyphs.timeSigMinus;
                    break;
                case '(':
                    code = smallSig ? Glyphs.timeSigParensLeftSmall : Glyphs.timeSigParensLeft;
                    break;
                case ')':
                    code = smallSig ? Glyphs.timeSigParensRightSmall : Glyphs.timeSigParensRight;
                    break;
                default:
                    code = String.fromCodePoint(0xe080 + Number(key[0]));
                    break;
            }
            return code;
        }
        makeTimeSignatureGlyph(topDigits, botDigits) {
            let txt = '';
            let topWidth = 0;
            let height = 0;
            for (let i = 0; i < topDigits.length; ++i) {
                const code = TimeSignature.getTimeSigCode(topDigits[i], botDigits.length > 0);
                txt += code;
            }
            this.topText.setText(txt);
            topWidth = this.topText.getWidth();
            height = this.topText.getHeight();
            let botWidth = 0;
            txt = '';
            for (let i = 0; i < botDigits.length; ++i) {
                const code = TimeSignature.getTimeSigCode(botDigits[i], true);
                txt += code;
            }
            this.botText.setText(txt);
            botWidth = this.botText.getWidth();
            height = Math.max(height, this.botText.getHeight());
            this.lineShift = height > 30 ? 0.5 : 0;
            this.width = Math.max(topWidth, botWidth);
            this.topStartX = (this.width - topWidth) / 2.0;
            this.botStartX = (this.width - botWidth) / 2.0;
        }
        setTimeSig(timeSpec) {
            var _a, _b;
            this.timeSpec = timeSpec;
            if (timeSpec === 'C' || timeSpec === 'C|') {
                const code = TimeSignature.getTimeSigCode(timeSpec);
                this.line = 2;
                this.text = code;
                this.isNumeric = false;
            }
            else {
                if (this.validateArgs) {
                    assertIsValidTimeSig(timeSpec);
                }
                const parts = timeSpec.split('/');
                this.line = 0;
                this.isNumeric = true;
                this.makeTimeSignatureGlyph((_a = parts[0]) !== null && _a !== void 0 ? _a : '', (_b = parts[1]) !== null && _b !== void 0 ? _b : '');
            }
            return this;
        }
        getTimeSpec() {
            return this.timeSpec;
        }
        getLine() {
            return this.line;
        }
        setLine(line) {
            this.line = line;
        }
        getIsNumeric() {
            return this.isNumeric;
        }
        setIsNumeric(isNumeric) {
            this.isNumeric = isNumeric;
        }
        draw() {
            const stave = this.checkStave();
            const ctx = stave.checkContext();
            this.setRendered();
            ctx.openGroup('timesignature', this.getAttribute('id'));
            this.drawAt(ctx, stave, this.x);
            ctx.closeGroup();
        }
        drawAt(ctx, stave, x) {
            this.setRendered();
            if (this.isNumeric) {
                let startX = x + this.topStartX;
                let y = 0;
                if (this.botText.getText().length > 0)
                    y = stave.getYForLine(this.topLine - this.lineShift);
                else
                    y = (stave.getYForLine(this.topLine) + stave.getYForLine(this.bottomLine)) / 2;
                this.topText.renderText(ctx, startX, y);
                startX = x + this.botStartX;
                y = stave.getYForLine(this.bottomLine + this.lineShift);
                this.botText.renderText(ctx, startX, y);
            }
            else {
                this.renderText(ctx, x - this.x, stave.getYForLine(this.line));
            }
        }
    }

    const SORT_ORDER_BEG_MODIFIERS = {
        [Barline.CATEGORY]: 0,
        [Clef.CATEGORY]: 1,
        [KeySignature.CATEGORY]: 2,
        [TimeSignature.CATEGORY]: 3,
    };
    const SORT_ORDER_END_MODIFIERS = {
        [TimeSignature.CATEGORY]: 0,
        [KeySignature.CATEGORY]: 1,
        [Barline.CATEGORY]: 2,
        [Clef.CATEGORY]: 3,
    };
    class Stave extends Element {
        static get CATEGORY() {
            return "Stave";
        }
        static get defaultPadding() {
            return Metrics.get('Stave.padding') + Metrics.get('Stave.endPaddingMax');
        }
        static get rightPadding() {
            return Metrics.get('Stave.endPaddingMax');
        }
        constructor(x, y, width, options) {
            super();
            this.x = x;
            this.y = y;
            this.width = width;
            this.formatted = false;
            this.startX = x + 5;
            this.endX = x + width;
            this.modifiers = [];
            this.measure = 0;
            this.clef = 'treble';
            this.endClef = undefined;
            this.options = Object.assign({ verticalBarWidth: 10, numLines: 5, leftBar: true, rightBar: true, spacingBetweenLinesPx: Tables.STAVE_LINE_DISTANCE, spaceAboveStaffLn: 4, spaceBelowStaffLn: 4, topTextPosition: 1, bottomTextPosition: 4, lineConfig: [] }, options);
            this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };
            this.defaultLedgerLineStyle = { strokeStyle: '#444', lineWidth: 2 };
            this.resetLines();
            this.addModifier(new Barline(this.options.leftBar ? BarlineType.SINGLE : BarlineType.NONE));
            this.addEndModifier(new Barline(this.options.rightBar ? BarlineType.SINGLE : BarlineType.NONE));
        }
        setDefaultLedgerLineStyle(style) {
            this.defaultLedgerLineStyle = style;
        }
        getDefaultLedgerLineStyle() {
            return Object.assign(Object.assign({}, this.getStyle()), this.defaultLedgerLineStyle);
        }
        space(spacing) {
            return this.options.spacingBetweenLinesPx * spacing;
        }
        resetLines() {
            this.options.lineConfig = [];
            for (let i = 0; i < this.options.numLines; i++) {
                this.options.lineConfig.push({ visible: true });
            }
            this.height = (this.options.numLines + this.options.spaceAboveStaffLn) * this.options.spacingBetweenLinesPx;
            this.options.bottomTextPosition = this.options.numLines;
        }
        setNoteStartX(x) {
            if (!this.formatted)
                this.format();
            this.startX = x;
            return this;
        }
        getNoteStartX() {
            if (!this.formatted)
                this.format();
            return this.startX;
        }
        getNoteEndX() {
            if (!this.formatted)
                this.format();
            return this.endX;
        }
        getTieStartX() {
            return this.startX;
        }
        getTieEndX() {
            return this.endX;
        }
        getNumLines() {
            return this.options.numLines;
        }
        setNumLines(n) {
            this.options.numLines = n;
            this.resetLines();
            return this;
        }
        getTopLineTopY() {
            return this.getYForLine(0);
        }
        getBottomLineBottomY() {
            var _a;
            return this.getYForLine(this.getNumLines() - 1) + ((_a = this.getStyle().lineWidth) !== null && _a !== void 0 ? _a : 1);
        }
        setX(x) {
            const shift = x - this.x;
            this.formatted = false;
            this.x = x;
            this.startX += shift;
            this.endX += shift;
            for (let i = 0; i < this.modifiers.length; i++) {
                const mod = this.modifiers[i];
                mod.setX(mod.getX() + shift);
            }
            return this;
        }
        setWidth(width) {
            this.formatted = false;
            this.width = width;
            this.endX = this.x + width;
            return this;
        }
        setMeasure(measure) {
            this.measure = measure;
            return this;
        }
        getMeasure() {
            return this.measure;
        }
        getModifierXShift(index = 0) {
            if (typeof index !== 'number') {
                throw new RuntimeError('InvalidIndex', 'Must be of number type');
            }
            if (!this.formatted)
                this.format();
            if (this.getModifiers(StaveModifierPosition.BEGIN).length === 1) {
                return 0;
            }
            if (this.modifiers[index].getPosition() === StaveModifierPosition.RIGHT) {
                return 0;
            }
            let startX = this.startX - this.x;
            const begBarline = this.modifiers[0];
            if (begBarline.getType() === BarlineType.REPEAT_BEGIN && startX > begBarline.getWidth()) {
                startX -= begBarline.getWidth();
            }
            return startX;
        }
        setRepetitionType(type, yShift = 0) {
            this.modifiers.push(new Repetition(type, this.x, yShift));
            return this;
        }
        setVoltaType(type, label, y) {
            this.modifiers.push(new Volta(type, label, this.x, y));
            return this;
        }
        setSection(section, y, xOffset = 0, fontSize, drawRect = true) {
            const staveSection = new StaveSection(section).setYShift(y).setXShift(xOffset).setDrawRect(drawRect);
            if (fontSize) {
                staveSection.setFontSize(fontSize);
            }
            this.addModifier(staveSection);
            return this;
        }
        setTempo(tempo, y) {
            this.modifiers.push(new StaveTempo(tempo, this.x, y));
            return this;
        }
        setStaveText(text, position, options = {}) {
            this.modifiers.push(new StaveText(text, position, options));
            return this;
        }
        getSpacingBetweenLines() {
            return this.options.spacingBetweenLinesPx;
        }
        getBoundingBox() {
            return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);
        }
        getBottomY() {
            const options = this.options;
            const spacing = options.spacingBetweenLinesPx;
            const scoreBottom = this.getYForLine(options.numLines) + options.spaceBelowStaffLn * spacing;
            return scoreBottom;
        }
        getBottomLineY() {
            return this.getYForLine(this.options.numLines);
        }
        getYForLine(line) {
            const options = this.options;
            const spacing = options.spacingBetweenLinesPx;
            const headroom = options.spaceAboveStaffLn;
            const y = this.y + line * spacing + headroom * spacing;
            return y;
        }
        getLineForY(y) {
            const options = this.options;
            const spacing = options.spacingBetweenLinesPx;
            const headroom = options.spaceAboveStaffLn;
            return (y - this.y) / spacing - headroom;
        }
        getYForTopText(line = 0) {
            return this.getYForLine(-line - this.options.topTextPosition);
        }
        getYForBottomText(line = 0) {
            return this.getYForLine(this.options.bottomTextPosition + line);
        }
        getYForNote(line) {
            const options = this.options;
            const spacing = options.spacingBetweenLinesPx;
            const headroom = options.spaceAboveStaffLn;
            return this.y + headroom * spacing + 5 * spacing - line * spacing;
        }
        getYForGlyphs() {
            return this.getYForLine(3);
        }
        addModifier(modifier, position) {
            if (position !== undefined) {
                modifier.setPosition(position);
            }
            modifier.setStave(this);
            this.formatted = false;
            this.modifiers.push(modifier);
            return this;
        }
        addEndModifier(modifier) {
            this.addModifier(modifier, StaveModifierPosition.END);
            return this;
        }
        setBegBarType(type) {
            const { SINGLE, REPEAT_BEGIN, NONE } = BarlineType;
            if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {
                this.modifiers[0].setType(type);
                this.formatted = false;
            }
            return this;
        }
        setEndBarType(type) {
            if (type !== BarlineType.REPEAT_BEGIN) {
                this.modifiers[1].setType(type);
                this.formatted = false;
            }
            return this;
        }
        setClef(clefSpec, size, annotation, position) {
            if (position === undefined) {
                position = StaveModifierPosition.BEGIN;
            }
            if (position === StaveModifierPosition.END) {
                this.endClef = clefSpec;
            }
            else {
                this.clef = clefSpec;
            }
            const clefs = this.getModifiers(position, Clef.CATEGORY);
            if (clefs.length === 0) {
                this.addClef(clefSpec, size, annotation, position);
            }
            else {
                clefs[0].setType(clefSpec, size, annotation);
            }
            return this;
        }
        getClef() {
            return this.clef;
        }
        setEndClef(clefSpec, size, annotation) {
            this.setClef(clefSpec, size, annotation, StaveModifierPosition.END);
            return this;
        }
        getEndClef() {
            return this.endClef;
        }
        setKeySignature(keySpec, cancelKeySpec, position) {
            if (position === undefined) {
                position = StaveModifierPosition.BEGIN;
            }
            const keySignatures = this.getModifiers(position, KeySignature.CATEGORY);
            if (keySignatures.length === 0) {
                this.addKeySignature(keySpec, cancelKeySpec, position);
            }
            else {
                keySignatures[0].setKeySig(keySpec, cancelKeySpec);
            }
            return this;
        }
        setEndKeySignature(keySpec, cancelKeySpec) {
            this.setKeySignature(keySpec, cancelKeySpec, StaveModifierPosition.END);
            return this;
        }
        setTimeSignature(timeSpec, customPadding, position) {
            if (position === undefined) {
                position = StaveModifierPosition.BEGIN;
            }
            const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY);
            if (timeSignatures.length === 0) {
                this.addTimeSignature(timeSpec, customPadding, position);
            }
            else {
                timeSignatures[0].setTimeSig(timeSpec);
            }
            return this;
        }
        setEndTimeSignature(timeSpec, customPadding) {
            this.setTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);
            return this;
        }
        addKeySignature(keySpec, cancelKeySpec, position) {
            if (position === undefined) {
                position = StaveModifierPosition.BEGIN;
            }
            this.addModifier(new KeySignature(keySpec, cancelKeySpec).setPosition(position), position);
            return this;
        }
        addClef(clef, size, annotation, position) {
            if (position === undefined || position === StaveModifierPosition.BEGIN) {
                this.clef = clef;
            }
            else if (position === StaveModifierPosition.END) {
                this.endClef = clef;
            }
            this.addModifier(new Clef(clef, size, annotation), position);
            return this;
        }
        addEndClef(clef, size, annotation) {
            this.addClef(clef, size, annotation, StaveModifierPosition.END);
            return this;
        }
        addTimeSignature(timeSpec, customPadding, position) {
            this.addModifier(new TimeSignature(timeSpec, customPadding), position);
            return this;
        }
        addEndTimeSignature(timeSpec, customPadding) {
            this.addTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);
            return this;
        }
        addTrebleGlyph() {
            this.addClef('treble');
            return this;
        }
        getModifiers(position, category) {
            const noPosition = position === undefined;
            const noCategory = category === undefined;
            if (noPosition && noCategory) {
                return this.modifiers;
            }
            else if (noPosition) {
                return this.modifiers.filter((m) => category === m.getCategory());
            }
            else if (noCategory) {
                return this.modifiers.filter((m) => position === m.getPosition());
            }
            else {
                return this.modifiers.filter((m) => position === m.getPosition() && category === m.getCategory());
            }
        }
        sortByCategory(items, order) {
            for (let i = items.length - 1; i >= 0; i--) {
                for (let j = 0; j < i; j++) {
                    if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {
                        const temp = items[j];
                        items[j] = items[j + 1];
                        items[j + 1] = temp;
                    }
                }
            }
        }
        format() {
            var _a, _b, _c, _d;
            const begBarline = this.modifiers[0];
            const endBarline = this.modifiers[1];
            const begModifiers = this.getModifiers(StaveModifierPosition.BEGIN);
            const endModifiers = this.getModifiers(StaveModifierPosition.END);
            this.sortByCategory(begModifiers, SORT_ORDER_BEG_MODIFIERS);
            this.sortByCategory(endModifiers, SORT_ORDER_END_MODIFIERS);
            if (begModifiers.length > 1 && begBarline.getType() === BarlineType.REPEAT_BEGIN) {
                begModifiers.push(begModifiers.splice(0, 1)[0]);
                begModifiers.splice(0, 0, new Barline(BarlineType.SINGLE));
            }
            if (endModifiers.indexOf(endBarline) > 0) {
                endModifiers.splice(0, 0, new Barline(BarlineType.NONE));
            }
            let width;
            let padding;
            let modifier;
            let offset = 0;
            let x = this.x;
            for (let i = 0; i < begModifiers.length; i++) {
                modifier = begModifiers[i];
                padding = modifier.getPadding(i + offset);
                width = modifier.getWidth();
                x += padding;
                modifier.setX(x);
                x += width;
                if (padding + width === 0)
                    offset--;
            }
            this.startX = x;
            x = this.x + this.width;
            const widths = {
                left: 0,
                right: 0,
                paddingRight: 0,
                paddingLeft: 0,
            };
            let lastBarlineIdx = 0;
            for (let i = 0; i < endModifiers.length; i++) {
                modifier = endModifiers[i];
                lastBarlineIdx = isBarline(modifier) ? i : lastBarlineIdx;
                widths.right = 0;
                widths.left = 0;
                widths.paddingRight = 0;
                widths.paddingLeft = 0;
                const layoutMetrics = modifier.getLayoutMetrics();
                if (layoutMetrics) {
                    if (i !== 0) {
                        widths.right = (_a = layoutMetrics.xMax) !== null && _a !== void 0 ? _a : 0;
                        widths.paddingRight = (_b = layoutMetrics.paddingRight) !== null && _b !== void 0 ? _b : 0;
                    }
                    widths.left = -((_c = layoutMetrics.xMin) !== null && _c !== void 0 ? _c : 0);
                    widths.paddingLeft = (_d = layoutMetrics.paddingLeft) !== null && _d !== void 0 ? _d : 0;
                    if (i === endModifiers.length - 1) {
                        widths.paddingLeft = 0;
                    }
                }
                else {
                    widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);
                    if (i !== 0) {
                        widths.right = modifier.getWidth();
                    }
                    if (i === 0) {
                        widths.left = modifier.getWidth();
                    }
                }
                x -= widths.paddingRight;
                x -= widths.right;
                modifier.setX(x);
                x -= widths.left;
                x -= widths.paddingLeft;
            }
            this.endX = endModifiers.length === 1 ? this.x + this.width : x;
            this.formatted = true;
        }
        draw() {
            var _a;
            const ctx = this.checkContext();
            this.setRendered();
            ctx.openGroup('stave', this.getAttribute('id'));
            if (!this.formatted)
                this.format();
            const numLines = this.options.numLines;
            const width = this.width;
            const x = this.x;
            let y;
            const lineWidth = (_a = this.getStyle().lineWidth) !== null && _a !== void 0 ? _a : 1;
            const lineWidthCorrection = lineWidth % 2 === 0 ? 0 : 0.5;
            for (let line = 0; line < numLines; line++) {
                y = this.getYForLine(line);
                if (this.options.lineConfig[line].visible) {
                    ctx.beginPath();
                    ctx.moveTo(x, y + lineWidthCorrection);
                    ctx.lineTo(x + width, y + lineWidthCorrection);
                    ctx.stroke();
                }
            }
            ctx.closeGroup();
            for (let i = 0; i < this.modifiers.length; i++) {
                const modifier = this.modifiers[i];
                modifier.setContext(ctx);
                modifier.setStave(this);
                modifier.drawWithStyle();
            }
            if (this.measure > 0) {
                ctx.setFont(this.fontInfo);
                const textWidth = ctx.measureText('' + this.measure).width;
                y = this.getYForTopText(0) + 3;
                ctx.fillText('' + this.measure, this.x - textWidth / 2, y);
            }
        }
        getVerticalBarWidth() {
            return this.options.verticalBarWidth;
        }
        getConfigForLines() {
            return this.options.lineConfig;
        }
        setConfigForLine(lineNumber, lineConfig) {
            if (lineNumber >= this.options.numLines || lineNumber < 0) {
                throw new RuntimeError('StaveConfigError', 'The line number must be within the range of the number of lines in the Stave.');
            }
            if (lineConfig.visible === undefined) {
                throw new RuntimeError('StaveConfigError', "The line configuration object is missing the 'visible' property.");
            }
            if (typeof lineConfig.visible !== 'boolean') {
                throw new RuntimeError('StaveConfigError', "The line configuration objects 'visible' property must be true or false.");
            }
            this.options.lineConfig[lineNumber] = lineConfig;
            return this;
        }
        setConfigForLines(linesConfiguration) {
            if (linesConfiguration.length !== this.options.numLines) {
                throw new RuntimeError('StaveConfigError', 'The length of the lines configuration array must match the number of lines in the Stave');
            }
            for (const lineConfig in linesConfiguration) {
                if (linesConfiguration[lineConfig].visible === undefined) {
                    linesConfiguration[lineConfig] = this.options.lineConfig[lineConfig];
                }
                this.options.lineConfig[lineConfig] = Object.assign(Object.assign({}, this.options.lineConfig[lineConfig]), linesConfiguration[lineConfig]);
            }
            this.options.lineConfig = linesConfiguration;
            return this;
        }
        static formatBegModifiers(staves) {
            const adjustCategoryStartX = (category) => {
                let minStartX = 0;
                staves.forEach((stave) => {
                    const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, category);
                    if (modifiers.length > 0 && modifiers[0].getX() > minStartX)
                        minStartX = modifiers[0].getX();
                });
                let adjustX = 0;
                staves.forEach((stave) => {
                    adjustX = 0;
                    const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, category);
                    modifiers.forEach((modifier) => {
                        if (minStartX - modifier.getX() > adjustX)
                            adjustX = minStartX - modifier.getX();
                    });
                    const allModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);
                    let bAdjust = false;
                    allModifiers.forEach((modifier) => {
                        if (modifier.getCategory() === category)
                            bAdjust = true;
                        if (bAdjust && adjustX > 0)
                            modifier.setX(modifier.getX() + adjustX);
                    });
                    stave.setNoteStartX(stave.getNoteStartX() + adjustX);
                });
            };
            staves.forEach((stave) => {
                if (!stave.formatted)
                    stave.format();
            });
            adjustCategoryStartX("Clef");
            adjustCategoryStartX("KeySignature");
            adjustCategoryStartX("TimeSignature");
            let maxX = 0;
            staves.forEach((stave) => {
                if (stave.getNoteStartX() > maxX)
                    maxX = stave.getNoteStartX();
            });
            staves.forEach((stave) => {
                stave.setNoteStartX(maxX);
            });
            maxX = 0;
            staves.forEach((stave) => {
                const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, "Barline");
                modifiers.forEach((modifier) => {
                    if (modifier.getType() === BarlineType.REPEAT_BEGIN)
                        if (modifier.getX() > maxX)
                            maxX = modifier.getX();
                });
            });
            staves.forEach((stave) => {
                const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, "Barline");
                modifiers.forEach((modifier) => {
                    if (modifier.getType() === BarlineType.REPEAT_BEGIN)
                        modifier.setX(maxX);
                });
            });
        }
    }

    function drawBoldDoubleLine(ctx, type, topX, topY, botY) {
        if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {
            throw new RuntimeError('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');
        }
        let xShift = 3;
        let variableWidth = 3.5;
        const thickLineOffset = 2;
        if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {
            xShift = -5;
            variableWidth = 3;
        }
        ctx.fillRect(topX + xShift, topY, 1, botY - topY);
        ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);
    }
    class StaveConnector extends Element {
        static get CATEGORY() {
            return "StaveConnector";
        }
        constructor(topStave, bottomStave) {
            super();
            this.thickness = Tables.STAVE_LINE_THICKNESS;
            this.topStave = topStave;
            this.bottomStave = bottomStave;
            this.type = StaveConnector.type.DOUBLE;
            this.xShift = 0;
            this.texts = [];
        }
        setType(type) {
            const newType = typeof type === 'string' ? StaveConnector.typeString[type] : type;
            if (Object.values(StaveConnector.type).includes(newType)) {
                this.type = newType;
            }
            return this;
        }
        getType() {
            return this.type;
        }
        setText(text, options = {}) {
            var _a, _b;
            const textElement = new Element('StaveConnector.text');
            textElement.setText(text);
            textElement.setXShift((_a = options.shiftX) !== null && _a !== void 0 ? _a : 0);
            textElement.setYShift((_b = options.shiftY) !== null && _b !== void 0 ? _b : 0);
            this.texts.push(textElement);
            return this;
        }
        draw() {
            const ctx = this.checkContext();
            this.setRendered();
            let topY = this.topStave.getYForLine(0);
            let botY = this.bottomStave.getYForLine(this.bottomStave.getNumLines() - 1) + this.thickness;
            let width = 3;
            let topX = this.topStave.getX();
            const isRightSidedConnector = this.type === StaveConnector.type.SINGLE_RIGHT ||
                this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||
                this.type === StaveConnector.type.THIN_DOUBLE;
            if (isRightSidedConnector) {
                topX = this.topStave.getX() + this.topStave.getWidth();
            }
            let attachmentHeight = botY - topY;
            const element = new Element();
            switch (this.type) {
                case StaveConnector.type.SINGLE:
                    width = 1;
                    break;
                case StaveConnector.type.SINGLE_LEFT:
                    width = 1;
                    break;
                case StaveConnector.type.SINGLE_RIGHT:
                    width = 1;
                    break;
                case StaveConnector.type.DOUBLE:
                    topX -= 5;
                    topY -= this.thickness;
                    attachmentHeight += 0.5;
                    break;
                case StaveConnector.type.BRACE: {
                    width = 12;
                    const x1 = this.topStave.getX() - 2 + this.xShift;
                    const y1 = topY;
                    const x3 = x1;
                    const y3 = botY;
                    const x2 = x1 - width;
                    const y2 = y1 + attachmentHeight / 2.0;
                    const cpx1 = x2 - 0.9 * width;
                    const cpy1 = y1 + 0.2 * attachmentHeight;
                    const cpx2 = x1 + 1.1 * width;
                    const cpy2 = y2 - 0.135 * attachmentHeight;
                    const cpx3 = cpx2;
                    const cpy3 = y2 + 0.135 * attachmentHeight;
                    const cpx4 = cpx1;
                    const cpy4 = y3 - 0.2 * attachmentHeight;
                    const cpx5 = x2 - width;
                    const cpy5 = cpy4;
                    const cpx6 = x1 + 0.4 * width;
                    const cpy6 = y2 + 0.135 * attachmentHeight;
                    const cpx7 = cpx6;
                    const cpy7 = y2 - 0.135 * attachmentHeight;
                    const cpx8 = cpx5;
                    const cpy8 = cpy1;
                    ctx.beginPath();
                    ctx.moveTo(x1, y1);
                    ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);
                    ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);
                    ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);
                    ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);
                    ctx.fill();
                    ctx.stroke();
                    break;
                }
                case StaveConnector.type.BRACKET:
                    topY -= 6;
                    botY += 6;
                    attachmentHeight = botY - topY;
                    element.setText(Glyphs.bracketTop);
                    element.renderText(ctx, topX - 5, topY);
                    element.setText(Glyphs.bracketBottom);
                    element.renderText(ctx, topX - 5, botY);
                    topX -= 5;
                    break;
                case StaveConnector.type.BOLD_DOUBLE_LEFT:
                    drawBoldDoubleLine(ctx, this.type, topX + this.xShift, topY, botY - this.thickness);
                    break;
                case StaveConnector.type.BOLD_DOUBLE_RIGHT:
                    drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);
                    break;
                case StaveConnector.type.THIN_DOUBLE:
                    width = 1;
                    attachmentHeight -= this.thickness;
                    break;
                case StaveConnector.type.NONE:
                    break;
                default:
                    throw new RuntimeError('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid.`);
            }
            if (this.type !== StaveConnector.type.BRACE &&
                this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&
                this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&
                this.type !== StaveConnector.type.NONE) {
                ctx.fillRect(topX, topY, width, attachmentHeight);
            }
            if (this.type === StaveConnector.type.THIN_DOUBLE) {
                ctx.fillRect(topX - 3, topY, width, attachmentHeight);
            }
            for (let i = 0; i < this.texts.length; i++) {
                const textElement = this.texts[i];
                const x = this.topStave.getX() - textElement.getWidth() - 24;
                const y = (this.topStave.getYForLine(0) + this.bottomStave.getBottomLineY()) / 2;
                textElement.renderText(ctx, x, y + 4);
            }
        }
    }
    StaveConnector.type = {
        SINGLE_RIGHT: 0,
        SINGLE_LEFT: 1,
        SINGLE: 1,
        DOUBLE: 2,
        BRACE: 3,
        BRACKET: 4,
        BOLD_DOUBLE_LEFT: 5,
        BOLD_DOUBLE_RIGHT: 6,
        THIN_DOUBLE: 7,
        NONE: 8,
    };
    StaveConnector.typeString = {
        singleRight: StaveConnector.type.SINGLE_RIGHT,
        singleLeft: StaveConnector.type.SINGLE_LEFT,
        single: StaveConnector.type.SINGLE,
        double: StaveConnector.type.DOUBLE,
        brace: StaveConnector.type.BRACE,
        bracket: StaveConnector.type.BRACKET,
        boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,
        boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,
        thinDouble: StaveConnector.type.THIN_DOUBLE,
        none: StaveConnector.type.NONE,
    };

    function createContexts(voices, makeContext, addToContext) {
        if (voices.length === 0)
            return {
                map: {},
                array: [],
                list: [],
                resolutionMultiplier: 0,
            };
        const tickToContextMap = {};
        const tickList = [];
        const contexts = [];
        const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);
        voices.forEach((voice, voiceIndex) => {
            const ticksUsed = new Fraction(0, resolutionMultiplier);
            voice.getTickables().forEach((tickable) => {
                const integerTicks = ticksUsed.numerator;
                if (!tickToContextMap[integerTicks]) {
                    const newContext = makeContext({ tickID: integerTicks });
                    contexts.push(newContext);
                    tickToContextMap[integerTicks] = newContext;
                    tickList.push(integerTicks);
                }
                addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);
                ticksUsed.add(tickable.getTicks());
            });
        });
        return {
            map: tickToContextMap,
            array: contexts,
            list: tickList.sort((a, b) => a - b),
            resolutionMultiplier,
        };
    }
    function L$5(...args) {
        if (Formatter.DEBUG)
            log('VexFlow.Formatter', args);
    }
    function getRestLineForNextNoteGroup(notes, currRestLine, currNoteIndex, compare) {
        let nextRestLine = currRestLine;
        for (let noteIndex = currNoteIndex + 1; noteIndex < notes.length; noteIndex++) {
            const note = notes[noteIndex];
            if (isNote(note) && !note.isRest() && !note.shouldIgnoreTicks()) {
                nextRestLine = note.getLineForRest();
                break;
            }
        }
        if (compare && currRestLine !== nextRestLine) {
            const top = Math.max(currRestLine, nextRestLine);
            const bot = Math.min(currRestLine, nextRestLine);
            nextRestLine = midLine(top, bot);
        }
        return nextRestLine;
    }
    class Formatter {
        static SimpleFormat(notes, x = 0, { paddingBetween = 10 } = {}) {
            notes.reduce((accumulator, note) => {
                note.addToModifierContext(new ModifierContext());
                const tickContext = new TickContext().addTickable(note).preFormat();
                const metrics = tickContext.getMetrics();
                tickContext.setX(accumulator + metrics.totalLeftPx);
                return accumulator + tickContext.getWidth() + metrics.totalRightPx + paddingBetween;
            }, x);
        }
        static plotDebugging(ctx, formatter, xPos, y1, y2, options) {
            var _a, _b;
            options = Object.assign({ stavePadding: Metrics.get('Stave.padding') }, options);
            const x = xPos + options.stavePadding;
            const contextGaps = formatter.contextGaps;
            function stroke(x1, x2, color) {
                ctx.beginPath();
                ctx.setStrokeStyle(color);
                ctx.setFillStyle(color);
                ctx.setLineWidth(1);
                ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);
            }
            ctx.save();
            ctx.setFont(Metrics.get('fontFamily'), 8);
            contextGaps.gaps.forEach((gap) => {
                stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');
                ctx.setFillStyle('green');
                ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);
            });
            ctx.setFillStyle('red');
            ctx.fillText(`Loss: ${((_a = formatter.totalCost) !== null && _a !== void 0 ? _a : 0).toFixed(2)} Shift: ${((_b = formatter.totalShift) !== null && _b !== void 0 ? _b : 0).toFixed(2)} Gap: ${contextGaps.total.toFixed(2)}`, x - 20, y2 + 27);
            ctx.restore();
        }
        static FormatAndDraw(ctx, stave, notes, params) {
            let options = {
                autoBeam: false,
                alignRests: false,
            };
            if (typeof params === 'object') {
                options = Object.assign(Object.assign({}, options), params);
            }
            else if (typeof params === 'boolean') {
                options.autoBeam = params;
            }
            const voice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);
            const beams = options.autoBeam ? Beam.applyAndGetBeams(voice) : [];
            new Formatter()
                .joinVoices([voice])
                .formatToStave([voice], stave, { alignRests: options.alignRests, stave });
            voice.setContext(ctx).setStave(stave).drawWithStyle();
            beams.forEach((beam) => beam.setContext(ctx).drawWithStyle());
            return voice.getBoundingBox();
        }
        static FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autoBeam, params) {
            let opts = {
                autoBeam,
                alignRests: false,
            };
            if (typeof params === 'object') {
                opts = Object.assign(Object.assign({}, opts), params);
            }
            else if (typeof params === 'boolean') {
                opts.autoBeam = params;
            }
            const notevoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);
            const tabvoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(tabnotes);
            const beams = opts.autoBeam ? Beam.applyAndGetBeams(notevoice) : [];
            new Formatter()
                .joinVoices([notevoice])
                .joinVoices([tabvoice])
                .formatToStave([notevoice, tabvoice], stave, { alignRests: opts.alignRests });
            notevoice.draw(ctx, stave);
            tabvoice.draw(ctx, tabstave);
            beams.forEach((beam) => beam.setContext(ctx).drawWithStyle());
            new StaveConnector(stave, tabstave).setContext(ctx).drawWithStyle();
        }
        static AlignRestsToNotes(tickables, alignAllNotes, alignTuplets) {
            tickables.forEach((currTickable, index) => {
                if (isStaveNote(currTickable) && currTickable.isRest()) {
                    if (currTickable.getTuplet() && !alignTuplets) {
                        return;
                    }
                    const line = currTickable.getLineForRest();
                    if (line !== 3) {
                        return;
                    }
                    if (alignAllNotes || currTickable.getBeam()) {
                        const props = currTickable.getKeyProps()[0];
                        if (index === 0) {
                            props.line = getRestLineForNextNoteGroup(tickables, props.line, index, false);
                        }
                        else if (index > 0 && index < tickables.length) {
                            const prevTickable = tickables[index - 1];
                            if (isStaveNote(prevTickable)) {
                                if (prevTickable.isRest()) {
                                    props.line = prevTickable.getKeyProps()[0].line;
                                }
                                else {
                                    const restLine = prevTickable.getLineForRest();
                                    props.line = getRestLineForNextNoteGroup(tickables, restLine, index, true);
                                }
                            }
                        }
                        currTickable.setKeyLine(0, props.line);
                    }
                }
            });
        }
        constructor(options) {
            this.formatterOptions = Object.assign({ globalSoftmax: false, softmaxFactor: Tables.SOFTMAX_FACTOR, maxIterations: 5 }, options);
            this.justifyWidth = 0;
            this.totalCost = 0;
            this.totalShift = 0;
            this.durationStats = {};
            this.minTotalWidth = 0;
            this.hasMinTotalWidth = false;
            this.tickContexts = {
                map: {},
                array: [],
                list: [],
                resolutionMultiplier: 0,
            };
            this.modifierContexts = [];
            this.contextGaps = {
                total: 0,
                gaps: [],
            };
            this.voices = [];
            this.lossHistory = [];
        }
        alignRests(voices, alignAllNotes) {
            if (!voices || !voices.length) {
                throw new RuntimeError('BadArgument', 'No voices to format rests');
            }
            voices.forEach((voice) => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));
        }
        preCalculateMinTotalWidth(voices) {
            const unalignedPadding = Metrics.get('Stave.unalignedNotePadding');
            let unalignedCtxCount = 0;
            let wsum = 0;
            let dsum = 0;
            const widths = [];
            const durations = [];
            if (this.hasMinTotalWidth)
                return this.minTotalWidth;
            if (!voices) {
                throw new RuntimeError('BadArgument', "'voices' required to run preCalculateMinTotalWidth");
            }
            this.createTickContexts(voices);
            const { list: contextList, map: contextMap } = this.tickContexts;
            this.minTotalWidth = 0;
            contextList.forEach((tick) => {
                const context = contextMap[tick];
                context.preFormat();
                if (context.getTickables().length < voices.length) {
                    unalignedCtxCount += 1;
                }
                context.getTickables().forEach((t) => {
                    wsum += t.getMetrics().width;
                    dsum += t.getTicks().value();
                    widths.push(t.getMetrics().width);
                    durations.push(t.getTicks().value());
                });
                const width = context.getWidth();
                this.minTotalWidth += width;
            });
            this.hasMinTotalWidth = true;
            const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;
            const wvar = sumArray(widths.map((ll) => Math.pow(ll - wavg, 2)));
            const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;
            const davg = dsum / durations.length;
            const dvar = sumArray(durations.map((ll) => Math.pow(ll - davg, 2)));
            const dpads = Math.pow(dvar / durations.length, 0.5) / davg;
            const padmax = Math.max(dpads, wpads) * contextList.length * unalignedPadding;
            const unalignedPad = unalignedPadding * unalignedCtxCount;
            return this.minTotalWidth + Math.max(unalignedPad, padmax);
        }
        getMinTotalWidth() {
            if (!this.hasMinTotalWidth) {
                throw new RuntimeError('NoMinTotalWidth', "Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'");
            }
            return this.minTotalWidth;
        }
        static getResolutionMultiplier(voices) {
            if (!voices || !voices.length) {
                throw new RuntimeError('BadArgument', 'No voices to format');
            }
            const totalTicks = voices[0].getTotalTicks();
            const resolutionMultiplier = voices.reduce((accumulator, voice) => {
                if (!voice.getTotalTicks().equals(totalTicks)) {
                    throw new RuntimeError('TickMismatch', 'Voices should have same total note duration in ticks.');
                }
                if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {
                    throw new RuntimeError('IncompleteVoice', 'Voice does not have enough notes.');
                }
                return Math.max(accumulator, Fraction.LCM(accumulator, voice.getResolutionMultiplier()));
            }, 1);
            return resolutionMultiplier;
        }
        createModifierContexts(voices) {
            if (voices.length === 0)
                return;
            const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);
            const tickToContextMap = new Map();
            const contexts = [];
            voices.forEach((voice) => {
                const ticksUsed = new Fraction(0, resolutionMultiplier);
                voice.getTickables().forEach((tickable) => {
                    const integerTicks = ticksUsed.numerator;
                    let staveTickToContextMap = tickToContextMap.get(tickable.getStave());
                    if (!staveTickToContextMap) {
                        tickToContextMap.set(tickable.getStave(), {});
                        staveTickToContextMap = tickToContextMap.get(tickable.getStave());
                    }
                    if (!(staveTickToContextMap ? staveTickToContextMap[integerTicks] : undefined)) {
                        const newContext = new ModifierContext();
                        contexts.push(newContext);
                        staveTickToContextMap[integerTicks] = newContext;
                    }
                    tickable.addToModifierContext(staveTickToContextMap[integerTicks]);
                    ticksUsed.add(tickable.getTicks());
                });
            });
            this.modifierContexts.push({
                map: tickToContextMap,
                array: contexts,
                resolutionMultiplier,
            });
        }
        createTickContexts(voices) {
            const fn = (tickable, context, voiceIndex) => context.addTickable(tickable, voiceIndex);
            const contexts = createContexts(voices, (tick) => new TickContext(tick), fn);
            this.tickContexts = contexts;
            const contextArray = this.tickContexts.array;
            contextArray.forEach((context) => {
                context.tContexts = contextArray;
            });
            return contexts;
        }
        getTickContexts() {
            return this.tickContexts;
        }
        preFormat(justifyWidth = 0, renderingContext, voicesParam, stave) {
            const contexts = this.tickContexts;
            if (!contexts) {
                throw new RuntimeError('NoTickContexts', 'preFormat requires TickContexts');
            }
            const { list: contextList, map: contextMap } = contexts;
            this.lossHistory = [];
            if (voicesParam && stave) {
                voicesParam.forEach((voice) => voice.setStave(stave).preFormat());
            }
            let x = 0;
            let shift = 0;
            this.minTotalWidth = 0;
            let totalTicks = 0;
            contextList.forEach((tick) => {
                const context = contextMap[tick];
                context.preFormat();
                const width = context.getWidth();
                this.minTotalWidth += width;
                const maxTicks = context.getMaxTicks().value();
                totalTicks += maxTicks;
                const metrics = context.getMetrics();
                x = x + shift + metrics.totalLeftPx;
                context.setX(x);
                shift = width - metrics.totalLeftPx;
            });
            const { globalSoftmax, softmaxFactor, maxIterations } = this.formatterOptions;
            const exp = (tick) => Math.pow(softmaxFactor, (contextMap[tick].getMaxTicks().value() / totalTicks));
            const expTicksUsed = sumArray(contextList.map(exp));
            this.minTotalWidth = x + shift;
            this.hasMinTotalWidth = true;
            if (justifyWidth <= 0)
                return this.evaluate();
            const firstContext = contextMap[contextList[0]];
            const lastContext = contextMap[contextList[contextList.length - 1]];
            function calculateIdealDistances(adjustedJustifyWidth) {
                const distances = contextList.map((tick, i) => {
                    const context = contextMap[tick];
                    const voices = context.getTickablesByVoice();
                    let backTickable;
                    if (i > 0) {
                        const prevContext = contextMap[contextList[i - 1]];
                        for (let j = i - 1; j >= 0; j--) {
                            const backTick = contextMap[contextList[j]];
                            const backVoices = backTick.getTickablesByVoice();
                            const matchingVoices = [];
                            Object.keys(voices).forEach((v) => {
                                if (backVoices[v]) {
                                    matchingVoices.push(v);
                                }
                            });
                            if (matchingVoices.length > 0) {
                                let maxTicks = 0;
                                let maxNegativeShiftPx = Infinity;
                                let expectedDistance = 0;
                                matchingVoices.forEach((v) => {
                                    const ticks = backVoices[v].getTicks().value();
                                    if (ticks > maxTicks) {
                                        backTickable = backVoices[v];
                                        maxTicks = ticks;
                                    }
                                    const thisTickable = voices[v];
                                    const insideLeftEdge = thisTickable.getX() -
                                        (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);
                                    const backMetrics = backVoices[v].getMetrics();
                                    const insideRightEdge = backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;
                                    maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);
                                });
                                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05));
                                if (globalSoftmax) {
                                    const t = totalTicks;
                                    expectedDistance = (Math.pow(softmaxFactor, (maxTicks / t)) / expTicksUsed) * adjustedJustifyWidth;
                                }
                                else if (typeof backTickable !== 'undefined') {
                                    expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;
                                }
                                return {
                                    expectedDistance,
                                    maxNegativeShiftPx,
                                    fromTickable: backTickable,
                                };
                            }
                        }
                    }
                    return { expectedDistance: 0, fromTickablePx: 0, maxNegativeShiftPx: 0 };
                });
                return distances;
            }
            function shiftToIdealDistances(idealDistances) {
                const centerX = adjustedJustifyWidth / 2;
                let spaceAccum = 0;
                contextList.forEach((tick, index) => {
                    const context = contextMap[tick];
                    if (index > 0) {
                        const contextX = context.getX();
                        const ideal = idealDistances[index];
                        const errorPx = defined(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);
                        let negativeShiftPx = 0;
                        if (errorPx > 0) {
                            spaceAccum += errorPx;
                        }
                        else if (errorPx < 0) {
                            negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));
                            spaceAccum += -negativeShiftPx;
                        }
                        context.setX(contextX + spaceAccum);
                    }
                    context.getCenterAlignedTickables().forEach((tickable) => {
                        tickable.setCenterXShift(centerX - context.getX());
                    });
                });
                return lastContext.getX() - firstContext.getX();
            }
            const adjustedJustifyWidth = justifyWidth -
                lastContext.getMetrics().notePx -
                lastContext.getMetrics().totalRightPx -
                firstContext.getMetrics().totalLeftPx;
            const configMinPadding = Metrics.get('Stave.endPaddingMin');
            const configMaxPadding = Metrics.get('Stave.endPaddingMax');
            const leftPadding = Metrics.get('Stave.padding');
            let targetWidth = adjustedJustifyWidth;
            const distances = calculateIdealDistances(targetWidth);
            let actualWidth = shiftToIdealDistances(distances);
            if (contextList.length === 1)
                return 0;
            const calcMinDistance = (targetWidth, distances) => {
                let mdCalc = targetWidth / 2;
                if (distances.length > 1) {
                    for (let di = 1; di < distances.length; ++di) {
                        mdCalc = Math.min(distances[di].expectedDistance / 2, mdCalc);
                    }
                }
                return mdCalc;
            };
            const minDistance = calcMinDistance(targetWidth, distances);
            const paddingMaxCalc = (curTargetWidth) => {
                let lastTickablePadding = 0;
                const lastTickable = lastContext && lastContext.getMaxTickable();
                if (lastTickable) {
                    const voice = lastTickable.getVoice();
                    if (voice.getTicksUsed().value() > voice.getTotalTicks().value()) {
                        return configMaxPadding * 2 < minDistance ? minDistance : configMaxPadding;
                    }
                    const tickWidth = lastTickable.getWidth();
                    lastTickablePadding =
                        voice.softmax(lastContext.getMaxTicks().value()) * curTargetWidth - (tickWidth + leftPadding);
                }
                return configMaxPadding * 2 < lastTickablePadding ? lastTickablePadding : configMaxPadding;
            };
            let paddingMax = paddingMaxCalc(targetWidth);
            let paddingMin = paddingMax - (configMaxPadding - configMinPadding);
            const maxX = adjustedJustifyWidth - paddingMin;
            let iterations = maxIterations;
            while ((actualWidth > maxX && iterations > 0) || (actualWidth + paddingMax < maxX && iterations > 1)) {
                targetWidth -= actualWidth - maxX;
                paddingMax = paddingMaxCalc(targetWidth);
                paddingMin = paddingMax - (configMaxPadding - configMinPadding);
                actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));
                iterations--;
            }
            this.justifyWidth = justifyWidth;
            return this.evaluate();
        }
        evaluate() {
            const contexts = this.tickContexts;
            const justifyWidth = this.justifyWidth;
            this.contextGaps = { total: 0, gaps: [] };
            contexts.list.forEach((tick, index) => {
                if (index === 0)
                    return;
                const prevTick = contexts.list[index - 1];
                const prevContext = contexts.map[prevTick];
                const context = contexts.map[tick];
                const prevMetrics = prevContext.getMetrics();
                const currMetrics = context.getMetrics();
                const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;
                const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;
                const gap = insideLeftEdge - insideRightEdge;
                this.contextGaps.total += gap;
                this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });
                context.getFormatterMetrics().freedom.left = gap;
                prevContext.getFormatterMetrics().freedom.right = gap;
            });
            this.durationStats = {};
            const durationStats = this.durationStats;
            function updateStats(duration, space) {
                const stats = durationStats[duration];
                if (stats === undefined) {
                    durationStats[duration] = { mean: space, count: 1, total: space };
                }
                else {
                    stats.count += 1;
                    stats.total += space;
                    stats.mean = stats.total / stats.count;
                }
            }
            this.voices.forEach((voice) => {
                voice.getTickables().forEach((note, i, notes) => {
                    const duration = note.getTicks().clone().simplify().toString();
                    const metrics = note.getMetrics();
                    const formatterMetrics = note.getFormatterMetrics();
                    const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;
                    let space = 0;
                    if (i < notes.length - 1) {
                        const rightNote = notes[i + 1];
                        const rightMetrics = rightNote.getMetrics();
                        const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;
                        space = rightNoteEdge - leftNoteEdge;
                        formatterMetrics.space.used = rightNote.getX() - note.getX();
                        rightNote.getFormatterMetrics().freedom.left = space;
                    }
                    else {
                        space = justifyWidth - leftNoteEdge;
                        formatterMetrics.space.used = justifyWidth - note.getX();
                    }
                    formatterMetrics.freedom.right = space;
                    updateStats(duration, formatterMetrics.space.used);
                });
            });
            let totalDeviation = 0;
            this.voices.forEach((voice) => {
                voice.getTickables().forEach((note) => {
                    const duration = note.getTicks().clone().simplify().toString();
                    const metrics = note.getFormatterMetrics();
                    metrics.space.mean = durationStats[duration].mean;
                    metrics.duration = duration;
                    metrics.iterations += 1;
                    metrics.space.deviation = metrics.space.used - metrics.space.mean;
                    totalDeviation += Math.pow(metrics.space.deviation, 2);
                });
            });
            this.totalCost = Math.sqrt(totalDeviation);
            this.lossHistory.push(this.totalCost);
            return this.totalCost;
        }
        tune(options) {
            var _a;
            const contexts = this.tickContexts;
            if (!contexts) {
                return 0;
            }
            const alpha = (_a = options === null || options === void 0 ? void 0 : options.alpha) !== null && _a !== void 0 ? _a : 0.5;
            let shift = 0;
            this.totalShift = 0;
            contexts.list.forEach((tick, index, list) => {
                const context = contexts.map[tick];
                const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;
                const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;
                context.move(shift, prevContext, nextContext);
                const cost = -context.getDeviationCost();
                if (cost > 0) {
                    shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));
                }
                else if (cost < 0) {
                    if (nextContext) {
                        shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));
                    }
                    else {
                        shift = 0;
                    }
                }
                shift *= alpha;
                this.totalShift += shift;
            });
            return this.evaluate();
        }
        postFormat() {
            this.modifierContexts.forEach((modifierContexts) => {
                modifierContexts.array.forEach((mc) => mc.postFormat());
            });
            this.tickContexts.list.forEach((tick) => {
                this.tickContexts.map[tick].postFormat();
            });
            return this;
        }
        joinVoices(voices) {
            this.createModifierContexts(voices);
            this.hasMinTotalWidth = false;
            return this;
        }
        format(voices, justifyWidth, options) {
            const opts = Object.assign({ alignRests: false }, options);
            this.voices = voices;
            const softmaxFactor = this.formatterOptions.softmaxFactor;
            if (softmaxFactor) {
                this.voices.forEach((v) => v.setSoftmaxFactor(softmaxFactor));
            }
            this.alignRests(voices, opts.alignRests);
            this.createTickContexts(voices);
            this.preFormat(justifyWidth, opts.context, voices, opts.stave);
            if (opts.stave)
                this.postFormat();
            return this;
        }
        formatToStave(voices, stave, optionsParam) {
            const options = Object.assign({ context: stave.getContext() }, optionsParam);
            const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - Stave.defaultPadding;
            L$5('Formatting voices to width: ', justifyWidth);
            return this.format(voices, justifyWidth, options);
        }
        getTickContext(tick) {
            var _a;
            return (_a = this.tickContexts) === null || _a === void 0 ? void 0 : _a.map[tick];
        }
    }
    Formatter.DEBUG = false;

    const ERROR_MSG = 'Ghost note must have valid initialization data to identify duration.';
    class GhostNote extends StemmableNote {
        static get CATEGORY() {
            return "GhostNote";
        }
        constructor(parameter) {
            if (!parameter) {
                throw new RuntimeError('BadArguments', ERROR_MSG);
            }
            let noteStruct;
            if (typeof parameter === 'string') {
                noteStruct = { duration: parameter };
            }
            else if (typeof parameter === 'object') {
                noteStruct = parameter;
            }
            else {
                throw new RuntimeError('BadArguments', ERROR_MSG);
            }
            super(noteStruct);
            this.setWidth(0);
        }
        isRest() {
            return true;
        }
        setStave(stave) {
            super.setStave(stave);
            return this;
        }
        addToModifierContext(mc) {
            return this;
        }
        preFormat() {
            this.preFormatted = true;
            return this;
        }
        draw() {
            this.setRendered();
            for (let i = 0; i < this.modifiers.length; ++i) {
                const modifier = this.modifiers[i];
                if (isAnnotation(modifier)) {
                    modifier.setContext(this.getContext());
                    modifier.drawWithStyle();
                }
            }
        }
    }

    class GlyphNote extends Note {
        static get CATEGORY() {
            return "GlyphNote";
        }
        constructor(glyph, noteStruct, options) {
            super(noteStruct);
            this.options = Object.assign({ ignoreTicks: false, line: 2 }, options);
            this.ignoreTicks = this.options.ignoreTicks;
            this.setGlyph(glyph);
        }
        setGlyph(glyph) {
            this.text = glyph;
            return this;
        }
        preFormat() {
            if (!this.preFormatted && this.modifierContext) {
                this.modifierContext.preFormat();
            }
            this.preFormatted = true;
            return this;
        }
        drawModifiers() {
            const ctx = this.checkContext();
            for (let i = 0; i < this.modifiers.length; i++) {
                const modifier = this.modifiers[i];
                modifier.setContext(ctx);
                modifier.drawWithStyle();
            }
        }
        draw() {
            const stave = this.checkStave();
            const ctx = stave.checkContext();
            this.setRendered();
            ctx.openGroup('glyphNote', this.getAttribute('id'));
            this.x = this.isCenterAligned() ? this.getAbsoluteX() - this.getWidth() / 2 : this.getAbsoluteX();
            this.y = stave.getYForLine(this.options.line);
            this.renderText(ctx, 0, 0);
            this.drawModifiers();
            ctx.closeGroup();
        }
    }

    class GraceNote extends StaveNote {
        static get CATEGORY() {
            return "GraceNote";
        }
        static get LEDGER_LINE_OFFSET() {
            return 2;
        }
        constructor(noteStruct) {
            super(Object.assign({ strokePx: GraceNote.LEDGER_LINE_OFFSET }, noteStruct));
            this.slash = noteStruct.slash || false;
            this.slur = true;
            this.buildNoteHeads();
            this.width = 3;
        }
        getStemExtension() {
            if (this.stemExtensionOverride) {
                return this.stemExtensionOverride;
            }
            let ret = super.getStemExtension();
            ret = Stem.HEIGHT * this.getFontScale() - Stem.HEIGHT + ret;
            return ret;
        }
        draw() {
            super.draw();
            this.setRendered();
            const stem = this.stem;
            if (this.slash && stem) {
                const scale = this.getFontScale();
                let slashBBox = undefined;
                const beam = this.beam;
                if (beam) {
                    if (!beam.postFormatted) {
                        beam.postFormat();
                    }
                    slashBBox = this.calcBeamedNotesSlashBBox(8 * scale, 8 * scale, {
                        stem: 6 * scale,
                        beam: 5 * scale,
                    });
                }
                else {
                    const stemDirection = this.getStemDirection();
                    const noteHeadBounds = this.getNoteHeadBounds();
                    const noteHeadWidth = this.noteHeads[0].getWidth();
                    const x = stemDirection === Stem.DOWN ? this.getAbsoluteX() : this.getAbsoluteX() + noteHeadWidth;
                    const defaultOffsetY = (Tables.STEM_HEIGHT * scale) / 2;
                    const y = stemDirection === Stem.DOWN ? noteHeadBounds.yBottom + defaultOffsetY : noteHeadBounds.yTop - defaultOffsetY;
                    if (stemDirection === Stem.DOWN) {
                        slashBBox = {
                            x1: x - noteHeadWidth,
                            y1: y - noteHeadWidth,
                            x2: x + noteHeadWidth,
                            y2: y + noteHeadWidth,
                        };
                    }
                    else {
                        slashBBox = {
                            x1: x - noteHeadWidth,
                            y1: y + noteHeadWidth,
                            x2: x + noteHeadWidth,
                            y2: y - noteHeadWidth,
                        };
                    }
                }
                const ctx = this.checkContext();
                ctx.setLineWidth(1 * scale);
                ctx.beginPath();
                ctx.moveTo(slashBBox.x1, slashBBox.y1);
                ctx.lineTo(slashBBox.x2, slashBBox.y2);
                ctx.closePath();
                ctx.stroke();
            }
        }
        calcBeamedNotesSlashBBox(slashStemOffset, slashBeamOffset, protrusions) {
            const beam = this.beam;
            if (!beam)
                throw new RuntimeError('NoBeam', "Can't calculate without a beam.");
            const beamSlope = beam.slope;
            const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;
            const scaleX = isBeamEndNote ? -1 : 1;
            const beamAngle = Math.atan(beamSlope * scaleX);
            const iPointOnBeam = {
                dx: Math.cos(beamAngle) * slashBeamOffset,
                dy: Math.sin(beamAngle) * slashBeamOffset,
            };
            slashStemOffset *= this.getStemDirection();
            const slashAngle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);
            const protrusionStemDeltaX = Math.cos(slashAngle) * protrusions.stem * scaleX;
            const protrusionStemDeltaY = Math.sin(slashAngle) * protrusions.stem;
            const protrusionBeamDeltaX = Math.cos(slashAngle) * protrusions.beam * scaleX;
            const protrusionBeamDeltaY = Math.sin(slashAngle) * protrusions.beam;
            const stemX = this.getStemX();
            const stem0X = beam.notes[0].getStemX();
            const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beamSlope;
            const ret = {
                x1: stemX - protrusionStemDeltaX,
                y1: stemY + slashStemOffset - protrusionStemDeltaY,
                x2: stemX + iPointOnBeam.dx * scaleX + protrusionBeamDeltaX,
                y2: stemY + iPointOnBeam.dy + protrusionBeamDeltaY,
            };
            return ret;
        }
    }

    class KeySigNote extends Note {
        static get CATEGORY() {
            return "KeySigNote";
        }
        constructor(keySpec, cancelKeySpec, alterKeySpec) {
            super({ duration: 'b' });
            this.keySignature = new KeySignature(keySpec, cancelKeySpec, alterKeySpec);
            this.ignoreTicks = true;
        }
        addToModifierContext(mc) {
            return this;
        }
        preFormat() {
            this.preFormatted = true;
            this.keySignature.setStave(this.checkStave());
            this.setWidth(this.keySignature.getWidth());
            return this;
        }
        draw() {
            const ctx = this.checkStave().checkContext();
            this.setRendered();
            this.keySignature.setX(this.getAbsoluteX());
            this.keySignature.setContext(ctx);
            this.keySignature.drawWithStyle();
        }
    }

    class MultiMeasureRest extends Element {
        static get CATEGORY() {
            return "MultiMeasureRest";
        }
        constructor(numberOfMeasures, options) {
            var _a;
            super();
            this.xs = { left: NaN, right: NaN };
            this.hasPaddingLeft = false;
            this.hasPaddingRight = false;
            this.hasLineThickness = false;
            this.hasSymbolSpacing = false;
            const fontSize = (_a = options.numberGlyphPoint) !== null && _a !== void 0 ? _a : Metrics.get('MultiMeasureRest.fontSize');
            this.fontInfo.size = fontSize;
            this.numberOfMeasures = numberOfMeasures;
            this.text = '';
            const t = `${this.numberOfMeasures}`;
            for (const digit of t) {
                this.text += String.fromCodePoint(0xe080 + Number(digit));
            }
            this.hasPaddingLeft = typeof options.paddingLeft === 'number';
            this.hasPaddingRight = typeof options.paddingRight === 'number';
            this.hasLineThickness = typeof options.lineThickness === 'number';
            this.hasSymbolSpacing = typeof options.symbolSpacing === 'number';
            this.renderOptions = Object.assign({ useSymbols: false, showNumber: true, numberLine: -0.5, numberGlyphPoint: fontSize, line: 2, spacingBetweenLinesPx: Tables.STAVE_LINE_DISTANCE, serifThickness: 2, semibreveRestGlyphScale: Metrics.get('fontSize'), paddingLeft: 0, paddingRight: 0, lineThickness: 5, symbolSpacing: 0 }, options);
        }
        getXs() {
            return this.xs;
        }
        setStave(stave) {
            this.stave = stave;
            return this;
        }
        getStave() {
            return this.stave;
        }
        checkStave() {
            return defined(this.stave, 'NoStave', 'No stave attached to instance.');
        }
        drawLine(stave, ctx, left, right) {
            const options = this.renderOptions;
            const y = stave.getYForLine(options.line);
            const padding = (right - left) * 0.1;
            left += padding;
            right -= padding;
            let txt = '\ue4ef';
            const el = new Element();
            el.setText(txt);
            const elWidth = el.getWidth();
            if (!elWidth) {
                throw new RuntimeError('Cannot drawLine if width is 0');
            }
            for (let i = 1; (i + 2) * elWidth + left <= right; i++) {
                txt += '\ue4f0';
            }
            txt += '\ue4f1';
            el.setText(txt);
            el.renderText(ctx, left + (right - left) * 0.5 - el.getWidth() * 0.5, y);
        }
        drawSymbols(stave, ctx, left, right) {
            const n4 = Math.floor(this.numberOfMeasures / 4);
            const n = this.numberOfMeasures % 4;
            const n2 = Math.floor(n / 2);
            const n1 = n % 2;
            const options = this.renderOptions;
            const elMiddle = new Element();
            let txt = '';
            for (let i = 0; i < n4; ++i) {
                txt += Glyphs.restLonga + ' ';
            }
            for (let i = 0; i < n2; ++i) {
                txt += Glyphs.restDoubleWhole + ' ';
            }
            elMiddle.setText(txt);
            const elTop = new Element();
            txt = '';
            for (let i = 0; i < n1; ++i) {
                txt += Glyphs.restWhole + ' ';
            }
            elTop.setText(txt);
            const width = elMiddle.getWidth() + elTop.getWidth();
            let x = left + (right - left) * 0.5 - width * 0.5;
            const line = options.line;
            const yTop = stave.getYForLine(line - 1);
            const yMiddle = stave.getYForLine(line);
            elMiddle.renderText(ctx, x, yMiddle);
            x += elMiddle.getWidth();
            elTop.renderText(ctx, x, yTop);
            x += elTop.getWidth();
        }
        draw() {
            const ctx = this.checkContext();
            this.setRendered();
            const stave = this.checkStave();
            let left = stave.getNoteStartX();
            let right = stave.getNoteEndX();
            const begModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);
            if (begModifiers.length === 1 && isBarline(begModifiers[0])) {
                left -= begModifiers[0].getWidth();
            }
            const options = this.renderOptions;
            if (this.hasPaddingLeft) {
                left = stave.getX() + options.paddingLeft;
            }
            if (this.hasPaddingRight) {
                right = stave.getX() + stave.getWidth() - options.paddingRight;
            }
            this.xs.left = left;
            this.xs.right = right;
            if (options.useSymbols) {
                this.drawSymbols(stave, ctx, left, right);
            }
            else {
                this.drawLine(stave, ctx, left, right);
            }
            if (options.showNumber) {
                this.renderText(ctx, left + (right - left) * 0.5 - this.width * 0.5, stave.getYForLine(options.numberLine) - this.height * 0.5);
            }
        }
    }

    function L$4(...args) {
        if (PedalMarking.DEBUG)
            log('VexFlow.PedalMarking', args);
    }
    class PedalMarking extends Element {
        static get CATEGORY() {
            return "PedalMarking";
        }
        static createSustain(notes) {
            const pedal = new PedalMarking(notes);
            return pedal;
        }
        static createSostenuto(notes) {
            const pedal = new PedalMarking(notes);
            pedal.setType(PedalMarking.type.MIXED);
            pedal.setCustomText('Sost. Ped.');
            return pedal;
        }
        static createUnaCorda(notes) {
            const pedal = new PedalMarking(notes);
            pedal.setType(PedalMarking.type.TEXT);
            pedal.setCustomText('una corda', 'tre corda');
            return pedal;
        }
        constructor(notes) {
            super();
            this.notes = notes;
            this.type = PedalMarking.type.TEXT;
            this.line = 0;
            this.depressText = PedalMarking.GLYPHS.pedalDepress;
            this.releaseText = PedalMarking.GLYPHS.pedalRelease;
            this.renderOptions = {
                bracketHeight: 10,
                textMarginRight: 6,
                bracketLineWidth: 1,
                color: 'black',
            };
        }
        setType(type) {
            type = typeof type === 'string' ? PedalMarking.typeString[type] : type;
            if (type >= PedalMarking.type.TEXT && type <= PedalMarking.type.MIXED) {
                this.type = type;
            }
            return this;
        }
        setCustomText(depress, release) {
            this.depressText = depress || '';
            this.releaseText = release || '';
            this.setFont(Metrics.getFontInfo('PedalMarking.text'));
            return this;
        }
        setLine(line) {
            this.line = line;
            return this;
        }
        drawBracketed() {
            const ctx = this.checkContext();
            let isPedalDepressed = false;
            let prevX;
            let prevY;
            let textWidth = 0;
            this.notes.forEach((note, index, notes) => {
                var _a, _b, _c, _d;
                isPedalDepressed = !isPedalDepressed;
                const x = note.getAbsoluteX();
                const y = note.checkStave().getYForBottomText(this.line + 3);
                if (x < prevX) {
                    throw new RuntimeError('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');
                }
                const nextNoteIsSame = notes[index + 1] === note;
                const prevNoteIsSame = notes[index - 1] === note;
                let xShift = 0;
                if (isPedalDepressed) {
                    xShift = prevNoteIsSame ? 5 : 0;
                    if (this.type === PedalMarking.type.MIXED && !prevNoteIsSame) {
                        textWidth = ctx.measureText(this.depressText).width;
                        ctx.fillText(this.depressText, x, y);
                        xShift = textWidth + this.renderOptions.textMarginRight;
                    }
                    else {
                        ctx.beginPath();
                        ctx.moveTo(x, y - this.renderOptions.bracketHeight);
                        ctx.lineTo(x + xShift, y);
                        ctx.stroke();
                        ctx.closePath();
                    }
                }
                else {
                    const noteNdx = note.getVoice().getTickables().indexOf(note);
                    const voiceNotes = note.getVoice().getTickables().length;
                    const noteEndX = noteNdx + 1 < voiceNotes
                        ?
                            note.getVoice().getTickables()[noteNdx + 1].getAbsoluteX()
                        :
                            ((_b = (_a = note.getStave()) === null || _a === void 0 ? void 0 : _a.getX()) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = note.getStave()) === null || _c === void 0 ? void 0 : _c.getWidth()) !== null && _d !== void 0 ? _d : 0);
                    ctx.beginPath();
                    ctx.moveTo(prevX, prevY);
                    ctx.lineTo(nextNoteIsSame ? x - 5 : noteEndX - 5, y);
                    ctx.lineTo(nextNoteIsSame ? x : noteEndX - 5, y - this.renderOptions.bracketHeight);
                    ctx.stroke();
                    ctx.closePath();
                }
                prevX = x + xShift;
                prevY = y;
            });
        }
        drawText() {
            const ctx = this.checkContext();
            let isPedalDepressed = false;
            let textWidth = 0;
            this.notes.forEach((note) => {
                var _a, _b, _c, _d;
                isPedalDepressed = !isPedalDepressed;
                const stave = note.checkStave();
                const x = note.getAbsoluteX();
                const y = stave.getYForBottomText(this.line + 3);
                if (isPedalDepressed) {
                    textWidth = ctx.measureText(this.depressText).width;
                    ctx.fillText(this.depressText, x, y);
                }
                else {
                    const noteNdx = note.getVoice().getTickables().indexOf(note);
                    const voiceNotes = note.getVoice().getTickables().length;
                    const noteEndX = noteNdx + 1 < voiceNotes
                        ?
                            note.getVoice().getTickables()[noteNdx + 1].getAbsoluteX()
                        :
                            ((_b = (_a = note.getStave()) === null || _a === void 0 ? void 0 : _a.getX()) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = note.getStave()) === null || _c === void 0 ? void 0 : _c.getWidth()) !== null && _d !== void 0 ? _d : 0);
                    textWidth = ctx.measureText(this.releaseText).width;
                    ctx.fillText(this.releaseText, noteEndX - textWidth, y);
                }
            });
        }
        draw() {
            const ctx = this.checkContext();
            this.setRendered();
            ctx.setStrokeStyle(this.renderOptions.color);
            ctx.setFillStyle(this.renderOptions.color);
            ctx.setFont(this.font);
            L$4('Rendering Pedal Marking');
            if (this.type === PedalMarking.type.BRACKET || this.type === PedalMarking.type.MIXED) {
                ctx.setLineWidth(this.renderOptions.bracketLineWidth);
                this.drawBracketed();
            }
            else if (this.type === PedalMarking.type.TEXT) {
                this.drawText();
            }
        }
    }
    PedalMarking.DEBUG = false;
    PedalMarking.GLYPHS = {
        pedalDepress: Glyphs.keyboardPedalPed,
        pedalRelease: Glyphs.keyboardPedalUp,
    };
    PedalMarking.type = {
        TEXT: 1,
        BRACKET: 2,
        MIXED: 3,
    };
    PedalMarking.typeString = {
        text: PedalMarking.type.TEXT,
        bracket: PedalMarking.type.BRACKET,
        mixed: PedalMarking.type.MIXED,
    };

    const CODES = {
        '1': Glyphs.repeat1Bar,
        '2': Glyphs.repeat2Bars,
        '4': Glyphs.repeat4Bars,
        slash: Glyphs.repeatBarSlash,
    };
    class RepeatNote extends GlyphNote {
        static get CATEGORY() {
            return "RepeatNote";
        }
        constructor(type, noteStruct, options) {
            const glyphCode = CODES[type] || '\uE500';
            super(glyphCode, Object.assign({ duration: 'q', alignCenter: type !== 'slash' }, noteStruct), options);
        }
    }

    function drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {
        ctx.beginPath();
        ctx.moveTo(x0, y0);
        ctx.lineTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.lineTo(x0, y0);
        ctx.closePath();
        ctx.fill();
    }
    class StaveLine extends Element {
        static get CATEGORY() {
            return "StaveLine";
        }
        constructor(notes) {
            super();
            this.setNotes(notes);
            this.text = '';
            this.renderOptions = {
                paddingLeft: 4,
                paddingRight: 3,
                lineWidth: 1,
                lineDash: undefined,
                roundedEnd: true,
                color: undefined,
                drawStartArrow: false,
                drawEndArrow: false,
                arrowheadLength: 10,
                arrowheadAngle: Math.PI / 8,
                textPositionVertical: StaveLine.TextVerticalPosition.TOP,
                textJustification: StaveLine.TextJustification.CENTER,
            };
        }
        setText(text) {
            this.text = text;
            return this;
        }
        setNotes(notes) {
            if (!notes.firstNote && !notes.lastNote) {
                throw new RuntimeError('BadArguments', 'Notes needs to have either firstNote or lastNote set.');
            }
            if (!notes.firstIndexes)
                notes.firstIndexes = [0];
            if (!notes.lastIndexes)
                notes.lastIndexes = [0];
            if (notes.firstIndexes.length !== notes.lastIndexes.length) {
                throw new RuntimeError('BadArguments', 'Connected notes must have same number of indexes.');
            }
            this.notes = notes;
            this.firstNote = notes.firstNote;
            this.firstIndexes = notes.firstIndexes;
            this.lastNote = notes.lastNote;
            this.lastIndexes = notes.lastIndexes;
            return this;
        }
        applyLineStyle() {
            const ctx = this.checkContext();
            const renderOptions = this.renderOptions;
            if (renderOptions.lineDash) {
                ctx.setLineDash(renderOptions.lineDash);
            }
            if (renderOptions.lineWidth) {
                ctx.setLineWidth(renderOptions.lineWidth);
            }
            if (renderOptions.roundedEnd) {
                ctx.setLineCap('round');
            }
            else {
                ctx.setLineCap('square');
            }
        }
        drawArrowLine(ctx, pt1, pt2) {
            const bothArrows = this.renderOptions.drawStartArrow && this.renderOptions.drawEndArrow;
            const x1 = pt1.x;
            const y1 = pt1.y;
            const x2 = pt2.x;
            const y2 = pt2.y;
            const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
            const ratio = (distance - this.renderOptions.arrowheadLength / 3) / distance;
            let endX;
            let endY;
            let startX;
            let startY;
            if (this.renderOptions.drawEndArrow || bothArrows) {
                endX = Math.round(x1 + (x2 - x1) * ratio);
                endY = Math.round(y1 + (y2 - y1) * ratio);
            }
            else {
                endX = x2;
                endY = y2;
            }
            if (this.renderOptions.drawStartArrow || bothArrows) {
                startX = x1 + (x2 - x1) * (1 - ratio);
                startY = y1 + (y2 - y1) * (1 - ratio);
            }
            else {
                startX = x1;
                startY = y1;
            }
            if (this.renderOptions.color) {
                ctx.setStrokeStyle(this.renderOptions.color);
                ctx.setFillStyle(this.renderOptions.color);
            }
            ctx.beginPath();
            ctx.moveTo(startX, startY);
            ctx.lineTo(endX, endY);
            ctx.stroke();
            ctx.closePath();
            const lineAngle = Math.atan2(y2 - y1, x2 - x1);
            const h = Math.abs(this.renderOptions.arrowheadLength / Math.cos(this.renderOptions.arrowheadAngle));
            let angle1;
            let angle2;
            let topX;
            let topY;
            let bottomX;
            let bottomY;
            if (this.renderOptions.drawEndArrow || bothArrows) {
                angle1 = lineAngle + Math.PI + this.renderOptions.arrowheadAngle;
                topX = x2 + Math.cos(angle1) * h;
                topY = y2 + Math.sin(angle1) * h;
                angle2 = lineAngle + Math.PI - this.renderOptions.arrowheadAngle;
                bottomX = x2 + Math.cos(angle2) * h;
                bottomY = y2 + Math.sin(angle2) * h;
                drawArrowHead(ctx, topX, topY, x2, y2, bottomX, bottomY);
            }
            if (this.renderOptions.drawStartArrow || bothArrows) {
                angle1 = lineAngle + this.renderOptions.arrowheadAngle;
                topX = x1 + Math.cos(angle1) * h;
                topY = y1 + Math.sin(angle1) * h;
                angle2 = lineAngle - this.renderOptions.arrowheadAngle;
                bottomX = x1 + Math.cos(angle2) * h;
                bottomY = y1 + Math.sin(angle2) * h;
                drawArrowHead(ctx, topX, topY, x1, y1, bottomX, bottomY);
            }
        }
        draw() {
            const ctx = this.checkContext();
            this.setRendered();
            const firstNote = this.firstNote;
            const lastNote = this.lastNote;
            const renderOptions = this.renderOptions;
            this.applyLineStyle();
            let startPosition = { x: 0, y: 0 };
            let endPosition = { x: 0, y: 0 };
            this.firstIndexes.forEach((firstIndex, i) => {
                const lastIndex = this.lastIndexes[i];
                startPosition = firstNote.getModifierStartXY(2, firstIndex);
                endPosition = lastNote.getModifierStartXY(1, lastIndex);
                const upwardsSlope = startPosition.y > endPosition.y;
                startPosition.x += firstNote.getMetrics().modRightPx + renderOptions.paddingLeft;
                endPosition.x -= lastNote.getMetrics().modLeftPx + renderOptions.paddingRight;
                const noteheadWidth = firstNote.getGlyphWidth();
                const firstDisplaced = firstNote.getKeyProps()[firstIndex].displaced;
                if (firstDisplaced && firstNote.getStemDirection() === 1) {
                    startPosition.x += noteheadWidth + renderOptions.paddingLeft;
                }
                const lastDisplaced = lastNote.getKeyProps()[lastIndex].displaced;
                if (lastDisplaced && lastNote.getStemDirection() === -1) {
                    endPosition.x -= noteheadWidth + renderOptions.paddingRight;
                }
                startPosition.y += upwardsSlope ? -3 : 1;
                endPosition.y += upwardsSlope ? 2 : 0;
                this.drawArrowLine(ctx, startPosition, endPosition);
            });
            const textWidth = this.width;
            const justification = renderOptions.textJustification;
            let x = 0;
            if (justification === StaveLine.TextJustification.LEFT) {
                x = startPosition.x;
            }
            else if (justification === StaveLine.TextJustification.CENTER) {
                const deltaX = endPosition.x - startPosition.x;
                const centerX = deltaX / 2 + startPosition.x;
                x = centerX - textWidth / 2;
            }
            else if (justification === StaveLine.TextJustification.RIGHT) {
                x = endPosition.x - textWidth;
            }
            let y = 0;
            const verticalPosition = renderOptions.textPositionVertical;
            if (verticalPosition === StaveLine.TextVerticalPosition.TOP) {
                y = firstNote.checkStave().getYForTopText();
            }
            else if (verticalPosition === StaveLine.TextVerticalPosition.BOTTOM) {
                y = firstNote.checkStave().getYForBottomText(Tables.TEXT_HEIGHT_OFFSET_HACK);
            }
            const color = renderOptions.color;
            this.applyStyle(ctx, { fillStyle: color, strokeStyle: color });
            this.renderText(ctx, x, y);
        }
    }
    StaveLine.TextVerticalPosition = {
        TOP: 1,
        BOTTOM: 2,
    };
    StaveLine.TextJustification = TextJustification;

    class System extends Element {
        static get CATEGORY() {
            return "System";
        }
        constructor(params = {}) {
            super();
            this.setOptions(params);
            this.partStaves = [];
            this.partStaveInfos = [];
            this.partVoices = [];
        }
        setOptions(options = {}) {
            if (!options.factory) {
                throw new RuntimeError('NoFactory', 'System.setOptions(options) requires a factory.');
            }
            this.factory = options.factory;
            this.options = Object.assign(Object.assign({ factory: this.factory, x: 10, y: 10, width: 500, spaceBetweenStaves: 12, autoWidth: false, noJustification: false, debugFormatter: false, formatIterations: 0, noPadding: false }, options), { details: Object.assign({ alpha: 0.5 }, options.details), formatOptions: Object.assign({}, options.formatOptions) });
            if (this.options.noJustification === false && typeof options.width === 'undefined') {
                this.options.autoWidth = true;
            }
        }
        getX() {
            return this.options.x;
        }
        setX(x) {
            this.options.x = x;
            this.partStaves.forEach((s) => {
                s.setX(x);
            });
            return this;
        }
        getY() {
            return this.options.y;
        }
        setY(y) {
            this.options.y = y;
            this.partStaves.forEach((s) => {
                s.setY(y);
            });
            return this;
        }
        getStaves() {
            return this.partStaves;
        }
        getVoices() {
            return this.partVoices;
        }
        setContext(context) {
            super.setContext(context);
            this.factory.setContext(context);
            return this;
        }
        addConnector(type = 'double') {
            this.connector = this.factory.StaveConnector({
                topStave: this.partStaves[0],
                bottomStave: this.partStaves[this.partStaves.length - 1],
                type,
            });
            return this.connector;
        }
        addStave(params) {
            var _a;
            const staveOptions = Object.assign({ leftBar: false }, params.options);
            const stave = (_a = params.stave) !== null && _a !== void 0 ? _a : this.factory.Stave({ x: this.options.x, y: this.options.y, width: this.options.width, options: staveOptions });
            const p = Object.assign(Object.assign({ spaceAbove: 0, spaceBelow: 0, debugNoteMetrics: false, noJustification: false }, params), { options: staveOptions });
            const ctx = this.getContext();
            p.voices.forEach((voice) => {
                voice
                    .setContext(ctx)
                    .setStave(stave)
                    .getTickables()
                    .forEach((tickable) => tickable.setStave(stave));
                this.partVoices.push(voice);
            });
            this.partStaves.push(stave);
            this.partStaveInfos.push(p);
            return stave;
        }
        addVoices(voices) {
            const ctx = this.getContext();
            voices.forEach((voice) => {
                voice.setContext(ctx);
                this.partVoices.push(voice);
            });
        }
        format() {
            const optionsDetails = this.options.details;
            let justifyWidth = 0;
            const formatter = new Formatter(optionsDetails);
            this.formatter = formatter;
            let y = this.options.y;
            let startX = 0;
            const debugNoteMetricsYs = [];
            this.partStaves.forEach((part, index) => {
                y = y + part.space(this.partStaveInfos[index].spaceAbove);
                part.setY(y);
                y = y + part.space(this.partStaveInfos[index].spaceBelow);
                y = y + part.space(this.options.spaceBetweenStaves);
                if (this.partStaveInfos[index].debugNoteMetrics) {
                    debugNoteMetricsYs.push({ y, stave: part });
                    y += 15;
                }
                startX = Math.max(startX, part.getNoteStartX());
            });
            this.partVoices.forEach((voice) => {
                voice.getTickables().forEach((tickable) => {
                    const stave = tickable.getStave();
                    if (stave)
                        tickable.setStave(stave);
                });
            });
            formatter.joinVoices(this.partVoices);
            this.partStaves.forEach((part) => part.setNoteStartX(startX));
            if (this.options.autoWidth && this.partVoices.length > 0) {
                justifyWidth = formatter.preCalculateMinTotalWidth(this.partVoices);
                this.options.width = justifyWidth + Stave.rightPadding + (startX - this.options.x);
                this.partStaves.forEach((part) => {
                    part.setWidth(this.options.width);
                });
            }
            else {
                justifyWidth = this.options.noPadding
                    ? this.options.width - (startX - this.options.x)
                    : this.options.width - (startX - this.options.x) - Stave.defaultPadding;
            }
            if (this.partVoices.length > 0) {
                formatter.format(this.partVoices, this.options.noJustification ? 0 : justifyWidth, this.options.formatOptions);
            }
            formatter.postFormat();
            for (let i = 0; i < this.options.formatIterations; i++) {
                formatter.tune(optionsDetails);
            }
            this.startX = startX;
            this.debugNoteMetricsYs = debugNoteMetricsYs;
            this.lastY = y;
            Stave.formatBegModifiers(this.partStaves);
        }
        getBoundingBox() {
            var _a;
            return new BoundingBox(this.options.x, this.options.y, this.options.width, ((_a = this.lastY) !== null && _a !== void 0 ? _a : 0) - this.options.y);
        }
        draw() {
            const ctx = this.checkContext();
            if (!this.formatter || !this.startX || !this.lastY || !this.debugNoteMetricsYs) {
                throw new RuntimeError('NoFormatter', 'format() must be called before draw()');
            }
            this.setRendered();
            if (this.options.debugFormatter) {
                Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);
            }
            this.debugNoteMetricsYs.forEach((d) => {
                this.partVoices.forEach((voice) => {
                    voice.getTickables().forEach((tickable) => {
                        if (tickable.getStave() === d.stave)
                            Note.plotMetrics(ctx, tickable, d.y);
                    });
                });
            });
        }
    }

    function getUnusedStringGroups(numLines, stringsUsed) {
        const stemThrough = [];
        let group = [];
        for (let string = 1; string <= numLines; string++) {
            const isUsed = stringsUsed.indexOf(string) > -1;
            if (!isUsed) {
                group.push(string);
            }
            else {
                stemThrough.push(group);
                group = [];
            }
        }
        if (group.length > 0)
            stemThrough.push(group);
        return stemThrough;
    }
    function getPartialStemLines(stemY, unusedStrings, stave, stemDirection) {
        const upStem = stemDirection !== 1;
        const downStem = stemDirection !== -1;
        const lineSpacing = stave.getSpacingBetweenLines();
        const totalLines = stave.getNumLines();
        const stemLines = [];
        unusedStrings.forEach((strings) => {
            const containsLastString = strings.indexOf(totalLines) > -1;
            const containsFirstString = strings.indexOf(1) > -1;
            if ((upStem && containsFirstString) || (downStem && containsLastString)) {
                return;
            }
            if (strings.length === 1) {
                strings.push(strings[0]);
            }
            const lineYs = [];
            strings.forEach((string, index, strings) => {
                const isTopBound = string === 1;
                const isBottomBound = string === totalLines;
                let y = stave.getYForLine(string - 1);
                if (index === 0 && !isTopBound) {
                    y -= lineSpacing / 2 - 1;
                }
                else if (index === strings.length - 1 && !isBottomBound) {
                    y += lineSpacing / 2 - 1;
                }
                lineYs.push(y);
                if (stemDirection === 1 && isTopBound) {
                    lineYs.push(stemY - 2);
                }
                else if (stemDirection === -1 && isBottomBound) {
                    lineYs.push(stemY + 2);
                }
            });
            stemLines.push(lineYs.sort((a, b) => a - b));
        });
        return stemLines;
    }
    class TabNote extends StemmableNote {
        static get CATEGORY() {
            return "TabNote";
        }
        constructor(noteStruct, drawStem = false) {
            super(noteStruct);
            this.fretElement = [];
            this.greatestString = () => {
                return this.positions.map((x) => x.str).reduce((a, b) => (a > b ? a : b));
            };
            this.leastString = () => {
                return this.positions.map((x) => x.str).reduce((a, b) => (a < b ? a : b));
            };
            this.ghost = false;
            this.positions = noteStruct.positions || [];
            this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { drawStem, drawDots: drawStem, drawStemThroughStave: false, yShift: 0 });
            this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);
            defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);
            this.buildStem();
            if (noteStruct.stemDirection) {
                this.setStemDirection(noteStruct.stemDirection);
            }
            else {
                this.setStemDirection(Stem.UP);
            }
            this.ghost = false;
            this.updateWidth();
        }
        reset() {
            super.reset();
            if (this.stave)
                this.setStave(this.stave);
            return this;
        }
        setGhost(ghost) {
            this.ghost = ghost;
            this.updateWidth();
            return this;
        }
        hasStem() {
            if (this.renderOptions.drawStem)
                return true;
            return false;
        }
        getStemExtension() {
            if (this.stemExtensionOverride !== undefined) {
                return this.stemExtensionOverride;
            }
            return this.flag.getHeight() > Stem.HEIGHT ? this.flag.getHeight() - Stem.HEIGHT : 0;
        }
        static tabToElement(fret) {
            let el;
            if (fret.toUpperCase() === 'X') {
                el = new Element('TabNote');
                el.setText(Glyphs.accidentalDoubleSharp);
            }
            else {
                el = new Element('TabNote.text');
                el.setText(fret);
                el.setYShift(el.getHeight() / 2);
            }
            return el;
        }
        updateWidth() {
            this.fretElement = [];
            this.width = 0;
            for (let i = 0; i < this.positions.length; ++i) {
                let fret = this.positions[i].fret;
                if (this.ghost)
                    fret = '(' + fret + ')';
                const el = TabNote.tabToElement(fret.toString());
                this.fretElement.push(el);
                this.width = Math.max(el.getWidth(), this.width);
            }
        }
        setStave(stave) {
            super.setStave(stave);
            const ctx = stave.getContext();
            this.setContext(ctx);
            const ys = this.positions.map(({ str: line }) => stave.getYForLine(Number(line) - 1));
            this.setYs(ys);
            if (this.stem) {
                this.stem.setYBounds(this.getStemY(), this.getStemY());
            }
            return this;
        }
        getPositions() {
            return this.positions;
        }
        getModifierStartXY(position, index) {
            if (!this.preFormatted) {
                throw new RuntimeError('UnformattedNote', "Can't call GetModifierStartXY on an unformatted note");
            }
            if (this.ys.length === 0) {
                throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');
            }
            let x = 0;
            if (position === Modifier$1.Position.LEFT) {
                x = -1 * 2;
            }
            else if (position === Modifier$1.Position.RIGHT) {
                x = this.width + 2;
            }
            else if (position === Modifier$1.Position.BELOW || position === Modifier$1.Position.ABOVE) {
                const noteGlyphWidth = this.width;
                x = noteGlyphWidth / 2;
            }
            return {
                x: this.getAbsoluteX() + x,
                y: this.ys[index],
            };
        }
        getLineForRest() {
            return Number(this.positions[0].str);
        }
        preFormat() {
            if (this.preFormatted)
                return;
            if (this.modifierContext)
                this.modifierContext.preFormat();
            this.preFormatted = true;
        }
        getStemX() {
            return this.getCenterGlyphX();
        }
        getStemY() {
            const numLines = this.checkStave().getNumLines();
            const stemUpLine = -0.5;
            const stemDownLine = numLines - 0.5;
            const stemStartLine = Stem.UP === this.stemDirection ? stemUpLine : stemDownLine;
            return this.checkStave().getYForLine(stemStartLine);
        }
        getStemExtents() {
            return this.checkStem().getExtents();
        }
        drawFlag() {
            const { beam, glyphProps, renderOptions: { drawStem }, } = this;
            const context = this.checkContext();
            const shouldDrawFlag = beam === undefined && drawStem;
            if (glyphProps.codeFlagUp && shouldDrawFlag) {
                const flagX = this.getStemX();
                const flagY = this.getStemDirection() === Stem.DOWN
                    ?
                        this.getStemY() - this.checkStem().getHeight() - this.getStemExtension()
                    :
                        this.getStemY() - this.checkStem().getHeight() + this.getStemExtension();
                this.flag.setContext(context).setX(flagX).setY(flagY).drawWithStyle();
            }
        }
        drawModifiers() {
            this.modifiers.forEach((modifier) => {
                if (isDot(modifier) && !this.renderOptions.drawDots) {
                    return;
                }
                modifier.setContext(this.getContext());
                modifier.drawWithStyle();
            });
        }
        drawStemThrough() {
            const stemX = this.getStemX();
            const stemY = this.getStemY();
            const ctx = this.checkContext();
            const drawStem = this.renderOptions.drawStem;
            const stemThrough = this.renderOptions.drawStemThroughStave;
            if (drawStem && stemThrough) {
                const numLines = this.checkStave().getNumLines();
                const stringsUsed = this.positions.map((position) => Number(position.str));
                const unusedStrings = getUnusedStringGroups(numLines, stringsUsed);
                const stemLines = getPartialStemLines(stemY, unusedStrings, this.checkStave(), this.getStemDirection());
                ctx.setLineWidth(Stem.WIDTH);
                stemLines.forEach((bounds) => {
                    if (bounds.length === 0)
                        return;
                    ctx.beginPath();
                    ctx.moveTo(stemX, bounds[0]);
                    ctx.lineTo(stemX, bounds[bounds.length - 1]);
                    ctx.stroke();
                    ctx.closePath();
                });
            }
        }
        drawPositions() {
            const ctx = this.checkContext();
            const x = this.getAbsoluteX();
            const ys = this.ys;
            for (let i = 0; i < this.positions.length; ++i) {
                const y = ys[i] + this.renderOptions.yShift;
                const el = this.fretElement[i];
                const tabX = x - el.getWidth() / 2;
                ctx.clearRect(tabX - 2, y - 3, el.getWidth() + 4, 6);
                el.renderText(ctx, tabX, y);
            }
        }
        draw() {
            const ctx = this.checkContext();
            if (this.ys.length === 0) {
                throw new RuntimeError('NoYValues', "Can't draw note without Y values.");
            }
            this.setRendered();
            const renderStem = this.beam === undefined && this.renderOptions.drawStem;
            ctx.openGroup('tabnote', this.getAttribute('id'));
            this.drawPositions();
            this.drawStemThrough();
            if (this.stem && renderStem) {
                const stemX = this.getStemX();
                this.stem.setNoteHeadXBounds(stemX, stemX);
                this.stem.setContext(ctx).drawWithStyle();
            }
            this.drawFlag();
            this.drawModifiers();
            ctx.closeGroup();
        }
    }

    class TabStave extends Stave {
        static get CATEGORY() {
            return "TabStave";
        }
        constructor(x, y, width, options) {
            const tabOptions = Object.assign({ spacingBetweenLinesPx: 13, numLines: 6, topTextPosition: 1 }, options);
            super(x, y, width, tabOptions);
        }
        getYForGlyphs() {
            return this.getYForLine(2.5);
        }
        addTabGlyph() {
            this.addClef('tab');
            return this;
        }
    }

    function L$3(...args) {
        if (TextBracket.DEBUG)
            log('VexFlow.TextBracket', args);
    }
    var TextBracketPosition;
    (function (TextBracketPosition) {
        TextBracketPosition[TextBracketPosition["TOP"] = 1] = "TOP";
        TextBracketPosition[TextBracketPosition["BOTTOM"] = -1] = "BOTTOM";
    })(TextBracketPosition || (TextBracketPosition = {}));
    class TextBracket extends Element {
        static get CATEGORY() {
            return "TextBracket";
        }
        static get Position() {
            return TextBracketPosition;
        }
        static get PositionString() {
            return {
                top: TextBracketPosition.TOP,
                bottom: TextBracketPosition.BOTTOM,
            };
        }
        constructor({ start, stop, text = '', superscript = '', position = TextBracketPosition.TOP }) {
            super();
            this.start = start;
            this.stop = stop;
            this.textElement = new Element('TextBracket');
            this.textElement.setText(text);
            this.superscriptElement = new Element('TextBracket');
            this.superscriptElement.setText(superscript);
            const smallerFontSize = Font.scaleSize(this.fontInfo.size, 0.714286);
            this.superscriptElement.setFontSize(smallerFontSize);
            this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;
            this.line = 1;
            this.renderOptions = {
                dashed: true,
                dash: [5],
                color: 'black',
                lineWidth: 1,
                showBracket: true,
                bracketHeight: 8,
                underlineSuperscript: true,
            };
        }
        applyStyle(ctx) {
            this.textElement.setFont(this.fontInfo);
            const { family, size, weight, style } = this.fontInfo;
            const smallerFontSize = Font.scaleSize(size, 0.714286);
            this.superscriptElement.setFont(family, smallerFontSize, weight, style);
            const options = this.renderOptions;
            ctx.setStrokeStyle(options.color);
            ctx.setFillStyle(options.color);
            ctx.setLineWidth(options.lineWidth);
            return this;
        }
        setDashed(dashed, dash) {
            this.renderOptions.dashed = dashed;
            if (dash)
                this.renderOptions.dash = dash;
            return this;
        }
        setLine(line) {
            this.line = line;
            return this;
        }
        draw() {
            const ctx = this.checkContext();
            this.setRendered();
            let y = 0;
            switch (this.position) {
                case TextBracketPosition.TOP:
                    y = this.start.checkStave().getYForTopText(this.line);
                    break;
                case TextBracketPosition.BOTTOM:
                    y = this.start.checkStave().getYForBottomText(this.line + Tables.TEXT_HEIGHT_OFFSET_HACK);
                    break;
                default:
                    throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid.`);
            }
            const start = { x: this.start.getAbsoluteX(), y };
            const stop = { x: this.stop.getAbsoluteX(), y };
            L$3('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);
            const bracketHeight = this.renderOptions.bracketHeight * this.position;
            this.textElement.renderText(ctx, start.x, start.y);
            const mainWidth = this.textElement.getWidth();
            const mainHeight = this.textElement.getHeight();
            const superY = start.y - mainHeight / 2.5;
            this.superscriptElement.renderText(ctx, start.x + mainWidth + 1, superY);
            const superWidth = this.superscriptElement.getWidth();
            const superHeight = this.superscriptElement.getHeight();
            let startX = start.x;
            let lineY = superY;
            const endX = stop.x + this.stop.getGlyphWidth();
            if (this.position === TextBracketPosition.TOP) {
                startX += mainWidth + superWidth + 5;
                lineY -= superHeight / 2.7;
            }
            else if (this.position === TextBracketPosition.BOTTOM) {
                lineY += superHeight / 2.7;
                startX += mainWidth + 2;
                if (!this.renderOptions.underlineSuperscript) {
                    startX += superWidth;
                }
            }
            if (this.renderOptions.dashed) {
                Renderer.drawDashedLine(ctx, startX, lineY, endX, lineY, this.renderOptions.dash);
                if (this.renderOptions.showBracket) {
                    Renderer.drawDashedLine(ctx, endX, lineY + 1 * this.position, endX, lineY + bracketHeight, this.renderOptions.dash);
                }
            }
            else {
                ctx.beginPath();
                ctx.moveTo(startX, lineY);
                ctx.lineTo(endX, lineY);
                if (this.renderOptions.showBracket) {
                    ctx.lineTo(endX, lineY + bracketHeight);
                }
                ctx.stroke();
                ctx.closePath();
            }
        }
    }
    TextBracket.DEBUG = false;

    function L$2(...args) {
        if (TextDynamics.DEBUG)
            log('VexFlow.TextDynamics', args);
    }
    class TextDynamics extends Note {
        static get CATEGORY() {
            return "TextDynamics";
        }
        static get GLYPHS() {
            return {
                f: Glyphs.dynamicForte,
                p: Glyphs.dynamicPiano,
                m: Glyphs.dynamicMezzo,
                s: Glyphs.dynamicSforzando,
                z: Glyphs.dynamicZ,
                r: Glyphs.dynamicRinforzando,
            };
        }
        constructor(noteStruct) {
            var _a, _b;
            super(noteStruct);
            this.sequence = ((_a = noteStruct.text) !== null && _a !== void 0 ? _a : '').toLowerCase();
            this.line = (_b = noteStruct.line) !== null && _b !== void 0 ? _b : 0;
            this.text = '';
            L$2('New Dynamics Text: ', this.sequence);
        }
        setLine(line) {
            this.line = line;
            return this;
        }
        preFormat() {
            this.text = '';
            this.sequence.split('').forEach((letter) => {
                const glyph = TextDynamics.GLYPHS[letter];
                if (!glyph)
                    throw new RuntimeError('Invalid dynamics character: ' + letter);
                this.text += glyph;
            });
            this.preFormatted = true;
            return this;
        }
        draw() {
            this.setRendered();
            const x = this.getAbsoluteX();
            const y = this.checkStave().getYForLine(this.line + -3);
            L$2('Rendering Dynamics: ', this.sequence);
            this.renderText(this.checkContext(), x, y);
        }
    }
    TextDynamics.DEBUG = false;

    class TimeSigNote extends Note {
        static get CATEGORY() {
            return "TimeSigNote";
        }
        constructor(timeSpec, customPadding) {
            super({ duration: 'b' });
            this.timeSig = new TimeSignature(timeSpec, customPadding);
            this.setWidth(this.timeSig.getWidth());
            this.ignoreTicks = true;
        }
        addToModifierContext(mc) {
            return this;
        }
        preFormat() {
            this.preFormatted = true;
            return this;
        }
        draw() {
            const stave = this.checkStave();
            const ctx = this.checkContext();
            this.setRendered();
            ctx.openGroup('timesignote', this.getAttribute('id'));
            this.timeSig.drawAt(ctx, stave, this.getAbsoluteX());
            ctx.closeGroup();
        }
    }

    class Tuplet extends Element {
        static get CATEGORY() {
            return "Tuplet";
        }
        static get LOCATION_TOP() {
            return 1;
        }
        static get LOCATION_BOTTOM() {
            return -1;
        }
        static get NESTING_OFFSET() {
            return 15;
        }
        constructor(notes, options = {}) {
            super();
            if (!notes || !notes.length) {
                throw new RuntimeError('BadArguments', 'No notes provided for tuplet.');
            }
            this.notes = notes;
            const numNotes = options.numNotes !== undefined ? options.numNotes : notes.length;
            const notesOccupied = options.notesOccupied || 2;
            const bracketed = options.bracketed !== undefined ? options.bracketed : notes.some((note) => !note.hasBeam());
            const ratioed = options.ratioed !== undefined ? options.ratioed : Math.abs(notesOccupied - numNotes) > 1;
            const location = options.location || Tuplet.LOCATION_TOP;
            const yOffset = options.yOffset || Metrics.get('Tuplet.yOffset');
            const textYOffset = options.textYOffset || Metrics.get('Tuplet.textYOffset');
            this.options = {
                bracketed,
                location,
                notesOccupied,
                numNotes,
                ratioed,
                yOffset,
                textYOffset,
            };
            this.textElement = new Element('Tuplet');
            this.setTupletLocation(location || Tuplet.LOCATION_TOP);
            Formatter.AlignRestsToNotes(notes, true, true);
            this.resolveGlyphs();
            this.attach();
        }
        attach() {
            for (let i = 0; i < this.notes.length; i++) {
                const note = this.notes[i];
                note.setTuplet(this);
            }
        }
        detach() {
            for (let i = 0; i < this.notes.length; i++) {
                const note = this.notes[i];
                note.resetTuplet(this);
            }
        }
        setBracketed(bracketed) {
            this.options.bracketed = bracketed;
            return this;
        }
        setRatioed(ratioed) {
            this.options.ratioed = ratioed;
            return this;
        }
        setTupletLocation(location) {
            if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {
                console.warn(`Invalid tuplet location [${location}]. Using Tuplet.LOCATION_TOP.`);
                location = Tuplet.LOCATION_TOP;
            }
            this.options.location = location;
            return this;
        }
        getNotes() {
            return this.notes;
        }
        getNoteCount() {
            return this.options.numNotes;
        }
        getNotesOccupied() {
            return this.options.notesOccupied;
        }
        setNotesOccupied(notes) {
            this.detach();
            this.options.notesOccupied = notes;
            this.resolveGlyphs();
            this.attach();
        }
        resolveGlyphs() {
            let numerator = '';
            let denominator = '';
            let n = this.options.numNotes;
            while (n >= 1) {
                numerator = String.fromCharCode(0xe880 + (n % 10)) + numerator;
                n = Math.floor(n / 10);
            }
            if (this.options.ratioed) {
                n = this.options.notesOccupied;
                while (n >= 1) {
                    denominator = String.fromCharCode(0xe880 + (n % 10)) + denominator;
                    n = Math.floor(n / 10);
                }
                denominator = Glyphs.tupletColon + denominator;
            }
            this.textElement.setText(numerator + denominator);
        }
        getNestedTupletCount() {
            const { location } = this.options;
            const firstNote = this.notes[0];
            let maxTupletCount = countTuplets(firstNote, location);
            let minTupletCount = countTuplets(firstNote, location);
            function countTuplets(note, location) {
                return note.getTupletStack().filter((tuplet) => tuplet.options.location === location).length;
            }
            this.notes.forEach((note) => {
                const tupletCount = countTuplets(note, location);
                maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;
                minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;
            });
            return maxTupletCount - minTupletCount;
        }
        getYPosition() {
            var _a;
            const nestedTupletYOffset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.options.location;
            const yOffset = (_a = this.options.yOffset) !== null && _a !== void 0 ? _a : 0;
            const firstNote = this.notes[0];
            let yPosition;
            if (this.options.location === Tuplet.LOCATION_TOP) {
                yPosition = firstNote.checkStave().getYForLine(0) - 1.5 * Tables.STAVE_LINE_DISTANCE;
                for (let i = 0; i < this.notes.length; ++i) {
                    const note = this.notes[i];
                    let modLines = 0;
                    const mc = note.getModifierContext();
                    if (mc) {
                        modLines = Math.max(modLines, mc.getState().topTextLine);
                    }
                    const modY = note.getYForTopText(modLines) - 2 * Tables.STAVE_LINE_DISTANCE;
                    if (note.hasStem() || note.isRest()) {
                        const topY = note.getStemDirection() === Stem.UP
                            ? note.getStemExtents().topY - Tables.STAVE_LINE_DISTANCE
                            : note.getStemExtents().baseY - 2 * Tables.STAVE_LINE_DISTANCE;
                        yPosition = Math.min(topY, yPosition);
                        if (modLines > 0) {
                            yPosition = Math.min(modY, yPosition);
                        }
                    }
                }
            }
            else {
                let lineCheck = 4;
                this.notes.forEach((nn) => {
                    const mc = nn.getModifierContext();
                    if (mc) {
                        lineCheck = Math.max(lineCheck, mc.getState().textLine + 1);
                    }
                });
                yPosition = firstNote.checkStave().getYForLine(lineCheck) + 2 * Tables.STAVE_LINE_DISTANCE;
                for (let i = 0; i < this.notes.length; ++i) {
                    if (this.notes[i].hasStem() || this.notes[i].isRest()) {
                        const bottomY = this.notes[i].getStemDirection() === Stem.UP
                            ? this.notes[i].getStemExtents().baseY + 2 * Tables.STAVE_LINE_DISTANCE
                            : this.notes[i].getStemExtents().topY + Tables.STAVE_LINE_DISTANCE;
                        if (bottomY > yPosition) {
                            yPosition = bottomY;
                        }
                    }
                }
            }
            return yPosition + nestedTupletYOffset + yOffset;
        }
        draw() {
            const { location, bracketed, textYOffset } = this.options;
            const ctx = this.checkContext();
            let xPos = 0;
            let yPos = 0;
            const firstNote = this.notes[0];
            const lastNote = this.notes[this.notes.length - 1];
            if (!bracketed) {
                xPos = firstNote.getStemX();
                this.width = lastNote.getStemX() - xPos;
            }
            else {
                xPos = firstNote.getTieLeftX() - 5;
                this.width = lastNote.getTieRightX() - xPos + 5;
            }
            yPos = this.getYPosition();
            const notationCenterX = xPos + this.width / 2;
            const notationStartX = notationCenterX - this.textElement.getWidth() / 2;
            ctx.openGroup('tuplet', this.getAttribute('id'));
            if (bracketed) {
                const lineWidth = this.width / 2 - this.textElement.getWidth() / 2 - 5;
                if (lineWidth > 0) {
                    ctx.fillRect(xPos, yPos, lineWidth, 1);
                    ctx.fillRect(xPos + this.width / 2 + this.textElement.getWidth() / 2 + 5, yPos, lineWidth, 1);
                    ctx.fillRect(xPos, yPos + (location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, location * 10);
                    ctx.fillRect(xPos + this.width, yPos + (location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, location * 10);
                }
            }
            this.textElement.renderText(ctx, notationStartX, yPos + this.textElement.getHeight() / 2 + (location === Tuplet.LOCATION_TOP ? -1 : 1) * textYOffset);
            const bb = this.getBoundingBox();
            ctx.pointerRect(bb.getX(), bb.getY(), bb.getW(), bb.getH());
            ctx.closeGroup();
            this.setRendered();
        }
    }

    function L$1(...args) {
        if (VibratoBracket.DEBUG)
            log('VexFlow.VibratoBracket', args);
    }
    class VibratoBracket extends Element {
        static get CATEGORY() {
            return "VibratoBracket";
        }
        constructor(bracketData) {
            super();
            this.vibrato = new Vibrato();
            if (bracketData.start)
                this.start = bracketData.start;
            if (bracketData.stop)
                this.stop = bracketData.stop;
            this.line = 1;
        }
        setLine(line) {
            this.line = line;
            return this;
        }
        setVibratoCode(code) {
            this.vibrato.setVibratoCode(code);
            return this;
        }
        draw() {
            const ctx = this.checkContext();
            this.setRendered();
            const y = (this.start && this.start.checkStave().getYForTopText(this.line)) ||
                (this.stop && this.stop.checkStave().getYForTopText(this.line)) ||
                0;
            const startX = (this.start && this.start.getAbsoluteX()) || (this.stop && this.stop.checkStave().getTieStartX()) || 0;
            const stopX = (this.stop && this.stop.getAbsoluteX() - this.stop.getWidth() - 5) ||
                (this.start && this.start.checkStave().getTieEndX() - 10) ||
                0;
            this.vibrato.setVibratoWidth(stopX - startX);
            L$1('Rendering VibratoBracket: startX:', startX, 'stopX:', stopX, 'y:', y);
            this.vibrato.renderText(ctx, startX, y);
        }
    }
    VibratoBracket.DEBUG = false;

    function L(...args) {
        if (Factory.DEBUG)
            log('VexFlow.Factory', args);
    }
    class Factory {
        static newFromElementId(elementId, width = 500, height = 200) {
            return new Factory({ renderer: { elementId, width, height } });
        }
        constructor(options = {}) {
            L('New factory: ', options);
            this.options = {
                stave: {
                    space: 10,
                },
                renderer: {
                    elementId: '',
                    width: 500,
                    height: 200,
                    background: '#FFF',
                },
            };
            this.setOptions(options);
        }
        reset() {
            this.renderQ = [];
            this.systems = [];
            this.staves = [];
            this.voices = [];
            this.stave = undefined;
        }
        setOptions(options) {
            this.options = Object.assign(Object.assign({}, this.options), options);
            this.initRenderer();
            this.reset();
        }
        initRenderer() {
            const { elementId, width, height, background } = this.options.renderer;
            if (elementId === null) {
                return;
            }
            if (elementId === '') {
                L(this);
                throw new RuntimeError('renderer.elementId not set in FactoryOptions');
            }
            let backend = this.options.renderer.backend;
            if (backend === undefined) {
                const elem = document.getElementById(elementId);
                if (isHTMLCanvas(elem)) {
                    backend = Renderer.Backends.CANVAS;
                }
                else {
                    backend = Renderer.Backends.SVG;
                }
            }
            this.context = Renderer.buildContext(elementId, backend, width, height, background);
        }
        getContext() {
            return this.context;
        }
        setContext(context) {
            this.context = context;
            return this;
        }
        getStave() {
            return this.stave;
        }
        getVoices() {
            return this.voices;
        }
        Stave(params) {
            const staveSpace = this.options.stave.space;
            const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacingBetweenLinesPx: staveSpace * 1.0 } }, params);
            const stave = new Stave(p.x, p.y, p.width, p.options);
            this.staves.push(stave);
            stave.setContext(this.context);
            this.stave = stave;
            return stave;
        }
        TabStave(params) {
            const staveSpace = this.options.stave.space;
            const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacingBetweenLinesPx: staveSpace * 1.3 } }, params);
            const stave = new TabStave(p.x, p.y, p.width, p.options);
            this.staves.push(stave);
            stave.setContext(this.context);
            this.stave = stave;
            return stave;
        }
        StaveNote(noteStruct) {
            const note = new StaveNote(noteStruct);
            if (this.stave)
                note.setStave(this.stave);
            note.setContext(this.context);
            this.renderQ.push(note);
            return note;
        }
        GlyphNote(glyph, noteStruct, options) {
            const note = new GlyphNote(glyph, noteStruct, options);
            if (this.stave)
                note.setStave(this.stave);
            note.setContext(this.context);
            this.renderQ.push(note);
            return note;
        }
        RepeatNote(type, noteStruct, options) {
            const note = new RepeatNote(type, noteStruct, options);
            if (this.stave)
                note.setStave(this.stave);
            note.setContext(this.context);
            this.renderQ.push(note);
            return note;
        }
        GhostNote(noteStruct) {
            const ghostNote = new GhostNote(noteStruct);
            if (this.stave)
                ghostNote.setStave(this.stave);
            ghostNote.setContext(this.context);
            this.renderQ.push(ghostNote);
            return ghostNote;
        }
        TextNote(noteStruct) {
            const textNote = new TextNote(noteStruct);
            if (this.stave)
                textNote.setStave(this.stave);
            textNote.setContext(this.context);
            this.renderQ.push(textNote);
            return textNote;
        }
        BarNote(params = {}) {
            const barNote = new BarNote(params.type);
            if (this.stave)
                barNote.setStave(this.stave);
            barNote.setContext(this.context);
            this.renderQ.push(barNote);
            return barNote;
        }
        ClefNote(params) {
            const p = Object.assign({ type: 'treble', options: {
                    size: 'default',
                    annotation: undefined,
                } }, params);
            const clefNote = new ClefNote(p.type, p.options.size, p.options.annotation);
            if (this.stave)
                clefNote.setStave(this.stave);
            clefNote.setContext(this.context);
            this.renderQ.push(clefNote);
            return clefNote;
        }
        TimeSigNote(params) {
            const p = Object.assign({ time: '4/4' }, params);
            const timeSigNote = new TimeSigNote(p.time);
            if (this.stave)
                timeSigNote.setStave(this.stave);
            timeSigNote.setContext(this.context);
            this.renderQ.push(timeSigNote);
            return timeSigNote;
        }
        KeySigNote(params) {
            const keySigNote = new KeySigNote(params.key, params.cancelKey, params.alterKey);
            if (this.stave)
                keySigNote.setStave(this.stave);
            keySigNote.setContext(this.context);
            this.renderQ.push(keySigNote);
            return keySigNote;
        }
        TabNote(noteStruct) {
            const note = new TabNote(noteStruct);
            if (this.stave)
                note.setStave(this.stave);
            note.setContext(this.context);
            this.renderQ.push(note);
            return note;
        }
        GraceNote(noteStruct) {
            const note = new GraceNote(noteStruct);
            if (this.stave)
                note.setStave(this.stave);
            note.setContext(this.context);
            return note;
        }
        GraceNoteGroup(params) {
            const group = new GraceNoteGroup(params.notes, params.slur);
            group.setContext(this.context);
            return group;
        }
        Accidental(params) {
            const accid = new Accidental(params.type);
            accid.setContext(this.context);
            return accid;
        }
        Annotation(params) {
            const p = Object.assign({ text: 'p', hJustify: AnnotationHorizontalJustify.CENTER, vJustify: AnnotationVerticalJustify.BOTTOM }, params);
            const annotation = new Annotation$1(p.text);
            annotation.setJustification(p.hJustify);
            annotation.setVerticalJustification(p.vJustify);
            annotation.setFont(p.font);
            annotation.setContext(this.context);
            return annotation;
        }
        ChordSymbol(params) {
            const p = Object.assign({ vJustify: 'top', hJustify: 'center' }, params);
            const chordSymbol = new ChordSymbol();
            chordSymbol.setHorizontal(p.hJustify);
            chordSymbol.setVertical(p.vJustify);
            if (typeof p.fontFamily === 'string' && typeof p.fontSize === 'number') {
                if (typeof p.fontWeight === 'string')
                    chordSymbol.setFont(p.fontFamily, p.fontSize, p.fontWeight);
                else
                    chordSymbol.setFont(p.fontFamily, p.fontSize, '');
            }
            else if (typeof p.fontSize === 'number') {
                chordSymbol.setFontSize(p.fontSize);
            }
            chordSymbol.setContext(this.context);
            return chordSymbol;
        }
        Articulation(params) {
            var _a;
            const articulation = new Articulation((_a = params === null || params === void 0 ? void 0 : params.type) !== null && _a !== void 0 ? _a : 'a.');
            if ((params === null || params === void 0 ? void 0 : params.position) !== undefined)
                articulation.setPosition(params.position);
            if ((params === null || params === void 0 ? void 0 : params.betweenLines) !== undefined)
                articulation.setBetweenLines(params.betweenLines);
            articulation.setContext(this.context);
            return articulation;
        }
        Ornament(type, params) {
            const options = Object.assign({ type, accidental: '' }, params);
            const ornament = new Ornament(type);
            if ((params === null || params === void 0 ? void 0 : params.position) !== undefined) {
                ornament.setPosition(params.position);
            }
            if (options.upperAccidental) {
                ornament.setUpperAccidental(options.upperAccidental);
            }
            if (options.lowerAccidental) {
                ornament.setLowerAccidental(options.lowerAccidental);
            }
            if (typeof options.delayed !== 'undefined') {
                ornament.setDelayed(options.delayed);
            }
            ornament.setContext(this.context);
            return ornament;
        }
        TextDynamics(params) {
            const p = Object.assign({ text: 'p', duration: 'q', dots: 0, line: 0 }, params);
            const text = new TextDynamics({
                text: p.text,
                line: p.line,
                duration: p.duration,
                dots: p.dots,
            });
            if (this.stave)
                text.setStave(this.stave);
            text.setContext(this.context);
            this.renderQ.push(text);
            return text;
        }
        Fingering(params) {
            const p = Object.assign({ number: '0', position: 'left' }, params);
            const fingering = new FretHandFinger(p.number);
            fingering.setPosition(p.position);
            fingering.setContext(this.context);
            return fingering;
        }
        StringNumber(params, drawCircle = true) {
            const stringNumber = new StringNumber(params.number);
            stringNumber.setPosition(params.position);
            stringNumber.setContext(this.context);
            stringNumber.setDrawCircle(drawCircle);
            return stringNumber;
        }
        TickContext() {
            return new TickContext();
        }
        ModifierContext() {
            return new ModifierContext();
        }
        MultiMeasureRest(params) {
            const numMeasures = defined(params.numberOfMeasures, 'NoNumberOfMeasures');
            const multiMeasureRest = new MultiMeasureRest(numMeasures, params);
            multiMeasureRest.setContext(this.context);
            this.renderQ.push(multiMeasureRest);
            return multiMeasureRest;
        }
        Voice(params) {
            const p = Object.assign({ time: '4/4' }, params);
            const voice = new Voice(p.time);
            this.voices.push(voice);
            return voice;
        }
        StaveConnector(params) {
            const connector = new StaveConnector(params.topStave, params.bottomStave);
            connector.setType(params.type).setContext(this.context);
            this.renderQ.push(connector);
            return connector;
        }
        Formatter(options) {
            return new Formatter(options);
        }
        Tuplet(params) {
            const p = Object.assign({ notes: [], options: {} }, params);
            const tuplet = new Tuplet(p.notes, p.options).setContext(this.context);
            this.renderQ.push(tuplet);
            return tuplet;
        }
        Beam(params) {
            var _a, _b, _c, _d, _e;
            const beam = new Beam(params.notes, (_a = params.options) === null || _a === void 0 ? void 0 : _a.autoStem).setContext(this.context);
            beam.breakSecondaryAt((_c = (_b = params.options) === null || _b === void 0 ? void 0 : _b.secondaryBeamBreaks) !== null && _c !== void 0 ? _c : []);
            if ((_d = params.options) === null || _d === void 0 ? void 0 : _d.partialBeamDirections) {
                Object.entries((_e = params.options) === null || _e === void 0 ? void 0 : _e.partialBeamDirections).forEach(([noteIndex, direction]) => {
                    beam.setPartialBeamSideAt(Number(noteIndex), direction);
                });
            }
            this.renderQ.push(beam);
            return beam;
        }
        Curve(params) {
            const curve = new Curve(params.from, params.to, params.options).setContext(this.context);
            this.renderQ.push(curve);
            return curve;
        }
        StaveTie(params) {
            var _a;
            const tie = new StaveTie({
                firstNote: params.from,
                lastNote: params.to,
                firstIndexes: params.firstIndexes,
                lastIndexes: params.lastIndexes,
            }, params.text);
            if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.direction)
                tie.setDirection(params.options.direction);
            tie.setContext(this.context);
            this.renderQ.push(tie);
            return tie;
        }
        StaveLine(params) {
            var _a, _b;
            const line = new StaveLine({
                firstNote: params.from,
                lastNote: params.to,
                firstIndexes: params.firstIndexes,
                lastIndexes: params.lastIndexes,
            });
            if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.text)
                line.setText(params.options.text);
            if ((_b = params.options) === null || _b === void 0 ? void 0 : _b.font)
                line.setFont(params.options.font);
            line.setContext(this.context);
            this.renderQ.push(line);
            return line;
        }
        VibratoBracket(params) {
            const vibratoBracket = new VibratoBracket({
                start: params.from,
                stop: params.to,
            });
            if (params.options.line)
                vibratoBracket.setLine(params.options.line);
            if (params.options.code)
                vibratoBracket.setVibratoCode(params.options.code);
            vibratoBracket.setContext(this.context);
            this.renderQ.push(vibratoBracket);
            return vibratoBracket;
        }
        TextBracket(params) {
            const textBracket = new TextBracket({
                start: params.from,
                stop: params.to,
                text: params.text,
                superscript: params.options.superscript,
                position: params.options.position,
            });
            if (params.options.line)
                textBracket.setLine(params.options.line);
            if (params.options.font)
                textBracket.setFont(params.options.font);
            textBracket.setContext(this.context);
            this.renderQ.push(textBracket);
            return textBracket;
        }
        System(params = {}) {
            params.factory = this;
            const system = new System(params).setContext(this.context);
            this.systems.push(system);
            return system;
        }
        EasyScore(options = {}) {
            options.factory = this;
            return new EasyScore(options);
        }
        PedalMarking(params) {
            const p = Object.assign({ notes: [], options: {
                    style: 'mixed',
                } }, params);
            const pedal = new PedalMarking(p.notes);
            pedal.setType(PedalMarking.typeString[p.options.style]);
            pedal.setContext(this.context);
            this.renderQ.push(pedal);
            return pedal;
        }
        NoteSubGroup(params) {
            const p = Object.assign({ notes: [] }, params);
            const group = new NoteSubGroup(p.notes);
            group.setContext(this.context);
            return group;
        }
        draw() {
            const ctx = this.context;
            this.systems.forEach((s) => s.setContext(ctx).format());
            this.staves.forEach((s) => s.setContext(ctx).drawWithStyle());
            this.voices.forEach((v) => v.setContext(ctx).drawWithStyle());
            this.renderQ.forEach((e) => {
                if (!e.isRendered())
                    e.setContext(ctx).drawWithStyle();
            });
            this.systems.forEach((s) => s.setContext(ctx).drawWithStyle());
            this.reset();
        }
    }
    Factory.DEBUG = false;

    class GraceTabNote extends TabNote {
        static get CATEGORY() {
            return "GraceTabNote";
        }
        constructor(noteStruct) {
            super(noteStruct, false);
            this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { yShift: 0.3 });
            this.updateWidth();
        }
    }

    class KeyManager {
        constructor(key) {
            this.music = new Music();
            this.setKey(key);
        }
        setKey(key) {
            this.key = key;
            this.reset();
            return this;
        }
        getKey() {
            return this.key;
        }
        reset() {
            this.keyParts = this.music.getKeyParts(this.key);
            this.keyString = this.keyParts.root;
            if (this.keyParts.accidental)
                this.keyString += this.keyParts.accidental;
            const isSupportedType = Music.scaleTypes[this.keyParts.type];
            if (!isSupportedType) {
                throw new RuntimeError('BadArguments', `Unsupported key type: ${this.key}`);
            }
            this.scale = this.music.getScaleTones(this.music.getNoteValue(this.keyString), Music.scaleTypes[this.keyParts.type]);
            this.scaleMap = {};
            this.scaleMapByValue = {};
            this.originalScaleMapByValue = {};
            const noteLocation = Music.rootIndexes[this.keyParts.root];
            for (let i = 0; i < Music.roots.length; ++i) {
                const index = (noteLocation + i) % Music.roots.length;
                const rootName = Music.roots[index];
                const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);
                this.scaleMap[rootName] = noteName;
                this.scaleMapByValue[this.scale[i]] = noteName;
                this.originalScaleMapByValue[this.scale[i]] = noteName;
            }
            return this;
        }
        getAccidental(key) {
            const root = this.music.getKeyParts(key).root;
            const parts = this.music.getNoteParts(this.scaleMap[root]);
            return {
                note: this.scaleMap[root],
                accidental: parts.accidental,
            };
        }
        selectNote(note) {
            note = note.toLowerCase();
            const parts = this.music.getNoteParts(note);
            const scaleNote = this.scaleMap[parts.root];
            const modparts = this.music.getNoteParts(scaleNote);
            if (scaleNote === note) {
                return {
                    note: scaleNote,
                    accidental: parts.accidental,
                    change: false,
                };
            }
            const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];
            if (valueNote !== undefined) {
                return {
                    note: valueNote,
                    accidental: this.music.getNoteParts(valueNote).accidental,
                    change: false,
                };
            }
            const originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];
            if (originalValueNote !== undefined) {
                this.scaleMap[modparts.root] = originalValueNote;
                delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];
                this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;
                return {
                    note: originalValueNote,
                    accidental: this.music.getNoteParts(originalValueNote).accidental,
                    change: true,
                };
            }
            if (modparts.root === note) {
                delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];
                this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;
                this.scaleMap[modparts.root] = modparts.root;
                return {
                    note: modparts.root,
                    accidental: undefined,
                    change: true,
                };
            }
            delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];
            this.scaleMapByValue[this.music.getNoteValue(note)] = note;
            delete this.scaleMap[modparts.root];
            this.scaleMap[modparts.root] = note;
            return {
                note,
                accidental: parts.accidental,
                change: true,
            };
        }
    }

    class StaveHairpin extends Element {
        static get CATEGORY() {
            return "StaveHairpin";
        }
        static FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {
            var _a, _b;
            const ppt = formatter.pixelsPerTick;
            if (ppt === null) {
                throw new RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');
            }
            const leftShiftPx = ppt * ((_a = options.leftShiftTicks) !== null && _a !== void 0 ? _a : 0);
            const rightShiftPx = ppt * ((_b = options.rightShiftTicks) !== null && _b !== void 0 ? _b : 0);
            const hairpinOptions = {
                height: options.height,
                yShift: options.yShift,
                leftShiftPx,
                rightShiftPx,
                rightShiftTicks: 0,
                leftShiftTicks: 0,
            };
            new StaveHairpin({
                firstNote: notes.firstNote,
                lastNote: notes.lastNote,
            }, type)
                .setContext(ctx)
                .setRenderOptions(hairpinOptions)
                .setPosition(position)
                .drawWithStyle();
        }
        constructor(notes, type) {
            super();
            this.setNotes(notes);
            this.hairpin = type;
            this.position = Modifier$1.Position.BELOW;
            this.renderOptions = {
                height: 10,
                yShift: 0,
                leftShiftPx: 0,
                rightShiftPx: 0,
                rightShiftTicks: 0,
                leftShiftTicks: 0,
            };
        }
        setPosition(position) {
            if (position === Modifier$1.Position.ABOVE || position === Modifier$1.Position.BELOW) {
                this.position = position;
            }
            return this;
        }
        setRenderOptions(options) {
            this.renderOptions = options;
            return this;
        }
        setNotes(notes) {
            if (!notes.firstNote && !notes.lastNote) {
                throw new RuntimeError('BadArguments', 'Hairpin needs to have either firstNote or lastNote set.');
            }
            this.notes = notes;
            this.firstNote = notes.firstNote;
            this.lastNote = notes.lastNote;
            return this;
        }
        renderHairpin(params) {
            const ctx = this.checkContext();
            let dis = this.renderOptions.yShift + 20;
            let yShift = params.firstY;
            if (this.position === Modifier$1.Position.ABOVE) {
                dis = -dis + 30;
                yShift = params.firstY - params.staffHeight;
            }
            const leftShiftPx = this.renderOptions.leftShiftPx;
            const rightShiftPx = this.renderOptions.rightShiftPx;
            ctx.beginPath();
            switch (this.hairpin) {
                case StaveHairpin.type.CRESC:
                    ctx.moveTo(params.lastX + rightShiftPx, yShift + dis);
                    ctx.lineTo(params.firstX + leftShiftPx, yShift + this.renderOptions.height / 2 + dis);
                    ctx.lineTo(params.lastX + rightShiftPx, yShift + this.renderOptions.height + dis);
                    break;
                case StaveHairpin.type.DECRESC:
                    ctx.moveTo(params.firstX + leftShiftPx, yShift + dis);
                    ctx.lineTo(params.lastX + rightShiftPx, yShift + this.renderOptions.height / 2 + dis);
                    ctx.lineTo(params.firstX + leftShiftPx, yShift + this.renderOptions.height + dis);
                    break;
            }
            ctx.stroke();
            ctx.closePath();
        }
        draw() {
            this.checkContext();
            this.setRendered();
            const firstNote = this.firstNote;
            const lastNote = this.lastNote;
            if (!firstNote || !lastNote)
                throw new RuntimeError('NoNote', 'Notes required to draw');
            const start = firstNote.getModifierStartXY(this.position, 0);
            const end = lastNote.getModifierStartXY(this.position, 0);
            this.renderHairpin({
                firstX: start.x,
                lastX: end.x,
                firstY: firstNote.checkStave().getY() + firstNote.checkStave().getHeight(),
                lastY: lastNote.checkStave().getY() + lastNote.checkStave().getHeight(),
                staffHeight: firstNote.checkStave().getHeight(),
            });
        }
    }
    StaveHairpin.type = {
        CRESC: 1,
        DECRESC: 2,
    };

    class TabSlide extends TabTie {
        static get CATEGORY() {
            return "TabSlide";
        }
        static get SLIDE_UP() {
            return 1;
        }
        static get SLIDE_DOWN() {
            return -1;
        }
        static createSlideUp(notes) {
            return new TabSlide(notes, TabSlide.SLIDE_UP);
        }
        static createSlideDown(notes) {
            return new TabSlide(notes, TabSlide.SLIDE_DOWN);
        }
        constructor(notes, direction) {
            super(notes, 'sl.');
            if (!direction) {
                let firstFret = notes.firstNote.getPositions()[0].fret;
                if (typeof firstFret === 'string') {
                    firstFret = parseInt(firstFret, 10);
                }
                let lastFret = notes.lastNote.getPositions()[0].fret;
                if (typeof lastFret === 'string') {
                    lastFret = parseInt(lastFret, 10);
                }
                if (isNaN(firstFret) || isNaN(lastFret)) {
                    direction = TabSlide.SLIDE_UP;
                }
                else {
                    direction = firstFret > lastFret ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;
                }
            }
            this.direction = direction;
            this.renderOptions.cp1 = 11;
            this.renderOptions.cp2 = 14;
            this.renderOptions.yShift = 0.5;
        }
        renderTie(params) {
            if (params.firstYs.length === 0 || params.lastYs.length === 0) {
                throw new RuntimeError('BadArguments', 'No Y-values to render');
            }
            const ctx = this.checkContext();
            const firstX = params.firstX;
            const firstYs = params.firstYs;
            const lastX = params.lastX;
            const direction = params.direction;
            if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {
                throw new RuntimeError('BadSlide', 'Invalid slide direction');
            }
            const firstIndexes = this.notes.firstIndexes;
            for (let i = 0; i < firstIndexes.length; ++i) {
                const slideY = firstYs[firstIndexes[i]] + this.renderOptions.yShift;
                if (isNaN(slideY)) {
                    throw new RuntimeError('BadArguments', 'Bad indexes for slide rendering.');
                }
                ctx.beginPath();
                ctx.moveTo(firstX, slideY + 3 * direction);
                ctx.lineTo(lastX, slideY - 3 * direction);
                ctx.closePath();
                ctx.stroke();
            }
            this.setRendered();
        }
    }

    class Tremolo extends Modifier$1 {
        static get CATEGORY() {
            return "Tremolo";
        }
        constructor(num) {
            super();
            this.num = num;
            this.position = Modifier$1.Position.CENTER;
            this.text = Glyphs.tremolo1;
        }
        draw() {
            const ctx = this.checkContext();
            const note = this.checkAttachedNote();
            this.setRendered();
            const stemDirection = note.getStemDirection();
            const scale = note.getFontScale();
            const ySpacing = Metrics.get(`Tremolo.spacing`) * stemDirection * scale;
            const x = note.getAbsoluteX() + (stemDirection === Stem.UP ? note.getGlyphWidth() - Stem.WIDTH / 2 : Stem.WIDTH / 2);
            let y = note.getStemExtents().topY + (this.num <= 3 ? ySpacing : 0);
            this.fontInfo.size = Metrics.get(`Tremolo.fontSize`) * scale;
            for (let i = 0; i < this.num; ++i) {
                this.renderText(ctx, x, y);
                y += ySpacing;
            }
        }
    }

    class Tuning {
        static get names() {
            return {
                standard: 'E/5,B/4,G/4,D/4,A/3,E/3',
                dagdad: 'D/5,A/4,G/4,D/4,A/3,D/3',
                dropd: 'E/5,B/4,G/4,D/4,A/3,D/3',
                eb: 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',
                standardBanjo: 'D/5,B/4,G/4,D/4,G/5',
            };
        }
        constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {
            this.tuningValues = [];
            this.setTuning(tuningString);
        }
        noteToInteger(noteString) {
            var _a;
            return (_a = Tables.keyProperties(noteString).intValue) !== null && _a !== void 0 ? _a : -1;
        }
        setTuning(tuningString) {
            if (Tuning.names[tuningString]) {
                tuningString = Tuning.names[tuningString];
            }
            this.tuningValues = [];
            const keys = tuningString.split(/\s*,\s*/);
            if (keys.length === 0) {
                throw new RuntimeError('BadArguments', `Invalid tuning string: ${tuningString}`);
            }
            for (let i = 0; i < keys.length; ++i) {
                this.tuningValues[i] = this.noteToInteger(keys[i]);
            }
        }
        getValueForString(stringNum) {
            const s = Number(stringNum);
            if (s < 1 || s > this.tuningValues.length) {
                throw new RuntimeError('BadArguments', `String number must be between 1 and ${this.tuningValues.length}:${stringNum}`);
            }
            return this.tuningValues[s - 1];
        }
        getValueForFret(fretNum, stringNum) {
            const stringValue = this.getValueForString(stringNum);
            const f = Number(fretNum);
            if (f < 0) {
                throw new RuntimeError('BadArguments', `Fret number must be 0 or higher: ${fretNum}`);
            }
            return stringValue + f;
        }
        getNoteForFret(fretNum, stringNum) {
            const noteValue = this.getValueForFret(fretNum, stringNum);
            const octave = Math.floor(noteValue / 12);
            const value = noteValue % 12;
            return `${Tables.integerToNote(value)}/${octave}`;
        }
    }

    const VERSION = '5.0.0';
    const ID = '0ca6f889545c33cce851b420c24945f6eb685aeb';
    const DATE = '2025-03-05T17:05:43.991Z';

    var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    class VexFlow {
        static loadFonts(...fontNames) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!fontNames) {
                    fontNames = Object.keys(Font.FILES);
                }
                const fontLoadPromises = [];
                for (const fontName of fontNames) {
                    fontLoadPromises.push(Font.load(fontName));
                }
                yield Promise.all(fontLoadPromises);
            });
        }
        static setFonts(...fontNames) {
            MetricsDefaults.fontFamily = fontNames.join(',');
            Metrics.clear();
        }
        static getFonts() {
            return Metrics.get('fontFamily').split(',');
        }
        static get RENDER_PRECISION_PLACES() {
            return Tables.RENDER_PRECISION_PLACES;
        }
        static set RENDER_PRECISION_PLACES(precision) {
            Tables.RENDER_PRECISION_PLACES = precision;
        }
        static get SOFTMAX_FACTOR() {
            return Tables.SOFTMAX_FACTOR;
        }
        static set SOFTMAX_FACTOR(factor) {
            Tables.SOFTMAX_FACTOR = factor;
        }
        static get UNISON() {
            return Tables.UNISON;
        }
        static set UNISON(unison) {
            Tables.UNISON = unison;
        }
        static get NOTATION_FONT_SCALE() {
            return Tables.NOTATION_FONT_SCALE;
        }
        static set NOTATION_FONT_SCALE(value) {
            Tables.NOTATION_FONT_SCALE = value;
        }
        static get TABLATURE_FONT_SCALE() {
            return Tables.TABLATURE_FONT_SCALE;
        }
        static set TABLATURE_FONT_SCALE(value) {
            Tables.TABLATURE_FONT_SCALE = value;
        }
        static get RESOLUTION() {
            return Tables.RESOLUTION;
        }
        static set RESOLUTION(value) {
            Tables.RESOLUTION = value;
        }
        static get SLASH_NOTEHEAD_WIDTH() {
            return Tables.SLASH_NOTEHEAD_WIDTH;
        }
        static set SLASH_NOTEHEAD_WIDTH(value) {
            Tables.SLASH_NOTEHEAD_WIDTH = value;
        }
        static get STAVE_LINE_DISTANCE() {
            return Tables.STAVE_LINE_DISTANCE;
        }
        static set STAVE_LINE_DISTANCE(value) {
            Tables.STAVE_LINE_DISTANCE = value;
        }
        static get STAVE_LINE_THICKNESS() {
            return MetricsDefaults.Stave.lineWidth;
        }
        static set STAVE_LINE_THICKNESS(value) {
            MetricsDefaults.Stave.lineWidth = value;
            MetricsDefaults.TabStave.lineWidth = value;
            Metrics.clear('Stave');
            Metrics.clear('TabStave');
        }
        static get STEM_HEIGHT() {
            return Tables.STEM_HEIGHT;
        }
        static set STEM_HEIGHT(value) {
            Tables.STEM_HEIGHT = value;
        }
        static get STEM_WIDTH() {
            return Tables.STEM_WIDTH;
        }
        static set STEM_WIDTH(value) {
            Tables.STEM_WIDTH = value;
        }
        static get TIME4_4() {
            return Tables.TIME4_4;
        }
        static get unicode() {
            return Tables.unicode;
        }
        static keySignature(spec) {
            return Tables.keySignature(spec);
        }
        static hasKeySignature(spec) {
            return Tables.hasKeySignature(spec);
        }
        static getKeySignatures() {
            return Tables.getKeySignatures();
        }
        static clefProperties(clef) {
            return Tables.clefProperties(clef);
        }
        static keyProperties(key, clef, params) {
            return Tables.keyProperties(key, clef, params);
        }
        static durationToTicks(duration) {
            return Tables.durationToTicks(duration);
        }
    }
    VexFlow.BUILD = {
        VERSION: VERSION,
        ID: ID,
        DATE: DATE,
        INFO: '',
    };
    VexFlow.Accidental = Accidental;
    VexFlow.Annotation = Annotation$1;
    VexFlow.Articulation = Articulation;
    VexFlow.Barline = Barline;
    VexFlow.BarNote = BarNote;
    VexFlow.Beam = Beam;
    VexFlow.Bend = Bend;
    VexFlow.BoundingBox = BoundingBox;
    VexFlow.CanvasContext = CanvasContext;
    VexFlow.ChordSymbol = ChordSymbol;
    VexFlow.Clef = Clef;
    VexFlow.ClefNote = ClefNote;
    VexFlow.Crescendo = Crescendo;
    VexFlow.Curve = Curve;
    VexFlow.Dot = Dot;
    VexFlow.EasyScore = EasyScore;
    VexFlow.Element = Element;
    VexFlow.Factory = Factory;
    VexFlow.Font = Font;
    VexFlow.Formatter = Formatter;
    VexFlow.Fraction = Fraction;
    VexFlow.FretHandFinger = FretHandFinger;
    VexFlow.GhostNote = GhostNote;
    VexFlow.GlyphNote = GlyphNote;
    VexFlow.GraceNote = GraceNote;
    VexFlow.GraceNoteGroup = GraceNoteGroup;
    VexFlow.GraceTabNote = GraceTabNote;
    VexFlow.KeyManager = KeyManager;
    VexFlow.KeySignature = KeySignature;
    VexFlow.KeySigNote = KeySigNote;
    VexFlow.Modifier = Modifier$1;
    VexFlow.ModifierContext = ModifierContext;
    VexFlow.MultiMeasureRest = MultiMeasureRest;
    VexFlow.Music = Music;
    VexFlow.Note = Note;
    VexFlow.NoteHead = NoteHead;
    VexFlow.NoteSubGroup = NoteSubGroup;
    VexFlow.Ornament = Ornament;
    VexFlow.Parenthesis = Parenthesis;
    VexFlow.Parser = Parser$1;
    VexFlow.PedalMarking = PedalMarking;
    VexFlow.Registry = Registry;
    VexFlow.RenderContext = RenderContext;
    VexFlow.Renderer = Renderer;
    VexFlow.RepeatNote = RepeatNote;
    VexFlow.Repetition = Repetition;
    VexFlow.Stave = Stave;
    VexFlow.StaveConnector = StaveConnector;
    VexFlow.StaveHairpin = StaveHairpin;
    VexFlow.StaveLine = StaveLine;
    VexFlow.StaveModifier = StaveModifier;
    VexFlow.StaveNote = StaveNote;
    VexFlow.StaveTempo = StaveTempo;
    VexFlow.StaveText = StaveText;
    VexFlow.StaveTie = StaveTie;
    VexFlow.Stem = Stem;
    VexFlow.StringNumber = StringNumber;
    VexFlow.Stroke = Stroke;
    VexFlow.SVGContext = SVGContext;
    VexFlow.System = System;
    VexFlow.TabNote = TabNote;
    VexFlow.TabSlide = TabSlide;
    VexFlow.TabStave = TabStave;
    VexFlow.TabTie = TabTie;
    VexFlow.TextBracket = TextBracket;
    VexFlow.TextDynamics = TextDynamics;
    VexFlow.TextNote = TextNote;
    VexFlow.TickContext = TickContext;
    VexFlow.TimeSignature = TimeSignature;
    VexFlow.TimeSigNote = TimeSigNote;
    VexFlow.Tremolo = Tremolo;
    VexFlow.Tuning = Tuning;
    VexFlow.Tuplet = Tuplet;
    VexFlow.Vibrato = Vibrato;
    VexFlow.VibratoBracket = VibratoBracket;
    VexFlow.Voice = Voice;
    VexFlow.Volta = Volta;
    VexFlow.RuntimeError = RuntimeError;
    VexFlow.Test = undefined;
    VexFlow.AnnotationHorizontalJustify = AnnotationHorizontalJustify;
    VexFlow.AnnotationVerticalJustify = AnnotationVerticalJustify;
    VexFlow.ChordSymbolHorizontalJustify = ChordSymbolHorizontalJustify;
    VexFlow.ChordSymbolVerticalJustify = ChordSymbolVerticalJustify;
    VexFlow.SymbolModifiers = SymbolModifiers;
    VexFlow.CurvePosition = CurvePosition;
    VexFlow.FontWeight = FontWeight;
    VexFlow.FontStyle = FontStyle;
    VexFlow.Glyphs = Glyphs;
    VexFlow.ModifierPosition = ModifierPosition;
    VexFlow.RendererBackends = RendererBackends;
    VexFlow.RendererLineEndType = RendererLineEndType;
    VexFlow.BarlineType = BarlineType;
    VexFlow.StaveModifierPosition = StaveModifierPosition;
    VexFlow.VoltaType = VoltaType;
    VexFlow.TextBracketPosition = TextBracketPosition;
    VexFlow.TextJustification = TextJustification;
    VexFlow.VoiceMode = VoiceMode;

    const Academico = 'data:font/woff2;charset=utf-8;base64,';

    const AcademicoBold = 'data:font/woff2;charset=utf-8;base64,';

    const Bravura = 'data:font/woff2;charset=utf-8;base64,';

    const Gonville = 'data:font/woff2;charset=utf-8;base64,';

    const Petaluma = 'data:font/woff2;charset=utf-8;base64,';

    const PetalumaScript = 'data:font/woff2;charset=utf-8;base64,';

    const block = { display: 'block' };
    const swap = { display: 'swap' };
    const swapBold = { display: 'swap', weight: 'bold' };
    const fontBravura = Font.load('Bravura', Bravura, block);
    const fontAcademico = Font.load('Academico', Academico, swap);
    const fontAcademicoBold = Font.load('Academico', AcademicoBold, swapBold);
    const fontGonville = Font.load('Gonville', Gonville, block);
    const fontPetaluma = Font.load('Petaluma', Petaluma, block);
    const fontPetalumaScript = Font.load('Petaluma Script', PetalumaScript, swap);
    const fontLoadPromises = [
        fontBravura,
        fontAcademico,
        fontAcademicoBold,
        fontGonville,
        fontPetaluma,
        fontPetalumaScript,
    ];
    VexFlow.BUILD.INFO = 'vexflow';
    VexFlow.setFonts('Bravura', 'Academico');
    Promise.allSettled(fontLoadPromises).then(() => {
    });

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /*
    TESTS

    notes = [ 48, 50, 52, 53, 55, 57, 59, 60 ]
    for note in notes:
        playNote(note)

    notes = [ 48, 50, 52, 53, 55, 57, 59, 60 ]
    for note in notes:
        playNote([note, note + 3, note + 6 ])

    notes = [ 48, 50, 52, 53, 55, 57, 59, 60 ]
    for note in notes:
        playNote(note, 2.5)

    notes = [ 48, 50, 52, 53, 55, 57, 59, 60 ]
    for note in notes:
        playNote(note, 10)

    notes = [ 48, 50, 52, 53, 55, 57, 59, 60 ] * 3
    for note in notes:
        playNote(note, 1.22)
    */
    /**
     * Draws music notation given a MusicTrace object
     */
    class TimelineScore extends HTMLElement {
        get isPercussion() { return this.getAttribute('instrument')?.startsWith('drum') || false; }
        /** total beat count for the current trace rounded up to the nearest measure */
        get beats() {
            const b = this.trace.beats;
            const measure = this.audio.beatsPerMeasure;
            const bars = Math.ceil(b / measure);
            return Math.max(measure, bars * measure);
        }
        constructor() {
            super();
            /** dimensions of outer scroll container (will get resized on compontent load) */
            this.width = 700;
            this.height = 110;
            /** hold on to the generated notes so that we can step through notes with the playhead */
            this.notes = [];
            /** carries note fragments from one measure to the next */
            this.remainders = [];
            // used to automatically select a clef based on note range
            this.clef = 'treble';
            // maps time (in beats) to x-coordinate in pixels
            this.beatmap = new Map();
            /** trace object used to generate score. when this property is updated, the score will rerender */
            this.trace = me.emptyTrace();
            this.playhead = 0;
            this.root = this.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(sheet$8);
            this.root.innerHTML = html$7;
            this.audio = q.init();
            this.container = this.root.querySelector('#container');
            this.scrollContainer = this.root.querySelector('#scroll-container');
        }
        setTrace(t, force = false) {
            const changed = !t.isEquivalent(this.trace);
            this.trace = t;
            if (changed || force)
                this.render();
        }
        connectedCallback() {
            window.addEventListener('resize', (e) => this.render());
            let down = false;
            this.container.addEventListener('pointerdown', e => {
                this.movePlayhead(this.xToBeat(e.clientX) + 1 / 64);
                this.emitEvent('playhead-reposition');
                down = true;
            });
            document.addEventListener('pointerup', (e) => {
                if (down)
                    this.emitEvent('playhead-up');
                down = false;
            });
            this.audio.addSubscriber(this);
            this.render();
        }
        disconnectedCallback() {
            this.audio.removeSubscriber(this);
        }
        attributeChangedCallback(name, oldValue, newValue) {
            if (name === 'playhead' && newValue !== oldValue) {
                this.movePlayhead(f(newValue, 0));
            }
            else if (name === 'instrument' && newValue !== oldValue) {
                this.render();
            }
        }
        onClockReset() { }
        onClockTimeChange() { }
        onTempoChange() { }
        onTimeSignatureChange() { this.render(); }
        onKeyChange() { this.render(); }
        emitEvent(name, tevent) {
            this.dispatchEvent(new CustomEvent(name, {
                bubbles: true,
                composed: true,
                detail: { playhead: this.playhead, note: tevent }
            }));
        }
        /**
         * Take a MusicTrace and render sheet music using Vex.
         */
        render() {
            this.width = this.root.host.getBoundingClientRect().width;
            this.height = this.root.host.getBoundingClientRect().height;
            this.scrollContainer.style.width = `${this.width}px`;
            const trace = this.trace;
            this.notes = [];
            this.beatmap.clear();
            this.clef = this.isPercussion ? 'percussion' : bestClef(trace);
            try {
                this._render(trace);
            }
            catch (e) {
                console.log(e); // perhaps handle this more gracefully
            }
        }
        _render(trace) {
            this.container.innerHTML = '';
            const MARGIN = 10;
            const BAR_WIDTH = 220;
            const audio = q.init();
            const beatCount = audio.beatsPerMeasure * (4 / audio.beatValue);
            const barCount = Math.ceil(trace.beats / beatCount);
            const renderer = new VexFlow.Renderer(this.container, VexFlow.Renderer.Backends.SVG);
            const formatter = new VexFlow.Formatter();
            const context = renderer.getContext();
            let minY = 220, maxY = 0;
            let sx = MARGIN;
            // if the trace is empty, add an empty stave
            if (barCount === 0) {
                const stave = new VexFlow.Stave(MARGIN, 0, BAR_WIDTH * 2 + MARGIN);
                stave.addClef(this.clef);
                stave.addTimeSignature(audio.meter);
                if (!this.isPercussion) {
                    stave.addKeySignature(audio.key.signature);
                }
                stave.setContext(context).draw();
                sx += BAR_WIDTH * 2 + MARGIN;
            }
            // leftover notes parts that carry over to the next measure with a tie
            this.remainders = [];
            // loop through each bar
            for (let bar = 0; bar < barCount; bar++) {
                //---------------------------------------------------------
                // STEP 1: gather all notes from the current measure
                //---------------------------------------------------------
                const subtrace = trace
                    .subtrace(bar * beatCount, (bar + 1) * beatCount)
                    .ofType([pe.PLAY, pe.REST, pe.SOUND])
                    .join(this.remainders)
                    .sort((a, b) => (a.time === b.time) ? (a.trace_group - b.trace_group) : (a.time - b.time));
                this.remainders = [];
                //---------------------------------------------------------
                // STEP 2: generate voice object for each voice in the measure
                //---------------------------------------------------------
                const voices = [];
                for (const vid of subtrace.voices) {
                    const records = this.generateVoice(subtrace.filter(e => e.voice === vid), audio.beatsPerMeasure, audio.beatValue);
                    this.notes.push(...records);
                    const voice = new VexFlow.Voice({
                        numBeats: audio.beatsPerMeasure,
                        beatValue: audio.beatValue
                    });
                    voice.addTickables(records.map(r => r.vnote));
                    voices.push(voice);
                }
                formatter.joinVoices(voices);
                formatter.preCalculateMinTotalWidth(voices);
                let swidth = Math.max(formatter.getMinTotalWidth(), BAR_WIDTH);
                formatter.format(voices, swidth);
                //---------------------------------------------------------
                // STEP 3: Create and draw stave
                //---------------------------------------------------------
                const stave = new VexFlow.Stave(sx, 0, swidth + MARGIN);
                if (bar === 0) {
                    stave.addClef(this.clef);
                    stave.addTimeSignature(audio.meter);
                    if (!this.isPercussion) {
                        stave.addKeySignature(audio.key.signature);
                    }
                    swidth += stave.getModifierXShift();
                    stave.setWidth(swidth + MARGIN);
                }
                stave.setContext(context).draw();
                //---------------------------------------------------------
                // STEP 4: draw each voice with beams
                //---------------------------------------------------------
                for (const v of voices) {
                    const beams = VexFlow.Beam.generateBeams(v.getTickables());
                    v.draw(context, stave);
                    const box = v.getBoundingBox();
                    minY = Math.min(minY, box.y);
                    maxY = Math.max(maxY, box.y + box.h);
                    beams.forEach(b => { b.setContext(context).draw(); });
                }
                sx += swidth + MARGIN;
            }
            // draw ties
            const ties = [];
            for (const n of this.notes) {
                if (n.tie)
                    ties.push(new VexFlow.StaveTie({ firstNote: n.vnote, lastNote: n.tie.vnote }));
            }
            for (const t of ties)
                t.setContext(context).draw();
            // resize the SVG element base on the minimum and maximum note
            minY = Math.min(0, minY - 15);
            maxY = Math.max(110, maxY + 15);
            const height = maxY - minY;
            renderer.resize(sx + MARGIN, height);
            // vexflow unhelpfully overconstrains the svg element dimensions making it hard to scale
            this.container.querySelector('svg')?.removeAttribute('style');
            this.container.querySelector('svg')?.removeAttribute('width');
            this.container.querySelector('svg')?.removeAttribute('height');
            this.container.querySelector('svg')?.setAttribute('viewBox', `0 ${minY} ${sx + MARGIN} ${height}`);
            // construct the map between beats and notes and x-values
            this.notes.forEach(n => {
                this.beatmap.set(n.time, n.vnote.getBoundingBox().x);
            });
        }
        /**
         * Highlight notes that intersect with the playhead
         */
        movePlayhead(ph) {
            this.playhead = Math.max(0, Math.min(this.beats, ph));
            const svg = this.container.querySelector('svg');
            svg?.querySelectorAll('.vf-stavenote').forEach(el => { el.classList.remove('highlight'); });
            const epsilon = 1 / 128;
            const slice = this.notes.filter(n => { return (n.time <= ph && (n.end - epsilon) > ph); });
            slice.forEach(n => {
                svg?.querySelector(`#vf-${n.vnote.attrs.id}`)?.classList.add('highlight');
            });
            const delta = this.beatToX(ph) - this.beatToX(0);
            this.scrollContainer.scrollTo(delta - this.width * 0.6, 0);
        }
        beatToX(playhead) {
            let best;
            let bestX = 0;
            for (const [beat, x] of this.beatmap) {
                const delta = Math.abs(playhead - beat);
                if (best === undefined || delta < best) {
                    best = delta;
                    bestX = x;
                }
                if (beat > playhead)
                    break;
            }
            return this.SVGToScreen(bestX);
        }
        xToBeat(x) {
            let closestBeat = 0;
            let closestX;
            x = this.screenToSVG(x);
            for (const [beat, beatX] of this.beatmap) {
                const delta = Math.abs(x - beatX);
                if (closestX === undefined || delta < closestX) {
                    closestX = delta;
                    closestBeat = beat;
                }
                if (beatX > x)
                    return closestBeat;
            }
            return closestBeat;
        }
        generateVoice(measure, beatCount, beatValue) {
            // STEP 1: join trace events into chords based on trace_group
            let groups = this.groupIntoChords(measure);
            // STEP 2: split each group into standard time divisions
            groups = this.splitGroups(groups, beatCount, beatValue);
            // STEP 3: create vex notes and return
            groups.forEach(rec => rec.createVexNote(this.clef));
            return groups;
        }
        groupIntoChords(trace) {
            const groups = [];
            let last;
            for (const te of trace) {
                if (last && te.trace_group == last.traceGroup) {
                    last.addTraceEvent(te);
                }
                else {
                    last = new NoteRecord$1();
                    last.addTraceEvent(te);
                    groups.push(last);
                }
            }
            return groups;
        }
        splitGroups(groups, beatCount, beatValue) {
            const records = [];
            let beats = 0;
            beatCount *= (4 / beatValue);
            for (const group of groups) {
                let curr = group;
                let duration = curr.duration;
                // repeatedly spit notes into standard time durations
                while (duration >= 1 / 16 && beats < beatCount) {
                    records.push(curr);
                    if (curr.needsSplit(beatCount - beats)) {
                        let next = curr.split(beatCount - beats);
                        beats += curr.duration;
                        duration -= curr.duration;
                        curr = next;
                    }
                    else {
                        curr.round();
                        beats += curr.duration;
                        duration -= curr.duration;
                    }
                }
                // carry leftover event to the next measure
                if (beats >= beatCount && duration >= 1 / 16) {
                    this.remainders.push(...curr.tnotes);
                }
            }
            // if needed pad the end of the measure with a rest
            while (beats < beatCount) {
                const rest = new NoteRecord$1();
                rest.addRestEvent(beats, beatCount - beats);
                rest.round();
                records.push(rest);
                beats += rest.duration;
            }
            return records;
        }
        screenToSVG(screenX) {
            const svg = this.container.querySelector('svg');
            const p = svg.createSVGPoint();
            p.x = screenX;
            p.y = 0;
            return p.matrixTransform(svg.getScreenCTM().inverse()).x;
        }
        SVGToScreen(svgX) {
            const svg = this.container.querySelector('svg');
            if (svg) {
                const p = svg.createSVGPoint();
                p.x = svgX;
                p.y = 0;
                return p.matrixTransform(svg.getScreenCTM()).x;
            }
            else {
                return svgX;
            }
        }
    }
    TimelineScore.ELEMENT = "timeline-score";
    TimelineScore.observedAttributes = [
        "playhead", // location of the playhead in beats
        "instrument", // "true" | "false"
    ];
    /**
     * Helper class that groups TraceEvents into chords and generates Vex StaveNotes
     */
    let NoteRecord$1 = class NoteRecord {
        /** target number of beats for this set of events */
        get duration() { return this.tnotes[0].duration; }
        set duration(d) { this.tnotes.forEach(t => t.duration = d); }
        get command() { return this.tnotes[0].command; }
        get traceGroup() { return this.tnotes[0].trace_group; }
        /** onset of the note event in beats */
        get time() { return this.tnotes[0].time; }
        /** end of the note in beats */
        get end() { return this.tnotes[0].end; }
        constructor() {
            this.tnotes = [];
            this.audio = q.init();
        }
        clone() {
            const copy = new NoteRecord();
            this.tnotes.forEach(t => copy.addTraceEvent(t));
            return copy;
        }
        addTraceEvent(tnote) {
            this.tnotes.push(tnote.clone());
        }
        addRestEvent(time, duration) {
            const rest = new pe(pe.REST, time);
            rest.duration = duration;
            this.tnotes.push(rest);
        }
        /** is there a mismatch between a nominal note division and this duration */
        needsSplit(remaining) {
            const used = getStandardDuration(Math.min(remaining, this.duration));
            return (this.duration - used) >= 1 / 16;
        }
        /**
         * split this note into two parts. this part is shortened to the largest standard
         * note value that can fit in this measure (remaining).
         * the returned part is whatever's leftover
         */
        split(remaining) {
            const used = getStandardDuration(Math.min(remaining, this.duration));
            const next = this.clone();
            next.duration = (this.duration - used);
            this.duration = used;
            this.tie = next;
            return next;
        }
        /**
         * round duration down to the nearest standard note duration
         */
        round() {
            this.duration = getStandardDuration(this.duration);
        }
        createVexNote(clef) {
            if (this.command === pe.REST) {
                this.vnote = toVexRest(this.duration);
            }
            else {
                this.vnote = this.toVexNote(clef);
            }
        }
        toVexNote(clef, annotate = true) {
            const isSound = (this.command === pe.SOUND);
            const isPercussion = (clef === 'percussion');
            const key = this.audio.key;
            const names = this.tnotes.map(tn => {
                const note = tn.note;
                const name = asciiAccidental(key.getNoteName(note));
                if (isSound) {
                    return 'b/4';
                }
                else if (isPercussion) {
                    return toPercussionNote(note);
                }
                else {
                    return `${name}/${note.octave - 1}`;
                }
            });
            const beats = this.duration;
            const duration = getVexDuration(beats);
            const vn = new VexFlow.StaveNote({
                clef: isSound ? 'treble' : clef,
                keys: names,
                duration: duration,
                autoStem: true
            });
            if (duration.endsWith('d'))
                VexFlow.Dot.buildAndAttach([vn]);
            if (isSound) {
                vn.setStyle({ fillStyle: "red", strokeStyle: "red" });
            }
            for (let i = 0; i < this.tnotes.length; i++) {
                const note = this.tnotes[i].note;
                const acc = asciiAccidental(key.getAccidental(note));
                // don't draw accidentals if the note is already in the current key
                if (!isPercussion && !key.containsNote(note) && ['#', 'b', 'n'].includes(acc)) {
                    vn.addModifier(new VexFlow.Accidental(acc), i);
                }
            }
            if (annotate && !(isSound || isPercussion) && this.tnotes.length === 1) {
                const note = this.tnotes[0].note;
                const name = asciiAccidental(key.getNoteName(note));
                vn
                    .addModifier(new VexFlow.Annotation(`${name}${note.octave - 1}`)
                    .setPosition(VexFlow.Annotation.Position.RIGHT));
            }
            return vn;
        }
    };
    function toPercussionNote(note) {
        switch (note.note % 16) {
            case 0: return 'b/3';
            case 1: return 'c/4';
            case 2: return 'd/4';
            case 3: return 'e/4';
            case 4: return 'f/4';
            case 5: return 'g/4';
            case 6: return 'a/4';
            case 7: return 'b/4';
            case 8: return 'c/5';
            case 9: return 'd/5';
            case 10: return 'e/5';
            case 11: return 'f/5';
            case 12: return 'g/5';
            case 13: return 'a/5';
            case 14: return 'b/5';
            case 15: return 'c/6';
            default: return `${note.name}/4`;
        }
    }
    function toVexRest(beats) {
        const duration = getVexDuration(beats);
        const vn = new VexFlow.StaveNote({ keys: ['b/4'], duration: duration + "r" });
        if (duration.endsWith('d'))
            VexFlow.Dot.buildAndAttach([vn]);
        return vn;
    }
    function getStandardDuration(beats) {
        for (const [key, val] of durations) {
            if (approx(beats, key) || beats >= key)
                return key;
        }
        return 1 / 16;
    }
    function getVexDuration(beats) {
        for (const [key, val] of durations) {
            if (approx(beats, key) || beats >= key)
                return val;
        }
        return "64";
    }
    const durations = new Map([
        [4, "1"],
        [3, "2d"],
        [2, "2"],
        [1 + 1 / 2, "4d"],
        [1, "4"],
        [1 / 2 + 1 / 4, "8d"],
        [1 / 2, "8"],
        [1 / 4 + 1 / 8, "16d"],
        [1 / 4, "16"],
        [1 / 8 + 1 / 16, "32d"],
        [1 / 8, "32"],
        [1 / 16 + 1 / 32, "64d"],
        [1 / 16, "64"]
    ]);
    function bestClef(trace) {
        const lowCount = noteCountInRange(trace, 0, 59);
        const highCount = noteCountInRange(trace, 60, 127);
        return lowCount > highCount ? 'bass' : 'treble';
    }
    /**
     * how many notes fall within the given note range?
     */
    function noteCountInRange(trace, low, high) {
        return trace
            .ofType([pe.PLAY, pe.SOUND])
            .filter(t => (t.note.note >= low && t.note.note <= high))
            .length;
    }
    function approx(a, b, fudge = 0.001) {
        return Math.abs(a - b) <= fudge;
    }
    function asciiAccidental(name) {
        return name
            .replace('♮', 'n')
            .replace('♭', 'b')
            .replace('♯', '#');
    }

    const sheet$7 = new CSSStyleSheet();sheet$7.replaceSync(".tunepad-block-menu {\n    background-color: #f1f1f1;\n    display: flex;\n    flex-direction: column;\n    box-sizing: border-box;\n    font-size: 14px;\n    padding: 1rem 1rem 3rem 1rem;\n    user-select: none;\n    border-right: 1px solid #bbb;\n    min-height: 100vh;\n    touch-action: none;\n}\n\n.tunepad-block-menu h1 {\n    font-size: 14px;\n}\n\ntunepad-block, .tunepad-drag-block {\n    box-sizing: border-box;\n    background-color: rgb(146, 104, 246);\n    border: 1px solid #0004;\n    color: white;\n    border-radius: 6px;\n    height: 35px;\n    padding: 0 8px;\n    user-select: none;\n    margin-bottom: 1rem;\n    font-size: 13px;\n    font-weight: 500;\n    line-height: 35px;\n    display: flex;\n    width: max-content;\n    cursor: grab;\n}\n.tunepad-drag-block {\n    min-height: 35px;\n    height: fit-content;\n}\n\ntunepad-block:hover {\n    border: 1px solid #fffa;\n}\n\n.tunepad-drag-block {\n    position: absolute;\n    box-shadow: 3px 3px 6px #0004;\n    z-index: 100;\n    pointer-events: none;\n    transition: opacity 300ms ease-in-out;\n    font-family: monospace;\n    cursor: grabbing;\n}\n\n.tunepad-drag-block.fade {\n    opacity: 0;\n}\n\n.music {\n  font-family: \"Noto Music\", sans-serif;\n  font-weight: 400;\n  font-style: normal;\n  font-size: 170%;\n  float: right;\n}\n\n.param {\n    min-width: 2rem;\n    border-radius: 10px;\n    border: 1px solid #0006;\n    text-align: center;\n    display: inline-block;\n    background-color: white;\n    color: black;\n    margin: 3px 8px;\n    line-height: 25px;\n    padding: 0 3px;\n    cursor: default;\n}\n");

    const sheet$6 = new CSSStyleSheet();sheet$6.replaceSync(".note-menu {\n    background-color: white;\n    box-shadow: 5px 5px 10px #0005;\n    border-radius: 8px;\n    display: flex;\n    flex-direction: column;\n    margin: 100px auto;\n    width: max-content;\n    padding: 2rem;\n    transition: opacity 150ms;\n}\n\n.note-menu.fadeout {\n    opacity: 0;\n}\n\n.note-menu h1 {\n    font-size: 1.5rem;\n    margin: 0.5rem;\n}\n\n.option-row {\n    display: flex;\n}\n\n.option {\n    flex: 1;\n    height: 110px;\n    max-width: 100px;\n    min-width: 100px;\n    border: 1px solid #888;\n    border-radius: 5px;\n    margin: 0.5rem;\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n    font-size: 12px;\n    font-family: sans-serif;\n    user-select: none;\n}\n\n.option:hover {\n    background-color: #eee;\n}\n\n.option:active {\n    background-color: #ddd;\n}\n\n.music {\n  font-family: \"Noto Music\", sans-serif;\n  font-weight: 400;\n  font-style: normal;\n  font-size: 40px;\n}\n\ncode {\n    font-family: monospace;\n    font-size: 10px;\n    color: #888;\n}\n\n.note-info {\n    display: flex;\n    margin-bottom: 1rem;\n}\n\n.note-info div {\n    padding: 0 1rem;\n    font-size: 60px;\n    line-height: 100%;\n    text-align: left;\n}\n\n.note-info .info-label {\n    font-size: 11px;\n    text-transform: uppercase;\n    font-family: sans-serif;\n}\n\n.note-info div.note-name {\n    box-sizing: border-box;\n    width: 60px;\n    max-width: 60px;\n    min-width: 60px;\n    height: 60px;\n    background-color: rgb(229, 76, 78);\n    line-height: 60px;\n    color: white;\n    font-size: 28px;\n    font-weight: bold;\n    border-radius: 50%;\n    text-align: center;\n    padding: 0;\n}\n\n.note-name .accidental {\n    font-size: 18px;\n    position: relative;\n    top: -5px;\n}\n\n.note-name .name {\n    font-size: 28px;\n}\n\n.piano-container, .drums-container {\n    background-color: rgba(0, 0, 0, 0.704);\n    position: relative;\n    padding: 0.5rem 2rem;\n    border-radius: 8px;\n}\n\n.submit-button {\n    background-color: #2c64e8;\n    color: white;\n    outline: none;\n    border: none;\n    width: 150px;\n    height: 40px;\n    border-radius: 20px;\n    font-weight: 500;\n    font-size: 15px;\n    margin: 1em 0 0 auto;\n    float: right;\n}\n\n.submit-button:hover {\n    opacity: 0.85;\n}\n.submit-button:active {\n    opacity: 0.75;\n}\n\n.chord-buttons {\n    display: flex;\n    padding: 1rem;\n}\n\n.chord-button {\n    width: 75px;\n    background-color: #fff5;\n    color: white;\n    padding: 0;\n    margin: 0 1rem 0.5rem 0;\n    text-align: center;\n    border-radius: 8px;\n    border: 2px solid #fff9;\n    outline: none;\n    display: flex;\n    flex-direction: column;\n}\n.chord-button:hover {\n    opacity: 0.85;\n}\n.chord-button:active {\n    opacity: 0.75;\n}\n\n.chord-button .roman {\n    font-size: 22px;\n    font-family: serif;\n}\n.chord-button .name {\n    font-size: 12px;\n}\n\n.note-names, .note-numbers, .key-name {\n    font-size: 25px !important;\n}\n\n.note-names, .note-numbers {\n    min-width: 150px;\n}\n\n.drum-name {\n    font-size: 40px !important;\n    font-weight: 500 !important;\n}");

    var html$6 = "<div class=\"note-menu\" id=\"notes\">\n    <h1>Note Type</h1>\n    <div class=\"option-row\">\n        <div class=\"option\" data-action=\"4\">\n            <div class=\"music\">𝅝</div>\n            Whole Note\n            <code>beats = 4</code>\n        </div>\n        <div class=\"option\" data-action=\"2\">\n            <div class=\"music\">𝅗𝅥</div>\n            Half Note\n            <code>beats = 2</code>\n        </div>\n        <div class=\"option\" data-action=\"1\">\n            <div class=\"music\">𝅘𝅥</div>\n            Quarter Note\n            <code>beats = 1</code>\n        </div>\n        <div class=\"option\" data-action=\"0.5\">\n            <div class=\"music\">𝅘𝅥𝅮</div>\n            Eighth Note\n            <code>beats = 0.5</code>\n        </div>\n        <div class=\"option\" data-action=\"0.25\">\n            <div class=\"music\">𝅘𝅥𝅯</div>\n            16th Note\n            <code>beats = 0.25</code>\n        </div>\n        <div class=\"option\" data-action=\"1/8\">\n            <div class=\"music\">𝅘𝅥𝅰</div>\n            32nd Note\n            <code>beats = 1/8</code>\n        </div>\n    </div>\n    <div class=\"option-row\">\n        <div class=\"option\" data-action=\"6\">\n            <div class=\"music\">𝅝.</div>\n            Dotted Whole\n            <code>beats = 6</code>\n        </div>\n        <div class=\"option\" data-action=\"3\">\n            <div class=\"music\">𝅗𝅥.</div>\n            Dotted Half\n            <code>beats = 3</code>\n        </div>\n        <div class=\"option\" data-action=\"1.5\">\n            <div class=\"music\">𝅘𝅥.</div>\n            Dotted Quarter\n            <code>beats = 1.5</code>\n        </div>\n        <div class=\"option\" data-action=\"0.75\">\n            <div class=\"music\">𝅘𝅥𝅮.</div>\n            Dotted Eighth\n            <code>beats = 0.75</code>\n        </div>\n        <div class=\"option\" data-action=\"3/8\">\n            <div class=\"music\">𝅘𝅥𝅯.</div>\n            Dotted 16th\n            <code>beats = 3/8</code>\n        </div>\n        <div class=\"option\" data-action=\"3/16\">\n            <div class=\"music\">𝅘𝅥𝅰.</div>\n            Dotted 32nd\n            <code>beats = 3/16</code>\n        </div>\n    </div>\n</div>\n\n<div class=\"note-menu\" id=\"rests\">\n    <h1>Rest Type</h1>\n    <div class=\"option-row\">\n        <div class=\"option\" data-action=\"4\">\n            <div class=\"music\">𝄻</div>\n            Whole Rest\n            <code>beats = 4</code>\n        </div>\n        <div class=\"option\" data-action=\"2\">\n            <div class=\"music\">𝄼</div>\n            Half Rest\n            <code>beats = 2</code>\n        </div>\n        <div class=\"option\" data-action=\"1\">\n            <div class=\"music\">𝄽</div>\n            Quarter Rest\n            <code>beats = 1</code>\n        </div>\n        <div class=\"option\" data-action=\"0.5\">\n            <div class=\"music\">𝄾</div>\n            Eighth Rest\n            <code>beats = 0.5</code>\n        </div>\n        <div class=\"option\" data-action=\"0.25\">\n            <div class=\"music\">𝄿</div>\n            16th Rest\n            <code>beats = 0.25</code>\n        </div>\n        <div class=\"option\" data-action=\"0.125\">\n            <div class=\"music\">𝅀</div>\n            32nd Rest\n            <code>beats = 0.125</code>\n        </div>\n    </div>\n    <div class=\"option-row\">\n        <div class=\"option\" data-action=\"6\">\n            <div class=\"music\">𝄻.</div>\n            Dotted Whole\n            <code>beats = 6</code>\n        </div>\n        <div class=\"option\" data-action=\"3\">\n            <div class=\"music\">𝄼.</div>\n            Dotted Half\n            <code>beats = 3</code>\n        </div>\n        <div class=\"option\" data-action=\"1.5\">\n            <div class=\"music\">𝄽.</div>\n            Dotted Quarter\n            <code>beats = 1.5</code>\n        </div>\n        <div class=\"option\" data-action=\"0.75\">\n            <div class=\"music\">𝄾.</div>\n            Dotted Eighth\n            <code>beats = 0.75</code>\n        </div>\n        <div class=\"option\" data-action=\"0.375\">\n            <div class=\"music\">𝄿.</div>\n            Dotted 16th\n            <code>beats = 0.375</code>\n        </div>\n        <div class=\"option\" data-action=\"0.1875\">\n            <div class=\"music\">𝅀.</div>\n            Dotted 32nd\n            <code>beats = 0.1875</code>\n        </div>\n    </div>\n</div>\n\n<div class=\"note-menu\" id=\"pitch\" style=\"min-width: 800px\">\n    <div class=\"note-info\">\n        <div>\n            <div class=\"info-label\">Note</div>\n            <div class=\"note-name\"><span class=\"name\">C</span><span class=\"accidental\"></span></div>\n        </div>\n        <div>\n            <div class=\"info-label\">Number</div>\n            <div class=\"note-number\">60</div>\n        </div>\n        <div>\n            <div class=\"info-label\">Octave</div>\n            <div class=\"note-octave\">5</div>\n        </div>\n        <div style=\"flex: 1\"></div>\n    </div>\n    <div class=\"piano-container\">\n        <piano-instrument class=\"instrument\" armed=\"true\" focus-octave=\"2\"></piano-instrument>\n    </div>\n    <button class=\"submit-button\" id=\"select-note\">Select Note 60</button>\n</div>\n\n\n<div class=\"note-menu\" id=\"drums\" style=\"min-width: 800px\">\n    <div class=\"note-info\">\n        <div>\n            <div class=\"info-label\">Drum Sound</div>\n            <div class=\"drum-name\">snare</div>\n        </div>\n        <div>\n            <div class=\"info-label\">Number</div>\n            <div class=\"note-number\">2</div>\n        </div>\n        <div style=\"flex: 1\"></div>\n    </div>\n    <div class=\"drums-container\">\n        <drums-instrument class=\"instrument\" armed=\"true\"></drums-instrument>\n    </div>\n    <button class=\"submit-button\" id=\"select-note\">Select Note 2</button>\n</div>\n\n\n\n<div class=\"note-menu\" id=\"chord\" style=\"min-width: 800px\">\n    <div class=\"note-info\">\n        <div>\n            <div class=\"info-label\">Notes</div>\n            <div class=\"note-names\">C, E, G</div>\n        </div>\n        <div>\n            <div class=\"info-label\">Numbers</div>\n            <div class=\"note-numbers\">[60, 64, 67]</div>\n        </div>\n        <div style=\"flex: 1\"></div>\n        <div>\n           <div class=\"info-label\">Key</div>\n           <div class=\"key-name\"></div> \n        </div>\n    </div>\n    <div class=\"piano-container\">\n        <div class=\"chord-buttons\"></div>\n        <piano-instrument armed=\"true\" focus-octave=\"2\" class=\"instrument\"></piano-instrument>\n    </div>\n    <button class=\"submit-button\" id=\"select-chord\">OK</button>\n\n</div>";

    const sheet$5 = new CSSStyleSheet();sheet$5.replaceSync(".dialog {\n    background-color: white;\n    box-shadow: 5px 5px 10px #0005;\n    border-radius: 8px;\n    display: flex;\n    flex-direction: column;\n    margin: 100px auto;\n    width: max-content;\n    padding: 2rem;\n    transition: opacity 150ms;\n    user-select: none;\n    position: relative;\n}\n\n.dialog.fadeout {\n    opacity: 0;\n}\n\n.dialog h1 {\n    font-size: 1.5rem;\n    margin: 0.5rem;\n}\n\n.submit-button {\n    background-color: #2c64e8;\n    color: white;\n    outline: none;\n    border: none;\n    height: 40px;\n    border-radius: 20px;\n    font-weight: 500;\n    font-size: 15px;\n    margin: 0 0 0 1rem;\n    float: right;\n    display: flex;\n    line-height: 40px;\n    padding: 0 1rem;\n}\n.submit-button.gray { background-color: #888; }\n\n.dialog-buttons {\n    display: flex;\n    flex-direction: row-reverse;\n}\n\n.submit-button tunepad-icon {\n    display: inline-block;\n    margin-left: 8px;\n    width: 17px;\n    position: relative;\n    top: 4px;\n}\n\n.submit-button svg {\n    fill: white;\n}\n\n.submit-button:hover {\n    opacity: 0.85;\n}\n.submit-button:active {\n    opacity: 0.75;\n}\n\n#recordings {\n    background: #ddd;\n    min-width: 500px;\n    max-width: 800px;\n    height: 40vh;\n    padding: 1.5rem;\n    border-radius: 1rem;\n    overflow-y: auto;\n    user-select: text;\n}\n\n.close-button {\n    position: absolute;\n    top: 1.5rem;\n    right: 1.5rem;\n    width: fit-content;\n    height: fit-content;\n    background-color: transparent;\n    outline: none;\n    border: none;\n    padding: 0;\n}\n.close-button:hover { opacity: 0.75; }\n.close-button:active { opacity: 0.55; }\n.dialog .close-button tunepad-icon {\n    display: inline-block;\n    width: 30px;\n    margin: 0;\n}\n\n\n.expander { flex: 1; }");

    var html$5 = "<div class=\"dialog\">\n    <button class=\"close-button\"><tunepad-icon icon=\"cross-circle\"></tunepad-icon></button>\n    <h1>Note History</h1>\n    <pre id=\"recordings\"></pre>\n    <div class=\"dialog-buttons\">\n        <button class=\"submit-button gray\" id=\"clear-history\">\n            Clear\n            <tunepad-icon icon=\"trash\"></tunepad-icon>\n        </button>\n        <button class=\"submit-button\" id=\"clipboard-copy\">\n            Copy to Clipboard\n            <tunepad-icon icon=\"copy\"></tunepad-icon>\n        </button>\n        <div class=\"expander\"></div>\n        <button class=\"submit-button gray\" id=\"quantize\">\n            Quantize\n            <tunepad-icon icon=\"checkmark\"></tunepad-icon>\n        </button>\n    </div>\n\n</div>\n";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    // Quantize button
    // add rests in the history
    /**
     * This class keeps a buffer of notes played and released to auto generate python code from an instrument UI
     */
    class NoteRecorder {
        get current() { return this.groups[this.groups.length - 1]; }
        constructor() {
            this.groups = [];
            this.audio = q.init();
        }
        noteOn(note) {
            if (this.groups.length === 0 || this.current.closed) {
                this.groups.push(new NoteGroup());
            }
            this.current.noteOn(note, this.audio.contextTime);
        }
        noteOff(note) {
            if (this.groups.length > 0) {
                this.current.noteOff(note, this.audio.contextTime);
            }
        }
        get currentHint() {
            if (this.groups.length === 0) {
                return '';
            }
            else if (this.current.empty) {
                return '';
            }
            else {
                return this.current.getHint(this.audio.bpm);
            }
        }
        get currentNoteNumbers() {
            if (this.groups.length === 0) {
                return [];
            }
            else {
                return this.current.notes.map(nr => nr.note.note);
            }
        }
        /** Get full history of notes played with rests inserted */
        getHistory(quant) {
            let result = '';
            let last = undefined;
            for (const group of this.groups) {
                const delta = group.onset - (last ? last.release : group.onset);
                if (delta > 4) {
                    result += `\n# Long rest (${quantize(delta)} beats)\n\n`;
                }
                else if (delta > 1 / 8) {
                    result += `rest(${toFixedString(quant ? quantize(delta) : delta)})\n`;
                }
                result += group.getHint(this.audio.bpm, quant) + '\n';
                last = group;
            }
            return result;
        }
        clear() {
            this.groups = [];
        }
    }
    NoteRecorder.QUANT = 0.25;
    class NoteGroup {
        get open() { return !this.closed; }
        get closed() { return this.notes.every(n => n.closed); }
        get empty() { return this.notes.length === 0; }
        get onset() { return this.notes.reduce((min, n) => Math.min(min, n.onset), this.notes[0].onset); }
        get release() { return this.notes.reduce((max, n) => Math.max(max, n.release), this.notes[0].release); }
        get durationSeconds() { return (this.notes.length > 0) ? this.release - this.onset : 0; }
        constructor() {
            this.notes = [];
        }
        noteOn(n, onset) {
            let note = (n instanceof i$1) ? n : new i$1(n);
            const existing = this.notes.find(n => n.note.note === note.note);
            if (existing) {
                existing.release = 0;
            }
            else {
                this.notes.push(new NoteRecord(note, onset));
            }
            //if any other notes have been released, remove them
            this.notes = this.notes
                .filter(n => n.open)
                .sort((a, b) => a.note.note - b.note.note);
        }
        noteOff(n, release) {
            let note = (n instanceof i$1) ? n : new i$1(n);
            const existing = this.notes.find(n => n.note.note === note.note);
            if (existing) {
                existing.release = release;
            }
        }
        getHint(bpm, quant = true) {
            const vals = this.notes.map(n => n.note.note).join(', ');
            const len = this.notes.length;
            const arg = (len > 1) ? `[ ${vals} ]` : (len > 0) ? `${vals}` : 'None';
            if (this.open) {
                return `playNote(${arg})`;
            }
            else {
                const beats = this.formatBeats(bpm, quant);
                return `playNote(${arg}, beats = ${beats})`;
            }
        }
        formatBeats(bpm, quant = true) {
            let d = this.durationSeconds * bpm / 60;
            if (quant)
                d = quantize(d);
            return toFixedString(d);
        }
    }
    class NoteRecord {
        /** is this note still being played */
        get open() { return this.release <= 0; }
        get closed() { return this.release > 0; }
        constructor(note, onset) {
            /** note onset in seconds (will get converted to beats) */
            this.onset = -1;
            /** note release in seconds */
            this.release = 0;
            this.note = note;
            this.onset = onset;
            this.release = 0;
        }
    }
    /**
     * Dialog that shows a history of notes played
     */
    class NoteHistoryDialog {
        constructor(mcc) {
            this.mcc = mcc;
            this.overlay = document.createElement('div');
            this.overlay.classList.add('context-menu-overlay', 'show');
            this.overlay.addEventListener('pointerdown', e => { this.hide(); });
            this.root = this.overlay.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(sheet$5);
            this.root.innerHTML = html$5;
            this.root.querySelector('.close-button')?.addEventListener('click', e => { this.hide(); });
            this.root.querySelector('#clear-history')?.addEventListener('click', e => {
                this.mcc.clear();
                this.setHTML('#recordings', '');
                this.hide();
            });
            this.root.querySelector('#clipboard-copy')?.addEventListener('click', e => {
                navigator.clipboard.writeText(this.mcc.getHistory(NoteHistoryDialog.quant));
                this.hide();
            });
            this.root.querySelector('.dialog')?.addEventListener('pointerdown', e => e.stopImmediatePropagation());
            this.setHTML('#recordings', this.mcc.getHistory(NoteHistoryDialog.quant));
            this.root.querySelector('#quantize')?.addEventListener('click', e => {
                if (NoteHistoryDialog.quant) {
                    NoteHistoryDialog.quant = false;
                    this.setHTML('#recordings', mcc.getHistory(false));
                    this.root.querySelector('#quantize tunepad-icon')?.setAttribute('icon', '');
                }
                else {
                    NoteHistoryDialog.quant = true;
                    this.setHTML('#recordings', mcc.getHistory(true));
                    this.root.querySelector('#quantize tunepad-icon')?.setAttribute('icon', 'checkmark');
                }
            });
            this.root.querySelector('#quantize tunepad-icon')?.setAttribute('icon', NoteHistoryDialog.quant ? 'checkmark' : '');
        }
        show() {
            document.body.append(this.overlay);
        }
        hide() {
            this.overlay.classList.remove('show');
            setTimeout(() => { this.overlay.remove(); }, 175);
        }
        setHTML(selector, html) {
            const el = this.root.querySelector(selector);
            if (el)
                el.innerHTML = html;
        }
    }
    NoteHistoryDialog.quant = true;
    function quantize(beats) {
        return Math.round(beats / NoteRecorder.QUANT) * NoteRecorder.QUANT;
    }
    function toFixedString(d, zeroPad = 1 / 8) {
        let beats = d.toFixed(3);
        for (let i = 0; i < 3; i++) {
            if (beats.endsWith('0'))
                beats = beats.substring(0, beats.length - 1);
        }
        if (beats.endsWith('.'))
            beats = beats.substring(0, beats.length - 1);
        if (beats === '0')
            beats = `${zeroPad}`;
        return beats;
    }

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * Select note durations from a popup menu
     *
     * <tunepad-note-menu>
     */
    class NoteMenu extends HTMLElement {
        constructor() {
            super();
            this.key = new m('C major');
            // result that the promise function returns
            this.result = '';
            // which of several menus to show
            this.menu = 'notes'; // 'notes' | 'rests' | 'pitch' | 'chord' | 'drums'
            this.root = this.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(sheet$6);
            this.root.innerHTML = html$6;
            this.mcc = new NoteRecorder();
        }
        async connectedCallback() {
            // only show the correct menu
            this.root.querySelectorAll('.note-menu').forEach(m => { if (m.id != this.menu)
                m.remove(); });
            // initialize synth and audio services for interactive menus
            if (['chord', 'pitch', 'drums'].includes(this.menu)) {
                const audio = q.init();
                this.key = audio.key;
                this.synth = new Me();
                let url = new URL(`${audio.voices}/grand-piano/patch.json`, (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('tunepad.min.js', document.baseURI).href));
                if (this.menu === 'drums') {
                    url = new URL(`${audio.voices}/808-drums/patch.json`, (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('tunepad.min.js', document.baseURI).href));
                }
                await this.synth.loadPatch(url);
                if (this.menu === 'drums') {
                    this.root.querySelector('drums-instrument')?.setPatch(this.synth.patch, '808-drums');
                }
                this.setHTML('.key-name', this.key.name);
            }
            // set default note information
            if (this.menu === 'pitch')
                this.setNoteInfo(this.result);
            // do nothing if the user clicks on the background part of the dialog
            this.root.querySelector('.note-menu')?.addEventListener('pointerdown', e => { e.stopImmediatePropagation(); });
            // if they click on an option button or submit button close the dialog
            this.root.querySelectorAll('.option, .submit-button').forEach(opt => {
                opt.addEventListener('click', e => {
                    this.hide();
                    if (this.promise)
                        this.promise(opt.getAttribute('data-action') || this.result);
                });
            });
            // listen for events from the piano instrument
            this.root.querySelector('.instrument')?.addEventListener('note-on', e => {
                const note = new i$1(e.detail.note);
                this.result = `${note.note}`;
                this.setNoteInfo(note);
                this.synth?.playNote(note);
                this.mcc.noteOn(note);
                if (this.menu === 'chord') {
                    this.setChordInfo(this.mcc.currentNoteNumbers);
                }
                else if (this.menu === 'drums') {
                    this.setHTML('.drum-name', e.detail.drum ?? '');
                }
            });
            this.root.querySelector('.instrument')?.addEventListener('note-off', e => {
                const note = new i$1(e.detail.note);
                this.synth?.releaseNote(note);
                this.mcc.noteOff(note);
            });
            // initialize the chord buttons for the diatonic chords of the current key
            for (let i = 1; i <= 7; i++) {
                const roman = this.key.getChordRoman(i);
                const name = this.key.getChordName(i);
                const button = document.createElement('button');
                button.classList.add('chord-button');
                button.setAttribute('data-chord', `${i}`);
                button.innerHTML = `<div class="roman">${roman}</div><div class="name">${name}</div>`;
                this.root.querySelector('.chord-buttons')?.append(button);
                button.addEventListener('pointerdown', e => this.previewChord(button.getAttribute('data-chord') || '1'));
                button.addEventListener('pointerenter', e => {
                    if (e.buttons > 0) {
                        this.previewChord(button.getAttribute('data-chord') || '1');
                    }
                });
                button.addEventListener('pointerup', e => { this.synth?.releaseAll(); });
                button.addEventListener('pointerleave', e => { this.synth?.releaseAll(); });
            }
        }
        disconnectedCallback() {
            this.root.innerHTML = '';
            this.synth = undefined;
        }
        static show(menuName = 'notes', currentSelection = "1") {
            const overlay = document.createElement('div');
            overlay.classList.add('context-menu-overlay', 'show');
            document.body.append(overlay);
            const menu = document.createElement('tunepad-note-menu');
            menu.result = currentSelection;
            menu.menu = menuName;
            overlay.append(menu);
            return new Promise((resolve) => {
                menu.promise = resolve;
                overlay.addEventListener('pointerdown', e => {
                    menu.hide();
                    resolve(currentSelection);
                });
            });
        }
        hide() {
            const overlay = document.querySelector('.context-menu-overlay');
            if (overlay) {
                overlay.classList.remove('show');
                setTimeout(() => {
                    overlay.innerHTML = '';
                    overlay.remove();
                }, 175);
            }
        }
        setNoteInfo(n) {
            const note = (typeof n === 'string') ? new i$1(f(n, 60)) : n;
            this.setHTML('#select-note', `Select Note ${note.note}`);
            this.setHTML('.note-name .name', this.key.getNoteName(note, false));
            this.setHTML('.note-name .accidental', this.key.getAccidental(note));
            this.setHTML('.note-octave', `${note.octave}`);
            this.setHTML('.note-number', `${note.note}`);
            this.setBackground('.note-name', note.stepColor);
        }
        previewChord(c) {
            const chord = p(c, 1);
            if (chord >= 1 && chord <= 7) {
                const notes = this.key.getDiatonicTriad(chord);
                notes.forEach(n => this.synth?.playNote(n));
                this.setChordInfo(notes);
            }
        }
        setChordInfo(notes) {
            this.setHTML('.note-numbers', `[ ${notes.join(', ')} ]`);
            this.result = `[ ${notes.join(', ')} ]`;
            const names = notes.map(n => this.key.getNoteName(new i$1(n)));
            this.setHTML('.note-names', `${names.join(', ')}`);
        }
        setHTML(selector, html) {
            const el = this.root.querySelector(selector);
            if (el)
                el.innerHTML = html;
        }
        setBackground(selector, color) {
            const el = this.root.querySelector(selector);
            if (el)
                el.style.backgroundColor = color;
        }
    }
    NoteMenu.ELEMENT = "tunepad-note-menu";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * Timeline can show midi piano roll or waveform view of audio
     *
     * <tunepad-block-menu>
     *     <tunepad-block code="playNote($0)">
     *       playNote <div class="param" data-menu="pitch">60</div>
     *     </tunepad-block>
     *     <tunepad-block code="for i in range($0):" color="pink">
     *       repeat <div class="param" data-type="int">8</div> times
     *     </tunepad-block>
     * <tunepad-block-menu>
     */
    class BlockMenu extends HTMLElement {
        constructor() {
            super();
            this.root = this.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(sheet$7);
            this.menu = document.createElement('div');
            this.menu.classList.add('tunepad-block-menu');
            this.root.append(this.menu);
            // we have to put these styles in the top-level document as well because 
            // when the blocks are being dragged, they are direct children of the <body>
            document.adoptedStyleSheets.push(sheet$7);
        }
        async connectedCallback() {
            await this.waitForWindowLoad();
            // move content into the shadow root
            this.menu.innerHTML = this.innerHTML;
            // set up block event handlers
            this.menu.querySelectorAll('tunepad-block').forEach(block => {
                block.addEventListener('pointerdown', (e) => {
                    this.target = document.createElement('div');
                    this.target.classList.add('tunepad-drag-block');
                    const code = this.formatCode(block);
                    this.target.innerHTML = code.replace('\n', '<br>').replace('\\t', '&nbsp;&nbsp;&nbsp;&nbsp;');
                    this.target.style.left = `${e.clientX - 25}px`;
                    this.target.style.top = `${e.clientY - 15}px`;
                    if (block.getAttribute('color')) {
                        this.target.style.backgroundColor = block.getAttribute('color');
                    }
                    document.body.appendChild(this.target);
                    sessionStorage.setItem('tunepad-drag-block', code);
                });
            });
            document.addEventListener('pointermove', (e) => {
                if (this.target) {
                    this.target.style.left = `${e.clientX - 25}px`;
                    this.target.style.top = `${e.clientY - 15}px`;
                }
            });
            document.addEventListener('pointerup', (e) => {
                if (this.target) {
                    const hits = document.elementsFromPoint(e.clientX, e.clientY);
                    hits.forEach(hit => {
                        if (hit.nodeName.toLowerCase() == "tunepad-cell") {
                            hit.blockDropped(e.clientX, e.clientY, sessionStorage.getItem('tunepad-drag-block'));
                        }
                    });
                    this.target.classList.add('fade');
                    setTimeout(() => {
                        this.target?.remove();
                        this.target = undefined;
                        sessionStorage.removeItem('tunepad-drag-block');
                    }, 300);
                }
            });
            // activate parameter menus
            this.root.querySelectorAll('.param').forEach(p$1 => {
                p$1.addEventListener('pointerdown', async (e) => {
                    e.stopImmediatePropagation();
                    const menu = p$1.getAttribute('data-menu');
                    if (menu) {
                        const value = p$1.innerHTML;
                        const selection = await NoteMenu.show(menu, value);
                        p$1.innerHTML = selection;
                    }
                });
                if (p$1.getAttribute('data-type') === 'int') {
                    const originalValue = p(p$1.innerHTML, 1);
                    p$1.addEventListener('blur', e => {
                        p$1.innerHTML = `${p(p$1.innerHTML, originalValue)}`;
                    });
                    p$1.addEventListener('keypress', e => {
                        if (e.key === "Enter")
                            p$1.blur();
                    });
                }
            });
        }
        disconnectedCallback() { }
        attributeChangedCallback(name, oldValue, newValue) { }
        formatCode(block) {
            let template = block.getAttribute('code') || 'playNote(60)';
            let index = 0;
            block.querySelectorAll('.param').forEach(p => {
                template = template.replace('$' + index, p.innerHTML);
                index++;
            });
            return template.replaceAll('\\n', '\n');
        }
        async waitForWindowLoad() {
            return new Promise((resolve) => {
                if (document.readyState === 'complete') {
                    resolve();
                }
                else {
                    window.addEventListener('load', () => { resolve(); });
                }
            });
        }
    }
    BlockMenu.ELEMENT = "tunepad-block-menu";
    BlockMenu.observedAttributes = [];
    class Block extends HTMLElement {
        constructor() { super(); }
        attributeChangedCallback(name, oldValue, newValue) {
            if (name === 'color') {
                this.style.backgroundColor = newValue;
            }
        }
        connectedCallback() { }
        disconnectedCallback() { }
    }
    Block.ELEMENT = "tunepad-block";
    Block.observedAttributes = ['color'];

    const sheet$4 = new CSSStyleSheet();sheet$4.replaceSync(".container {\n\n}\n\n.toolbar {\n    display: flex;\n    color: #fffc;\n    padding: 5px 10px;\n    line-height: 34px;\n}\n\n.expander { flex: 1; }\n\n.toolbar button {\n    outline: none;\n    border: 2px solid #9194A1;\n    color: rgba(255, 255, 255, 0.75);\n    background-color: #fff2;\n    box-shadow: 2px 2px 3px rgba(0, 0, 0, 0.1);\n    width: 40px;\n    height: 35px;\n    border-radius: 5px;\n    margin: 3px;\n    font-size: 14px;\n    text-align: center;\n    white-space: nowrap;\n    transition: all 100ms ease-out;\n}\n.toolbar button svg { \n    width: 15px;\n    height: 15px; \n    fill: rgba(255, 255, 255, 0.75);; \n    vertical-align: middle;\n}\n.toolbar button:active { background-color: rgba(255, 255, 255, 0.45); }\n.toolbar button:hover { border: 2px solid #DDD; }\n.toolbar button.hidden { display: none; }\n.toolbar button:disabled svg { fill: #fff3; }\n.toolbar button:disabled:hover { border: 2px solid #9194A1; }\n.toolbar button:disabled:active { background-color: #fff2; }\n\n\n#midi-indicator {\n    font-family: var(--main-font);\n    font-weight: 700;\n    font-size: 12px;\n    text-align: left;\n    user-select: none;\n    padding-left: 10px;\n    display: flex;\n    align-items: center;\n}\n\n#midi-indicator tunepad-icon {\n    margin-right: 6px;\n    width: 25px;\n    height: 25px;\n}\n#midi-indicator.hidden {\n    display: none;\n}\n\n.led {\n    pointer-events: none;\n    background-color: rgb(85, 85, 85);\n    box-shadow: none;\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    margin: 0 7px;\n}\n\n.led.green {\n    background-color: rgb(0, 221, 0);\n    box-shadow: rgb(0, 255, 0) 0px 0px 5px;\n}\n.led.red {\n    background-color: rgb(221, 0, 0);\n    box-shadow: rgb(255, 85, 85) 0px 0px 8px;\n}\n.led.amber {\n    background-color: rgb(255, 231, 21);\n    box-shadow: rgb(255, 255, 85) 0px 0px 8px;  \n}\n\n.instrument-wrapper {\n    position: relative; \n    display: flex;\n}\n\n.instrument-wrapper:focus-within {\n    /* outline: 2px solid gold; */\n    outline: none;\n}\n\n\n#instrument { flex: 1; }\n\n.patch-credit { \n    font-size: 10px;\n    color: #fff9;\n    user-select: none;\n    padding: 2px 15px;\n}\n\n#note-hint {\n    flex: 1;\n    opacity: 0;\n    transition: opacity 300ms;\n    box-sizing: border-box;\n    background-color: #fffa;\n    white-space: nowrap;\n    text-align: left;\n    overflow: hidden;\n    height: 35px;\n    margin: 3px 0 3px 20px;\n    border-radius: 5px;\n    padding: 0 0.7em 0 1em;\n    border: 1px solid #0007;\n    display: flex;\n    user-select: none;\n}\n#note-hint.show { opacity: 1; }\n#note-hint:hover { border: 1px solid white; }\n#note-hint:active { background-color: white; }\n\n#note-hint .code {\n    flex: 1;\n    font-family: monospace;\n    font-size: 13px;\n    font-weight: 500;\n    line-height: 35px;\n    color: black;\n}\n\n#note-hint button {\n    background-color: transparent !important;\n    border: none;\n    outline: none;\n    color: black;\n    height: unset;\n    box-shadow: none;\n    width: unset;\n    margin: 0;\n}\n\n#note-hint svg {\n    fill: black !important;\n}\n\n#note-hint button:hover svg {\n    fill: white !important;\n}\n\n.toolbar button.instrument-menu-button {\n    width: 16rem;\n    text-align: left;\n    text-transform: uppercase;\n    display: flex;\n    align-items: center;\n    font-size: 90%;\n}\n.patch-name {\n    flex: 1;\n    user-select: none;\n}\n");

    var html$4 = "<div class=\"container\">\n    <div class=\"toolbar\">\n        <div class=\"menu-container\">\n            <button class=\"instrument-menu-button\" title=\"Instrument Menu...\">\n                <div class=\"patch-name\"></div>\n                <div class=\"pulldown-icon\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                        <path d=\"M201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z\"/>\n                    </svg>\n                </div>\n            </button>\n            <context-menu id=\"instrument-menu\" class=\"open-up\"></context-menu>\n        </div>\n        <div id=\"note-hint\">\n            <div class=\"code\"></div>\n            <button id=\"hint-insert\" title=\"Insert code to editor\">\n                <tunepad-icon icon=\"insert\"></tunepad-icon>\n            </button>\n            <button id=\"hint-copy\" title=\"Copy to Clipboard\">\n                <tunepad-icon icon=\"copy\"></tunepad-icon>\n            </button>\n            <button id=\"hint-history\" title=\"View history of notes played\">\n                <tunepad-icon icon=\"history\"></tunepad-icon>\n            </button>\n        </div>\n        <div id=\"midi-indicator\" class=\"hidden\">\n            <!-- <tunepad-icon icon=\"piano\"></tunepad-icon> -->\n            MIDI\n            <div class=\"led\"></div>\n        </div>\n    </div>\n\n    <div class=\"instrument-wrapper\" tabindex=\"3\">\n        <piano-instrument id=\"instrument\" armed=\"true\" key-range=\"17\" min-note=\"21\" focus-octave=\"4\"></piano-instrument>\n        <!-- <drums-instrument id=\"cell-instrument\"></drums-instrument>-->\n    </div>\n</div>";

    var patchMenu = "<context-menu-item name=\"Bass\" radio-group=\"patch\">\n    <context-menu class=\"scroller\">\n        <context-menu-item name=\"Electric Bass\" action=\"electric-bass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Blues Bass\" action=\"blues-bass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Jazz Bass\" action=\"jazz-bass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Billie Bass\" action=\"billie-bass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Jazz Upright Bass\" action=\"upright-bass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Pop Fizz Bass\" action=\"pop-bass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"I Feel Love Bass\" action=\"love-bass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Like That Bass\" action=\"like-that-bass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Synth Pop Bass\" action=\"synth-pop-bass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"PWM Synth Bass\" action=\"pwm-bass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Jupiter Bass\" action=\"jupiter-bass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Mars Bass\" action=\"mars-bass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Saturn Bass\" action=\"saturn-bass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Clean Cosine\" action=\"cosine-bass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Triangle Bass\" action=\"triangle-bass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"303 Bass\" action=\"303-bass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"808 Bass\" action=\"808-bass\" radio-group=\"patch\"></context-menu-item>\n    </context-menu>\n</context-menu-item>\n<context-menu-item name=\"Drums\" radio-group=\"patch\">\n    <context-menu>\n        <context-menu-item name=\"808 Drums\" action=\"808-drums\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"909 Drums\" action=\"909-drums\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Rock Drum Kit\" action=\"rock-drums\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Jazz Drum Kit\" action=\"jazz-drums\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Headlines Drums\" action=\"headlines-drums\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"LinnDrum\" action=\"linndrum\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Djembe\" action=\"djembe\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Percussion Sounds\" action=\"shot-drums\" radio-group=\"patch\"></context-menu-item>\n    </context-menu>\n</context-menu-item>\n<context-menu-item name=\"Sound FX\" radio-group=\"patch\">\n    <context-menu>\n        <context-menu-item name=\"Applause\" action=\"applause\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Sirens and Horns\" action=\"sirens\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Whistles\" action=\"whistles\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Horror\" action=\"spooky\" radio-group=\"patch\"></context-menu-item>\n    </context-menu>\n</context-menu-item>\n<context-menu-item name=\"Piano\" radio-group=\"patch\">\n    <context-menu>\n        <context-menu-item name=\"Grand Piano\" action=\"grand-piano\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Rhodes Piano\" action=\"rhodes\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Electric Piano\" action=\"electric-piano\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Electric Piano 2\" action=\"electric-piano2\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Harpsichord\" action=\"harpsichord\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Music Box\" action=\"music-box\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Big Piano\" action=\"big-piano\" radio-group=\"patch\"></context-menu-item>\n    </context-menu>\n</context-menu-item>\n<context-menu-item name=\"Organ\" radio-group=\"patch\">\n    <context-menu>\n        <context-menu-item name=\"Hammond Organ\" action=\"jazz-organ\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Rock Organ\" action=\"rock-organ\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Pipe Organ\" action=\"pipe-organ\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Crystal Organ\" action=\"crystal-organ\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"House Organ Bass\" action=\"house-organ-bass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Sentimental Organ\" action=\"sent-organ\" radio-group=\"patch\"></context-menu-item>\n    </context-menu>\n</context-menu-item>\n<context-menu-item name=\"Guitar\" radio-group=\"patch\">\n    <context-menu>\n        <context-menu-item name=\"Acoustic Guitar\" action=\"fresh-guitar\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Stratocaster Guitar\" action=\"electric-guitar\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Ukulele\" action=\"ukulele\" radio-group=\"patch\"></context-menu-item>\n    </context-menu>\n</context-menu-item>\n<context-menu-item name=\"Mallet\" radio-group=\"patch\">\n    <context-menu>\n        <context-menu-item name=\"Marimba\" action=\"marimba\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Vibraphone\" action=\"vibraphone\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Chimes\" action=\"chimes\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Glockenspiel\" action=\"glockenspiel\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Singing Bowl\" action=\"singing-bowl\" radio-group=\"patch\"></context-menu-item>\n    </context-menu>\n</context-menu-item>\n<context-menu-item name=\"Synth Leads\" radio-group=\"patch\">\n    <context-menu>\n        <context-menu-item name=\"Soft Synth\" action=\"soft-synth\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Wobbly Square\" action=\"wobbly-square\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Soaring Saw\" action=\"soaring-saw\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Wacky Lead\" action=\"wacky-lead\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Buzz Buzz\" action=\"buzz-buzz\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Ocarina\" action=\"ocarina\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Searing Lead\" action=\"searing-lead\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Flat Synth\" action=\"flat-synth\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Bright Lead\" action=\"bright-lead\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Simple Saw\" action=\"simple-saw\" radio-group=\"patch\"></context-menu-item>\n    </context-menu>\n</context-menu-item>\n<context-menu-item name=\"Synth Arps\" radio-group=\"patch\">\n    <context-menu>\n        <context-menu-item name=\"Party Synth\" action=\"party\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Space Chimes\" action=\"space-chimes\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Ice Synth\" action=\"ice-synth\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Squiggly Pluck\" action=\"squiggly-pluck\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Wah Wah\" action=\"wah-wah\" radio-group=\"patch\"></context-menu-item>\n    </context-menu>\n</context-menu-item>\n<context-menu-item name=\"Synth Pads\" radio-group=\"patch\">\n    <context-menu>\n        <context-menu-item name=\"Africa Brass\" action=\"africa-brass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Dreamy Pad\" action=\"dreamy-pad\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Dramatic Pad\" action=\"drama-pad\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Synth Orchestra\" action=\"synth-orchestra\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Mellotron Flute Choir\" action=\"mellotron-flute-choir\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Lowfi Pad\" action=\"lowfi-pad\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Chip Tune Choir\" action=\"chip-tune-choir\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Instant Chords 1\" action=\"@instant-chords-1\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Instant Chords 2\" action=\"@instant-chords-2\" radio-group=\"patch\"></context-menu-item>\n    </context-menu>\n</context-menu-item>\n<context-menu-item name=\"Orchestral\" radio-group=\"patch\">\n    <context-menu>\n        <context-menu-item name=\"Strings\" action=\"strings\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Brass\" action=\"brass\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Trumpet\" action=\"trumpet\" radio-group=\"patch\"></context-menu-item>\n        <context-menu-item name=\"Bright Trumpet\" action=\"bright-trumpet\" radio-group=\"patch\"></context-menu-item>\n    </context-menu>\n</context-menu-item>\n";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * ## TunePad generic instrument interface that wraps piano, drums, bass, guitar, etc.
     * ```html
     * <tunepad-instrument midi-in="false" midi-out="false"></tunepad-instrument>
     * ```
     */
    class TunePadInstrument extends HTMLElement {
        constructor() {
            super();
            /** used to generate note hints and recordings */
            this.recorder = new NoteRecorder();
            /** midi input enabled */
            this.midiIn = false;
            /** midi output enabled */
            this.midiOut = false;
            this._last_instrument = '';
            this.root = this.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(ContextMenuStyles);
            this.root.adoptedStyleSheets.push(sheet$4);
            this.root.innerHTML = html$4;
        }
        async connectedCallback() {
            this.buildPatchMenu();
            // disarm keyboard when an instrument loses focus
            this.root.querySelector('.instrument-wrapper')?.addEventListener('blur', e => {
                this.root.querySelector('#instrument')?.setAttribute('armed', 'false');
            });
            this.root.querySelector('.instrument-wrapper')?.addEventListener('focus', e => {
                this.root.querySelector('#instrument')?.setAttribute('armed', 'true');
            });
            // copy note hints to the clipboard
            this.root.querySelector('#note-hint')?.addEventListener('pointerdown', (e) => {
                const el = this.root.querySelector('#note-hint .code');
                if (el) {
                    const hint = el.innerHTML;
                    el.innerHTML = 'Copied to clipboard';
                    navigator.clipboard.writeText(hint);
                    setTimeout(() => { el.innerHTML = hint; }, 1000);
                }
            });
            this.root.querySelector('#hint-insert')?.addEventListener('pointerdown', (e) => {
                e.stopImmediatePropagation();
                const el = this.root.querySelector('#note-hint .code');
                if (el) {
                    const hint = el.innerHTML;
                    this.emitActionEvent("hint-insert", hint);
                }
            });
            this.root.querySelector('#hint-history')?.addEventListener('pointerdown', (e) => {
                e.stopImmediatePropagation();
                const dialog = new NoteHistoryDialog(this.recorder);
                dialog.show();
            });
        }
        disconnectedCallback() { }
        attributeChangedCallback(name, oldValue, newValue) {
            if (newValue === oldValue)
                return;
            if (name === 'midi-in') {
                this.setMidiIn(newValue === 'true');
            }
            else if (name === 'midi-out') {
                this.setMidiOut(newValue === 'true');
            }
        }
        setMidiLED(color) {
            const led = this.root.querySelector('#midi-indicator .led');
            led?.classList.remove('red', 'green', 'amber');
            if (color !== '')
                led?.classList.add(color);
        }
        setMidiIn(on) {
            if (on === this.midiIn)
                return;
            this.setAttribute('midi-in', `${on}`);
            this.midiIn = on;
            if (on) {
                ce.init();
                ce.addListener(this);
                this.removeClass('#midi-indicator', 'hidden');
            }
            else {
                ce.removeListener(this);
                this.addClass('#midi-indicator', 'hidden');
            }
            this.setClass('#midi-indicator', 'hidden', !(this.midiIn || this.midiOut));
            this.setMidiLED((this.midiOut && this.midiIn) ? 'amber' : this.midiIn ? 'green' : this.midiOut ? 'red' : '');
        }
        setMidiOut(on) {
            if (on === this.midiOut)
                return;
            this.setAttribute('midi-out', `${on}`);
            this.midiOut = on;
            this.setClass('#midi-indicator', 'hidden', !(this.midiIn || this.midiOut));
            this.setMidiLED((this.midiOut && this.midiIn) ? 'amber' : this.midiIn ? 'green' : this.midiOut ? 'red' : '');
            if (on)
                ce.init();
        }
        setPatch(patch, action) {
            this.setHTML('.patch-name', patch.name);
            this.root.querySelector(`context-menu-item[action="${action}"]`)?.setAttribute('checked', 'true');
            this.root.querySelector('#instrument')?.setAttribute('armed', 'false');
            // change instrument ui
            const instrument = ('instrument' in patch) ? patch.instrument : 'piano';
            if (instrument == this._last_instrument) {
                return;
            }
            else {
                this._last_instrument = instrument;
            }
            const el = (instrument === 'drums') ?
                document.createElement('drums-instrument') :
                document.createElement('piano-instrument');
            el.id = 'instrument';
            const wrapper = this.root.querySelector('.instrument-wrapper');
            if (wrapper.hasChildNodes()) {
                wrapper.replaceChild(el, this.root.querySelector('#instrument'));
            }
            else {
                wrapper.append(el);
            }
            el.addEventListener('note-on', e => {
                e.stopImmediatePropagation();
                this.relayEvent(e);
                this.recorder.noteOn(e.detail.note);
                this.setNoteHint(this.recorder.currentHint);
            });
            el.addEventListener('note-off', e => {
                e.stopImmediatePropagation();
                this.relayEvent(e);
                this.recorder.noteOff(e.detail.note);
            });
            el.setPatch(patch);
            if (instrument === 'piano')
                el.setAttribute('key-range', '17');
        }
        relayEvent(e) {
            this.dispatchEvent(new CustomEvent(e.type, { bubbles: false, composed: true, detail: e.detail }));
        }
        emitNoteEvent(name, note, source) {
            this.dispatchEvent(new CustomEvent(name, {
                bubbles: false,
                composed: true,
                detail: { note: note.note, velocity: note.velocity, source: source }
            }));
        }
        emitUpdateEvent(property, value) {
            this.dispatchEvent(new CustomEvent("update", {
                bubbles: false,
                composed: true,
                detail: { property, value }
            }));
        }
        emitActionEvent(property, value) {
            this.dispatchEvent(new CustomEvent("action", {
                bubbles: false,
                composed: true,
                detail: { property, value }
            }));
        }
        onMidiInput(event) {
            const note = new i$1(event.note);
            note.velocity = event.velocity;
            if (event.message === 'note-on') {
                this.emitNoteEvent('note-on', note, 'midi');
                this.showNoteOn(note);
                this.recorder.noteOn(note);
                this.setNoteHint(this.recorder.currentHint);
            }
            else if (event.message === 'note-off') {
                this.emitNoteEvent('note-off', note, 'midi');
                this.showNoteOff(note);
                this.recorder.noteOff(note);
            }
        }
        setNoteHint(hint) {
            const el = this.root.querySelector('#note-hint .code');
            if (el)
                el.innerHTML = hint;
            this.root.querySelector('#note-hint')?.classList.add('show');
        }
        showNoteOn(note) {
            const el = this.root.querySelector('#instrument');
            if (el) {
                el.noteOn(note.note, note.velocity);
            }
        }
        showNoteOff(note) {
            const el = this.root.querySelector('#instrument');
            if (el) {
                el.noteOff(note.note);
            }
        }
        allNotesOff() {
            const el = this.root.querySelector('#instrument');
            if (el) {
                el.allNotesOff();
            }
        }
        async buildPatchMenu() {
            const menu = this.root.querySelector('#instrument-menu');
            if (menu)
                menu.innerHTML = patchMenu;
            menu?.addEventListener('context-menu-action', async (e) => {
                this.setHTML('.patch-name', 'Loading...');
                const value = e.detail.action;
                if (value) {
                    this.emitUpdateEvent('patch', value);
                }
            });
        }
        addClass(selector, className) {
            const e = this.root.querySelector(selector);
            e?.classList.add(className);
        }
        removeClass(selector, className) {
            const e = this.root.querySelector(selector);
            e?.classList.remove(className);
        }
        setClass(selector, className, set) {
            const e = this.root.querySelector(selector);
            e?.classList.toggle(className, set);
        }
        setHTML(selector, value) {
            const e = this.root.querySelector(selector);
            if (e)
                e.innerHTML = value;
        }
    }
    TunePadInstrument.ELEMENT = "tunepad-instrument";
    TunePadInstrument.observedAttributes = [
        "midi-in", // listen for midi input
        "midi-out" // send midi output
    ];

    const sheet$2 = new CSSStyleSheet();sheet$2.replaceSync(".codemirror-wraper {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#codemirror-editor {\n    flex: 1;\n    max-height: 100%;\n    overflow-y: auto;\n    font-size: 13px;\n}\n\n.light #codemirror-editor { background-color: rgb(247, 249, 255); }\n.dark #codemirror-editor { background-color: #2E303F; }\n\n\n.light .cm-selectionBackground,\n.light .cm-selectionBackground,\n.light .cm-content ::selection {\n    background-color: #aad1e7 !important;\n}\n\n.cm-gutter { overflow: visible !important; }\n\n:host-context(tunepad-cell.minimal).cm-editor {\n    font-size: 13px;\n}\n.cm-editor.cm-focused {\n    outline: none !important;\n}\n.cm-line, .cm-lineNumbers {\n    line-height: 1.75;\n}\n\n.cm-tooltip {\n    background-color: white !important;\n    box-shadow: 3px 3px 3px #0001;\n    padding: 1rem;\n    border: 1px solid #555 !important;\n    border-radius: 5px;\n    line-height: 1.75rem !important;\n}\n.infoGutter {\n    width: 1.5em;\n    text-align: right;\n    overflow: visible !important;\n  }\n  \n.errorMarker, .traceMarker, .warningMarker {\n    cursor: default;\n    position: relative;\n    display: inline-block;\n    width: 16px;\n    /*animation: blinker 1s 3;*/\n}\n.errorMarker { fill: #da575d; top: 3px; }\n.warningMarker { fill: orange; top: 3px; }\n.traceMarker { fill: #4685d2; top: 3px; }\n.dark .traceMarker { fill: #f2d969; }\n\n.errorMarker[data-tooltip]:before,\n.warningMarker[data-tooltip]:before {\n    position : absolute;\n    top: -0.75em;\n    left: 3em;\n    content: attr(data-tooltip);\n    font-size: 12px;\n    border-radius: 2px;\n    padding: 0.75em 1.5em;\n    background-color: white;\n    border-left: 6px solid #da575d;\n    box-shadow: 3px 3px 3px #0002;\n    color: #000c;\n    display: none;\n    text-align: left;\n    min-width: 25em;\n}\n\n.warningMarker[data-tooltip]:before {\n    border-left: 6px solid orange;\n}\n\n.errorMarker[data-tooltip]:hover:before { display: block; }\n.warningMarker[data-tooltip]:hover:before { display: block; }\n\n\n.cm-ySelectionCaretDot {\n    width: 0.6rem !important;\n    height: 0.6rem !important;\n    top: -0.3rem !important;\n    left: -0.3rem !important;\n}\n\n.cm-ySelectionInfo {\n    font-size: 13px !important;\n    font-family: sans-serif !important;\n    padding: 0.25rem 1rem !important;\n}\n/*\n.message-list:has(python-message, python-output) {\n    border-top: 1px solid black;\n}\n*/");

    var html$2 = "<div class=\"codemirror-wraper\">\n    <div id=\"codemirror-editor\" part=\"editor\"></div>\n    <div class=\"message-wrapper\" part=\"messages\">\n        <div id=\"errors\" class=\"message-list\"></div>\n        <div id=\"warnings\" class=\"message-list\"></div>\n        <div id=\"messages\" class=\"message-list\"></div>\n        <div id=\"tests\" class=\"message-list\"></div>\n        <div id=\"output\" class=\"message-list\"></div>\n    </div>\n</div>\n";

    var errorIcon = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n    <circle cx=\"256\" cy=\"256\" r=\"250\" fill=\"white\"/>\n    <path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/>\n</svg>";

    var warnIcon = "<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 512 512\">\n  <path fill=\"white\" d=\"M258,108c10.5,0,20.3,5.6,25.6,14.7l160.3,273.1c5.4,9.2,5.4,20.6.1,29.8s-15.1,14.9-25.8,14.9H97.7c-10.6,0-20.5-5.7-25.8-14.9s-5.2-20.6.1-29.8L232.4,122.7c5.3-9.1,15.1-14.7,25.6-14.7Z\"/>\n  <path d=\"M256,32c14.2,0,27.3,7.5,34.5,19.8l216,368c7.3,12.4,7.3,27.7.2,40.1s-20.4,20.1-34.7,20.1H40c-14.3,0-27.6-7.7-34.7-20.1s-7-27.8.2-40.1L221.5,51.8c7.2-12.3,20.3-19.8,34.5-19.8ZM256,160c-13.3,0-24,10.7-24,24v112c0,13.3,10.7,24,24,24s24-10.7,24-24v-112c0-13.3-10.7-24-24-24ZM288,384c0-17.7-14.3-32-32-32s-32,14.3-32,32,14.3,32,32,32,32-14.3,32-32Z\"/>\n</svg>";

    var traceIcon = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 512 512\">\n  <path d=\"M512,262.86L244.89,40.66v125.2H22.75c-12.56,0-22.75,10.19-22.75,22.75v148.5c0,12.56,10.19,22.75,22.75,22.75h222.14v125.2l267.11-222.2Z\"/>\n</svg>";

    // These are filled with ranges (rangeFrom[i] up to but not including
    // rangeTo[i]) of code points that count as extending characters.
    let rangeFrom = [], rangeTo = []

    ;(() => {
      // Compressed representation of the Grapheme_Cluster_Break=Extend
      // information from
      // http://www.unicode.org/Public/16.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
      // Each pair of elements represents a range, as an offet from the
      // previous range and a length. Numbers are in base-36, with the empty
      // string being a shorthand for 1.
      let numbers = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
      for (let i = 0, n = 0; i < numbers.length; i++)
        (i % 2 ? rangeTo : rangeFrom).push(n = n + numbers[i]);
    })();

    function isExtendingChar(code) {
      if (code < 768) return false
      for (let from = 0, to = rangeFrom.length;;) {
        let mid = (from + to) >> 1;
        if (code < rangeFrom[mid]) to = mid;
        else if (code >= rangeTo[mid]) from = mid + 1;
        else return true
        if (from == to) return false
      }
    }

    function isRegionalIndicator(code) {
      return code >= 0x1F1E6 && code <= 0x1F1FF
    }

    const ZWJ = 0x200d;

    function findClusterBreak$1(str, pos, forward = true, includeExtending = true) {
      return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending)
    }

    function nextClusterBreak(str, pos, includeExtending) {
      if (pos == str.length) return pos
      // If pos is in the middle of a surrogate pair, move to its start
      if (pos && surrogateLow$1(str.charCodeAt(pos)) && surrogateHigh$1(str.charCodeAt(pos - 1))) pos--;
      let prev = codePointAt$1(str, pos);
      pos += codePointSize$1(prev);
      while (pos < str.length) {
        let next = codePointAt$1(str, pos);
        if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
          pos += codePointSize$1(next);
          prev = next;
        } else if (isRegionalIndicator(next)) {
          let countBefore = 0, i = pos - 2;
          while (i >= 0 && isRegionalIndicator(codePointAt$1(str, i))) { countBefore++; i -= 2; }
          if (countBefore % 2 == 0) break
          else pos += 2;
        } else {
          break
        }
      }
      return pos
    }

    function prevClusterBreak(str, pos, includeExtending) {
      while (pos > 0) {
        let found = nextClusterBreak(str, pos - 2, includeExtending);
        if (found < pos) return found
        pos--;
      }
      return 0
    }

    function codePointAt$1(str, pos) {
      let code0 = str.charCodeAt(pos);
      if (!surrogateHigh$1(code0) || pos + 1 == str.length) return code0
      let code1 = str.charCodeAt(pos + 1);
      if (!surrogateLow$1(code1)) return code0
      return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000
    }

    function surrogateLow$1(ch) { return ch >= 0xDC00 && ch < 0xE000 }
    function surrogateHigh$1(ch) { return ch >= 0xD800 && ch < 0xDC00 }
    function codePointSize$1(code) { return code < 0x10000 ? 1 : 2 }

    /**
    The data structure for documents. @nonabstract
    */
    class Text {
        /**
        Get the line description around the given position.
        */
        lineAt(pos) {
            if (pos < 0 || pos > this.length)
                throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
            return this.lineInner(pos, false, 1, 0);
        }
        /**
        Get the description for the given (1-based) line number.
        */
        line(n) {
            if (n < 1 || n > this.lines)
                throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
            return this.lineInner(n, true, 1, 0);
        }
        /**
        Replace a range of the text with the given content.
        */
        replace(from, to, text) {
            [from, to] = clip(this, from, to);
            let parts = [];
            this.decompose(0, from, parts, 2 /* Open.To */);
            if (text.length)
                text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);
            this.decompose(to, this.length, parts, 1 /* Open.From */);
            return TextNode.from(parts, this.length - (to - from) + text.length);
        }
        /**
        Append another document to this one.
        */
        append(other) {
            return this.replace(this.length, this.length, other);
        }
        /**
        Retrieve the text between the given points.
        */
        slice(from, to = this.length) {
            [from, to] = clip(this, from, to);
            let parts = [];
            this.decompose(from, to, parts, 0);
            return TextNode.from(parts, to - from);
        }
        /**
        Test whether this text is equal to another instance.
        */
        eq(other) {
            if (other == this)
                return true;
            if (other.length != this.length || other.lines != this.lines)
                return false;
            let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
            let a = new RawTextCursor(this), b = new RawTextCursor(other);
            for (let skip = start, pos = start;;) {
                a.next(skip);
                b.next(skip);
                skip = 0;
                if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
                    return false;
                pos += a.value.length;
                if (a.done || pos >= end)
                    return true;
            }
        }
        /**
        Iterate over the text. When `dir` is `-1`, iteration happens
        from end to start. This will return lines and the breaks between
        them as separate strings.
        */
        iter(dir = 1) { return new RawTextCursor(this, dir); }
        /**
        Iterate over a range of the text. When `from` > `to`, the
        iterator will run in reverse.
        */
        iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
        /**
        Return a cursor that iterates over the given range of lines,
        _without_ returning the line breaks between, and yielding empty
        strings for empty lines.
        
        When `from` and `to` are given, they should be 1-based line numbers.
        */
        iterLines(from, to) {
            let inner;
            if (from == null) {
                inner = this.iter();
            }
            else {
                if (to == null)
                    to = this.lines + 1;
                let start = this.line(from).from;
                inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
            }
            return new LineCursor(inner);
        }
        /**
        Return the document as a string, using newline characters to
        separate lines.
        */
        toString() { return this.sliceString(0); }
        /**
        Convert the document to an array of lines (which can be
        deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
        */
        toJSON() {
            let lines = [];
            this.flatten(lines);
            return lines;
        }
        /**
        @internal
        */
        constructor() { }
        /**
        Create a `Text` instance for the given array of lines.
        */
        static of(text) {
            if (text.length == 0)
                throw new RangeError("A document must have at least one line");
            if (text.length == 1 && !text[0])
                return Text.empty;
            return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
        }
    }
    // Leaves store an array of line strings. There are always line breaks
    // between these strings. Leaves are limited in size and have to be
    // contained in TextNode instances for bigger documents.
    class TextLeaf extends Text {
        constructor(text, length = textLength(text)) {
            super();
            this.text = text;
            this.length = length;
        }
        get lines() { return this.text.length; }
        get children() { return null; }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let string = this.text[i], end = offset + string.length;
                if ((isLine ? line : end) >= target)
                    return new Line(offset, end, line, string);
                offset = end + 1;
                line++;
            }
        }
        decompose(from, to, target, open) {
            let text = from <= 0 && to >= this.length ? this
                : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
            if (open & 1 /* Open.From */) {
                let prev = target.pop();
                let joined = appendText(text.text, prev.text.slice(), 0, text.length);
                if (joined.length <= 32 /* Tree.Branch */) {
                    target.push(new TextLeaf(joined, prev.length + text.length));
                }
                else {
                    let mid = joined.length >> 1;
                    target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
                }
            }
            else {
                target.push(text);
            }
        }
        replace(from, to, text) {
            if (!(text instanceof TextLeaf))
                return super.replace(from, to, text);
            [from, to] = clip(this, from, to);
            let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
            let newLen = this.length + text.length - (to - from);
            if (lines.length <= 32 /* Tree.Branch */)
                return new TextLeaf(lines, newLen);
            return TextNode.from(TextLeaf.split(lines, []), newLen);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            [from, to] = clip(this, from, to);
            let result = "";
            for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
                let line = this.text[i], end = pos + line.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += line.slice(Math.max(0, from - pos), to - pos);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let line of this.text)
                target.push(line);
        }
        scanIdentical() { return 0; }
        static split(text, target) {
            let part = [], len = -1;
            for (let line of text) {
                part.push(line);
                len += line.length + 1;
                if (part.length == 32 /* Tree.Branch */) {
                    target.push(new TextLeaf(part, len));
                    part = [];
                    len = -1;
                }
            }
            if (len > -1)
                target.push(new TextLeaf(part, len));
            return target;
        }
    }
    // Nodes provide the tree structure of the `Text` type. They store a
    // number of other nodes or leaves, taking care to balance themselves
    // on changes. There are implied line breaks _between_ the children of
    // a node (but not before the first or after the last child).
    class TextNode extends Text {
        constructor(children, length) {
            super();
            this.children = children;
            this.length = length;
            this.lines = 0;
            for (let child of children)
                this.lines += child.lines;
        }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
                if ((isLine ? endLine : end) >= target)
                    return child.lineInner(target, isLine, line, offset);
                offset = end + 1;
                line = endLine + 1;
            }
        }
        decompose(from, to, target, open) {
            for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (from <= end && to >= pos) {
                    let childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));
                    if (pos >= from && end <= to && !childOpen)
                        target.push(child);
                    else
                        child.decompose(from - pos, to - pos, target, childOpen);
                }
                pos = end + 1;
            }
        }
        replace(from, to, text) {
            [from, to] = clip(this, from, to);
            if (text.lines < this.lines)
                for (let i = 0, pos = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = pos + child.length;
                    // Fast path: if the change only affects one child and the
                    // child's size remains in the acceptable range, only update
                    // that child
                    if (from >= pos && to <= end) {
                        let updated = child.replace(from - pos, to - pos, text);
                        let totalLines = this.lines - child.lines + updated.lines;
                        if (updated.lines < (totalLines >> (5 /* Tree.BranchShift */ - 1)) &&
                            updated.lines > (totalLines >> (5 /* Tree.BranchShift */ + 1))) {
                            let copy = this.children.slice();
                            copy[i] = updated;
                            return new TextNode(copy, this.length - (to - from) + text.length);
                        }
                        return super.replace(pos, end, updated);
                    }
                    pos = end + 1;
                }
            return super.replace(from, to, text);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            [from, to] = clip(this, from, to);
            let result = "";
            for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += child.sliceString(from - pos, to - pos, lineSep);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let child of this.children)
                child.flatten(target);
        }
        scanIdentical(other, dir) {
            if (!(other instanceof TextNode))
                return 0;
            let length = 0;
            let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]
                : [this.children.length - 1, other.children.length - 1, -1, -1];
            for (;; iA += dir, iB += dir) {
                if (iA == eA || iB == eB)
                    return length;
                let chA = this.children[iA], chB = other.children[iB];
                if (chA != chB)
                    return length + chA.scanIdentical(chB, dir);
                length += chA.length + 1;
            }
        }
        static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
            let lines = 0;
            for (let ch of children)
                lines += ch.lines;
            if (lines < 32 /* Tree.Branch */) {
                let flat = [];
                for (let ch of children)
                    ch.flatten(flat);
                return new TextLeaf(flat, length);
            }
            let chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
            let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
            function add(child) {
                let last;
                if (child.lines > maxChunk && child instanceof TextNode) {
                    for (let node of child.children)
                        add(node);
                }
                else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
                    flush();
                    chunked.push(child);
                }
                else if (child instanceof TextLeaf && currentLines &&
                    (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
                    child.lines + last.lines <= 32 /* Tree.Branch */) {
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
                }
                else {
                    if (currentLines + child.lines > chunk)
                        flush();
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk.push(child);
                }
            }
            function flush() {
                if (currentLines == 0)
                    return;
                chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
                currentLen = -1;
                currentLines = currentChunk.length = 0;
            }
            for (let child of children)
                add(child);
            flush();
            return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
        }
    }
    Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
    function textLength(text) {
        let length = -1;
        for (let line of text)
            length += line.length + 1;
        return length;
    }
    function appendText(text, target, from = 0, to = 1e9) {
        for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
            let line = text[i], end = pos + line.length;
            if (end >= from) {
                if (end > to)
                    line = line.slice(0, to - pos);
                if (pos < from)
                    line = line.slice(from - pos);
                if (first) {
                    target[target.length - 1] += line;
                    first = false;
                }
                else
                    target.push(line);
            }
            pos = end + 1;
        }
        return target;
    }
    function sliceText(text, from, to) {
        return appendText(text, [""], from, to);
    }
    class RawTextCursor {
        constructor(text, dir = 1) {
            this.dir = dir;
            this.done = false;
            this.lineBreak = false;
            this.value = "";
            this.nodes = [text];
            this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
        }
        nextInner(skip, dir) {
            this.done = this.lineBreak = false;
            for (;;) {
                let last = this.nodes.length - 1;
                let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
                let size = top instanceof TextLeaf ? top.text.length : top.children.length;
                if (offset == (dir > 0 ? size : 0)) {
                    if (last == 0) {
                        this.done = true;
                        this.value = "";
                        return this;
                    }
                    if (dir > 0)
                        this.offsets[last - 1]++;
                    this.nodes.pop();
                    this.offsets.pop();
                }
                else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
                    this.offsets[last] += dir;
                    if (skip == 0) {
                        this.lineBreak = true;
                        this.value = "\n";
                        return this;
                    }
                    skip--;
                }
                else if (top instanceof TextLeaf) {
                    // Move to the next string
                    let next = top.text[offset + (dir < 0 ? -1 : 0)];
                    this.offsets[last] += dir;
                    if (next.length > Math.max(0, skip)) {
                        this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                        return this;
                    }
                    skip -= next.length;
                }
                else {
                    let next = top.children[offset + (dir < 0 ? -1 : 0)];
                    if (skip > next.length) {
                        skip -= next.length;
                        this.offsets[last] += dir;
                    }
                    else {
                        if (dir < 0)
                            this.offsets[last]--;
                        this.nodes.push(next);
                        this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
                    }
                }
            }
        }
        next(skip = 0) {
            if (skip < 0) {
                this.nextInner(-skip, (-this.dir));
                skip = this.value.length;
            }
            return this.nextInner(skip, this.dir);
        }
    }
    class PartialTextCursor {
        constructor(text, start, end) {
            this.value = "";
            this.done = false;
            this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
            this.pos = start > end ? text.length : 0;
            this.from = Math.min(start, end);
            this.to = Math.max(start, end);
        }
        nextInner(skip, dir) {
            if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
                this.value = "";
                this.done = true;
                return this;
            }
            skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
            let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
            if (skip > limit)
                skip = limit;
            limit -= skip;
            let { value } = this.cursor.next(skip);
            this.pos += (value.length + skip) * dir;
            this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
            this.done = !this.value;
            return this;
        }
        next(skip = 0) {
            if (skip < 0)
                skip = Math.max(skip, this.from - this.pos);
            else if (skip > 0)
                skip = Math.min(skip, this.to - this.pos);
            return this.nextInner(skip, this.cursor.dir);
        }
        get lineBreak() { return this.cursor.lineBreak && this.value != ""; }
    }
    class LineCursor {
        constructor(inner) {
            this.inner = inner;
            this.afterBreak = true;
            this.value = "";
            this.done = false;
        }
        next(skip = 0) {
            let { done, lineBreak, value } = this.inner.next(skip);
            if (done && this.afterBreak) {
                this.value = "";
                this.afterBreak = false;
            }
            else if (done) {
                this.done = true;
                this.value = "";
            }
            else if (lineBreak) {
                if (this.afterBreak) {
                    this.value = "";
                }
                else {
                    this.afterBreak = true;
                    this.next();
                }
            }
            else {
                this.value = value;
                this.afterBreak = false;
            }
            return this;
        }
        get lineBreak() { return false; }
    }
    if (typeof Symbol != "undefined") {
        Text.prototype[Symbol.iterator] = function () { return this.iter(); };
        RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =
            LineCursor.prototype[Symbol.iterator] = function () { return this; };
    }
    /**
    This type describes a line in the document. It is created
    on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
    */
    class Line {
        /**
        @internal
        */
        constructor(
        /**
        The position of the start of the line.
        */
        from, 
        /**
        The position at the end of the line (_before_ the line break,
        or at the end of document for the last line).
        */
        to, 
        /**
        This line's line number (1-based).
        */
        number, 
        /**
        The line's content.
        */
        text) {
            this.from = from;
            this.to = to;
            this.number = number;
            this.text = text;
        }
        /**
        The length of the line (not including any line break after it).
        */
        get length() { return this.to - this.from; }
    }
    function clip(text, from, to) {
        from = Math.max(0, Math.min(text.length, from));
        return [from, Math.max(from, Math.min(text.length, to))];
    }

    /**
    Returns a next grapheme cluster break _after_ (not equal to)
    `pos`, if `forward` is true, or before otherwise. Returns `pos`
    itself if no further cluster break is available in the string.
    Moves across surrogate pairs, extending characters (when
    `includeExtending` is true), characters joined with zero-width
    joiners, and flag emoji.
    */
    function findClusterBreak(str, pos, forward = true, includeExtending = true) {
        return findClusterBreak$1(str, pos, forward, includeExtending);
    }
    function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
    function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
    /**
    Find the code point at the given position in a string (like the
    [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
    string method).
    */
    function codePointAt(str, pos) {
        let code0 = str.charCodeAt(pos);
        if (!surrogateHigh(code0) || pos + 1 == str.length)
            return code0;
        let code1 = str.charCodeAt(pos + 1);
        if (!surrogateLow(code1))
            return code0;
        return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
    }
    /**
    Given a Unicode codepoint, return the JavaScript string that
    respresents it (like
    [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
    */
    function fromCodePoint(code) {
        if (code <= 0xffff)
            return String.fromCharCode(code);
        code -= 0x10000;
        return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
    }
    /**
    The amount of positions a character takes up in a JavaScript string.
    */
    function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

    const DefaultSplit = /\r\n?|\n/;
    /**
    Distinguishes different ways in which positions can be mapped.
    */
    var MapMode = /*@__PURE__*/(function (MapMode) {
        /**
        Map a position to a valid new position, even when its context
        was deleted.
        */
        MapMode[MapMode["Simple"] = 0] = "Simple";
        /**
        Return null if deletion happens across the position.
        */
        MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
        /**
        Return null if the character _before_ the position is deleted.
        */
        MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
        /**
        Return null if the character _after_ the position is deleted.
        */
        MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
    return MapMode})(MapMode || (MapMode = {}));
    /**
    A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
    that doesn't store the inserted text. As such, it can't be
    applied, but is cheaper to store and manipulate.
    */
    class ChangeDesc {
        // Sections are encoded as pairs of integers. The first is the
        // length in the current document, and the second is -1 for
        // unaffected sections, and the length of the replacement content
        // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
        // 0), and a replacement two positive numbers.
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        sections) {
            this.sections = sections;
        }
        /**
        The length of the document before the change.
        */
        get length() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2)
                result += this.sections[i];
            return result;
        }
        /**
        The length of the document after the change.
        */
        get newLength() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2) {
                let ins = this.sections[i + 1];
                result += ins < 0 ? this.sections[i] : ins;
            }
            return result;
        }
        /**
        False when there are actual changes in this set.
        */
        get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
        /**
        Iterate over the unchanged parts left by these changes. `posA`
        provides the position of the range in the old document, `posB`
        the new position in the changed document.
        */
        iterGaps(f) {
            for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0) {
                    f(posA, posB, len);
                    posB += len;
                }
                else {
                    posB += ins;
                }
                posA += len;
            }
        }
        /**
        Iterate over the ranges changed by these changes. (See
        [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
        variant that also provides you with the inserted text.)
        `fromA`/`toA` provides the extent of the change in the starting
        document, `fromB`/`toB` the extent of the replacement in the
        changed document.
        
        When `individual` is true, adjacent changes (which are kept
        separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
        reported separately.
        */
        iterChangedRanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a description of the inverted form of these changes.
        */
        get invertedDesc() {
            let sections = [];
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0)
                    sections.push(len, ins);
                else
                    sections.push(ins, len);
            }
            return new ChangeDesc(sections);
        }
        /**
        Compute the combined effect of applying another set of changes
        after this one. The length of the document after this set should
        match the length before `other`.
        */
        composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
        /**
        Map this description, which should start with the same document
        as `other`, over another set of changes, so that it can be
        applied after it. When `before` is true, map as if the changes
        in `this` happened before the ones in `other`.
        */
        mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
        mapPos(pos, assoc = -1, mode = MapMode.Simple) {
            let posA = 0, posB = 0;
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
                if (ins < 0) {
                    if (endA > pos)
                        return posB + (pos - posA);
                    posB += len;
                }
                else {
                    if (mode != MapMode.Simple && endA >= pos &&
                        (mode == MapMode.TrackDel && posA < pos && endA > pos ||
                            mode == MapMode.TrackBefore && posA < pos ||
                            mode == MapMode.TrackAfter && endA > pos))
                        return null;
                    if (endA > pos || endA == pos && assoc < 0 && !len)
                        return pos == posA || assoc < 0 ? posB : posB + ins;
                    posB += ins;
                }
                posA = endA;
            }
            if (pos > posA)
                throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
            return posB;
        }
        /**
        Check whether these changes touch a given range. When one of the
        changes entirely covers the range, the string `"cover"` is
        returned.
        */
        touchesRange(from, to = from) {
            for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
                let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
                if (ins >= 0 && pos <= to && end >= from)
                    return pos < from && end > to ? "cover" : true;
                pos = end;
            }
            return false;
        }
        /**
        @internal
        */
        toString() {
            let result = "";
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
            }
            return result;
        }
        /**
        Serialize this change desc to a JSON-representable value.
        */
        toJSON() { return this.sections; }
        /**
        Create a change desc from its JSON representation (as produced
        by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
                throw new RangeError("Invalid JSON representation of ChangeDesc");
            return new ChangeDesc(json);
        }
        /**
        @internal
        */
        static create(sections) { return new ChangeDesc(sections); }
    }
    /**
    A change set represents a group of modifications to a document. It
    stores the document length, and can only be applied to documents
    with exactly that length.
    */
    class ChangeSet extends ChangeDesc {
        constructor(sections, 
        /**
        @internal
        */
        inserted) {
            super(sections);
            this.inserted = inserted;
        }
        /**
        Apply the changes to a document, returning the modified
        document.
        */
        apply(doc) {
            if (this.length != doc.length)
                throw new RangeError("Applying change set to a document with the wrong length");
            iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
            return doc;
        }
        mapDesc(other, before = false) { return mapSet(this, other, before, true); }
        /**
        Given the document as it existed _before_ the changes, return a
        change set that represents the inverse of this set, which could
        be used to go from the document created by the changes back to
        the document as it existed before the changes.
        */
        invert(doc) {
            let sections = this.sections.slice(), inserted = [];
            for (let i = 0, pos = 0; i < sections.length; i += 2) {
                let len = sections[i], ins = sections[i + 1];
                if (ins >= 0) {
                    sections[i] = ins;
                    sections[i + 1] = len;
                    let index = i >> 1;
                    while (inserted.length < index)
                        inserted.push(Text.empty);
                    inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
                }
                pos += len;
            }
            return new ChangeSet(sections, inserted);
        }
        /**
        Combine two subsequent change sets into a single set. `other`
        must start in the document produced by `this`. If `this` goes
        `docA` → `docB` and `other` represents `docB` → `docC`, the
        returned value will represent the change `docA` → `docC`.
        */
        compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
        /**
        Given another change set starting in the same document, maps this
        change set over the other, producing a new change set that can be
        applied to the document produced by applying `other`. When
        `before` is `true`, order changes as if `this` comes before
        `other`, otherwise (the default) treat `other` as coming first.
        
        Given two changes `A` and `B`, `A.compose(B.map(A))` and
        `B.compose(A.map(B, true))` will produce the same document. This
        provides a basic form of [operational
        transformation](https://en.wikipedia.org/wiki/Operational_transformation),
        and can be used for collaborative editing.
        */
        map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
        /**
        Iterate over the changed ranges in the document, calling `f` for
        each, with the range in the original document (`fromA`-`toA`)
        and the range that replaces it in the new document
        (`fromB`-`toB`).
        
        When `individual` is true, adjacent changes are reported
        separately.
        */
        iterChanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
        set.
        */
        get desc() { return ChangeDesc.create(this.sections); }
        /**
        @internal
        */
        filter(ranges) {
            let resultSections = [], resultInserted = [], filteredSections = [];
            let iter = new SectionIter(this);
            done: for (let i = 0, pos = 0;;) {
                let next = i == ranges.length ? 1e9 : ranges[i++];
                while (pos < next || pos == next && iter.len == 0) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, next - pos);
                    addSection(filteredSections, len, -1);
                    let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                    addSection(resultSections, len, ins);
                    if (ins > 0)
                        addInsert(resultInserted, resultSections, iter.text);
                    iter.forward(len);
                    pos += len;
                }
                let end = ranges[i++];
                while (pos < end) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, end - pos);
                    addSection(resultSections, len, -1);
                    addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                    iter.forward(len);
                    pos += len;
                }
            }
            return { changes: new ChangeSet(resultSections, resultInserted),
                filtered: ChangeDesc.create(filteredSections) };
        }
        /**
        Serialize this change set to a JSON-representable value.
        */
        toJSON() {
            let parts = [];
            for (let i = 0; i < this.sections.length; i += 2) {
                let len = this.sections[i], ins = this.sections[i + 1];
                if (ins < 0)
                    parts.push(len);
                else if (ins == 0)
                    parts.push([len]);
                else
                    parts.push([len].concat(this.inserted[i >> 1].toJSON()));
            }
            return parts;
        }
        /**
        Create a change set for the given changes, for a document of the
        given length, using `lineSep` as line separator.
        */
        static of(changes, length, lineSep) {
            let sections = [], inserted = [], pos = 0;
            let total = null;
            function flush(force = false) {
                if (!force && !sections.length)
                    return;
                if (pos < length)
                    addSection(sections, length - pos, -1);
                let set = new ChangeSet(sections, inserted);
                total = total ? total.compose(set.map(total)) : set;
                sections = [];
                inserted = [];
                pos = 0;
            }
            function process(spec) {
                if (Array.isArray(spec)) {
                    for (let sub of spec)
                        process(sub);
                }
                else if (spec instanceof ChangeSet) {
                    if (spec.length != length)
                        throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
                    flush();
                    total = total ? total.compose(spec.map(total)) : spec;
                }
                else {
                    let { from, to = from, insert } = spec;
                    if (from > to || from < 0 || to > length)
                        throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
                    let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
                    let insLen = insText.length;
                    if (from == to && insLen == 0)
                        return;
                    if (from < pos)
                        flush();
                    if (from > pos)
                        addSection(sections, from - pos, -1);
                    addSection(sections, to - from, insLen);
                    addInsert(inserted, sections, insText);
                    pos = to;
                }
            }
            process(changes);
            flush(!total);
            return total;
        }
        /**
        Create an empty changeset of the given length.
        */
        static empty(length) {
            return new ChangeSet(length ? [length, -1] : [], []);
        }
        /**
        Create a changeset from its JSON representation (as produced by
        [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json))
                throw new RangeError("Invalid JSON representation of ChangeSet");
            let sections = [], inserted = [];
            for (let i = 0; i < json.length; i++) {
                let part = json[i];
                if (typeof part == "number") {
                    sections.push(part, -1);
                }
                else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
                    throw new RangeError("Invalid JSON representation of ChangeSet");
                }
                else if (part.length == 1) {
                    sections.push(part[0], 0);
                }
                else {
                    while (inserted.length < i)
                        inserted.push(Text.empty);
                    inserted[i] = Text.of(part.slice(1));
                    sections.push(part[0], inserted[i].length);
                }
            }
            return new ChangeSet(sections, inserted);
        }
        /**
        @internal
        */
        static createSet(sections, inserted) {
            return new ChangeSet(sections, inserted);
        }
    }
    function addSection(sections, len, ins, forceJoin = false) {
        if (len == 0 && ins <= 0)
            return;
        let last = sections.length - 2;
        if (last >= 0 && ins <= 0 && ins == sections[last + 1])
            sections[last] += len;
        else if (last >= 0 && len == 0 && sections[last] == 0)
            sections[last + 1] += ins;
        else if (forceJoin) {
            sections[last] += len;
            sections[last + 1] += ins;
        }
        else
            sections.push(len, ins);
    }
    function addInsert(values, sections, value) {
        if (value.length == 0)
            return;
        let index = (sections.length - 2) >> 1;
        if (index < values.length) {
            values[values.length - 1] = values[values.length - 1].append(value);
        }
        else {
            while (values.length < index)
                values.push(Text.empty);
            values.push(value);
        }
    }
    function iterChanges(desc, f, individual) {
        let inserted = desc.inserted;
        for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
            let len = desc.sections[i++], ins = desc.sections[i++];
            if (ins < 0) {
                posA += len;
                posB += len;
            }
            else {
                let endA = posA, endB = posB, text = Text.empty;
                for (;;) {
                    endA += len;
                    endB += ins;
                    if (ins && inserted)
                        text = text.append(inserted[(i - 2) >> 1]);
                    if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                        break;
                    len = desc.sections[i++];
                    ins = desc.sections[i++];
                }
                f(posA, endA, posB, endB, text);
                posA = endA;
                posB = endB;
            }
        }
    }
    function mapSet(setA, setB, before, mkSet = false) {
        // Produce a copy of setA that applies to the document after setB
        // has been applied (assuming both start at the same document).
        let sections = [], insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        // Iterate over both sets in parallel. inserted tracks, for changes
        // in A that have to be processed piece-by-piece, whether their
        // content has been inserted already, and refers to the section
        // index.
        for (let inserted = -1;;) {
            if (a.done && b.len || b.done && a.len) {
                throw new Error("Mismatched change set lengths");
            }
            else if (a.ins == -1 && b.ins == -1) {
                // Move across ranges skipped by both sets.
                let len = Math.min(a.len, b.len);
                addSection(sections, len, -1);
                a.forward(len);
                b.forward(len);
            }
            else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
                // If there's a change in B that comes before the next change in
                // A (ordered by start pos, then len, then before flag), skip
                // that (and process any changes in A it covers).
                let len = b.len;
                addSection(sections, b.ins, -1);
                while (len) {
                    let piece = Math.min(a.len, len);
                    if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
                        addSection(sections, 0, a.ins);
                        if (insert)
                            addInsert(insert, sections, a.text);
                        inserted = a.i;
                    }
                    a.forward(piece);
                    len -= piece;
                }
                b.next();
            }
            else if (a.ins >= 0) {
                // Process the part of a change in A up to the start of the next
                // non-deletion change in B (if overlapping).
                let len = 0, left = a.len;
                while (left) {
                    if (b.ins == -1) {
                        let piece = Math.min(left, b.len);
                        len += piece;
                        left -= piece;
                        b.forward(piece);
                    }
                    else if (b.ins == 0 && b.len < left) {
                        left -= b.len;
                        b.next();
                    }
                    else {
                        break;
                    }
                }
                addSection(sections, len, inserted < a.i ? a.ins : 0);
                if (insert && inserted < a.i)
                    addInsert(insert, sections, a.text);
                inserted = a.i;
                a.forward(a.len - left);
            }
            else if (a.done && b.done) {
                return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
            }
            else {
                throw new Error("Mismatched change set lengths");
            }
        }
    }
    function composeSets(setA, setB, mkSet = false) {
        let sections = [];
        let insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        for (let open = false;;) {
            if (a.done && b.done) {
                return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
            }
            else if (a.ins == 0) { // Deletion in A
                addSection(sections, a.len, 0, open);
                a.next();
            }
            else if (b.len == 0 && !b.done) { // Insertion in B
                addSection(sections, 0, b.ins, open);
                if (insert)
                    addInsert(insert, sections, b.text);
                b.next();
            }
            else if (a.done || b.done) {
                throw new Error("Mismatched change set lengths");
            }
            else {
                let len = Math.min(a.len2, b.len), sectionLen = sections.length;
                if (a.ins == -1) {
                    let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
                    addSection(sections, len, insB, open);
                    if (insert && insB)
                        addInsert(insert, sections, b.text);
                }
                else if (b.ins == -1) {
                    addSection(sections, a.off ? 0 : a.len, len, open);
                    if (insert)
                        addInsert(insert, sections, a.textBit(len));
                }
                else {
                    addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
                    if (insert && !b.off)
                        addInsert(insert, sections, b.text);
                }
                open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
                a.forward2(len);
                b.forward(len);
            }
        }
    }
    class SectionIter {
        constructor(set) {
            this.set = set;
            this.i = 0;
            this.next();
        }
        next() {
            let { sections } = this.set;
            if (this.i < sections.length) {
                this.len = sections[this.i++];
                this.ins = sections[this.i++];
            }
            else {
                this.len = 0;
                this.ins = -2;
            }
            this.off = 0;
        }
        get done() { return this.ins == -2; }
        get len2() { return this.ins < 0 ? this.len : this.ins; }
        get text() {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length ? Text.empty : inserted[index];
        }
        textBit(len) {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length && !len ? Text.empty
                : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
        }
        forward(len) {
            if (len == this.len)
                this.next();
            else {
                this.len -= len;
                this.off += len;
            }
        }
        forward2(len) {
            if (this.ins == -1)
                this.forward(len);
            else if (len == this.ins)
                this.next();
            else {
                this.ins -= len;
                this.off += len;
            }
        }
    }

    /**
    A single selection range. When
    [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
    is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
    multiple ranges. By default, selections hold exactly one range.
    */
    class SelectionRange {
        constructor(
        /**
        The lower boundary of the range.
        */
        from, 
        /**
        The upper boundary of the range.
        */
        to, flags) {
            this.from = from;
            this.to = to;
            this.flags = flags;
        }
        /**
        The anchor of the range—the side that doesn't move when you
        extend it.
        */
        get anchor() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.to : this.from; }
        /**
        The head of the range, which is moved when the range is
        [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
        */
        get head() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.from : this.to; }
        /**
        True when `anchor` and `head` are at the same position.
        */
        get empty() { return this.from == this.to; }
        /**
        If this is a cursor that is explicitly associated with the
        character on one of its sides, this returns the side. -1 means
        the character before its position, 1 the character after, and 0
        means no association.
        */
        get assoc() { return this.flags & 8 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 16 /* RangeFlag.AssocAfter */ ? 1 : 0; }
        /**
        The bidirectional text level associated with this cursor, if
        any.
        */
        get bidiLevel() {
            let level = this.flags & 7 /* RangeFlag.BidiLevelMask */;
            return level == 7 ? null : level;
        }
        /**
        The goal column (stored vertical offset) associated with a
        cursor. This is used to preserve the vertical position when
        [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
        lines of different length.
        */
        get goalColumn() {
            let value = this.flags >> 6 /* RangeFlag.GoalColumnOffset */;
            return value == 16777215 /* RangeFlag.NoGoalColumn */ ? undefined : value;
        }
        /**
        Map this range through a change, producing a valid range in the
        updated document.
        */
        map(change, assoc = -1) {
            let from, to;
            if (this.empty) {
                from = to = change.mapPos(this.from, assoc);
            }
            else {
                from = change.mapPos(this.from, 1);
                to = change.mapPos(this.to, -1);
            }
            return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
        }
        /**
        Extend this range to cover at least `from` to `to`.
        */
        extend(from, to = from) {
            if (from <= this.anchor && to >= this.anchor)
                return EditorSelection.range(from, to);
            let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
            return EditorSelection.range(this.anchor, head);
        }
        /**
        Compare this range to another range.
        */
        eq(other, includeAssoc = false) {
            return this.anchor == other.anchor && this.head == other.head &&
                (!includeAssoc || !this.empty || this.assoc == other.assoc);
        }
        /**
        Return a JSON-serializable object representing the range.
        */
        toJSON() { return { anchor: this.anchor, head: this.head }; }
        /**
        Convert a JSON representation of a range to a `SelectionRange`
        instance.
        */
        static fromJSON(json) {
            if (!json || typeof json.anchor != "number" || typeof json.head != "number")
                throw new RangeError("Invalid JSON representation for SelectionRange");
            return EditorSelection.range(json.anchor, json.head);
        }
        /**
        @internal
        */
        static create(from, to, flags) {
            return new SelectionRange(from, to, flags);
        }
    }
    /**
    An editor selection holds one or more selection ranges.
    */
    class EditorSelection {
        constructor(
        /**
        The ranges in the selection, sorted by position. Ranges cannot
        overlap (but they may touch, if they aren't empty).
        */
        ranges, 
        /**
        The index of the _main_ range in the selection (which is
        usually the range that was added last).
        */
        mainIndex) {
            this.ranges = ranges;
            this.mainIndex = mainIndex;
        }
        /**
        Map a selection through a change. Used to adjust the selection
        position for changes.
        */
        map(change, assoc = -1) {
            if (change.empty)
                return this;
            return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
        }
        /**
        Compare this selection to another selection. By default, ranges
        are compared only by position. When `includeAssoc` is true,
        cursor ranges must also have the same
        [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
        */
        eq(other, includeAssoc = false) {
            if (this.ranges.length != other.ranges.length ||
                this.mainIndex != other.mainIndex)
                return false;
            for (let i = 0; i < this.ranges.length; i++)
                if (!this.ranges[i].eq(other.ranges[i], includeAssoc))
                    return false;
            return true;
        }
        /**
        Get the primary selection range. Usually, you should make sure
        your code applies to _all_ ranges, by using methods like
        [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
        */
        get main() { return this.ranges[this.mainIndex]; }
        /**
        Make sure the selection only has one range. Returns a selection
        holding only the main range from this selection.
        */
        asSingle() {
            return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
        }
        /**
        Extend this selection with an extra range.
        */
        addRange(range, main = true) {
            return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
        }
        /**
        Replace a given range with another range, and then normalize the
        selection to merge and sort ranges if necessary.
        */
        replaceRange(range, which = this.mainIndex) {
            let ranges = this.ranges.slice();
            ranges[which] = range;
            return EditorSelection.create(ranges, this.mainIndex);
        }
        /**
        Convert this selection to an object that can be serialized to
        JSON.
        */
        toJSON() {
            return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
        }
        /**
        Create a selection from a JSON representation.
        */
        static fromJSON(json) {
            if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
                throw new RangeError("Invalid JSON representation for EditorSelection");
            return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
        }
        /**
        Create a selection holding a single range.
        */
        static single(anchor, head = anchor) {
            return new EditorSelection([EditorSelection.range(anchor, head)], 0);
        }
        /**
        Sort and merge the given set of ranges, creating a valid
        selection.
        */
        static create(ranges, mainIndex = 0) {
            if (ranges.length == 0)
                throw new RangeError("A selection needs at least one range");
            for (let pos = 0, i = 0; i < ranges.length; i++) {
                let range = ranges[i];
                if (range.empty ? range.from <= pos : range.from < pos)
                    return EditorSelection.normalized(ranges.slice(), mainIndex);
                pos = range.to;
            }
            return new EditorSelection(ranges, mainIndex);
        }
        /**
        Create a cursor selection range at the given position. You can
        safely ignore the optional arguments in most situations.
        */
        static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
            return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 /* RangeFlag.AssocBefore */ : 16 /* RangeFlag.AssocAfter */) |
                (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) |
                ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */));
        }
        /**
        Create a selection range.
        */
        static range(anchor, head, goalColumn, bidiLevel) {
            let flags = ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */) |
                (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
            return head < anchor ? SelectionRange.create(head, anchor, 32 /* RangeFlag.Inverted */ | 16 /* RangeFlag.AssocAfter */ | flags)
                : SelectionRange.create(anchor, head, (head > anchor ? 8 /* RangeFlag.AssocBefore */ : 0) | flags);
        }
        /**
        @internal
        */
        static normalized(ranges, mainIndex = 0) {
            let main = ranges[mainIndex];
            ranges.sort((a, b) => a.from - b.from);
            mainIndex = ranges.indexOf(main);
            for (let i = 1; i < ranges.length; i++) {
                let range = ranges[i], prev = ranges[i - 1];
                if (range.empty ? range.from <= prev.to : range.from < prev.to) {
                    let from = prev.from, to = Math.max(range.to, prev.to);
                    if (i <= mainIndex)
                        mainIndex--;
                    ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
                }
            }
            return new EditorSelection(ranges, mainIndex);
        }
    }
    function checkSelection(selection, docLength) {
        for (let range of selection.ranges)
            if (range.to > docLength)
                throw new RangeError("Selection points outside of document");
    }

    let nextID = 0;
    /**
    A facet is a labeled value that is associated with an editor
    state. It takes inputs from any number of extensions, and combines
    those into a single output value.

    Examples of uses of facets are the [tab
    size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
    attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
    listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).

    Note that `Facet` instances can be used anywhere where
    [`FacetReader`](https://codemirror.net/6/docs/ref/#state.FacetReader) is expected.
    */
    class Facet {
        constructor(
        /**
        @internal
        */
        combine, 
        /**
        @internal
        */
        compareInput, 
        /**
        @internal
        */
        compare, isStatic, enables) {
            this.combine = combine;
            this.compareInput = compareInput;
            this.compare = compare;
            this.isStatic = isStatic;
            /**
            @internal
            */
            this.id = nextID++;
            this.default = combine([]);
            this.extensions = typeof enables == "function" ? enables(this) : enables;
        }
        /**
        Returns a facet reader for this facet, which can be used to
        [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
        */
        get reader() { return this; }
        /**
        Define a new facet.
        */
        static define(config = {}) {
            return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray$1 : (a, b) => a === b), !!config.static, config.enables);
        }
        /**
        Returns an extension that adds the given value to this facet.
        */
        of(value) {
            return new FacetProvider([], this, 0 /* Provider.Static */, value);
        }
        /**
        Create an extension that computes a value for the facet from a
        state. You must take care to declare the parts of the state that
        this value depends on, since your function is only called again
        for a new state when one of those parts changed.
        
        In cases where your value depends only on a single field, you'll
        want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
        */
        compute(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 1 /* Provider.Single */, get);
        }
        /**
        Create an extension that computes zero or more values for this
        facet from a state.
        */
        computeN(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);
        }
        from(field, get) {
            if (!get)
                get = x => x;
            return this.compute([field], state => get(state.field(field)));
        }
    }
    function sameArray$1(a, b) {
        return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
    }
    class FacetProvider {
        constructor(dependencies, facet, type, value) {
            this.dependencies = dependencies;
            this.facet = facet;
            this.type = type;
            this.value = value;
            this.id = nextID++;
        }
        dynamicSlot(addresses) {
            var _a;
            let getter = this.value;
            let compare = this.facet.compareInput;
            let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Provider.Multi */;
            let depDoc = false, depSel = false, depAddrs = [];
            for (let dep of this.dependencies) {
                if (dep == "doc")
                    depDoc = true;
                else if (dep == "selection")
                    depSel = true;
                else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
                    depAddrs.push(addresses[dep.id]);
            }
            return {
                create(state) {
                    state.values[idx] = getter(state);
                    return 1 /* SlotStatus.Changed */;
                },
                update(state, tr) {
                    if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {
                        let newVal = getter(state);
                        if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
                            state.values[idx] = newVal;
                            return 1 /* SlotStatus.Changed */;
                        }
                    }
                    return 0;
                },
                reconfigure: (state, oldState) => {
                    let newVal, oldAddr = oldState.config.address[id];
                    if (oldAddr != null) {
                        let oldVal = getAddr(oldState, oldAddr);
                        if (this.dependencies.every(dep => {
                            return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :
                                dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
                        }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {
                            state.values[idx] = oldVal;
                            return 0;
                        }
                    }
                    else {
                        newVal = getter(state);
                    }
                    state.values[idx] = newVal;
                    return 1 /* SlotStatus.Changed */;
                }
            };
        }
    }
    function compareArray(a, b, compare) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!compare(a[i], b[i]))
                return false;
        return true;
    }
    function ensureAll(state, addrs) {
        let changed = false;
        for (let addr of addrs)
            if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */)
                changed = true;
        return changed;
    }
    function dynamicFacetSlot(addresses, facet, providers) {
        let providerAddrs = providers.map(p => addresses[p.id]);
        let providerTypes = providers.map(p => p.type);
        let dynamic = providerAddrs.filter(p => !(p & 1));
        let idx = addresses[facet.id] >> 1;
        function get(state) {
            let values = [];
            for (let i = 0; i < providerAddrs.length; i++) {
                let value = getAddr(state, providerAddrs[i]);
                if (providerTypes[i] == 2 /* Provider.Multi */)
                    for (let val of value)
                        values.push(val);
                else
                    values.push(value);
            }
            return facet.combine(values);
        }
        return {
            create(state) {
                for (let addr of providerAddrs)
                    ensureAddr(state, addr);
                state.values[idx] = get(state);
                return 1 /* SlotStatus.Changed */;
            },
            update(state, tr) {
                if (!ensureAll(state, dynamic))
                    return 0;
                let value = get(state);
                if (facet.compare(value, state.values[idx]))
                    return 0;
                state.values[idx] = value;
                return 1 /* SlotStatus.Changed */;
            },
            reconfigure(state, oldState) {
                let depChanged = ensureAll(state, providerAddrs);
                let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
                if (oldProviders && !depChanged && sameArray$1(providers, oldProviders)) {
                    state.values[idx] = oldValue;
                    return 0;
                }
                let value = get(state);
                if (facet.compare(value, oldValue)) {
                    state.values[idx] = oldValue;
                    return 0;
                }
                state.values[idx] = value;
                return 1 /* SlotStatus.Changed */;
            }
        };
    }
    const initField = /*@__PURE__*/Facet.define({ static: true });
    /**
    Fields can store additional information in an editor state, and
    keep it in sync with the rest of the state.
    */
    class StateField {
        constructor(
        /**
        @internal
        */
        id, createF, updateF, compareF, 
        /**
        @internal
        */
        spec) {
            this.id = id;
            this.createF = createF;
            this.updateF = updateF;
            this.compareF = compareF;
            this.spec = spec;
            /**
            @internal
            */
            this.provides = undefined;
        }
        /**
        Define a state field.
        */
        static define(config) {
            let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
            if (config.provide)
                field.provides = config.provide(field);
            return field;
        }
        create(state) {
            let init = state.facet(initField).find(i => i.field == this);
            return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
        }
        /**
        @internal
        */
        slot(addresses) {
            let idx = addresses[this.id] >> 1;
            return {
                create: (state) => {
                    state.values[idx] = this.create(state);
                    return 1 /* SlotStatus.Changed */;
                },
                update: (state, tr) => {
                    let oldVal = state.values[idx];
                    let value = this.updateF(oldVal, tr);
                    if (this.compareF(oldVal, value))
                        return 0;
                    state.values[idx] = value;
                    return 1 /* SlotStatus.Changed */;
                },
                reconfigure: (state, oldState) => {
                    let init = state.facet(initField), oldInit = oldState.facet(initField), reInit;
                    if ((reInit = init.find(i => i.field == this)) && reInit != oldInit.find(i => i.field == this)) {
                        state.values[idx] = reInit.create(state);
                        return 1 /* SlotStatus.Changed */;
                    }
                    if (oldState.config.address[this.id] != null) {
                        state.values[idx] = oldState.field(this);
                        return 0;
                    }
                    state.values[idx] = this.create(state);
                    return 1 /* SlotStatus.Changed */;
                }
            };
        }
        /**
        Returns an extension that enables this field and overrides the
        way it is initialized. Can be useful when you need to provide a
        non-default starting value for the field.
        */
        init(create) {
            return [this, initField.of({ field: this, create })];
        }
        /**
        State field instances can be used as
        [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
        given state.
        */
        get extension() { return this; }
    }
    const Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
    function prec(value) {
        return (ext) => new PrecExtension(ext, value);
    }
    /**
    By default extensions are registered in the order they are found
    in the flattened form of nested array that was provided.
    Individual extension values can be assigned a precedence to
    override this. Extensions that do not have a precedence set get
    the precedence of the nearest parent with a precedence, or
    [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
    final ordering of extensions is determined by first sorting by
    precedence and then by order within each precedence.
    */
    const Prec = {
        /**
        The highest precedence level, for extensions that should end up
        near the start of the precedence ordering.
        */
        highest: /*@__PURE__*/prec(Prec_.highest),
        /**
        A higher-than-default precedence, for extensions that should
        come before those with default precedence.
        */
        high: /*@__PURE__*/prec(Prec_.high),
        /**
        The default precedence, which is also used for extensions
        without an explicit precedence.
        */
        default: /*@__PURE__*/prec(Prec_.default),
        /**
        A lower-than-default precedence.
        */
        low: /*@__PURE__*/prec(Prec_.low),
        /**
        The lowest precedence level. Meant for things that should end up
        near the end of the extension order.
        */
        lowest: /*@__PURE__*/prec(Prec_.lowest)
    };
    class PrecExtension {
        constructor(inner, prec) {
            this.inner = inner;
            this.prec = prec;
        }
    }
    /**
    Extension compartments can be used to make a configuration
    dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
    configuration in a compartment, you can later
    [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
    transaction.
    */
    class Compartment {
        /**
        Create an instance of this compartment to add to your [state
        configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
        */
        of(ext) { return new CompartmentInstance(this, ext); }
        /**
        Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
        reconfigures this compartment.
        */
        reconfigure(content) {
            return Compartment.reconfigure.of({ compartment: this, extension: content });
        }
        /**
        Get the current content of the compartment in the state, or
        `undefined` if it isn't present.
        */
        get(state) {
            return state.config.compartments.get(this);
        }
    }
    class CompartmentInstance {
        constructor(compartment, inner) {
            this.compartment = compartment;
            this.inner = inner;
        }
    }
    class Configuration {
        constructor(base, compartments, dynamicSlots, address, staticValues, facets) {
            this.base = base;
            this.compartments = compartments;
            this.dynamicSlots = dynamicSlots;
            this.address = address;
            this.staticValues = staticValues;
            this.facets = facets;
            this.statusTemplate = [];
            while (this.statusTemplate.length < dynamicSlots.length)
                this.statusTemplate.push(0 /* SlotStatus.Unresolved */);
        }
        staticFacet(facet) {
            let addr = this.address[facet.id];
            return addr == null ? facet.default : this.staticValues[addr >> 1];
        }
        static resolve(base, compartments, oldState) {
            let fields = [];
            let facets = Object.create(null);
            let newCompartments = new Map();
            for (let ext of flatten(base, compartments, newCompartments)) {
                if (ext instanceof StateField)
                    fields.push(ext);
                else
                    (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
            }
            let address = Object.create(null);
            let staticValues = [];
            let dynamicSlots = [];
            for (let field of fields) {
                address[field.id] = dynamicSlots.length << 1;
                dynamicSlots.push(a => field.slot(a));
            }
            let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
            for (let id in facets) {
                let providers = facets[id], facet = providers[0].facet;
                let oldProviders = oldFacets && oldFacets[id] || [];
                if (providers.every(p => p.type == 0 /* Provider.Static */)) {
                    address[facet.id] = (staticValues.length << 1) | 1;
                    if (sameArray$1(oldProviders, providers)) {
                        staticValues.push(oldState.facet(facet));
                    }
                    else {
                        let value = facet.combine(providers.map(p => p.value));
                        staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
                    }
                }
                else {
                    for (let p of providers) {
                        if (p.type == 0 /* Provider.Static */) {
                            address[p.id] = (staticValues.length << 1) | 1;
                            staticValues.push(p.value);
                        }
                        else {
                            address[p.id] = dynamicSlots.length << 1;
                            dynamicSlots.push(a => p.dynamicSlot(a));
                        }
                    }
                    address[facet.id] = dynamicSlots.length << 1;
                    dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
                }
            }
            let dynamic = dynamicSlots.map(f => f(address));
            return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
        }
    }
    function flatten(extension, compartments, newCompartments) {
        let result = [[], [], [], [], []];
        let seen = new Map();
        function inner(ext, prec) {
            let known = seen.get(ext);
            if (known != null) {
                if (known <= prec)
                    return;
                let found = result[known].indexOf(ext);
                if (found > -1)
                    result[known].splice(found, 1);
                if (ext instanceof CompartmentInstance)
                    newCompartments.delete(ext.compartment);
            }
            seen.set(ext, prec);
            if (Array.isArray(ext)) {
                for (let e of ext)
                    inner(e, prec);
            }
            else if (ext instanceof CompartmentInstance) {
                if (newCompartments.has(ext.compartment))
                    throw new RangeError(`Duplicate use of compartment in extensions`);
                let content = compartments.get(ext.compartment) || ext.inner;
                newCompartments.set(ext.compartment, content);
                inner(content, prec);
            }
            else if (ext instanceof PrecExtension) {
                inner(ext.inner, ext.prec);
            }
            else if (ext instanceof StateField) {
                result[prec].push(ext);
                if (ext.provides)
                    inner(ext.provides, prec);
            }
            else if (ext instanceof FacetProvider) {
                result[prec].push(ext);
                if (ext.facet.extensions)
                    inner(ext.facet.extensions, Prec_.default);
            }
            else {
                let content = ext.extension;
                if (!content)
                    throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
                inner(content, prec);
            }
        }
        inner(extension, Prec_.default);
        return result.reduce((a, b) => a.concat(b));
    }
    function ensureAddr(state, addr) {
        if (addr & 1)
            return 2 /* SlotStatus.Computed */;
        let idx = addr >> 1;
        let status = state.status[idx];
        if (status == 4 /* SlotStatus.Computing */)
            throw new Error("Cyclic dependency between fields and/or facets");
        if (status & 2 /* SlotStatus.Computed */)
            return status;
        state.status[idx] = 4 /* SlotStatus.Computing */;
        let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
        return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;
    }
    function getAddr(state, addr) {
        return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
    }

    const languageData = /*@__PURE__*/Facet.define();
    const allowMultipleSelections = /*@__PURE__*/Facet.define({
        combine: values => values.some(v => v),
        static: true
    });
    const lineSeparator = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : undefined,
        static: true
    });
    const changeFilter = /*@__PURE__*/Facet.define();
    const transactionFilter = /*@__PURE__*/Facet.define();
    const transactionExtender = /*@__PURE__*/Facet.define();
    const readOnly = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : false
    });

    /**
    Annotations are tagged values that are used to add metadata to
    transactions in an extensible way. They should be used to model
    things that effect the entire transaction (such as its [time
    stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
    [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
    _alongside_ the other changes made by the transaction, [state
    effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
    */
    class Annotation {
        /**
        @internal
        */
        constructor(
        /**
        The annotation type.
        */
        type, 
        /**
        The value of this annotation.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Define a new type of annotation.
        */
        static define() { return new AnnotationType(); }
    }
    /**
    Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
    */
    class AnnotationType {
        /**
        Create an instance of this annotation.
        */
        of(value) { return new Annotation(this, value); }
    }
    /**
    Representation of a type of state effect. Defined with
    [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
    */
    class StateEffectType {
        /**
        @internal
        */
        constructor(
        // The `any` types in these function types are there to work
        // around TypeScript issue #37631, where the type guard on
        // `StateEffect.is` mysteriously stops working when these properly
        // have type `Value`.
        /**
        @internal
        */
        map) {
            this.map = map;
        }
        /**
        Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
        type.
        */
        of(value) { return new StateEffect(this, value); }
    }
    /**
    State effects can be used to represent additional effects
    associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
    are often useful to model changes to custom [state
    fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
    document or selection changes.
    */
    class StateEffect {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        type, 
        /**
        The value of this effect.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Map this effect through a position mapping. Will return
        `undefined` when that ends up deleting the effect.
        */
        map(mapping) {
            let mapped = this.type.map(this.value, mapping);
            return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
        }
        /**
        Tells you whether this effect object is of a given
        [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
        */
        is(type) { return this.type == type; }
        /**
        Define a new effect type. The type parameter indicates the type
        of values that his effect holds. It should be a type that
        doesn't include `undefined`, since that is used in
        [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
        removed.
        */
        static define(spec = {}) {
            return new StateEffectType(spec.map || (v => v));
        }
        /**
        Map an array of effects through a change set.
        */
        static mapEffects(effects, mapping) {
            if (!effects.length)
                return effects;
            let result = [];
            for (let effect of effects) {
                let mapped = effect.map(mapping);
                if (mapped)
                    result.push(mapped);
            }
            return result;
        }
    }
    /**
    This effect can be used to reconfigure the root extensions of
    the editor. Doing this will discard any extensions
    [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
    the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
    compartments.
    */
    StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
    /**
    Append extensions to the top-level configuration of the editor.
    */
    StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
    /**
    Changes to the editor state are grouped into transactions.
    Typically, a user action creates a single transaction, which may
    contain any number of document changes, may change the selection,
    or have other effects. Create a transaction by calling
    [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
    dispatch one by calling
    [`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
    */
    class Transaction {
        constructor(
        /**
        The state from which the transaction starts.
        */
        startState, 
        /**
        The document changes made by this transaction.
        */
        changes, 
        /**
        The selection set by this transaction, or undefined if it
        doesn't explicitly set a selection.
        */
        selection, 
        /**
        The effects added to the transaction.
        */
        effects, 
        /**
        @internal
        */
        annotations, 
        /**
        Whether the selection should be scrolled into view after this
        transaction is dispatched.
        */
        scrollIntoView) {
            this.startState = startState;
            this.changes = changes;
            this.selection = selection;
            this.effects = effects;
            this.annotations = annotations;
            this.scrollIntoView = scrollIntoView;
            /**
            @internal
            */
            this._doc = null;
            /**
            @internal
            */
            this._state = null;
            if (selection)
                checkSelection(selection, changes.newLength);
            if (!annotations.some((a) => a.type == Transaction.time))
                this.annotations = annotations.concat(Transaction.time.of(Date.now()));
        }
        /**
        @internal
        */
        static create(startState, changes, selection, effects, annotations, scrollIntoView) {
            return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
        }
        /**
        The new document produced by the transaction. Contrary to
        [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
        force the entire new state to be computed right away, so it is
        recommended that [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
        when they need to look at the new document.
        */
        get newDoc() {
            return this._doc || (this._doc = this.changes.apply(this.startState.doc));
        }
        /**
        The new selection produced by the transaction. If
        [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
        this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
        current selection through the changes made by the transaction.
        */
        get newSelection() {
            return this.selection || this.startState.selection.map(this.changes);
        }
        /**
        The new state created by the transaction. Computed on demand
        (but retained for subsequent access), so it is recommended not to
        access it in [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
        */
        get state() {
            if (!this._state)
                this.startState.applyTransaction(this);
            return this._state;
        }
        /**
        Get the value of the given annotation type, if any.
        */
        annotation(type) {
            for (let ann of this.annotations)
                if (ann.type == type)
                    return ann.value;
            return undefined;
        }
        /**
        Indicates whether the transaction changed the document.
        */
        get docChanged() { return !this.changes.empty; }
        /**
        Indicates whether this transaction reconfigures the state
        (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
        with a top-level configuration
        [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
        */
        get reconfigured() { return this.startState.config != this.state.config; }
        /**
        Returns true if the transaction has a [user
        event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
        or more specific than `event`. For example, if the transaction
        has `"select.pointer"` as user event, `"select"` and
        `"select.pointer"` will match it.
        */
        isUserEvent(event) {
            let e = this.annotation(Transaction.userEvent);
            return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
        }
    }
    /**
    Annotation used to store transaction timestamps. Automatically
    added to every transaction, holding `Date.now()`.
    */
    Transaction.time = /*@__PURE__*/Annotation.define();
    /**
    Annotation used to associate a transaction with a user interface
    event. Holds a string identifying the event, using a
    dot-separated format to support attaching more specific
    information. The events used by the core libraries are:

     - `"input"` when content is entered
       - `"input.type"` for typed input
         - `"input.type.compose"` for composition
       - `"input.paste"` for pasted input
       - `"input.drop"` when adding content with drag-and-drop
       - `"input.complete"` when autocompleting
     - `"delete"` when the user deletes content
       - `"delete.selection"` when deleting the selection
       - `"delete.forward"` when deleting forward from the selection
       - `"delete.backward"` when deleting backward from the selection
       - `"delete.cut"` when cutting to the clipboard
     - `"move"` when content is moved
       - `"move.drop"` when content is moved within the editor through drag-and-drop
     - `"select"` when explicitly changing the selection
       - `"select.pointer"` when selecting with a mouse or other pointing device
     - `"undo"` and `"redo"` for history actions

    Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
    whether the annotation matches a given event.
    */
    Transaction.userEvent = /*@__PURE__*/Annotation.define();
    /**
    Annotation indicating whether a transaction should be added to
    the undo history or not.
    */
    Transaction.addToHistory = /*@__PURE__*/Annotation.define();
    /**
    Annotation indicating (when present and true) that a transaction
    represents a change made by some other actor, not the user. This
    is used, for example, to tag other people's changes in
    collaborative editing.
    */
    Transaction.remote = /*@__PURE__*/Annotation.define();
    function joinRanges(a, b) {
        let result = [];
        for (let iA = 0, iB = 0;;) {
            let from, to;
            if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
                from = a[iA++];
                to = a[iA++];
            }
            else if (iB < b.length) {
                from = b[iB++];
                to = b[iB++];
            }
            else
                return result;
            if (!result.length || result[result.length - 1] < from)
                result.push(from, to);
            else if (result[result.length - 1] < to)
                result[result.length - 1] = to;
        }
    }
    function mergeTransaction(a, b, sequential) {
        var _a;
        let mapForA, mapForB, changes;
        if (sequential) {
            mapForA = b.changes;
            mapForB = ChangeSet.empty(b.changes.length);
            changes = a.changes.compose(b.changes);
        }
        else {
            mapForA = b.changes.map(a.changes);
            mapForB = a.changes.mapDesc(b.changes, true);
            changes = a.changes.compose(mapForA);
        }
        return {
            changes,
            selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
            effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
            annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
            scrollIntoView: a.scrollIntoView || b.scrollIntoView
        };
    }
    function resolveTransactionInner(state, spec, docSize) {
        let sel = spec.selection, annotations = asArray$1(spec.annotations);
        if (spec.userEvent)
            annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
        return {
            changes: spec.changes instanceof ChangeSet ? spec.changes
                : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
            selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
            effects: asArray$1(spec.effects),
            annotations,
            scrollIntoView: !!spec.scrollIntoView
        };
    }
    function resolveTransaction(state, specs, filter) {
        let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
        if (specs.length && specs[0].filter === false)
            filter = false;
        for (let i = 1; i < specs.length; i++) {
            if (specs[i].filter === false)
                filter = false;
            let seq = !!specs[i].sequential;
            s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
        }
        let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
        return extendTransaction(filter ? filterTransaction(tr) : tr);
    }
    // Finish a transaction by applying filters if necessary.
    function filterTransaction(tr) {
        let state = tr.startState;
        // Change filters
        let result = true;
        for (let filter of state.facet(changeFilter)) {
            let value = filter(tr);
            if (value === false) {
                result = false;
                break;
            }
            if (Array.isArray(value))
                result = result === true ? value : joinRanges(result, value);
        }
        if (result !== true) {
            let changes, back;
            if (result === false) {
                back = tr.changes.invertedDesc;
                changes = ChangeSet.empty(state.doc.length);
            }
            else {
                let filtered = tr.changes.filter(result);
                changes = filtered.changes;
                back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
            }
            tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
        }
        // Transaction filters
        let filters = state.facet(transactionFilter);
        for (let i = filters.length - 1; i >= 0; i--) {
            let filtered = filters[i](tr);
            if (filtered instanceof Transaction)
                tr = filtered;
            else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
                tr = filtered[0];
            else
                tr = resolveTransaction(state, asArray$1(filtered), false);
        }
        return tr;
    }
    function extendTransaction(tr) {
        let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
        for (let i = extenders.length - 1; i >= 0; i--) {
            let extension = extenders[i](tr);
            if (extension && Object.keys(extension).length)
                spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
        }
        return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
    }
    const none$2 = [];
    function asArray$1(value) {
        return value == null ? none$2 : Array.isArray(value) ? value : [value];
    }

    /**
    The categories produced by a [character
    categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
    do things like selecting by word.
    */
    var CharCategory = /*@__PURE__*/(function (CharCategory) {
        /**
        Word characters.
        */
        CharCategory[CharCategory["Word"] = 0] = "Word";
        /**
        Whitespace.
        */
        CharCategory[CharCategory["Space"] = 1] = "Space";
        /**
        Anything else.
        */
        CharCategory[CharCategory["Other"] = 2] = "Other";
    return CharCategory})(CharCategory || (CharCategory = {}));
    const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
    let wordChar;
    try {
        wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
    }
    catch (_) { }
    function hasWordChar(str) {
        if (wordChar)
            return wordChar.test(str);
        for (let i = 0; i < str.length; i++) {
            let ch = str[i];
            if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
                return true;
        }
        return false;
    }
    function makeCategorizer(wordChars) {
        return (char) => {
            if (!/\S/.test(char))
                return CharCategory.Space;
            if (hasWordChar(char))
                return CharCategory.Word;
            for (let i = 0; i < wordChars.length; i++)
                if (char.indexOf(wordChars[i]) > -1)
                    return CharCategory.Word;
            return CharCategory.Other;
        };
    }

    /**
    The editor state class is a persistent (immutable) data structure.
    To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
    [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
    instance, without modifying the original object.

    As such, _never_ mutate properties of a state directly. That'll
    just break things.
    */
    class EditorState {
        constructor(
        /**
        @internal
        */
        config, 
        /**
        The current document.
        */
        doc, 
        /**
        The current selection.
        */
        selection, 
        /**
        @internal
        */
        values, computeSlot, tr) {
            this.config = config;
            this.doc = doc;
            this.selection = selection;
            this.values = values;
            this.status = config.statusTemplate.slice();
            this.computeSlot = computeSlot;
            // Fill in the computed state immediately, so that further queries
            // for it made during the update return this state
            if (tr)
                tr._state = this;
            for (let i = 0; i < this.config.dynamicSlots.length; i++)
                ensureAddr(this, i << 1);
            this.computeSlot = null;
        }
        field(field, require = true) {
            let addr = this.config.address[field.id];
            if (addr == null) {
                if (require)
                    throw new RangeError("Field is not present in this state");
                return undefined;
            }
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
        state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
        can be passed. Unless
        [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
        [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
        are assumed to start in the _current_ document (not the document
        produced by previous specs), and its
        [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
        [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
        to the document created by its _own_ changes. The resulting
        transaction contains the combined effect of all the different
        specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
        specs take precedence over earlier ones.
        */
        update(...specs) {
            return resolveTransaction(this, specs, true);
        }
        /**
        @internal
        */
        applyTransaction(tr) {
            let conf = this.config, { base, compartments } = conf;
            for (let effect of tr.effects) {
                if (effect.is(Compartment.reconfigure)) {
                    if (conf) {
                        compartments = new Map;
                        conf.compartments.forEach((val, key) => compartments.set(key, val));
                        conf = null;
                    }
                    compartments.set(effect.value.compartment, effect.value.extension);
                }
                else if (effect.is(StateEffect.reconfigure)) {
                    conf = null;
                    base = effect.value;
                }
                else if (effect.is(StateEffect.appendConfig)) {
                    conf = null;
                    base = asArray$1(base).concat(effect.value);
                }
            }
            let startValues;
            if (!conf) {
                conf = Configuration.resolve(base, compartments, this);
                let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
                startValues = intermediateState.values;
            }
            else {
                startValues = tr.startState.values.slice();
            }
            let selection = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();
            new EditorState(conf, tr.newDoc, selection, startValues, (state, slot) => slot.update(state, tr), tr);
        }
        /**
        Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
        replaces every selection range with the given content.
        */
        replaceSelection(text) {
            if (typeof text == "string")
                text = this.toText(text);
            return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
                range: EditorSelection.cursor(range.from + text.length) }));
        }
        /**
        Create a set of changes and a new selection by running the given
        function for each range in the active selection. The function
        can return an optional set of changes (in the coordinate space
        of the start document), plus an updated range (in the coordinate
        space of the document produced by the call's own changes). This
        method will merge all the changes and ranges into a single
        changeset and selection, and return it as a [transaction
        spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
        [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
        */
        changeByRange(f) {
            let sel = this.selection;
            let result1 = f(sel.ranges[0]);
            let changes = this.changes(result1.changes), ranges = [result1.range];
            let effects = asArray$1(result1.effects);
            for (let i = 1; i < sel.ranges.length; i++) {
                let result = f(sel.ranges[i]);
                let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
                for (let j = 0; j < i; j++)
                    ranges[j] = ranges[j].map(newMapped);
                let mapBy = changes.mapDesc(newChanges, true);
                ranges.push(result.range.map(mapBy));
                changes = changes.compose(newMapped);
                effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray$1(result.effects), mapBy));
            }
            return {
                changes,
                selection: EditorSelection.create(ranges, sel.mainIndex),
                effects
            };
        }
        /**
        Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
        description, taking the state's document length and line
        separator into account.
        */
        changes(spec = []) {
            if (spec instanceof ChangeSet)
                return spec;
            return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
        }
        /**
        Using the state's [line
        separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
        [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
        */
        toText(string) {
            return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
        }
        /**
        Return the given range of the document as a string.
        */
        sliceDoc(from = 0, to = this.doc.length) {
            return this.doc.sliceString(from, to, this.lineBreak);
        }
        /**
        Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
        */
        facet(facet) {
            let addr = this.config.address[facet.id];
            if (addr == null)
                return facet.default;
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Convert this state to a JSON-serializable object. When custom
        fields should be serialized, you can pass them in as an object
        mapping property names (in the resulting object, which should
        not use `doc` or `selection`) to fields.
        */
        toJSON(fields) {
            let result = {
                doc: this.sliceDoc(),
                selection: this.selection.toJSON()
            };
            if (fields)
                for (let prop in fields) {
                    let value = fields[prop];
                    if (value instanceof StateField && this.config.address[value.id] != null)
                        result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
                }
            return result;
        }
        /**
        Deserialize a state from its JSON representation. When custom
        fields should be deserialized, pass the same object you passed
        to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
        third argument.
        */
        static fromJSON(json, config = {}, fields) {
            if (!json || typeof json.doc != "string")
                throw new RangeError("Invalid JSON representation for EditorState");
            let fieldInit = [];
            if (fields)
                for (let prop in fields) {
                    if (Object.prototype.hasOwnProperty.call(json, prop)) {
                        let field = fields[prop], value = json[prop];
                        fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
                    }
                }
            return EditorState.create({
                doc: json.doc,
                selection: EditorSelection.fromJSON(json.selection),
                extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
            });
        }
        /**
        Create a new state. You'll usually only need this when
        initializing an editor—updated states are created by applying
        transactions.
        */
        static create(config = {}) {
            let configuration = Configuration.resolve(config.extensions || [], new Map);
            let doc = config.doc instanceof Text ? config.doc
                : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
            let selection = !config.selection ? EditorSelection.single(0)
                : config.selection instanceof EditorSelection ? config.selection
                    : EditorSelection.single(config.selection.anchor, config.selection.head);
            checkSelection(selection, doc.length);
            if (!configuration.staticFacet(allowMultipleSelections))
                selection = selection.asSingle();
            return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
        }
        /**
        The size (in columns) of a tab in the document, determined by
        the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
        */
        get tabSize() { return this.facet(EditorState.tabSize); }
        /**
        Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
        string for this state.
        */
        get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
        /**
        Returns true when the editor is
        [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
        */
        get readOnly() { return this.facet(readOnly); }
        /**
        Look up a translation for the given phrase (via the
        [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
        original string if no translation is found.
        
        If additional arguments are passed, they will be inserted in
        place of markers like `$1` (for the first value) and `$2`, etc.
        A single `$` is equivalent to `$1`, and `$$` will produce a
        literal dollar sign.
        */
        phrase(phrase, ...insert) {
            for (let map of this.facet(EditorState.phrases))
                if (Object.prototype.hasOwnProperty.call(map, phrase)) {
                    phrase = map[phrase];
                    break;
                }
            if (insert.length)
                phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
                    if (i == "$")
                        return "$";
                    let n = +(i || 1);
                    return !n || n > insert.length ? m : insert[n - 1];
                });
            return phrase;
        }
        /**
        Find the values for a given language data field, provided by the
        the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
        
        Examples of language data fields are...
        
        - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
          comment syntax.
        - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
          for providing language-specific completion sources.
        - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
          characters that should be considered part of words in this
          language.
        - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
          bracket closing behavior.
        */
        languageDataAt(name, pos, side = -1) {
            let values = [];
            for (let provider of this.facet(languageData)) {
                for (let result of provider(this, pos, side)) {
                    if (Object.prototype.hasOwnProperty.call(result, name))
                        values.push(result[name]);
                }
            }
            return values;
        }
        /**
        Return a function that can categorize strings (expected to
        represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
        into one of:
        
         - Word (contains an alphanumeric character or a character
           explicitly listed in the local language's `"wordChars"`
           language data, which should be a string)
         - Space (contains only whitespace)
         - Other (anything else)
        */
        charCategorizer(at) {
            return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
        }
        /**
        Find the word at the given position, meaning the range
        containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
        around it. If no word characters are adjacent to the position,
        this returns null.
        */
        wordAt(pos) {
            let { text, from, length } = this.doc.lineAt(pos);
            let cat = this.charCategorizer(pos);
            let start = pos - from, end = pos - from;
            while (start > 0) {
                let prev = findClusterBreak(text, start, false);
                if (cat(text.slice(prev, start)) != CharCategory.Word)
                    break;
                start = prev;
            }
            while (end < length) {
                let next = findClusterBreak(text, end);
                if (cat(text.slice(end, next)) != CharCategory.Word)
                    break;
                end = next;
            }
            return start == end ? null : EditorSelection.range(start + from, end + from);
        }
    }
    /**
    A facet that, when enabled, causes the editor to allow multiple
    ranges to be selected. Be careful though, because by default the
    editor relies on the native DOM selection, which cannot handle
    multiple selections. An extension like
    [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
    secondary selections visible to the user.
    */
    EditorState.allowMultipleSelections = allowMultipleSelections;
    /**
    Configures the tab size to use in this state. The first
    (highest-precedence) value of the facet is used. If no value is
    given, this defaults to 4.
    */
    EditorState.tabSize = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : 4
    });
    /**
    The line separator to use. By default, any of `"\n"`, `"\r\n"`
    and `"\r"` is treated as a separator when splitting lines, and
    lines are joined with `"\n"`.

    When you configure a value here, only that precise separator
    will be used, allowing you to round-trip documents through the
    editor without normalizing line separators.
    */
    EditorState.lineSeparator = lineSeparator;
    /**
    This facet controls the value of the
    [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
    consulted by commands and extensions that implement editing
    functionality to determine whether they should apply. It
    defaults to false, but when its highest-precedence value is
    `true`, such functionality disables itself.

    Not to be confused with
    [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
    controls whether the editor's DOM is set to be editable (and
    thus focusable).
    */
    EditorState.readOnly = readOnly;
    /**
    Registers translation phrases. The
    [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
    all objects registered with this facet to find translations for
    its argument.
    */
    EditorState.phrases = /*@__PURE__*/Facet.define({
        compare(a, b) {
            let kA = Object.keys(a), kB = Object.keys(b);
            return kA.length == kB.length && kA.every(k => a[k] == b[k]);
        }
    });
    /**
    A facet used to register [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
    */
    EditorState.languageData = languageData;
    /**
    Facet used to register change filters, which are called for each
    transaction (unless explicitly
    [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
    part of the transaction's changes.

    Such a function can return `true` to indicate that it doesn't
    want to do anything, `false` to completely stop the changes in
    the transaction, or a set of ranges in which changes should be
    suppressed. Such ranges are represented as an array of numbers,
    with each pair of two numbers indicating the start and end of a
    range. So for example `[10, 20, 100, 110]` suppresses changes
    between 10 and 20, and between 100 and 110.
    */
    EditorState.changeFilter = changeFilter;
    /**
    Facet used to register a hook that gets a chance to update or
    replace transaction specs before they are applied. This will
    only be applied for transactions that don't have
    [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
    can either return a single transaction spec (possibly the input
    transaction), or an array of specs (which will be combined in
    the same way as the arguments to
    [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

    When possible, it is recommended to avoid accessing
    [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
    since it will force creation of a state that will then be
    discarded again, if the transaction is actually filtered.

    (This functionality should be used with care. Indiscriminately
    modifying transaction is likely to break something or degrade
    the user experience.)
    */
    EditorState.transactionFilter = transactionFilter;
    /**
    This is a more limited form of
    [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
    which can only add
    [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
    of filter runs even if the transaction has disabled regular
    [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
    for effects that don't need to touch the changes or selection,
    but do want to process every transaction.

    Extenders run _after_ filters, when both are present.
    */
    EditorState.transactionExtender = transactionExtender;
    Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

    /**
    Utility function for combining behaviors to fill in a config
    object from an array of provided configs. `defaults` should hold
    default values for all optional fields in `Config`.

    The function will, by default, error
    when a field gets two values that aren't `===`-equal, but you can
    provide combine functions per field to do something else.
    */
    function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
    combine = {}) {
        let result = {};
        for (let config of configs)
            for (let key of Object.keys(config)) {
                let value = config[key], current = result[key];
                if (current === undefined)
                    result[key] = value;
                else if (current === value || value === undefined) ; // No conflict
                else if (Object.hasOwnProperty.call(combine, key))
                    result[key] = combine[key](current, value);
                else
                    throw new Error("Config merge conflict for field " + key);
            }
        for (let key in defaults)
            if (result[key] === undefined)
                result[key] = defaults[key];
        return result;
    }

    /**
    Each range is associated with a value, which must inherit from
    this class.
    */
    class RangeValue {
        /**
        Compare this value with another value. Used when comparing
        rangesets. The default implementation compares by identity.
        Unless you are only creating a fixed number of unique instances
        of your value type, it is a good idea to implement this
        properly.
        */
        eq(other) { return this == other; }
        /**
        Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
        */
        range(from, to = from) { return Range$1.create(from, to, this); }
    }
    RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
    RangeValue.prototype.point = false;
    RangeValue.prototype.mapMode = MapMode.TrackDel;
    /**
    A range associates a value with a range of positions.
    */
    let Range$1 = class Range {
        constructor(
        /**
        The range's start position.
        */
        from, 
        /**
        Its end position.
        */
        to, 
        /**
        The value associated with this range.
        */
        value) {
            this.from = from;
            this.to = to;
            this.value = value;
        }
        /**
        @internal
        */
        static create(from, to, value) {
            return new Range(from, to, value);
        }
    };
    function cmpRange(a, b) {
        return a.from - b.from || a.value.startSide - b.value.startSide;
    }
    class Chunk {
        constructor(from, to, value, 
        // Chunks are marked with the largest point that occurs
        // in them (or -1 for no points), so that scans that are
        // only interested in points (such as the
        // heightmap-related logic) can skip range-only chunks.
        maxPoint) {
            this.from = from;
            this.to = to;
            this.value = value;
            this.maxPoint = maxPoint;
        }
        get length() { return this.to[this.to.length - 1]; }
        // Find the index of the given position and side. Use the ranges'
        // `from` pos when `end == false`, `to` when `end == true`.
        findIndex(pos, side, end, startAt = 0) {
            let arr = end ? this.to : this.from;
            for (let lo = startAt, hi = arr.length;;) {
                if (lo == hi)
                    return lo;
                let mid = (lo + hi) >> 1;
                let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
                if (mid == lo)
                    return diff >= 0 ? lo : hi;
                if (diff >= 0)
                    hi = mid;
                else
                    lo = mid + 1;
            }
        }
        between(offset, from, to, f) {
            for (let i = this.findIndex(from, -1e9 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, i); i < e; i++)
                if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
                    return false;
        }
        map(offset, changes) {
            let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
            for (let i = 0; i < this.value.length; i++) {
                let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
                if (curFrom == curTo) {
                    let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
                    if (mapped == null)
                        continue;
                    newFrom = newTo = mapped;
                    if (val.startSide != val.endSide) {
                        newTo = changes.mapPos(curFrom, val.endSide);
                        if (newTo < newFrom)
                            continue;
                    }
                }
                else {
                    newFrom = changes.mapPos(curFrom, val.startSide);
                    newTo = changes.mapPos(curTo, val.endSide);
                    if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                        continue;
                }
                if ((newTo - newFrom || val.endSide - val.startSide) < 0)
                    continue;
                if (newPos < 0)
                    newPos = newFrom;
                if (val.point)
                    maxPoint = Math.max(maxPoint, newTo - newFrom);
                value.push(val);
                from.push(newFrom - newPos);
                to.push(newTo - newPos);
            }
            return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
        }
    }
    /**
    A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
    way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
    [update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
    structure.
    */
    class RangeSet {
        constructor(
        /**
        @internal
        */
        chunkPos, 
        /**
        @internal
        */
        chunk, 
        /**
        @internal
        */
        nextLayer, 
        /**
        @internal
        */
        maxPoint) {
            this.chunkPos = chunkPos;
            this.chunk = chunk;
            this.nextLayer = nextLayer;
            this.maxPoint = maxPoint;
        }
        /**
        @internal
        */
        static create(chunkPos, chunk, nextLayer, maxPoint) {
            return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
        }
        /**
        @internal
        */
        get length() {
            let last = this.chunk.length - 1;
            return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
        }
        /**
        The number of ranges in the set.
        */
        get size() {
            if (this.isEmpty)
                return 0;
            let size = this.nextLayer.size;
            for (let chunk of this.chunk)
                size += chunk.value.length;
            return size;
        }
        /**
        @internal
        */
        chunkEnd(index) {
            return this.chunkPos[index] + this.chunk[index].length;
        }
        /**
        Update the range set, optionally adding new ranges or filtering
        out existing ones.
        
        (Note: The type parameter is just there as a kludge to work
        around TypeScript variance issues that prevented `RangeSet<X>`
        from being a subtype of `RangeSet<Y>` when `X` is a subtype of
        `Y`.)
        */
        update(updateSpec) {
            let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
            let filter = updateSpec.filter;
            if (add.length == 0 && !filter)
                return this;
            if (sort)
                add = add.slice().sort(cmpRange);
            if (this.isEmpty)
                return add.length ? RangeSet.of(add) : this;
            let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
            let builder = new RangeSetBuilder();
            while (cur.value || i < add.length) {
                if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
                    let range = add[i++];
                    if (!builder.addInner(range.from, range.to, range.value))
                        spill.push(range);
                }
                else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
                    (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
                    (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
                    builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
                    cur.nextChunk();
                }
                else {
                    if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                        if (!builder.addInner(cur.from, cur.to, cur.value))
                            spill.push(Range$1.create(cur.from, cur.to, cur.value));
                    }
                    cur.next();
                }
            }
            return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty
                : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
        }
        /**
        Map this range set through a set of changes, return the new set.
        */
        map(changes) {
            if (changes.empty || this.isEmpty)
                return this;
            let chunks = [], chunkPos = [], maxPoint = -1;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                let touch = changes.touchesRange(start, start + chunk.length);
                if (touch === false) {
                    maxPoint = Math.max(maxPoint, chunk.maxPoint);
                    chunks.push(chunk);
                    chunkPos.push(changes.mapPos(start));
                }
                else if (touch === true) {
                    let { mapped, pos } = chunk.map(start, changes);
                    if (mapped) {
                        maxPoint = Math.max(maxPoint, mapped.maxPoint);
                        chunks.push(mapped);
                        chunkPos.push(pos);
                    }
                }
            }
            let next = this.nextLayer.map(changes);
            return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
        }
        /**
        Iterate over the ranges that touch the region `from` to `to`,
        calling `f` for each. There is no guarantee that the ranges will
        be reported in any specific order. When the callback returns
        `false`, iteration stops.
        */
        between(from, to, f) {
            if (this.isEmpty)
                return;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                if (to >= start && from <= start + chunk.length &&
                    chunk.between(start, from - start, to - start, f) === false)
                    return;
            }
            this.nextLayer.between(from, to, f);
        }
        /**
        Iterate over the ranges in this set, in order, including all
        ranges that end at or after `from`.
        */
        iter(from = 0) {
            return HeapCursor.from([this]).goto(from);
        }
        /**
        @internal
        */
        get isEmpty() { return this.nextLayer == this; }
        /**
        Iterate over the ranges in a collection of sets, in order,
        starting from `from`.
        */
        static iter(sets, from = 0) {
            return HeapCursor.from(sets).goto(from);
        }
        /**
        Iterate over two groups of sets, calling methods on `comparator`
        to notify it of possible differences.
        */
        static compare(oldSets, newSets, 
        /**
        This indicates how the underlying data changed between these
        ranges, and is needed to synchronize the iteration.
        */
        textDiff, comparator, 
        /**
        Can be used to ignore all non-point ranges, and points below
        the given size. When -1, all ranges are compared.
        */
        minPointSize = -1) {
            let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
            let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
            let sharedChunks = findSharedChunks(a, b, textDiff);
            let sideA = new SpanCursor(a, sharedChunks, minPointSize);
            let sideB = new SpanCursor(b, sharedChunks, minPointSize);
            textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
            if (textDiff.empty && textDiff.length == 0)
                compare(sideA, 0, sideB, 0, 0, comparator);
        }
        /**
        Compare the contents of two groups of range sets, returning true
        if they are equivalent in the given range.
        */
        static eq(oldSets, newSets, from = 0, to) {
            if (to == null)
                to = 1000000000 /* C.Far */ - 1;
            let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
            let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
            if (a.length != b.length)
                return false;
            if (!a.length)
                return true;
            let sharedChunks = findSharedChunks(a, b);
            let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
            for (;;) {
                if (sideA.to != sideB.to ||
                    !sameValues(sideA.active, sideB.active) ||
                    sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
                    return false;
                if (sideA.to > to)
                    return true;
                sideA.next();
                sideB.next();
            }
        }
        /**
        Iterate over a group of range sets at the same time, notifying
        the iterator about the ranges covering every given piece of
        content. Returns the open count (see
        [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
        of the iteration.
        */
        static spans(sets, from, to, iterator, 
        /**
        When given and greater than -1, only points of at least this
        size are taken into account.
        */
        minPointSize = -1) {
            let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
            let openRanges = cursor.openStart;
            for (;;) {
                let curTo = Math.min(cursor.to, to);
                if (cursor.point) {
                    let active = cursor.activeForPoint(cursor.to);
                    let openCount = cursor.pointFrom < from ? active.length + 1
                        : cursor.point.startSide < 0 ? active.length
                            : Math.min(active.length, openRanges);
                    iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
                    openRanges = Math.min(cursor.openEnd(curTo), active.length);
                }
                else if (curTo > pos) {
                    iterator.span(pos, curTo, cursor.active, openRanges);
                    openRanges = cursor.openEnd(curTo);
                }
                if (cursor.to > to)
                    return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
                pos = cursor.to;
                cursor.next();
            }
        }
        /**
        Create a range set for the given range or array of ranges. By
        default, this expects the ranges to be _sorted_ (by start
        position and, if two start at the same position,
        `value.startSide`). You can pass `true` as second argument to
        cause the method to sort them.
        */
        static of(ranges, sort = false) {
            let build = new RangeSetBuilder();
            for (let range of ranges instanceof Range$1 ? [ranges] : sort ? lazySort(ranges) : ranges)
                build.add(range.from, range.to, range.value);
            return build.finish();
        }
        /**
        Join an array of range sets into a single set.
        */
        static join(sets) {
            if (!sets.length)
                return RangeSet.empty;
            let result = sets[sets.length - 1];
            for (let i = sets.length - 2; i >= 0; i--) {
                for (let layer = sets[i]; layer != RangeSet.empty; layer = layer.nextLayer)
                    result = new RangeSet(layer.chunkPos, layer.chunk, result, Math.max(layer.maxPoint, result.maxPoint));
            }
            return result;
        }
    }
    /**
    The empty set of ranges.
    */
    RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
    function lazySort(ranges) {
        if (ranges.length > 1)
            for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
                let cur = ranges[i];
                if (cmpRange(prev, cur) > 0)
                    return ranges.slice().sort(cmpRange);
                prev = cur;
            }
        return ranges;
    }
    RangeSet.empty.nextLayer = RangeSet.empty;
    /**
    A range set builder is a data structure that helps build up a
    [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
    an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
    */
    class RangeSetBuilder {
        finishChunk(newArrays) {
            this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
            this.chunkPos.push(this.chunkStart);
            this.chunkStart = -1;
            this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
            this.maxPoint = -1;
            if (newArrays) {
                this.from = [];
                this.to = [];
                this.value = [];
            }
        }
        /**
        Create an empty builder.
        */
        constructor() {
            this.chunks = [];
            this.chunkPos = [];
            this.chunkStart = -1;
            this.last = null;
            this.lastFrom = -1e9 /* C.Far */;
            this.lastTo = -1e9 /* C.Far */;
            this.from = [];
            this.to = [];
            this.value = [];
            this.maxPoint = -1;
            this.setMaxPoint = -1;
            this.nextLayer = null;
        }
        /**
        Add a range. Ranges should be added in sorted (by `from` and
        `value.startSide`) order.
        */
        add(from, to, value) {
            if (!this.addInner(from, to, value))
                (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
        }
        /**
        @internal
        */
        addInner(from, to, value) {
            let diff = from - this.lastTo || value.startSide - this.last.endSide;
            if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
                throw new Error("Ranges must be added sorted by `from` position and `startSide`");
            if (diff < 0)
                return false;
            if (this.from.length == 250 /* C.ChunkSize */)
                this.finishChunk(true);
            if (this.chunkStart < 0)
                this.chunkStart = from;
            this.from.push(from - this.chunkStart);
            this.to.push(to - this.chunkStart);
            this.last = value;
            this.lastFrom = from;
            this.lastTo = to;
            this.value.push(value);
            if (value.point)
                this.maxPoint = Math.max(this.maxPoint, to - from);
            return true;
        }
        /**
        @internal
        */
        addChunk(from, chunk) {
            if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
                return false;
            if (this.from.length)
                this.finishChunk(true);
            this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
            this.chunks.push(chunk);
            this.chunkPos.push(from);
            let last = chunk.value.length - 1;
            this.last = chunk.value[last];
            this.lastFrom = chunk.from[last] + from;
            this.lastTo = chunk.to[last] + from;
            return true;
        }
        /**
        Finish the range set. Returns the new set. The builder can't be
        used anymore after this has been called.
        */
        finish() { return this.finishInner(RangeSet.empty); }
        /**
        @internal
        */
        finishInner(next) {
            if (this.from.length)
                this.finishChunk(false);
            if (this.chunks.length == 0)
                return next;
            let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
            this.from = null; // Make sure further `add` calls produce errors
            return result;
        }
    }
    function findSharedChunks(a, b, textDiff) {
        let inA = new Map();
        for (let set of a)
            for (let i = 0; i < set.chunk.length; i++)
                if (set.chunk[i].maxPoint <= 0)
                    inA.set(set.chunk[i], set.chunkPos[i]);
        let shared = new Set();
        for (let set of b)
            for (let i = 0; i < set.chunk.length; i++) {
                let known = inA.get(set.chunk[i]);
                if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&
                    !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
                    shared.add(set.chunk[i]);
            }
        return shared;
    }
    class LayerCursor {
        constructor(layer, skip, minPoint, rank = 0) {
            this.layer = layer;
            this.skip = skip;
            this.minPoint = minPoint;
            this.rank = rank;
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        get endSide() { return this.value ? this.value.endSide : 0; }
        goto(pos, side = -1e9 /* C.Far */) {
            this.chunkIndex = this.rangeIndex = 0;
            this.gotoInner(pos, side, false);
            return this;
        }
        gotoInner(pos, side, forward) {
            while (this.chunkIndex < this.layer.chunk.length) {
                let next = this.layer.chunk[this.chunkIndex];
                if (!(this.skip && this.skip.has(next) ||
                    this.layer.chunkEnd(this.chunkIndex) < pos ||
                    next.maxPoint < this.minPoint))
                    break;
                this.chunkIndex++;
                forward = false;
            }
            if (this.chunkIndex < this.layer.chunk.length) {
                let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
                if (!forward || this.rangeIndex < rangeIndex)
                    this.setRangeIndex(rangeIndex);
            }
            this.next();
        }
        forward(pos, side) {
            if ((this.to - pos || this.endSide - side) < 0)
                this.gotoInner(pos, side, true);
        }
        next() {
            for (;;) {
                if (this.chunkIndex == this.layer.chunk.length) {
                    this.from = this.to = 1000000000 /* C.Far */;
                    this.value = null;
                    break;
                }
                else {
                    let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
                    let from = chunkPos + chunk.from[this.rangeIndex];
                    this.from = from;
                    this.to = chunkPos + chunk.to[this.rangeIndex];
                    this.value = chunk.value[this.rangeIndex];
                    this.setRangeIndex(this.rangeIndex + 1);
                    if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                        break;
                }
            }
        }
        setRangeIndex(index) {
            if (index == this.layer.chunk[this.chunkIndex].value.length) {
                this.chunkIndex++;
                if (this.skip) {
                    while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                        this.chunkIndex++;
                }
                this.rangeIndex = 0;
            }
            else {
                this.rangeIndex = index;
            }
        }
        nextChunk() {
            this.chunkIndex++;
            this.rangeIndex = 0;
            this.next();
        }
        compare(other) {
            return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||
                this.to - other.to || this.endSide - other.endSide;
        }
    }
    class HeapCursor {
        constructor(heap) {
            this.heap = heap;
        }
        static from(sets, skip = null, minPoint = -1) {
            let heap = [];
            for (let i = 0; i < sets.length; i++) {
                for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
                    if (cur.maxPoint >= minPoint)
                        heap.push(new LayerCursor(cur, skip, minPoint, i));
                }
            }
            return heap.length == 1 ? heap[0] : new HeapCursor(heap);
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        goto(pos, side = -1e9 /* C.Far */) {
            for (let cur of this.heap)
                cur.goto(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            this.next();
            return this;
        }
        forward(pos, side) {
            for (let cur of this.heap)
                cur.forward(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            if ((this.to - pos || this.value.endSide - side) < 0)
                this.next();
        }
        next() {
            if (this.heap.length == 0) {
                this.from = this.to = 1000000000 /* C.Far */;
                this.value = null;
                this.rank = -1;
            }
            else {
                let top = this.heap[0];
                this.from = top.from;
                this.to = top.to;
                this.value = top.value;
                this.rank = top.rank;
                if (top.value)
                    top.next();
                heapBubble(this.heap, 0);
            }
        }
    }
    function heapBubble(heap, index) {
        for (let cur = heap[index];;) {
            let childIndex = (index << 1) + 1;
            if (childIndex >= heap.length)
                break;
            let child = heap[childIndex];
            if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
                child = heap[childIndex + 1];
                childIndex++;
            }
            if (cur.compare(child) < 0)
                break;
            heap[childIndex] = cur;
            heap[index] = child;
            index = childIndex;
        }
    }
    class SpanCursor {
        constructor(sets, skip, minPoint) {
            this.minPoint = minPoint;
            this.active = [];
            this.activeTo = [];
            this.activeRank = [];
            this.minActive = -1;
            // A currently active point range, if any
            this.point = null;
            this.pointFrom = 0;
            this.pointRank = 0;
            this.to = -1e9 /* C.Far */;
            this.endSide = 0;
            // The amount of open active ranges at the start of the iterator.
            // Not including points.
            this.openStart = -1;
            this.cursor = HeapCursor.from(sets, skip, minPoint);
        }
        goto(pos, side = -1e9 /* C.Far */) {
            this.cursor.goto(pos, side);
            this.active.length = this.activeTo.length = this.activeRank.length = 0;
            this.minActive = -1;
            this.to = pos;
            this.endSide = side;
            this.openStart = -1;
            this.next();
            return this;
        }
        forward(pos, side) {
            while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
                this.removeActive(this.minActive);
            this.cursor.forward(pos, side);
        }
        removeActive(index) {
            remove(this.active, index);
            remove(this.activeTo, index);
            remove(this.activeRank, index);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        addActive(trackOpen) {
            let i = 0, { value, to, rank } = this.cursor;
            // Organize active marks by rank first, then by size
            while (i < this.activeRank.length && (rank - this.activeRank[i] || to - this.activeTo[i]) > 0)
                i++;
            insert(this.active, i, value);
            insert(this.activeTo, i, to);
            insert(this.activeRank, i, rank);
            if (trackOpen)
                insert(trackOpen, i, this.cursor.from);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        // After calling this, if `this.point` != null, the next range is a
        // point. Otherwise, it's a regular range, covered by `this.active`.
        next() {
            let from = this.to, wasPoint = this.point;
            this.point = null;
            let trackOpen = this.openStart < 0 ? [] : null;
            for (;;) {
                let a = this.minActive;
                if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
                    if (this.activeTo[a] > from) {
                        this.to = this.activeTo[a];
                        this.endSide = this.active[a].endSide;
                        break;
                    }
                    this.removeActive(a);
                    if (trackOpen)
                        remove(trackOpen, a);
                }
                else if (!this.cursor.value) {
                    this.to = this.endSide = 1000000000 /* C.Far */;
                    break;
                }
                else if (this.cursor.from > from) {
                    this.to = this.cursor.from;
                    this.endSide = this.cursor.startSide;
                    break;
                }
                else {
                    let nextVal = this.cursor.value;
                    if (!nextVal.point) { // Opening a range
                        this.addActive(trackOpen);
                        this.cursor.next();
                    }
                    else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
                        // Ignore any non-empty points that end precisely at the end of the prev point
                        this.cursor.next();
                    }
                    else { // New point
                        this.point = nextVal;
                        this.pointFrom = this.cursor.from;
                        this.pointRank = this.cursor.rank;
                        this.to = this.cursor.to;
                        this.endSide = nextVal.endSide;
                        this.cursor.next();
                        this.forward(this.to, this.endSide);
                        break;
                    }
                }
            }
            if (trackOpen) {
                this.openStart = 0;
                for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)
                    this.openStart++;
            }
        }
        activeForPoint(to) {
            if (!this.active.length)
                return this.active;
            let active = [];
            for (let i = this.active.length - 1; i >= 0; i--) {
                if (this.activeRank[i] < this.pointRank)
                    break;
                if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
                    active.push(this.active[i]);
            }
            return active.reverse();
        }
        openEnd(to) {
            let open = 0;
            for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
                open++;
            return open;
        }
    }
    function compare(a, startA, b, startB, length, comparator) {
        a.goto(startA);
        b.goto(startB);
        let endB = startB + length;
        let pos = startB, dPos = startB - startA;
        for (;;) {
            let dEnd = (a.to + dPos) - b.to, diff = dEnd || a.endSide - b.endSide;
            let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
            if (a.point || b.point) {
                if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&
                    sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to))))
                    comparator.comparePoint(pos, clipEnd, a.point, b.point);
            }
            else {
                if (clipEnd > pos && !sameValues(a.active, b.active))
                    comparator.compareRange(pos, clipEnd, a.active, b.active);
            }
            if (end > endB)
                break;
            if ((dEnd || a.openEnd != b.openEnd) && comparator.boundChange)
                comparator.boundChange(end);
            pos = end;
            if (diff <= 0)
                a.next();
            if (diff >= 0)
                b.next();
        }
    }
    function sameValues(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (a[i] != b[i] && !a[i].eq(b[i]))
                return false;
        return true;
    }
    function remove(array, index) {
        for (let i = index, e = array.length - 1; i < e; i++)
            array[i] = array[i + 1];
        array.pop();
    }
    function insert(array, index, value) {
        for (let i = array.length - 1; i >= index; i--)
            array[i + 1] = array[i];
        array[index] = value;
    }
    function findMinIndex(value, array) {
        let found = -1, foundPos = 1000000000 /* C.Far */;
        for (let i = 0; i < array.length; i++)
            if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
                found = i;
                foundPos = array[i];
            }
        return found;
    }

    /**
    Count the column position at the given offset into the string,
    taking extending characters and tab size into account.
    */
    function countColumn(string, tabSize, to = string.length) {
        let n = 0;
        for (let i = 0; i < to && i < string.length;) {
            if (string.charCodeAt(i) == 9) {
                n += tabSize - (n % tabSize);
                i++;
            }
            else {
                n++;
                i = findClusterBreak(string, i);
            }
        }
        return n;
    }
    /**
    Find the offset that corresponds to the given column position in a
    string, taking extending characters and tab size into account. By
    default, the string length is returned when it is too short to
    reach the column. Pass `strict` true to make it return -1 in that
    situation.
    */
    function findColumn(string, col, tabSize, strict) {
        for (let i = 0, n = 0;;) {
            if (n >= col)
                return i;
            if (i == string.length)
                break;
            n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
            i = findClusterBreak(string, i);
        }
        return strict === true ? -1 : string.length;
    }

    const C = "\u037c";
    const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
    const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
    const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

    // :: - Style modules encapsulate a set of CSS rules defined from
    // JavaScript. Their definitions are only available in a given DOM
    // root after it has been _mounted_ there with `StyleModule.mount`.
    //
    // Style modules should be created once and stored somewhere, as
    // opposed to re-creating them every time you need them. The amount of
    // CSS rules generated for a given DOM root is bounded by the amount
    // of style modules that were used. So to avoid leaking rules, don't
    // create these dynamically, but treat them as one-time allocations.
    class StyleModule {
      // :: (Object<Style>, ?{finish: ?(string) → string})
      // Create a style module from the given spec.
      //
      // When `finish` is given, it is called on regular (non-`@`)
      // selectors (after `&` expansion) to compute the final selector.
      constructor(spec, options) {
        this.rules = [];
        let {finish} = options || {};

        function splitSelector(selector) {
          return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
        }

        function render(selectors, spec, target, isKeyframes) {
          let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
          if (isAt && spec == null) return target.push(selectors[0] + ";")
          for (let prop in spec) {
            let value = spec[prop];
            if (/&/.test(prop)) {
              render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
                     value, target);
            } else if (value && typeof value == "object") {
              if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
              render(splitSelector(prop), value, local, keyframes);
            } else if (value != null) {
              local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
            }
          }
          if (local.length || keyframes) {
            target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
                        " {" + local.join(" ") + "}");
          }
        }

        for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
      }

      // :: () → string
      // Returns a string containing the module's CSS rules.
      getRules() { return this.rules.join("\n") }

      // :: () → string
      // Generate a new unique CSS class name.
      static newName() {
        let id = top[COUNT] || 1;
        top[COUNT] = id + 1;
        return C + id.toString(36)
      }

      // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
      //
      // Mount the given set of modules in the given DOM root, which ensures
      // that the CSS rules defined by the module are available in that
      // context.
      //
      // Rules are only added to the document once per root.
      //
      // Rule order will follow the order of the modules, so that rules from
      // modules later in the array take precedence of those from earlier
      // modules. If you call this function multiple times for the same root
      // in a way that changes the order of already mounted modules, the old
      // order will be changed.
      //
      // If a Content Security Policy nonce is provided, it is added to
      // the `<style>` tag generated by the library.
      static mount(root, modules, options) {
        let set = root[SET], nonce = options && options.nonce;
        if (!set) set = new StyleSet(root, nonce);
        else if (nonce) set.setNonce(nonce);
        set.mount(Array.isArray(modules) ? modules : [modules], root);
      }
    }

    let adoptedSet = new Map; //<Document, StyleSet>

    class StyleSet {
      constructor(root, nonce) {
        let doc = root.ownerDocument || root, win = doc.defaultView;
        if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
          let adopted = adoptedSet.get(doc);
          if (adopted) return root[SET] = adopted
          this.sheet = new win.CSSStyleSheet;
          adoptedSet.set(doc, this);
        } else {
          this.styleTag = doc.createElement("style");
          if (nonce) this.styleTag.setAttribute("nonce", nonce);
        }
        this.modules = [];
        root[SET] = this;
      }

      mount(modules, root) {
        let sheet = this.sheet;
        let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
        for (let i = 0; i < modules.length; i++) {
          let mod = modules[i], index = this.modules.indexOf(mod);
          if (index < j && index > -1) { // Ordering conflict
            this.modules.splice(index, 1);
            j--;
            index = -1;
          }
          if (index == -1) {
            this.modules.splice(j++, 0, mod);
            if (sheet) for (let k = 0; k < mod.rules.length; k++)
              sheet.insertRule(mod.rules[k], pos++);
          } else {
            while (j < index) pos += this.modules[j++].rules.length;
            pos += mod.rules.length;
            j++;
          }
        }

        if (sheet) {
          if (root.adoptedStyleSheets.indexOf(this.sheet) < 0)
            root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
        } else {
          let text = "";
          for (let i = 0; i < this.modules.length; i++)
            text += this.modules[i].getRules() + "\n";
          this.styleTag.textContent = text;
          let target = root.head || root;
          if (this.styleTag.parentNode != target)
            target.insertBefore(this.styleTag, target.firstChild);
        }
      }

      setNonce(nonce) {
        if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
          this.styleTag.setAttribute("nonce", nonce);
      }
    }

    // Style::Object<union<Style,string>>
    //
    // A style is an object that, in the simple case, maps CSS property
    // names to strings holding their values, as in `{color: "red",
    // fontWeight: "bold"}`. The property names can be given in
    // camel-case—the library will insert a dash before capital letters
    // when converting them to CSS.
    //
    // If you include an underscore in a property name, it and everything
    // after it will be removed from the output, which can be useful when
    // providing a property multiple times, for browser compatibility
    // reasons.
    //
    // A property in a style object can also be a sub-selector, which
    // extends the current context to add a pseudo-selector or a child
    // selector. Such a property should contain a `&` character, which
    // will be replaced by the current selector. For example `{"&:before":
    // {content: '"hi"'}}`. Sub-selectors and regular properties can
    // freely be mixed in a given object. Any property containing a `&` is
    // assumed to be a sub-selector.
    //
    // Finally, a property can specify an @-block to be wrapped around the
    // styles defined inside the object that's the property's value. For
    // example to create a media query you can do `{"@media screen and
    // (min-width: 400px)": {...}}`.

    var base = {
      8: "Backspace",
      9: "Tab",
      10: "Enter",
      12: "NumLock",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      44: "PrintScreen",
      45: "Insert",
      46: "Delete",
      59: ";",
      61: "=",
      91: "Meta",
      92: "Meta",
      106: "*",
      107: "+",
      108: ",",
      109: "-",
      110: ".",
      111: "/",
      144: "NumLock",
      145: "ScrollLock",
      160: "Shift",
      161: "Shift",
      162: "Control",
      163: "Control",
      164: "Alt",
      165: "Alt",
      173: "-",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'"
    };

    var shift = {
      48: ")",
      49: "!",
      50: "@",
      51: "#",
      52: "$",
      53: "%",
      54: "^",
      55: "&",
      56: "*",
      57: "(",
      59: ":",
      61: "+",
      173: "_",
      186: ":",
      187: "+",
      188: "<",
      189: "_",
      190: ">",
      191: "?",
      192: "~",
      219: "{",
      220: "|",
      221: "}",
      222: "\""
    };

    var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
    var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);

    // Fill in the digit keys
    for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

    // The function keys
    for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

    // And the alphabetic keys
    for (var i = 65; i <= 90; i++) {
      base[i] = String.fromCharCode(i + 32);
      shift[i] = String.fromCharCode(i);
    }

    // For each code that doesn't have a shift-equivalent, copy the base name
    for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

    function keyName(event) {
      // On macOS, keys held with Shift and Cmd don't reflect the effect of Shift in `.key`.
      // On IE, shift effect is never included in `.key`.
      var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey ||
          ie$1 && event.shiftKey && event.key && event.key.length == 1 ||
          event.key == "Unidentified";
      var name = (!ignoreKey && event.key) ||
        (event.shiftKey ? shift : base)[event.keyCode] ||
        event.key || "Unidentified";
      // Edge sometimes produces wrong names (Issue #3)
      if (name == "Esc") name = "Escape";
      if (name == "Del") name = "Delete";
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
      if (name == "Left") name = "ArrowLeft";
      if (name == "Up") name = "ArrowUp";
      if (name == "Right") name = "ArrowRight";
      if (name == "Down") name = "ArrowDown";
      return name
    }

    function crelt() {
      var elt = arguments[0];
      if (typeof elt == "string") elt = document.createElement(elt);
      var i = 1, next = arguments[1];
      if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
        for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
          var value = next[name];
          if (typeof value == "string") elt.setAttribute(name, value);
          else if (value != null) elt[name] = value;
        }
        i++;
      }
      for (; i < arguments.length; i++) add(elt, arguments[i]);
      return elt
    }

    function add(elt, child) {
      if (typeof child == "string") {
        elt.appendChild(document.createTextNode(child));
      } else if (child == null) ; else if (child.nodeType != null) {
        elt.appendChild(child);
      } else if (Array.isArray(child)) {
        for (var i = 0; i < child.length; i++) add(elt, child[i]);
      } else {
        throw new RangeError("Unsupported child node: " + child)
      }
    }

    function getSelection(root) {
        let target;
        // Browsers differ on whether shadow roots have a getSelection
        // method. If it exists, use that, otherwise, call it on the
        // document.
        if (root.nodeType == 11) { // Shadow root
            target = root.getSelection ? root : root.ownerDocument;
        }
        else {
            target = root;
        }
        return target.getSelection();
    }
    function contains(dom, node) {
        return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
    }
    function hasSelection(dom, selection) {
        if (!selection.anchorNode)
            return false;
        try {
            // Firefox will raise 'permission denied' errors when accessing
            // properties of `sel.anchorNode` when it's in a generated CSS
            // element.
            return contains(dom, selection.anchorNode);
        }
        catch (_) {
            return false;
        }
    }
    function clientRectsFor(dom) {
        if (dom.nodeType == 3)
            return textRange(dom, 0, dom.nodeValue.length).getClientRects();
        else if (dom.nodeType == 1)
            return dom.getClientRects();
        else
            return [];
    }
    // Scans forward and backward through DOM positions equivalent to the
    // given one to see if the two are in the same place (i.e. after a
    // text node vs at the end of that text node)
    function isEquivalentPosition(node, off, targetNode, targetOff) {
        return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
            scanFor(node, off, targetNode, targetOff, 1)) : false;
    }
    function domIndex(node) {
        for (var index = 0;; index++) {
            node = node.previousSibling;
            if (!node)
                return index;
        }
    }
    function isBlockElement(node) {
        return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
    }
    function scanFor(node, off, targetNode, targetOff, dir) {
        for (;;) {
            if (node == targetNode && off == targetOff)
                return true;
            if (off == (dir < 0 ? 0 : maxOffset(node))) {
                if (node.nodeName == "DIV")
                    return false;
                let parent = node.parentNode;
                if (!parent || parent.nodeType != 1)
                    return false;
                off = domIndex(node) + (dir < 0 ? 0 : 1);
                node = parent;
            }
            else if (node.nodeType == 1) {
                node = node.childNodes[off + (dir < 0 ? -1 : 0)];
                if (node.nodeType == 1 && node.contentEditable == "false")
                    return false;
                off = dir < 0 ? maxOffset(node) : 0;
            }
            else {
                return false;
            }
        }
    }
    function maxOffset(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    function flattenRect(rect, left) {
        let x = left ? rect.left : rect.right;
        return { left: x, right: x, top: rect.top, bottom: rect.bottom };
    }
    function windowRect(win) {
        let vp = win.visualViewport;
        if (vp)
            return {
                left: 0, right: vp.width,
                top: 0, bottom: vp.height
            };
        return { left: 0, right: win.innerWidth,
            top: 0, bottom: win.innerHeight };
    }
    function getScale(elt, rect) {
        let scaleX = rect.width / elt.offsetWidth;
        let scaleY = rect.height / elt.offsetHeight;
        if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1)
            scaleX = 1;
        if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1)
            scaleY = 1;
        return { scaleX, scaleY };
    }
    function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
        let doc = dom.ownerDocument, win = doc.defaultView || window;
        for (let cur = dom, stop = false; cur && !stop;) {
            if (cur.nodeType == 1) { // Element
                let bounding, top = cur == doc.body;
                let scaleX = 1, scaleY = 1;
                if (top) {
                    bounding = windowRect(win);
                }
                else {
                    if (/^(fixed|sticky)$/.test(getComputedStyle(cur).position))
                        stop = true;
                    if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                        cur = cur.assignedSlot || cur.parentNode;
                        continue;
                    }
                    let rect = cur.getBoundingClientRect();
                    ({ scaleX, scaleY } = getScale(cur, rect));
                    // Make sure scrollbar width isn't included in the rectangle
                    bounding = { left: rect.left, right: rect.left + cur.clientWidth * scaleX,
                        top: rect.top, bottom: rect.top + cur.clientHeight * scaleY };
                }
                let moveX = 0, moveY = 0;
                if (y == "nearest") {
                    if (rect.top < bounding.top) {
                        moveY = rect.top - (bounding.top + yMargin);
                        if (side > 0 && rect.bottom > bounding.bottom + moveY)
                            moveY = rect.bottom - bounding.bottom + yMargin;
                    }
                    else if (rect.bottom > bounding.bottom) {
                        moveY = rect.bottom - bounding.bottom + yMargin;
                        if (side < 0 && (rect.top - moveY) < bounding.top)
                            moveY = rect.top - (bounding.top + yMargin);
                    }
                }
                else {
                    let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
                    let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :
                        y == "start" || y == "center" && side < 0 ? rect.top - yMargin :
                            rect.bottom - boundingHeight + yMargin;
                    moveY = targetTop - bounding.top;
                }
                if (x == "nearest") {
                    if (rect.left < bounding.left) {
                        moveX = rect.left - (bounding.left + xMargin);
                        if (side > 0 && rect.right > bounding.right + moveX)
                            moveX = rect.right - bounding.right + xMargin;
                    }
                    else if (rect.right > bounding.right) {
                        moveX = rect.right - bounding.right + xMargin;
                        if (side < 0 && rect.left < bounding.left + moveX)
                            moveX = rect.left - (bounding.left + xMargin);
                    }
                }
                else {
                    let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :
                        (x == "start") == ltr ? rect.left - xMargin :
                            rect.right - (bounding.right - bounding.left) + xMargin;
                    moveX = targetLeft - bounding.left;
                }
                if (moveX || moveY) {
                    if (top) {
                        win.scrollBy(moveX, moveY);
                    }
                    else {
                        let movedX = 0, movedY = 0;
                        if (moveY) {
                            let start = cur.scrollTop;
                            cur.scrollTop += moveY / scaleY;
                            movedY = (cur.scrollTop - start) * scaleY;
                        }
                        if (moveX) {
                            let start = cur.scrollLeft;
                            cur.scrollLeft += moveX / scaleX;
                            movedX = (cur.scrollLeft - start) * scaleX;
                        }
                        rect = { left: rect.left - movedX, top: rect.top - movedY,
                            right: rect.right - movedX, bottom: rect.bottom - movedY };
                        if (movedX && Math.abs(movedX - moveX) < 1)
                            x = "nearest";
                        if (movedY && Math.abs(movedY - moveY) < 1)
                            y = "nearest";
                    }
                }
                if (top)
                    break;
                if (rect.top < bounding.top || rect.bottom > bounding.bottom ||
                    rect.left < bounding.left || rect.right > bounding.right)
                    rect = { left: Math.max(rect.left, bounding.left), right: Math.min(rect.right, bounding.right),
                        top: Math.max(rect.top, bounding.top), bottom: Math.min(rect.bottom, bounding.bottom) };
                cur = cur.assignedSlot || cur.parentNode;
            }
            else if (cur.nodeType == 11) { // A shadow root
                cur = cur.host;
            }
            else {
                break;
            }
        }
    }
    function scrollableParents(dom) {
        let doc = dom.ownerDocument, x, y;
        for (let cur = dom.parentNode; cur;) {
            if (cur == doc.body || (x && y)) {
                break;
            }
            else if (cur.nodeType == 1) {
                if (!y && cur.scrollHeight > cur.clientHeight)
                    y = cur;
                if (!x && cur.scrollWidth > cur.clientWidth)
                    x = cur;
                cur = cur.assignedSlot || cur.parentNode;
            }
            else if (cur.nodeType == 11) {
                cur = cur.host;
            }
            else {
                break;
            }
        }
        return { x, y };
    }
    class DOMSelectionState {
        constructor() {
            this.anchorNode = null;
            this.anchorOffset = 0;
            this.focusNode = null;
            this.focusOffset = 0;
        }
        eq(domSel) {
            return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
                this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
        }
        setRange(range) {
            let { anchorNode, focusNode } = range;
            // Clip offsets to node size to avoid crashes when Safari reports bogus offsets (#1152)
            this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
        }
        set(anchorNode, anchorOffset, focusNode, focusOffset) {
            this.anchorNode = anchorNode;
            this.anchorOffset = anchorOffset;
            this.focusNode = focusNode;
            this.focusOffset = focusOffset;
        }
    }
    let preventScrollSupported = null;
    // Feature-detects support for .focus({preventScroll: true}), and uses
    // a fallback kludge when not supported.
    function focusPreventScroll(dom) {
        if (dom.setActive)
            return dom.setActive(); // in IE
        if (preventScrollSupported)
            return dom.focus(preventScrollSupported);
        let stack = [];
        for (let cur = dom; cur; cur = cur.parentNode) {
            stack.push(cur, cur.scrollTop, cur.scrollLeft);
            if (cur == cur.ownerDocument)
                break;
        }
        dom.focus(preventScrollSupported == null ? {
            get preventScroll() {
                preventScrollSupported = { preventScroll: true };
                return true;
            }
        } : undefined);
        if (!preventScrollSupported) {
            preventScrollSupported = false;
            for (let i = 0; i < stack.length;) {
                let elt = stack[i++], top = stack[i++], left = stack[i++];
                if (elt.scrollTop != top)
                    elt.scrollTop = top;
                if (elt.scrollLeft != left)
                    elt.scrollLeft = left;
            }
        }
    }
    let scratchRange;
    function textRange(node, from, to = from) {
        let range = scratchRange || (scratchRange = document.createRange());
        range.setEnd(node, to);
        range.setStart(node, from);
        return range;
    }
    function dispatchKey(elt, name, code, mods) {
        let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
        if (mods)
            ({ altKey: options.altKey, ctrlKey: options.ctrlKey, shiftKey: options.shiftKey, metaKey: options.metaKey } = mods);
        let down = new KeyboardEvent("keydown", options);
        down.synthetic = true;
        elt.dispatchEvent(down);
        let up = new KeyboardEvent("keyup", options);
        up.synthetic = true;
        elt.dispatchEvent(up);
        return down.defaultPrevented || up.defaultPrevented;
    }
    function getRoot(node) {
        while (node) {
            if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
                return node;
            node = node.assignedSlot || node.parentNode;
        }
        return null;
    }
    function clearAttributes(node) {
        while (node.attributes.length)
            node.removeAttributeNode(node.attributes[0]);
    }
    function atElementStart(doc, selection) {
        let node = selection.focusNode, offset = selection.focusOffset;
        if (!node || selection.anchorNode != node || selection.anchorOffset != offset)
            return false;
        // Safari can report bogus offsets (#1152)
        offset = Math.min(offset, maxOffset(node));
        for (;;) {
            if (offset) {
                if (node.nodeType != 1)
                    return false;
                let prev = node.childNodes[offset - 1];
                if (prev.contentEditable == "false")
                    offset--;
                else {
                    node = prev;
                    offset = maxOffset(node);
                }
            }
            else if (node == doc) {
                return true;
            }
            else {
                offset = domIndex(node);
                node = node.parentNode;
            }
        }
    }
    function isScrolledToBottom(elt) {
        return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
    }
    function textNodeBefore(startNode, startOffset) {
        for (let node = startNode, offset = startOffset;;) {
            if (node.nodeType == 3 && offset > 0) {
                return { node: node, offset: offset };
            }
            else if (node.nodeType == 1 && offset > 0) {
                if (node.contentEditable == "false")
                    return null;
                node = node.childNodes[offset - 1];
                offset = maxOffset(node);
            }
            else if (node.parentNode && !isBlockElement(node)) {
                offset = domIndex(node);
                node = node.parentNode;
            }
            else {
                return null;
            }
        }
    }
    function textNodeAfter(startNode, startOffset) {
        for (let node = startNode, offset = startOffset;;) {
            if (node.nodeType == 3 && offset < node.nodeValue.length) {
                return { node: node, offset: offset };
            }
            else if (node.nodeType == 1 && offset < node.childNodes.length) {
                if (node.contentEditable == "false")
                    return null;
                node = node.childNodes[offset];
                offset = 0;
            }
            else if (node.parentNode && !isBlockElement(node)) {
                offset = domIndex(node) + 1;
                node = node.parentNode;
            }
            else {
                return null;
            }
        }
    }

    class DOMPos {
        constructor(node, offset, precise = true) {
            this.node = node;
            this.offset = offset;
            this.precise = precise;
        }
        static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
        static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
    }
    const noChildren = [];
    class ContentView {
        constructor() {
            this.parent = null;
            this.dom = null;
            this.flags = 2 /* ViewFlag.NodeDirty */;
        }
        get overrideDOMText() { return null; }
        get posAtStart() {
            return this.parent ? this.parent.posBefore(this) : 0;
        }
        get posAtEnd() {
            return this.posAtStart + this.length;
        }
        posBefore(view) {
            let pos = this.posAtStart;
            for (let child of this.children) {
                if (child == view)
                    return pos;
                pos += child.length + child.breakAfter;
            }
            throw new RangeError("Invalid child in posBefore");
        }
        posAfter(view) {
            return this.posBefore(view) + view.length;
        }
        sync(view, track) {
            if (this.flags & 2 /* ViewFlag.NodeDirty */) {
                let parent = this.dom;
                let prev = null, next;
                for (let child of this.children) {
                    if (child.flags & 7 /* ViewFlag.Dirty */) {
                        if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                            let contentView = ContentView.get(next);
                            if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
                                child.reuseDOM(next);
                        }
                        child.sync(view, track);
                        child.flags &= -8 /* ViewFlag.Dirty */;
                    }
                    next = prev ? prev.nextSibling : parent.firstChild;
                    if (track && !track.written && track.node == parent && next != child.dom)
                        track.written = true;
                    if (child.dom.parentNode == parent) {
                        while (next && next != child.dom)
                            next = rm$1(next);
                    }
                    else {
                        parent.insertBefore(child.dom, next);
                    }
                    prev = child.dom;
                }
                next = prev ? prev.nextSibling : parent.firstChild;
                if (next && track && track.node == parent)
                    track.written = true;
                while (next)
                    next = rm$1(next);
            }
            else if (this.flags & 1 /* ViewFlag.ChildDirty */) {
                for (let child of this.children)
                    if (child.flags & 7 /* ViewFlag.Dirty */) {
                        child.sync(view, track);
                        child.flags &= -8 /* ViewFlag.Dirty */;
                    }
            }
        }
        reuseDOM(_dom) { }
        localPosFromDOM(node, offset) {
            let after;
            if (node == this.dom) {
                after = this.dom.childNodes[offset];
            }
            else {
                let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
                for (;;) {
                    let parent = node.parentNode;
                    if (parent == this.dom)
                        break;
                    if (bias == 0 && parent.firstChild != parent.lastChild) {
                        if (node == parent.firstChild)
                            bias = -1;
                        else
                            bias = 1;
                    }
                    node = parent;
                }
                if (bias < 0)
                    after = node;
                else
                    after = node.nextSibling;
            }
            if (after == this.dom.firstChild)
                return 0;
            while (after && !ContentView.get(after))
                after = after.nextSibling;
            if (!after)
                return this.length;
            for (let i = 0, pos = 0;; i++) {
                let child = this.children[i];
                if (child.dom == after)
                    return pos;
                pos += child.length + child.breakAfter;
            }
        }
        domBoundsAround(from, to, offset = 0) {
            let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
            for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos < from && end > to)
                    return child.domBoundsAround(from, to, pos);
                if (end >= from && fromI == -1) {
                    fromI = i;
                    fromStart = pos;
                }
                if (pos > to && child.dom.parentNode == this.dom) {
                    toI = i;
                    toEnd = prevEnd;
                    break;
                }
                prevEnd = end;
                pos = end + child.breakAfter;
            }
            return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,
                startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
                endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };
        }
        markDirty(andParent = false) {
            this.flags |= 2 /* ViewFlag.NodeDirty */;
            this.markParentsDirty(andParent);
        }
        markParentsDirty(childList) {
            for (let parent = this.parent; parent; parent = parent.parent) {
                if (childList)
                    parent.flags |= 2 /* ViewFlag.NodeDirty */;
                if (parent.flags & 1 /* ViewFlag.ChildDirty */)
                    return;
                parent.flags |= 1 /* ViewFlag.ChildDirty */;
                childList = false;
            }
        }
        setParent(parent) {
            if (this.parent != parent) {
                this.parent = parent;
                if (this.flags & 7 /* ViewFlag.Dirty */)
                    this.markParentsDirty(true);
            }
        }
        setDOM(dom) {
            if (this.dom == dom)
                return;
            if (this.dom)
                this.dom.cmView = null;
            this.dom = dom;
            dom.cmView = this;
        }
        get rootView() {
            for (let v = this;;) {
                let parent = v.parent;
                if (!parent)
                    return v;
                v = parent;
            }
        }
        replaceChildren(from, to, children = noChildren) {
            this.markDirty();
            for (let i = from; i < to; i++) {
                let child = this.children[i];
                if (child.parent == this && children.indexOf(child) < 0)
                    child.destroy();
            }
            if (children.length < 250)
                this.children.splice(from, to - from, ...children);
            else
                this.children = [].concat(this.children.slice(0, from), children, this.children.slice(to));
            for (let i = 0; i < children.length; i++)
                children[i].setParent(this);
        }
        ignoreMutation(_rec) { return false; }
        ignoreEvent(_event) { return false; }
        childCursor(pos = this.length) {
            return new ChildCursor(this.children, pos, this.children.length);
        }
        childPos(pos, bias = 1) {
            return this.childCursor().findPos(pos, bias);
        }
        toString() {
            let name = this.constructor.name.replace("View", "");
            return name + (this.children.length ? "(" + this.children.join() + ")" :
                this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
                (this.breakAfter ? "#" : "");
        }
        static get(node) { return node.cmView; }
        get isEditable() { return true; }
        get isWidget() { return false; }
        get isHidden() { return false; }
        merge(from, to, source, hasStart, openStart, openEnd) {
            return false;
        }
        become(other) { return false; }
        canReuseDOM(other) {
            return other.constructor == this.constructor && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
        }
        // When this is a zero-length view with a side, this should return a
        // number <= 0 to indicate it is before its position, or a
        // number > 0 when after its position.
        getSide() { return 0; }
        destroy() {
            for (let child of this.children)
                if (child.parent == this)
                    child.destroy();
            this.parent = null;
        }
    }
    ContentView.prototype.breakAfter = 0;
    // Remove a DOM node and return its next sibling.
    function rm$1(dom) {
        let next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
    }
    class ChildCursor {
        constructor(children, pos, i) {
            this.children = children;
            this.pos = pos;
            this.i = i;
            this.off = 0;
        }
        findPos(pos, bias = 1) {
            for (;;) {
                if (pos > this.pos || pos == this.pos &&
                    (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                    this.off = pos - this.pos;
                    return this;
                }
                let next = this.children[--this.i];
                this.pos -= next.length + next.breakAfter;
            }
        }
    }
    function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
        let { children } = parent;
        let before = children.length ? children[fromI] : null;
        let last = insert.length ? insert[insert.length - 1] : null;
        let breakAtEnd = last ? last.breakAfter : breakAtStart;
        // Change within a single child
        if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&
            before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))
            return;
        if (toI < children.length) {
            let after = children[toI];
            // Make sure the end of the child after the update is preserved in `after`
            if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
                // If we're splitting a child, separate part of it to avoid that
                // being mangled when updating the child before the update.
                if (fromI == toI) {
                    after = after.split(toOff);
                    toOff = 0;
                }
                // If the element after the replacement should be merged with
                // the last replacing element, update `content`
                if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                    insert[insert.length - 1] = after;
                }
                else {
                    // Remove the start of the after element, if necessary, and
                    // add it to `content`.
                    if (toOff || after.children.length && !after.children[0].length)
                        after.merge(0, toOff, null, false, 0, openEnd);
                    insert.push(after);
                }
            }
            else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
                // The element at `toI` is entirely covered by this range.
                // Preserve its line break, if any.
                if (last)
                    last.breakAfter = 1;
                else
                    breakAtStart = 1;
            }
            // Since we've handled the next element from the current elements
            // now, make sure `toI` points after that.
            toI++;
        }
        if (before) {
            before.breakAfter = breakAtStart;
            if (fromOff > 0) {
                if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
                    before.breakAfter = insert.shift().breakAfter;
                }
                else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                    before.merge(fromOff, before.length, null, false, openStart, 0);
                }
                fromI++;
            }
        }
        // Try to merge widgets on the boundaries of the replacement
        while (fromI < toI && insert.length) {
            if (children[toI - 1].become(insert[insert.length - 1])) {
                toI--;
                insert.pop();
                openEnd = insert.length ? 0 : openStart;
            }
            else if (children[fromI].become(insert[0])) {
                fromI++;
                insert.shift();
                openStart = insert.length ? 0 : openEnd;
            }
            else {
                break;
            }
        }
        if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&
            children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
            fromI--;
        if (fromI < toI || insert.length)
            parent.replaceChildren(fromI, toI, insert);
    }
    function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
        let cur = parent.childCursor();
        let { i: toI, off: toOff } = cur.findPos(to, 1);
        let { i: fromI, off: fromOff } = cur.findPos(from, -1);
        let dLen = from - to;
        for (let view of insert)
            dLen += view.length;
        parent.length += dLen;
        replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
    }

    let nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
    let doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
    const ie_edge = /*@__PURE__*//Edge\/(\d+)/.exec(nav.userAgent);
    const ie_upto10 = /*@__PURE__*//MSIE \d/.test(nav.userAgent);
    const ie_11up = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
    const ie = !!(ie_upto10 || ie_11up || ie_edge);
    const gecko = !ie && /*@__PURE__*//gecko\/(\d+)/i.test(nav.userAgent);
    const chrome = !ie && /*@__PURE__*//Chrome\/(\d+)/.exec(nav.userAgent);
    const webkit = "webkitFontSmoothing" in doc.documentElement.style;
    const safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);
    const ios = safari && (/*@__PURE__*//Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
    var browser = {
        mac: ios || /*@__PURE__*//Mac/.test(nav.platform),
        windows: /*@__PURE__*//Win/.test(nav.platform),
        linux: /*@__PURE__*//Linux|X11/.test(nav.platform),
        ie,
        ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
        gecko,
        gecko_version: gecko ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
        chrome: !!chrome,
        chrome_version: chrome ? +chrome[1] : 0,
        ios,
        android: /*@__PURE__*//Android\b/.test(nav.userAgent),
        safari,
        webkit_version: webkit ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
        tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
    };

    const MaxJoinLen = 256;
    class TextView extends ContentView {
        constructor(text) {
            super();
            this.text = text;
        }
        get length() { return this.text.length; }
        createDOM(textDOM) {
            this.setDOM(textDOM || document.createTextNode(this.text));
        }
        sync(view, track) {
            if (!this.dom)
                this.createDOM();
            if (this.dom.nodeValue != this.text) {
                if (track && track.node == this.dom)
                    track.written = true;
                this.dom.nodeValue = this.text;
            }
        }
        reuseDOM(dom) {
            if (dom.nodeType == 3)
                this.createDOM(dom);
        }
        merge(from, to, source) {
            if ((this.flags & 8 /* ViewFlag.Composition */) ||
                source && (!(source instanceof TextView) ||
                    this.length - (to - from) + source.length > MaxJoinLen ||
                    (source.flags & 8 /* ViewFlag.Composition */)))
                return false;
            this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
            this.markDirty();
            return true;
        }
        split(from) {
            let result = new TextView(this.text.slice(from));
            this.text = this.text.slice(0, from);
            this.markDirty();
            result.flags |= this.flags & 8 /* ViewFlag.Composition */;
            return result;
        }
        localPosFromDOM(node, offset) {
            return node == this.dom ? offset : offset ? this.text.length : 0;
        }
        domAtPos(pos) { return new DOMPos(this.dom, pos); }
        domBoundsAround(_from, _to, offset) {
            return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
        }
        coordsAt(pos, side) {
            return textCoords(this.dom, pos, side);
        }
    }
    class MarkView extends ContentView {
        constructor(mark, children = [], length = 0) {
            super();
            this.mark = mark;
            this.children = children;
            this.length = length;
            for (let ch of children)
                ch.setParent(this);
        }
        setAttrs(dom) {
            clearAttributes(dom);
            if (this.mark.class)
                dom.className = this.mark.class;
            if (this.mark.attrs)
                for (let name in this.mark.attrs)
                    dom.setAttribute(name, this.mark.attrs[name]);
            return dom;
        }
        canReuseDOM(other) {
            return super.canReuseDOM(other) && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
        }
        reuseDOM(node) {
            if (node.nodeName == this.mark.tagName.toUpperCase()) {
                this.setDOM(node);
                this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
            }
        }
        sync(view, track) {
            if (!this.dom)
                this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
            else if (this.flags & 4 /* ViewFlag.AttrsDirty */)
                this.setAttrs(this.dom);
            super.sync(view, track);
        }
        merge(from, to, source, _hasStart, openStart, openEnd) {
            if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
                (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
                return false;
            mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart - 1, openEnd - 1);
            this.markDirty();
            return true;
        }
        split(from) {
            let result = [], off = 0, detachFrom = -1, i = 0;
            for (let elt of this.children) {
                let end = off + elt.length;
                if (end > from)
                    result.push(off < from ? elt.split(from - off) : elt);
                if (detachFrom < 0 && off >= from)
                    detachFrom = i;
                off = end;
                i++;
            }
            let length = this.length - from;
            this.length = from;
            if (detachFrom > -1) {
                this.children.length = detachFrom;
                this.markDirty();
            }
            return new MarkView(this.mark, result, length);
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this, pos);
        }
        coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
        }
    }
    function textCoords(text, pos, side) {
        let length = text.nodeValue.length;
        if (pos > length)
            pos = length;
        let from = pos, to = pos, flatten = 0;
        if (pos == 0 && side < 0 || pos == length && side >= 0) {
            if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
                if (pos) {
                    from--;
                    flatten = 1;
                } // FIXME this is wrong in RTL text
                else if (to < length) {
                    to++;
                    flatten = -1;
                }
            }
        }
        else {
            if (side < 0)
                from--;
            else if (to < length)
                to++;
        }
        let rects = textRange(text, from, to).getClientRects();
        if (!rects.length)
            return null;
        let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
        if (browser.safari && !flatten && rect.width == 0)
            rect = Array.prototype.find.call(rects, r => r.width) || rect;
        return flatten ? flattenRect(rect, flatten < 0) : rect || null;
    }
    // Also used for collapsed ranges that don't have a placeholder widget!
    class WidgetView extends ContentView {
        static create(widget, length, side) {
            return new WidgetView(widget, length, side);
        }
        constructor(widget, length, side) {
            super();
            this.widget = widget;
            this.length = length;
            this.side = side;
            this.prevWidget = null;
        }
        split(from) {
            let result = WidgetView.create(this.widget, this.length - from, this.side);
            this.length -= from;
            return result;
        }
        sync(view) {
            if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
                if (this.dom && this.prevWidget)
                    this.prevWidget.destroy(this.dom);
                this.prevWidget = null;
                this.setDOM(this.widget.toDOM(view));
                if (!this.widget.editable)
                    this.dom.contentEditable = "false";
            }
        }
        getSide() { return this.side; }
        merge(from, to, source, hasStart, openStart, openEnd) {
            if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        become(other) {
            if (other instanceof WidgetView && other.side == this.side &&
                this.widget.constructor == other.widget.constructor) {
                if (!this.widget.compare(other.widget))
                    this.markDirty(true);
                if (this.dom && !this.prevWidget)
                    this.prevWidget = this.widget;
                this.widget = other.widget;
                this.length = other.length;
                return true;
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        get overrideDOMText() {
            if (this.length == 0)
                return Text.empty;
            let top = this;
            while (top.parent)
                top = top.parent;
            let { view } = top, text = view && view.state.doc, start = this.posAtStart;
            return text ? text.slice(start, start + this.length) : Text.empty;
        }
        domAtPos(pos) {
            return (this.length ? pos == 0 : this.side > 0)
                ? DOMPos.before(this.dom)
                : DOMPos.after(this.dom, pos == this.length);
        }
        domBoundsAround() { return null; }
        coordsAt(pos, side) {
            let custom = this.widget.coordsAt(this.dom, pos, side);
            if (custom)
                return custom;
            let rects = this.dom.getClientRects(), rect = null;
            if (!rects.length)
                return null;
            let fromBack = this.side ? this.side < 0 : pos > 0;
            for (let i = fromBack ? rects.length - 1 : 0;; i += (fromBack ? -1 : 1)) {
                rect = rects[i];
                if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
                    break;
            }
            return flattenRect(rect, !fromBack);
        }
        get isEditable() { return false; }
        get isWidget() { return true; }
        get isHidden() { return this.widget.isHidden; }
        destroy() {
            super.destroy();
            if (this.dom)
                this.widget.destroy(this.dom);
        }
    }
    // These are drawn around uneditable widgets to avoid a number of
    // browser bugs that show up when the cursor is directly next to
    // uneditable inline content.
    class WidgetBufferView extends ContentView {
        constructor(side) {
            super();
            this.side = side;
        }
        get length() { return 0; }
        merge() { return false; }
        become(other) {
            return other instanceof WidgetBufferView && other.side == this.side;
        }
        split() { return new WidgetBufferView(this.side); }
        sync() {
            if (!this.dom) {
                let dom = document.createElement("img");
                dom.className = "cm-widgetBuffer";
                dom.setAttribute("aria-hidden", "true");
                this.setDOM(dom);
            }
        }
        getSide() { return this.side; }
        domAtPos(pos) { return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom); }
        localPosFromDOM() { return 0; }
        domBoundsAround() { return null; }
        coordsAt(pos) {
            return this.dom.getBoundingClientRect();
        }
        get overrideDOMText() {
            return Text.empty;
        }
        get isHidden() { return true; }
    }
    TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
    function inlineDOMAtPos(parent, pos) {
        let dom = parent.dom, { children } = parent, i = 0;
        for (let off = 0; i < children.length; i++) {
            let child = children[i], end = off + child.length;
            if (end == off && child.getSide() <= 0)
                continue;
            if (pos > off && pos < end && child.dom.parentNode == dom)
                return child.domAtPos(pos - off);
            if (pos <= off)
                break;
            off = end;
        }
        for (let j = i; j > 0; j--) {
            let prev = children[j - 1];
            if (prev.dom.parentNode == dom)
                return prev.domAtPos(prev.length);
        }
        for (let j = i; j < children.length; j++) {
            let next = children[j];
            if (next.dom.parentNode == dom)
                return next.domAtPos(0);
        }
        return new DOMPos(dom, 0);
    }
    // Assumes `view`, if a mark view, has precisely 1 child.
    function joinInlineInto(parent, view, open) {
        let last, { children } = parent;
        if (open > 0 && view instanceof MarkView && children.length &&
            (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
            joinInlineInto(last, view.children[0], open - 1);
        }
        else {
            children.push(view);
            view.setParent(parent);
        }
        parent.length += view.length;
    }
    function coordsInChildren(view, pos, side) {
        let before = null, beforePos = -1, after = null, afterPos = -1;
        function scan(view, pos) {
            for (let i = 0, off = 0; i < view.children.length && off <= pos; i++) {
                let child = view.children[i], end = off + child.length;
                if (end >= pos) {
                    if (child.children.length) {
                        scan(child, pos - off);
                    }
                    else if ((!after || after.isHidden && (side > 0 || onSameLine(after, child))) &&
                        (end > pos || off == end && child.getSide() > 0)) {
                        after = child;
                        afterPos = pos - off;
                    }
                    else if (off < pos || (off == end && child.getSide() < 0) && !child.isHidden) {
                        before = child;
                        beforePos = pos - off;
                    }
                }
                off = end;
            }
        }
        scan(view, pos);
        let target = (side < 0 ? before : after) || before || after;
        if (target)
            return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
        return fallbackRect(view);
    }
    function fallbackRect(view) {
        let last = view.dom.lastChild;
        if (!last)
            return view.dom.getBoundingClientRect();
        let rects = clientRectsFor(last);
        return rects[rects.length - 1] || null;
    }
    function onSameLine(a, b) {
        let posA = a.coordsAt(0, 1), posB = b.coordsAt(0, 1);
        return posA && posB && posB.top < posA.bottom;
    }

    function combineAttrs(source, target) {
        for (let name in source) {
            if (name == "class" && target.class)
                target.class += " " + source.class;
            else if (name == "style" && target.style)
                target.style += ";" + source.style;
            else
                target[name] = source[name];
        }
        return target;
    }
    const noAttrs$1 = /*@__PURE__*/Object.create(null);
    function attrsEq(a, b, ignore) {
        if (a == b)
            return true;
        if (!a)
            a = noAttrs$1;
        if (!b)
            b = noAttrs$1;
        let keysA = Object.keys(a), keysB = Object.keys(b);
        if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) !=
            keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
            return false;
        for (let key of keysA) {
            if (key != ignore && (keysB.indexOf(key) == -1 || a[key] !== b[key]))
                return false;
        }
        return true;
    }
    function updateAttrs(dom, prev, attrs) {
        let changed = false;
        if (prev)
            for (let name in prev)
                if (!(attrs && name in attrs)) {
                    changed = true;
                    if (name == "style")
                        dom.style.cssText = "";
                    else
                        dom.removeAttribute(name);
                }
        if (attrs)
            for (let name in attrs)
                if (!(prev && prev[name] == attrs[name])) {
                    changed = true;
                    if (name == "style")
                        dom.style.cssText = attrs[name];
                    else
                        dom.setAttribute(name, attrs[name]);
                }
        return changed;
    }
    function getAttrs(dom) {
        let attrs = Object.create(null);
        for (let i = 0; i < dom.attributes.length; i++) {
            let attr = dom.attributes[i];
            attrs[attr.name] = attr.value;
        }
        return attrs;
    }

    /**
    Widgets added to the content are described by subclasses of this
    class. Using a description object like that makes it possible to
    delay creating of the DOM structure for a widget until it is
    needed, and to avoid redrawing widgets even if the decorations
    that define them are recreated.
    */
    class WidgetType {
        /**
        Compare this instance to another instance of the same type.
        (TypeScript can't express this, but only instances of the same
        specific class will be passed to this method.) This is used to
        avoid redrawing widgets when they are replaced by a new
        decoration of the same type. The default implementation just
        returns `false`, which will cause new instances of the widget to
        always be redrawn.
        */
        eq(widget) { return false; }
        /**
        Update a DOM element created by a widget of the same type (but
        different, non-`eq` content) to reflect this widget. May return
        true to indicate that it could update, false to indicate it
        couldn't (in which case the widget will be redrawn). The default
        implementation just returns false.
        */
        updateDOM(dom, view) { return false; }
        /**
        @internal
        */
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        The estimated height this widget will have, to be used when
        estimating the height of content that hasn't been drawn. May
        return -1 to indicate you don't know. The default implementation
        returns -1.
        */
        get estimatedHeight() { return -1; }
        /**
        For inline widgets that are displayed inline (as opposed to
        `inline-block`) and introduce line breaks (through `<br>` tags
        or textual newlines), this must indicate the amount of line
        breaks they introduce. Defaults to 0.
        */
        get lineBreaks() { return 0; }
        /**
        Can be used to configure which kinds of events inside the widget
        should be ignored by the editor. The default is to ignore all
        events.
        */
        ignoreEvent(event) { return true; }
        /**
        Override the way screen coordinates for positions at/in the
        widget are found. `pos` will be the offset into the widget, and
        `side` the side of the position that is being queried—less than
        zero for before, greater than zero for after, and zero for
        directly at that position.
        */
        coordsAt(dom, pos, side) { return null; }
        /**
        @internal
        */
        get isHidden() { return false; }
        /**
        @internal
        */
        get editable() { return false; }
        /**
        This is called when the an instance of the widget is removed
        from the editor view.
        */
        destroy(dom) { }
    }
    /**
    The different types of blocks that can occur in an editor view.
    */
    var BlockType = /*@__PURE__*/(function (BlockType) {
        /**
        A line of text.
        */
        BlockType[BlockType["Text"] = 0] = "Text";
        /**
        A block widget associated with the position after it.
        */
        BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
        /**
        A block widget associated with the position before it.
        */
        BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
        /**
        A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
        */
        BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
    return BlockType})(BlockType || (BlockType = {}));
    /**
    A decoration provides information on how to draw or style a piece
    of content. You'll usually use it wrapped in a
    [`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
    @nonabstract
    */
    class Decoration extends RangeValue {
        constructor(
        /**
        @internal
        */
        startSide, 
        /**
        @internal
        */
        endSide, 
        /**
        @internal
        */
        widget, 
        /**
        The config object used to create this decoration. You can
        include additional properties in there to store metadata about
        your decoration.
        */
        spec) {
            super();
            this.startSide = startSide;
            this.endSide = endSide;
            this.widget = widget;
            this.spec = spec;
        }
        /**
        @internal
        */
        get heightRelevant() { return false; }
        /**
        Create a mark decoration, which influences the styling of the
        content in its range. Nested mark decorations will cause nested
        DOM elements to be created. Nesting order is determined by
        precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
        the higher-precedence decorations creating the inner DOM nodes.
        Such elements are split on line boundaries and on the boundaries
        of lower-precedence decorations.
        */
        static mark(spec) {
            return new MarkDecoration(spec);
        }
        /**
        Create a widget decoration, which displays a DOM element at the
        given position.
        */
        static widget(spec) {
            let side = Math.max(-1e4, Math.min(10000, spec.side || 0)), block = !!spec.block;
            side += (block && !spec.inlineOrder)
                ? (side > 0 ? 300000000 /* Side.BlockAfter */ : -4e8 /* Side.BlockBefore */)
                : (side > 0 ? 100000000 /* Side.InlineAfter */ : -1e8 /* Side.InlineBefore */);
            return new PointDecoration(spec, side, side, block, spec.widget || null, false);
        }
        /**
        Create a replace decoration which replaces the given range with
        a widget, or simply hides it.
        */
        static replace(spec) {
            let block = !!spec.block, startSide, endSide;
            if (spec.isBlockGap) {
                startSide = -5e8 /* Side.GapStart */;
                endSide = 400000000 /* Side.GapEnd */;
            }
            else {
                let { start, end } = getInclusive(spec, block);
                startSide = (start ? (block ? -3e8 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */) : 500000000 /* Side.NonIncStart */) - 1;
                endSide = (end ? (block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */) : -6e8 /* Side.NonIncEnd */) + 1;
            }
            return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
        }
        /**
        Create a line decoration, which can add DOM attributes to the
        line starting at the given position.
        */
        static line(spec) {
            return new LineDecoration(spec);
        }
        /**
        Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
        decorated range or ranges. If the ranges aren't already sorted,
        pass `true` for `sort` to make the library sort them for you.
        */
        static set(of, sort = false) {
            return RangeSet.of(of, sort);
        }
        /**
        @internal
        */
        hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
    }
    /**
    The empty set of decorations.
    */
    Decoration.none = RangeSet.empty;
    class MarkDecoration extends Decoration {
        constructor(spec) {
            let { start, end } = getInclusive(spec);
            super(start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -6e8 /* Side.NonIncEnd */, null, spec);
            this.tagName = spec.tagName || "span";
            this.class = spec.class || "";
            this.attrs = spec.attributes || null;
        }
        eq(other) {
            var _a, _b;
            return this == other ||
                other instanceof MarkDecoration &&
                    this.tagName == other.tagName &&
                    (this.class || ((_a = this.attrs) === null || _a === void 0 ? void 0 : _a.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) &&
                    attrsEq(this.attrs, other.attrs, "class");
        }
        range(from, to = from) {
            if (from >= to)
                throw new RangeError("Mark decorations may not be empty");
            return super.range(from, to);
        }
    }
    MarkDecoration.prototype.point = false;
    class LineDecoration extends Decoration {
        constructor(spec) {
            super(-2e8 /* Side.Line */, -2e8 /* Side.Line */, null, spec);
        }
        eq(other) {
            return other instanceof LineDecoration &&
                this.spec.class == other.spec.class &&
                attrsEq(this.spec.attributes, other.spec.attributes);
        }
        range(from, to = from) {
            if (to != from)
                throw new RangeError("Line decoration ranges must be zero-length");
            return super.range(from, to);
        }
    }
    LineDecoration.prototype.mapMode = MapMode.TrackBefore;
    LineDecoration.prototype.point = true;
    class PointDecoration extends Decoration {
        constructor(spec, startSide, endSide, block, widget, isReplace) {
            super(startSide, endSide, widget, spec);
            this.block = block;
            this.isReplace = isReplace;
            this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
        }
        // Only relevant when this.block == true
        get type() {
            return this.startSide != this.endSide ? BlockType.WidgetRange
                : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
        }
        get heightRelevant() {
            return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
        }
        eq(other) {
            return other instanceof PointDecoration &&
                widgetsEq(this.widget, other.widget) &&
                this.block == other.block &&
                this.startSide == other.startSide && this.endSide == other.endSide;
        }
        range(from, to = from) {
            if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))
                throw new RangeError("Invalid range for replacement decoration");
            if (!this.isReplace && to != from)
                throw new RangeError("Widget decorations can only have zero-length ranges");
            return super.range(from, to);
        }
    }
    PointDecoration.prototype.point = true;
    function getInclusive(spec, block = false) {
        let { inclusiveStart: start, inclusiveEnd: end } = spec;
        if (start == null)
            start = spec.inclusive;
        if (end == null)
            end = spec.inclusive;
        return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
    }
    function widgetsEq(a, b) {
        return a == b || !!(a && b && a.compare(b));
    }
    function addRange(from, to, ranges, margin = 0) {
        let last = ranges.length - 1;
        if (last >= 0 && ranges[last] + margin >= from)
            ranges[last] = Math.max(ranges[last], to);
        else
            ranges.push(from, to);
    }

    class LineView extends ContentView {
        constructor() {
            super(...arguments);
            this.children = [];
            this.length = 0;
            this.prevAttrs = undefined;
            this.attrs = null;
            this.breakAfter = 0;
        }
        // Consumes source
        merge(from, to, source, hasStart, openStart, openEnd) {
            if (source) {
                if (!(source instanceof LineView))
                    return false;
                if (!this.dom)
                    source.transferDOM(this); // Reuse source.dom when appropriate
            }
            if (hasStart)
                this.setDeco(source ? source.attrs : null);
            mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart, openEnd);
            return true;
        }
        split(at) {
            let end = new LineView;
            end.breakAfter = this.breakAfter;
            if (this.length == 0)
                return end;
            let { i, off } = this.childPos(at);
            if (off) {
                end.append(this.children[i].split(off), 0);
                this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
                i++;
            }
            for (let j = i; j < this.children.length; j++)
                end.append(this.children[j], 0);
            while (i > 0 && this.children[i - 1].length == 0)
                this.children[--i].destroy();
            this.children.length = i;
            this.markDirty();
            this.length = at;
            return end;
        }
        transferDOM(other) {
            if (!this.dom)
                return;
            this.markDirty();
            other.setDOM(this.dom);
            other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
            this.prevAttrs = undefined;
            this.dom = null;
        }
        setDeco(attrs) {
            if (!attrsEq(this.attrs, attrs)) {
                if (this.dom) {
                    this.prevAttrs = this.attrs;
                    this.markDirty();
                }
                this.attrs = attrs;
            }
        }
        append(child, openStart) {
            joinInlineInto(this, child, openStart);
        }
        // Only called when building a line view in ContentBuilder
        addLineDeco(deco) {
            let attrs = deco.spec.attributes, cls = deco.spec.class;
            if (attrs)
                this.attrs = combineAttrs(attrs, this.attrs || {});
            if (cls)
                this.attrs = combineAttrs({ class: cls }, this.attrs || {});
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this, pos);
        }
        reuseDOM(node) {
            if (node.nodeName == "DIV") {
                this.setDOM(node);
                this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
            }
        }
        sync(view, track) {
            var _a;
            if (!this.dom) {
                this.setDOM(document.createElement("div"));
                this.dom.className = "cm-line";
                this.prevAttrs = this.attrs ? null : undefined;
            }
            else if (this.flags & 4 /* ViewFlag.AttrsDirty */) {
                clearAttributes(this.dom);
                this.dom.className = "cm-line";
                this.prevAttrs = this.attrs ? null : undefined;
            }
            if (this.prevAttrs !== undefined) {
                updateAttrs(this.dom, this.prevAttrs, this.attrs);
                this.dom.classList.add("cm-line");
                this.prevAttrs = undefined;
            }
            super.sync(view, track);
            let last = this.dom.lastChild;
            while (last && ContentView.get(last) instanceof MarkView)
                last = last.lastChild;
            if (!last || !this.length ||
                last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&
                    (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
                let hack = document.createElement("BR");
                hack.cmIgnore = true;
                this.dom.appendChild(hack);
            }
        }
        measureTextSize() {
            if (this.children.length == 0 || this.length > 20)
                return null;
            let totalWidth = 0, textHeight;
            for (let child of this.children) {
                if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
                    return null;
                let rects = clientRectsFor(child.dom);
                if (rects.length != 1)
                    return null;
                totalWidth += rects[0].width;
                textHeight = rects[0].height;
            }
            return !totalWidth ? null : {
                lineHeight: this.dom.getBoundingClientRect().height,
                charWidth: totalWidth / this.length,
                textHeight
            };
        }
        coordsAt(pos, side) {
            let rect = coordsInChildren(this, pos, side);
            // Correct rectangle height for empty lines when the returned
            // height is larger than the text height.
            if (!this.children.length && rect && this.parent) {
                let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
                if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
                    let dist = (height - heightOracle.textHeight) / 2;
                    return { top: rect.top + dist, bottom: rect.bottom - dist, left: rect.left, right: rect.left };
                }
            }
            return rect;
        }
        become(other) {
            return other instanceof LineView && this.children.length == 0 && other.children.length == 0 &&
                attrsEq(this.attrs, other.attrs) && this.breakAfter == other.breakAfter;
        }
        covers() { return true; }
        static find(docView, pos) {
            for (let i = 0, off = 0; i < docView.children.length; i++) {
                let block = docView.children[i], end = off + block.length;
                if (end >= pos) {
                    if (block instanceof LineView)
                        return block;
                    if (end > pos)
                        break;
                }
                off = end + block.breakAfter;
            }
            return null;
        }
    }
    class BlockWidgetView extends ContentView {
        constructor(widget, length, deco) {
            super();
            this.widget = widget;
            this.length = length;
            this.deco = deco;
            this.breakAfter = 0;
            this.prevWidget = null;
        }
        merge(from, to, source, _takeDeco, openStart, openEnd) {
            if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        split(at) {
            let len = this.length - at;
            this.length = at;
            let end = new BlockWidgetView(this.widget, len, this.deco);
            end.breakAfter = this.breakAfter;
            return end;
        }
        get children() { return noChildren; }
        sync(view) {
            if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
                if (this.dom && this.prevWidget)
                    this.prevWidget.destroy(this.dom);
                this.prevWidget = null;
                this.setDOM(this.widget.toDOM(view));
                if (!this.widget.editable)
                    this.dom.contentEditable = "false";
            }
        }
        get overrideDOMText() {
            return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
        }
        domBoundsAround() { return null; }
        become(other) {
            if (other instanceof BlockWidgetView &&
                other.widget.constructor == this.widget.constructor) {
                if (!other.widget.compare(this.widget))
                    this.markDirty(true);
                if (this.dom && !this.prevWidget)
                    this.prevWidget = this.widget;
                this.widget = other.widget;
                this.length = other.length;
                this.deco = other.deco;
                this.breakAfter = other.breakAfter;
                return true;
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        get isEditable() { return false; }
        get isWidget() { return true; }
        coordsAt(pos, side) {
            let custom = this.widget.coordsAt(this.dom, pos, side);
            if (custom)
                return custom;
            if (this.widget instanceof BlockGapWidget)
                return null;
            return flattenRect(this.dom.getBoundingClientRect(), this.length ? pos == 0 : side <= 0);
        }
        destroy() {
            super.destroy();
            if (this.dom)
                this.widget.destroy(this.dom);
        }
        covers(side) {
            let { startSide, endSide } = this.deco;
            return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
        }
    }
    class BlockGapWidget extends WidgetType {
        constructor(height) {
            super();
            this.height = height;
        }
        toDOM() {
            let elt = document.createElement("div");
            elt.className = "cm-gap";
            this.updateDOM(elt);
            return elt;
        }
        eq(other) { return other.height == this.height; }
        updateDOM(elt) {
            elt.style.height = this.height + "px";
            return true;
        }
        get editable() { return true; }
        get estimatedHeight() { return this.height; }
        ignoreEvent() { return false; }
    }

    class ContentBuilder {
        constructor(doc, pos, end, disallowBlockEffectsFor) {
            this.doc = doc;
            this.pos = pos;
            this.end = end;
            this.disallowBlockEffectsFor = disallowBlockEffectsFor;
            this.content = [];
            this.curLine = null;
            this.breakAtStart = 0;
            this.pendingBuffer = 0 /* Buf.No */;
            this.bufferMarks = [];
            // Set to false directly after a widget that covers the position after it
            this.atCursorPos = true;
            this.openStart = -1;
            this.openEnd = -1;
            this.text = "";
            this.textOff = 0;
            this.cursor = doc.iter();
            this.skip = pos;
        }
        posCovered() {
            if (this.content.length == 0)
                return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
            let last = this.content[this.content.length - 1];
            return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
        }
        getLine() {
            if (!this.curLine) {
                this.content.push(this.curLine = new LineView);
                this.atCursorPos = true;
            }
            return this.curLine;
        }
        flushBuffer(active = this.bufferMarks) {
            if (this.pendingBuffer) {
                this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
                this.pendingBuffer = 0 /* Buf.No */;
            }
        }
        addBlockWidget(view) {
            this.flushBuffer();
            this.curLine = null;
            this.content.push(view);
        }
        finish(openEnd) {
            if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
                this.flushBuffer();
            else
                this.pendingBuffer = 0 /* Buf.No */;
            if (!this.posCovered() &&
                !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))
                this.getLine();
        }
        buildText(length, active, openStart) {
            while (length > 0) {
                if (this.textOff == this.text.length) {
                    let { value, lineBreak, done } = this.cursor.next(this.skip);
                    this.skip = 0;
                    if (done)
                        throw new Error("Ran out of text content when drawing inline views");
                    if (lineBreak) {
                        if (!this.posCovered())
                            this.getLine();
                        if (this.content.length)
                            this.content[this.content.length - 1].breakAfter = 1;
                        else
                            this.breakAtStart = 1;
                        this.flushBuffer();
                        this.curLine = null;
                        this.atCursorPos = true;
                        length--;
                        continue;
                    }
                    else {
                        this.text = value;
                        this.textOff = 0;
                    }
                }
                let take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);
                this.flushBuffer(active.slice(active.length - openStart));
                this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
                this.atCursorPos = true;
                this.textOff += take;
                length -= take;
                openStart = 0;
            }
        }
        span(from, to, active, openStart) {
            this.buildText(to - from, active, openStart);
            this.pos = to;
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        point(from, to, deco, active, openStart, index) {
            if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
                if (deco.block)
                    throw new RangeError("Block decorations may not be specified via plugins");
                if (to > this.doc.lineAt(this.pos).to)
                    throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
            }
            let len = to - from;
            if (deco instanceof PointDecoration) {
                if (deco.block) {
                    if (deco.startSide > 0 && !this.posCovered())
                        this.getLine();
                    this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));
                }
                else {
                    let view = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);
                    let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length &&
                        (from < to || deco.startSide > 0);
                    let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
                    let line = this.getLine();
                    if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore && !view.isEditable)
                        this.pendingBuffer = 0 /* Buf.No */;
                    this.flushBuffer(active);
                    if (cursorBefore) {
                        line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
                        openStart = active.length + Math.max(0, openStart - active.length);
                    }
                    line.append(wrapMarks(view, active), openStart);
                    this.atCursorPos = cursorAfter;
                    this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;
                    if (this.pendingBuffer)
                        this.bufferMarks = active.slice();
                }
            }
            else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
                this.getLine().addLineDeco(deco);
            }
            if (len) {
                // Advance the iterator past the replaced content
                if (this.textOff + len <= this.text.length) {
                    this.textOff += len;
                }
                else {
                    this.skip += len - (this.text.length - this.textOff);
                    this.text = "";
                    this.textOff = 0;
                }
                this.pos = to;
            }
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        static build(text, from, to, decorations, dynamicDecorationMap) {
            let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
            builder.openEnd = RangeSet.spans(decorations, from, to, builder);
            if (builder.openStart < 0)
                builder.openStart = builder.openEnd;
            builder.finish(builder.openEnd);
            return builder;
        }
    }
    function wrapMarks(view, active) {
        for (let mark of active)
            view = new MarkView(mark, [view], view.length);
        return view;
    }
    class NullWidget extends WidgetType {
        constructor(tag) {
            super();
            this.tag = tag;
        }
        eq(other) { return other.tag == this.tag; }
        toDOM() { return document.createElement(this.tag); }
        updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
        get isHidden() { return true; }
    }
    NullWidget.inline = /*@__PURE__*/new NullWidget("span");
    NullWidget.block = /*@__PURE__*/new NullWidget("div");

    /**
    Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
    */
    var Direction = /*@__PURE__*/(function (Direction) {
        // (These are chosen to match the base levels, in bidi algorithm
        // terms, of spans in that direction.)
        /**
        Left-to-right.
        */
        Direction[Direction["LTR"] = 0] = "LTR";
        /**
        Right-to-left.
        */
        Direction[Direction["RTL"] = 1] = "RTL";
    return Direction})(Direction || (Direction = {}));
    const LTR = Direction.LTR, RTL = Direction.RTL;
    // Decode a string with each type encoded as log2(type)
    function dec(str) {
        let result = [];
        for (let i = 0; i < str.length; i++)
            result.push(1 << +str[i]);
        return result;
    }
    // Character types for codepoints 0 to 0xf8
    const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
    // Character types for codepoints 0x600 to 0x6f9
    const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
    const Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];
    // There's a lot more in
    // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
    // which are left out to keep code size down.
    for (let p of ["()", "[]", "{}"]) {
        let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);
        Brackets[l] = r;
        Brackets[r] = -l;
    }
    function charType(ch) {
        return ch <= 0xf7 ? LowTypes[ch] :
            0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ :
                0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
                    0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ :
                        0x2000 <= ch && ch <= 0x200c ? 256 /* T.NI */ :
                            0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ : 1 /* T.L */;
    }
    const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
    /**
    Represents a contiguous range of text that has a single direction
    (as in left-to-right or right-to-left).
    */
    class BidiSpan {
        /**
        The direction of this span.
        */
        get dir() { return this.level % 2 ? RTL : LTR; }
        /**
        @internal
        */
        constructor(
        /**
        The start of the span (relative to the start of the line).
        */
        from, 
        /**
        The end of the span.
        */
        to, 
        /**
        The ["bidi
        level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
        of the span (in this context, 0 means
        left-to-right, 1 means right-to-left, 2 means left-to-right
        number inside right-to-left text).
        */
        level) {
            this.from = from;
            this.to = to;
            this.level = level;
        }
        /**
        @internal
        */
        side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
        /**
        @internal
        */
        forward(forward, dir) { return forward == (this.dir == dir); }
        /**
        @internal
        */
        static find(order, index, level, assoc) {
            let maybe = -1;
            for (let i = 0; i < order.length; i++) {
                let span = order[i];
                if (span.from <= index && span.to >= index) {
                    if (span.level == level)
                        return i;
                    // When multiple spans match, if assoc != 0, take the one that
                    // covers that side, otherwise take the one with the minimum
                    // level.
                    if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
                        maybe = i;
                }
            }
            if (maybe < 0)
                throw new RangeError("Index out of range");
            return maybe;
        }
    }
    function isolatesEq(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++) {
            let iA = a[i], iB = b[i];
            if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))
                return false;
        }
        return true;
    }
    // Reused array of character types
    const types = [];
    // Fill in the character types (in `types`) from `from` to `to` and
    // apply W normalization rules.
    function computeCharTypes(line, rFrom, rTo, isolates, outerType) {
        for (let iI = 0; iI <= isolates.length; iI++) {
            let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
            let prevType = iI ? 256 /* T.NI */ : outerType;
            // W1. Examine each non-spacing mark (NSM) in the level run, and
            // change the type of the NSM to the type of the previous
            // character. If the NSM is at the start of the level run, it will
            // get the type of sor.
            // W2. Search backwards from each instance of a European number
            // until the first strong type (R, L, AL, or sor) is found. If an
            // AL is found, change the type of the European number to Arabic
            // number.
            // W3. Change all ALs to R.
            // (Left after this: L, R, EN, AN, ET, CS, NI)
            for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
                let type = charType(line.charCodeAt(i));
                if (type == 512 /* T.NSM */)
                    type = prev;
                else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */)
                    type = 16 /* T.AN */;
                types[i] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;
                if (type & 7 /* T.Strong */)
                    prevStrong = type;
                prev = type;
            }
            // W5. A sequence of European terminators adjacent to European
            // numbers changes to all European numbers.
            // W6. Otherwise, separators and terminators change to Other
            // Neutral.
            // W7. Search backwards from each instance of a European number
            // until the first strong type (R, L, or sor) is found. If an L is
            // found, then change the type of the European number to L.
            // (Left after this: L, R, EN+AN, NI)
            for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
                let type = types[i];
                if (type == 128 /* T.CS */) {
                    if (i < to - 1 && prev == types[i + 1] && (prev & 24 /* T.Num */))
                        type = types[i] = prev;
                    else
                        types[i] = 256 /* T.NI */;
                }
                else if (type == 64 /* T.ET */) {
                    let end = i + 1;
                    while (end < to && types[end] == 64 /* T.ET */)
                        end++;
                    let replace = (i && prev == 8 /* T.EN */) || (end < rTo && types[end] == 8 /* T.EN */) ? (prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */) : 256 /* T.NI */;
                    for (let j = i; j < end; j++)
                        types[j] = replace;
                    i = end - 1;
                }
                else if (type == 8 /* T.EN */ && prevStrong == 1 /* T.L */) {
                    types[i] = 1 /* T.L */;
                }
                prev = type;
                if (type & 7 /* T.Strong */)
                    prevStrong = type;
            }
        }
    }
    // Process brackets throughout a run sequence.
    function processBracketPairs(line, rFrom, rTo, isolates, outerType) {
        let oppositeType = outerType == 1 /* T.L */ ? 2 /* T.R */ : 1 /* T.L */;
        for (let iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {
            let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
            // N0. Process bracket pairs in an isolating run sequence
            // sequentially in the logical order of the text positions of the
            // opening paired brackets using the logic given below. Within this
            // scope, bidirectional types EN and AN are treated as R.
            for (let i = from, ch, br, type; i < to; i++) {
                // Keeps [startIndex, type, strongSeen] triples for each open
                // bracket on BracketStack.
                if (br = Brackets[ch = line.charCodeAt(i)]) {
                    if (br < 0) { // Closing bracket
                        for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                            if (BracketStack[sJ + 1] == -br) {
                                let flags = BracketStack[sJ + 2];
                                let type = (flags & 2 /* Bracketed.EmbedInside */) ? outerType :
                                    !(flags & 4 /* Bracketed.OppositeInside */) ? 0 :
                                        (flags & 1 /* Bracketed.OppositeBefore */) ? oppositeType : outerType;
                                if (type)
                                    types[i] = types[BracketStack[sJ]] = type;
                                sI = sJ;
                                break;
                            }
                        }
                    }
                    else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {
                        break;
                    }
                    else {
                        BracketStack[sI++] = i;
                        BracketStack[sI++] = ch;
                        BracketStack[sI++] = context;
                    }
                }
                else if ((type = types[i]) == 2 /* T.R */ || type == 1 /* T.L */) {
                    let embed = type == outerType;
                    context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;
                    for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                        let cur = BracketStack[sJ + 2];
                        if (cur & 2 /* Bracketed.EmbedInside */)
                            break;
                        if (embed) {
                            BracketStack[sJ + 2] |= 2 /* Bracketed.EmbedInside */;
                        }
                        else {
                            if (cur & 4 /* Bracketed.OppositeInside */)
                                break;
                            BracketStack[sJ + 2] |= 4 /* Bracketed.OppositeInside */;
                        }
                    }
                }
            }
        }
    }
    function processNeutrals(rFrom, rTo, isolates, outerType) {
        for (let iI = 0, prev = outerType; iI <= isolates.length; iI++) {
            let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
            // N1. A sequence of neutrals takes the direction of the
            // surrounding strong text if the text on both sides has the same
            // direction. European and Arabic numbers act as if they were R in
            // terms of their influence on neutrals. Start-of-level-run (sor)
            // and end-of-level-run (eor) are used at level run boundaries.
            // N2. Any remaining neutrals take the embedding direction.
            // (Left after this: L, R, EN+AN)
            for (let i = from; i < to;) {
                let type = types[i];
                if (type == 256 /* T.NI */) {
                    let end = i + 1;
                    for (;;) {
                        if (end == to) {
                            if (iI == isolates.length)
                                break;
                            end = isolates[iI++].to;
                            to = iI < isolates.length ? isolates[iI].from : rTo;
                        }
                        else if (types[end] == 256 /* T.NI */) {
                            end++;
                        }
                        else {
                            break;
                        }
                    }
                    let beforeL = prev == 1 /* T.L */;
                    let afterL = (end < rTo ? types[end] : outerType) == 1 /* T.L */;
                    let replace = beforeL == afterL ? (beforeL ? 1 /* T.L */ : 2 /* T.R */) : outerType;
                    for (let j = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j > i;) {
                        if (j == fromJ) {
                            j = isolates[--jI].from;
                            fromJ = jI ? isolates[jI - 1].to : rFrom;
                        }
                        types[--j] = replace;
                    }
                    i = end;
                }
                else {
                    prev = type;
                    i++;
                }
            }
        }
    }
    // Find the contiguous ranges of character types in a given range, and
    // emit spans for them. Flip the order of the spans as appropriate
    // based on the level, and call through to compute the spans for
    // isolates at the proper point.
    function emitSpans(line, from, to, level, baseLevel, isolates, order) {
        let ourType = level % 2 ? 2 /* T.R */ : 1 /* T.L */;
        if ((level % 2) == (baseLevel % 2)) { // Same dir as base direction, don't flip
            for (let iCh = from, iI = 0; iCh < to;) {
                // Scan a section of characters in direction ourType, unless
                // there's another type of char right after iCh, in which case
                // we scan a section of other characters (which, if ourType ==
                // T.L, may contain both T.R and T.AN chars).
                let sameDir = true, isNum = false;
                if (iI == isolates.length || iCh < isolates[iI].from) {
                    let next = types[iCh];
                    if (next != ourType) {
                        sameDir = false;
                        isNum = next == 16 /* T.AN */;
                    }
                }
                // Holds an array of isolates to pass to a recursive call if we
                // must recurse (to distinguish T.AN inside an RTL section in
                // LTR text), null if we can emit directly
                let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
                let localLevel = sameDir ? level : level + 1;
                let iScan = iCh;
                run: for (;;) {
                    if (iI < isolates.length && iScan == isolates[iI].from) {
                        if (isNum)
                            break run;
                        let iso = isolates[iI];
                        // Scan ahead to verify that there is another char in this dir after the isolate(s)
                        if (!sameDir)
                            for (let upto = iso.to, jI = iI + 1;;) {
                                if (upto == to)
                                    break run;
                                if (jI < isolates.length && isolates[jI].from == upto)
                                    upto = isolates[jI++].to;
                                else if (types[upto] == ourType)
                                    break run;
                                else
                                    break;
                            }
                        iI++;
                        if (recurse) {
                            recurse.push(iso);
                        }
                        else {
                            if (iso.from > iCh)
                                order.push(new BidiSpan(iCh, iso.from, localLevel));
                            let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
                            computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
                            iCh = iso.to;
                        }
                        iScan = iso.to;
                    }
                    else if (iScan == to || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
                        break;
                    }
                    else {
                        iScan++;
                    }
                }
                if (recurse)
                    emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order);
                else if (iCh < iScan)
                    order.push(new BidiSpan(iCh, iScan, localLevel));
                iCh = iScan;
            }
        }
        else {
            // Iterate in reverse to flip the span order. Same code again, but
            // going from the back of the section to the front
            for (let iCh = to, iI = isolates.length; iCh > from;) {
                let sameDir = true, isNum = false;
                if (!iI || iCh > isolates[iI - 1].to) {
                    let next = types[iCh - 1];
                    if (next != ourType) {
                        sameDir = false;
                        isNum = next == 16 /* T.AN */;
                    }
                }
                let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
                let localLevel = sameDir ? level : level + 1;
                let iScan = iCh;
                run: for (;;) {
                    if (iI && iScan == isolates[iI - 1].to) {
                        if (isNum)
                            break run;
                        let iso = isolates[--iI];
                        // Scan ahead to verify that there is another char in this dir after the isolate(s)
                        if (!sameDir)
                            for (let upto = iso.from, jI = iI;;) {
                                if (upto == from)
                                    break run;
                                if (jI && isolates[jI - 1].to == upto)
                                    upto = isolates[--jI].from;
                                else if (types[upto - 1] == ourType)
                                    break run;
                                else
                                    break;
                            }
                        if (recurse) {
                            recurse.push(iso);
                        }
                        else {
                            if (iso.to < iCh)
                                order.push(new BidiSpan(iso.to, iCh, localLevel));
                            let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
                            computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
                            iCh = iso.from;
                        }
                        iScan = iso.from;
                    }
                    else if (iScan == from || (sameDir ? types[iScan - 1] != ourType : types[iScan - 1] == ourType)) {
                        break;
                    }
                    else {
                        iScan--;
                    }
                }
                if (recurse)
                    emitSpans(line, iScan, iCh, level + 1, baseLevel, recurse, order);
                else if (iScan < iCh)
                    order.push(new BidiSpan(iScan, iCh, localLevel));
                iCh = iScan;
            }
        }
    }
    function computeSectionOrder(line, level, baseLevel, isolates, from, to, order) {
        let outerType = (level % 2 ? 2 /* T.R */ : 1 /* T.L */);
        computeCharTypes(line, from, to, isolates, outerType);
        processBracketPairs(line, from, to, isolates, outerType);
        processNeutrals(from, to, isolates, outerType);
        emitSpans(line, from, to, level, baseLevel, isolates, order);
    }
    function computeOrder(line, direction, isolates) {
        if (!line)
            return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
        if (direction == LTR && !isolates.length && !BidiRE.test(line))
            return trivialOrder(line.length);
        if (isolates.length)
            while (line.length > types.length)
                types[types.length] = 256 /* T.NI */; // Make sure types array has no gaps
        let order = [], level = direction == LTR ? 0 : 1;
        computeSectionOrder(line, level, level, isolates, 0, line.length, order);
        return order;
    }
    function trivialOrder(length) {
        return [new BidiSpan(0, length, 0)];
    }
    let movedOver = "";
    // This implementation moves strictly visually, without concern for a
    // traversal visiting every logical position in the string. It will
    // still do so for simple input, but situations like multiple isolates
    // with the same level next to each other, or text going against the
    // main dir at the end of the line, will make some positions
    // unreachable with this motion. Each visible cursor position will
    // correspond to the lower-level bidi span that touches it.
    //
    // The alternative would be to solve an order globally for a given
    // line, making sure that it includes every position, but that would
    // require associating non-canonical (higher bidi span level)
    // positions with a given visual position, which is likely to confuse
    // people. (And would generally be a lot more complicated.)
    function moveVisually(line, order, dir, start, forward) {
        var _a;
        let startIndex = start.head - line.from;
        let spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
        let span = order[spanI], spanEnd = span.side(forward, dir);
        // End of span
        if (startIndex == spanEnd) {
            let nextI = spanI += forward ? 1 : -1;
            if (nextI < 0 || nextI >= order.length)
                return null;
            span = order[spanI = nextI];
            startIndex = span.side(!forward, dir);
            spanEnd = span.side(forward, dir);
        }
        let nextIndex = findClusterBreak(line.text, startIndex, span.forward(forward, dir));
        if (nextIndex < span.from || nextIndex > span.to)
            nextIndex = spanEnd;
        movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
        let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
        if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level)
            return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
        return EditorSelection.cursor(nextIndex + line.from, span.forward(forward, dir) ? -1 : 1, span.level);
    }
    function autoDirection(text, from, to) {
        for (let i = from; i < to; i++) {
            let type = charType(text.charCodeAt(i));
            if (type == 1 /* T.L */)
                return LTR;
            if (type == 2 /* T.R */ || type == 4 /* T.AL */)
                return RTL;
        }
        return LTR;
    }

    const clickAddsSelectionRange = /*@__PURE__*/Facet.define();
    const dragMovesSelection$1 = /*@__PURE__*/Facet.define();
    const mouseSelectionStyle = /*@__PURE__*/Facet.define();
    const exceptionSink = /*@__PURE__*/Facet.define();
    const updateListener = /*@__PURE__*/Facet.define();
    const inputHandler$1 = /*@__PURE__*/Facet.define();
    const focusChangeEffect = /*@__PURE__*/Facet.define();
    const clipboardInputFilter = /*@__PURE__*/Facet.define();
    const clipboardOutputFilter = /*@__PURE__*/Facet.define();
    const perLineTextDirection = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    const nativeSelectionHidden = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    const scrollHandler = /*@__PURE__*/Facet.define();
    class ScrollTarget {
        constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5, 
        // This data structure is abused to also store precise scroll
        // snapshots, instead of a `scrollIntoView` request. When this
        // flag is `true`, `range` points at a position in the reference
        // line, `yMargin` holds the difference between the top of that
        // line and the top of the editor, and `xMargin` holds the
        // editor's `scrollLeft`.
        isSnapshot = false) {
            this.range = range;
            this.y = y;
            this.x = x;
            this.yMargin = yMargin;
            this.xMargin = xMargin;
            this.isSnapshot = isSnapshot;
        }
        map(changes) {
            return changes.empty ? this :
                new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
        }
        clip(state) {
            return this.range.to <= state.doc.length ? this :
                new ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
        }
    }
    const scrollIntoView$1 = /*@__PURE__*/StateEffect.define({ map: (t, ch) => t.map(ch) });
    const setEditContextFormatting = /*@__PURE__*/StateEffect.define();
    /**
    Log or report an unhandled exception in client code. Should
    probably only be used by extension code that allows client code to
    provide functions, and calls those functions in a context where an
    exception can't be propagated to calling code in a reasonable way
    (for example when in an event handler).

    Either calls a handler registered with
    [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
    `window.onerror`, if defined, or `console.error` (in which case
    it'll pass `context`, when given, as first argument).
    */
    function logException(state, exception, context) {
        let handler = state.facet(exceptionSink);
        if (handler.length)
            handler[0](exception);
        else if (window.onerror && window.onerror(String(exception), context, undefined, undefined, exception)) ;
        else if (context)
            console.error(context + ":", exception);
        else
            console.error(exception);
    }
    const editable = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });
    let nextPluginID = 0;
    const viewPlugin = /*@__PURE__*/Facet.define({
        combine(plugins) {
            return plugins.filter((p, i) => {
                for (let j = 0; j < i; j++)
                    if (plugins[j].plugin == p.plugin)
                        return false;
                return true;
            });
        }
    });
    /**
    View plugins associate stateful values with a view. They can
    influence the way the content is drawn, and are notified of things
    that happen in the view. They optionally take an argument, in
    which case you need to call [`of`](https://codemirror.net/6/docs/ref/#view.ViewPlugin.of) to create
    an extension for the plugin. When the argument type is undefined,
    you can use the plugin instance as an extension directly.
    */
    class ViewPlugin {
        constructor(
        /**
        @internal
        */
        id, 
        /**
        @internal
        */
        create, 
        /**
        @internal
        */
        domEventHandlers, 
        /**
        @internal
        */
        domEventObservers, buildExtensions) {
            this.id = id;
            this.create = create;
            this.domEventHandlers = domEventHandlers;
            this.domEventObservers = domEventObservers;
            this.baseExtensions = buildExtensions(this);
            this.extension = this.baseExtensions.concat(viewPlugin.of({ plugin: this, arg: undefined }));
        }
        /**
        Create an extension for this plugin with the given argument.
        */
        of(arg) {
            return this.baseExtensions.concat(viewPlugin.of({ plugin: this, arg }));
        }
        /**
        Define a plugin from a constructor function that creates the
        plugin's value, given an editor view.
        */
        static define(create, spec) {
            const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};
            return new ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, plugin => {
                let ext = [];
                if (deco)
                    ext.push(decorations.of(view => {
                        let pluginInst = view.plugin(plugin);
                        return pluginInst ? deco(pluginInst) : Decoration.none;
                    }));
                if (provide)
                    ext.push(provide(plugin));
                return ext;
            });
        }
        /**
        Create a plugin for a class whose constructor takes a single
        editor view as argument.
        */
        static fromClass(cls, spec) {
            return ViewPlugin.define((view, arg) => new cls(view, arg), spec);
        }
    }
    class PluginInstance {
        constructor(spec) {
            this.spec = spec;
            // When starting an update, all plugins have this field set to the
            // update object, indicating they need to be updated. When finished
            // updating, it is set to `null`. Retrieving a plugin that needs to
            // be updated with `view.plugin` forces an eager update.
            this.mustUpdate = null;
            // This is null when the plugin is initially created, but
            // initialized on the first update.
            this.value = null;
        }
        get plugin() { return this.spec && this.spec.plugin; }
        update(view) {
            if (!this.value) {
                if (this.spec) {
                    try {
                        this.value = this.spec.plugin.create(view, this.spec.arg);
                    }
                    catch (e) {
                        logException(view.state, e, "CodeMirror plugin crashed");
                        this.deactivate();
                    }
                }
            }
            else if (this.mustUpdate) {
                let update = this.mustUpdate;
                this.mustUpdate = null;
                if (this.value.update) {
                    try {
                        this.value.update(update);
                    }
                    catch (e) {
                        logException(update.state, e, "CodeMirror plugin crashed");
                        if (this.value.destroy)
                            try {
                                this.value.destroy();
                            }
                            catch (_) { }
                        this.deactivate();
                    }
                }
            }
            return this;
        }
        destroy(view) {
            var _a;
            if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
                try {
                    this.value.destroy();
                }
                catch (e) {
                    logException(view.state, e, "CodeMirror plugin crashed");
                }
            }
        }
        deactivate() {
            this.spec = this.value = null;
        }
    }
    const editorAttributes = /*@__PURE__*/Facet.define();
    const contentAttributes = /*@__PURE__*/Facet.define();
    // Provide decorations
    const decorations = /*@__PURE__*/Facet.define();
    const outerDecorations = /*@__PURE__*/Facet.define();
    const atomicRanges = /*@__PURE__*/Facet.define();
    const bidiIsolatedRanges = /*@__PURE__*/Facet.define();
    function getIsolatedRanges(view, line) {
        let isolates = view.state.facet(bidiIsolatedRanges);
        if (!isolates.length)
            return isolates;
        let sets = isolates.map(i => i instanceof Function ? i(view) : i);
        let result = [];
        RangeSet.spans(sets, line.from, line.to, {
            point() { },
            span(fromDoc, toDoc, active, open) {
                let from = fromDoc - line.from, to = toDoc - line.from;
                let level = result;
                for (let i = active.length - 1; i >= 0; i--, open--) {
                    let direction = active[i].spec.bidiIsolate, update;
                    if (direction == null)
                        direction = autoDirection(line.text, from, to);
                    if (open > 0 && level.length &&
                        (update = level[level.length - 1]).to == from && update.direction == direction) {
                        update.to = to;
                        level = update.inner;
                    }
                    else {
                        let add = { from, to, direction, inner: [] };
                        level.push(add);
                        level = add.inner;
                    }
                }
            }
        });
        return result;
    }
    const scrollMargins = /*@__PURE__*/Facet.define();
    function getScrollMargins(view) {
        let left = 0, right = 0, top = 0, bottom = 0;
        for (let source of view.state.facet(scrollMargins)) {
            let m = source(view);
            if (m) {
                if (m.left != null)
                    left = Math.max(left, m.left);
                if (m.right != null)
                    right = Math.max(right, m.right);
                if (m.top != null)
                    top = Math.max(top, m.top);
                if (m.bottom != null)
                    bottom = Math.max(bottom, m.bottom);
            }
        }
        return { left, right, top, bottom };
    }
    const styleModule = /*@__PURE__*/Facet.define();
    class ChangedRange {
        constructor(fromA, toA, fromB, toB) {
            this.fromA = fromA;
            this.toA = toA;
            this.fromB = fromB;
            this.toB = toB;
        }
        join(other) {
            return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
        }
        addToSet(set) {
            let i = set.length, me = this;
            for (; i > 0; i--) {
                let range = set[i - 1];
                if (range.fromA > me.toA)
                    continue;
                if (range.toA < me.fromA)
                    break;
                me = me.join(range);
                set.splice(i - 1, 1);
            }
            set.splice(i, 0, me);
            return set;
        }
        static extendWithRanges(diff, ranges) {
            if (ranges.length == 0)
                return diff;
            let result = [];
            for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
                let next = dI == diff.length ? null : diff[dI], off = posA - posB;
                let end = next ? next.fromB : 1e9;
                while (rI < ranges.length && ranges[rI] < end) {
                    let from = ranges[rI], to = ranges[rI + 1];
                    let fromB = Math.max(posB, from), toB = Math.min(end, to);
                    if (fromB <= toB)
                        new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                    if (to > end)
                        break;
                    else
                        rI += 2;
                }
                if (!next)
                    return result;
                new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
                posA = next.toA;
                posB = next.toB;
            }
        }
    }
    /**
    View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
    class, which describe what happened, whenever the view is updated.
    */
    class ViewUpdate {
        constructor(
        /**
        The editor view that the update is associated with.
        */
        view, 
        /**
        The new editor state.
        */
        state, 
        /**
        The transactions involved in the update. May be empty.
        */
        transactions) {
            this.view = view;
            this.state = state;
            this.transactions = transactions;
            /**
            @internal
            */
            this.flags = 0;
            this.startState = view.state;
            this.changes = ChangeSet.empty(this.startState.doc.length);
            for (let tr of transactions)
                this.changes = this.changes.compose(tr.changes);
            let changedRanges = [];
            this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
            this.changedRanges = changedRanges;
        }
        /**
        @internal
        */
        static create(view, state, transactions) {
            return new ViewUpdate(view, state, transactions);
        }
        /**
        Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
        [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
        update.
        */
        get viewportChanged() {
            return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;
        }
        /**
        Returns true when
        [`viewportChanged`](https://codemirror.net/6/docs/ref/#view.ViewUpdate.viewportChanged) is true
        and the viewport change is not just the result of mapping it in
        response to document changes.
        */
        get viewportMoved() {
            return (this.flags & 8 /* UpdateFlag.ViewportMoved */) > 0;
        }
        /**
        Indicates whether the height of a block element in the editor
        changed in this update.
        */
        get heightChanged() {
            return (this.flags & 2 /* UpdateFlag.Height */) > 0;
        }
        /**
        Returns true when the document was modified or the size of the
        editor, or elements within the editor, changed.
        */
        get geometryChanged() {
            return this.docChanged || (this.flags & (16 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;
        }
        /**
        True when this update indicates a focus change.
        */
        get focusChanged() {
            return (this.flags & 1 /* UpdateFlag.Focus */) > 0;
        }
        /**
        Whether the document changed in this update.
        */
        get docChanged() {
            return !this.changes.empty;
        }
        /**
        Whether the selection was explicitly set in this update.
        */
        get selectionSet() {
            return this.transactions.some(tr => tr.selection);
        }
        /**
        @internal
        */
        get empty() { return this.flags == 0 && this.transactions.length == 0; }
    }

    class DocView extends ContentView {
        get length() { return this.view.state.doc.length; }
        constructor(view) {
            super();
            this.view = view;
            this.decorations = [];
            this.dynamicDecorationMap = [false];
            this.domChanged = null;
            this.hasComposition = null;
            this.markedForComposition = new Set;
            this.editContextFormatting = Decoration.none;
            this.lastCompositionAfterCursor = false;
            // Track a minimum width for the editor. When measuring sizes in
            // measureVisibleLineHeights, this is updated to point at the width
            // of a given element and its extent in the document. When a change
            // happens in that range, these are reset. That way, once we've seen
            // a line/element of a given length, we keep the editor wide enough
            // to fit at least that element, until it is changed, at which point
            // we forget it again.
            this.minWidth = 0;
            this.minWidthFrom = 0;
            this.minWidthTo = 0;
            // Track whether the DOM selection was set in a lossy way, so that
            // we don't mess it up when reading it back it
            this.impreciseAnchor = null;
            this.impreciseHead = null;
            this.forceSelection = false;
            // Used by the resize observer to ignore resizes that we caused
            // ourselves
            this.lastUpdate = Date.now();
            this.setDOM(view.contentDOM);
            this.children = [new LineView];
            this.children[0].setParent(this);
            this.updateDeco();
            this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
        }
        // Update the document view to a given state.
        update(update) {
            var _a;
            let changedRanges = update.changedRanges;
            if (this.minWidth > 0 && changedRanges.length) {
                if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
                    this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
                }
                else {
                    this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
                    this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
                }
            }
            this.updateEditContextFormatting(update);
            let readCompositionAt = -1;
            if (this.view.inputState.composing >= 0 && !this.view.observer.editContext) {
                if ((_a = this.domChanged) === null || _a === void 0 ? void 0 : _a.newSel)
                    readCompositionAt = this.domChanged.newSel.head;
                else if (!touchesComposition(update.changes, this.hasComposition) && !update.selectionSet)
                    readCompositionAt = update.state.selection.main.head;
            }
            let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update.changes, readCompositionAt) : null;
            this.domChanged = null;
            if (this.hasComposition) {
                this.markedForComposition.clear();
                let { from, to } = this.hasComposition;
                changedRanges = new ChangedRange(from, to, update.changes.mapPos(from, -1), update.changes.mapPos(to, 1))
                    .addToSet(changedRanges.slice());
            }
            this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
            // When the DOM nodes around the selection are moved to another
            // parent, Chrome sometimes reports a different selection through
            // getSelection than the one that it actually shows to the user.
            // This forces a selection update when lines are joined to work
            // around that. Issue #54
            if ((browser.ie || browser.chrome) && !composition && update &&
                update.state.doc.lines != update.startState.doc.lines)
                this.forceSelection = true;
            let prevDeco = this.decorations, deco = this.updateDeco();
            let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
            changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
            if (!(this.flags & 7 /* ViewFlag.Dirty */) && changedRanges.length == 0) {
                return false;
            }
            else {
                this.updateInner(changedRanges, update.startState.doc.length, composition);
                if (update.transactions.length)
                    this.lastUpdate = Date.now();
                return true;
            }
        }
        // Used by update and the constructor do perform the actual DOM
        // update
        updateInner(changes, oldLength, composition) {
            this.view.viewState.mustMeasureContent = true;
            this.updateChildren(changes, oldLength, composition);
            let { observer } = this.view;
            observer.ignore(() => {
                // Lock the height during redrawing, since Chrome sometimes
                // messes with the scroll position during DOM mutation (though
                // no relayout is triggered and I cannot imagine how it can
                // recompute the scroll position without a layout)
                this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
                this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
                // Chrome will sometimes, when DOM mutations occur directly
                // around the selection, get confused and report a different
                // selection from the one it displays (issue #218). This tries
                // to detect that situation.
                let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;
                this.sync(this.view, track);
                this.flags &= -8 /* ViewFlag.Dirty */;
                if (track && (track.written || observer.selectionRange.focusNode != track.node))
                    this.forceSelection = true;
                this.dom.style.height = "";
            });
            this.markedForComposition.forEach(cView => cView.flags &= -9 /* ViewFlag.Composition */);
            let gaps = [];
            if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
                for (let child of this.children)
                    if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
                        gaps.push(child.dom);
            observer.updateGaps(gaps);
        }
        updateChildren(changes, oldLength, composition) {
            let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
            let cursor = this.childCursor(oldLength);
            for (let i = ranges.length - 1;; i--) {
                let next = i >= 0 ? ranges[i] : null;
                if (!next)
                    break;
                let { fromA, toA, fromB, toB } = next, content, breakAtStart, openStart, openEnd;
                if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
                    let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
                    let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
                    breakAtStart = before.breakAtStart;
                    openStart = before.openStart;
                    openEnd = after.openEnd;
                    let compLine = this.compositionView(composition);
                    if (after.breakAtStart) {
                        compLine.breakAfter = 1;
                    }
                    else if (after.content.length &&
                        compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
                        compLine.breakAfter = after.content[0].breakAfter;
                        after.content.shift();
                    }
                    if (before.content.length &&
                        compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
                        before.content.pop();
                    }
                    content = before.content.concat(compLine).concat(after.content);
                }
                else {
                    ({ content, breakAtStart, openStart, openEnd } =
                        ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
                }
                let { i: toI, off: toOff } = cursor.findPos(toA, 1);
                let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
                replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
            }
            if (composition)
                this.fixCompositionDOM(composition);
        }
        updateEditContextFormatting(update) {
            this.editContextFormatting = this.editContextFormatting.map(update.changes);
            for (let tr of update.transactions)
                for (let effect of tr.effects)
                    if (effect.is(setEditContextFormatting)) {
                        this.editContextFormatting = effect.value;
                    }
        }
        compositionView(composition) {
            let cur = new TextView(composition.text.nodeValue);
            cur.flags |= 8 /* ViewFlag.Composition */;
            for (let { deco } of composition.marks)
                cur = new MarkView(deco, [cur], cur.length);
            let line = new LineView;
            line.append(cur, 0);
            return line;
        }
        fixCompositionDOM(composition) {
            let fix = (dom, cView) => {
                cView.flags |= 8 /* ViewFlag.Composition */ | (cView.children.some(c => c.flags & 7 /* ViewFlag.Dirty */) ? 1 /* ViewFlag.ChildDirty */ : 0);
                this.markedForComposition.add(cView);
                let prev = ContentView.get(dom);
                if (prev && prev != cView)
                    prev.dom = null;
                cView.setDOM(dom);
            };
            let pos = this.childPos(composition.range.fromB, 1);
            let cView = this.children[pos.i];
            fix(composition.line, cView);
            for (let i = composition.marks.length - 1; i >= -1; i--) {
                pos = cView.childPos(pos.off, 1);
                cView = cView.children[pos.i];
                fix(i >= 0 ? composition.marks[i].node : composition.text, cView);
            }
        }
        // Sync the DOM selection to this.state.selection
        updateSelection(mustRead = false, fromPointer = false) {
            if (mustRead || !this.view.observer.selectionRange.focusNode)
                this.view.observer.readSelectionRange();
            let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
            let selectionNotFocus = !focused && !(this.view.state.facet(editable) || this.dom.tabIndex > -1) &&
                hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
            if (!(focused || fromPointer || selectionNotFocus))
                return;
            let force = this.forceSelection;
            this.forceSelection = false;
            let main = this.view.state.selection.main;
            let anchor = this.moveToLine(this.domAtPos(main.anchor));
            let head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
            // Always reset on Firefox when next to an uneditable node to
            // avoid invisible cursor bugs (#111)
            if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
                let dummy = document.createTextNode("");
                this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
                anchor = head = new DOMPos(dummy, 0);
                force = true;
            }
            let domSel = this.view.observer.selectionRange;
            // If the selection is already here, or in an equivalent position, don't touch it
            if (force || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
                !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {
                this.view.observer.ignore(() => {
                    // Chrome Android will hide the virtual keyboard when tapping
                    // inside an uneditable node, and not bring it back when we
                    // move the cursor to its proper position. This tries to
                    // restore the keyboard by cycling focus.
                    if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) &&
                        inUneditable(domSel.focusNode, this.dom)) {
                        this.dom.blur();
                        this.dom.focus({ preventScroll: true });
                    }
                    let rawSel = getSelection(this.view.root);
                    if (!rawSel) ;
                    else if (main.empty) {
                        // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                        if (browser.gecko) {
                            let nextTo = nextToUneditable(anchor.node, anchor.offset);
                            if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {
                                let text = (nextTo == 1 /* NextTo.Before */ ? textNodeBefore : textNodeAfter)(anchor.node, anchor.offset);
                                if (text)
                                    anchor = new DOMPos(text.node, text.offset);
                            }
                        }
                        rawSel.collapse(anchor.node, anchor.offset);
                        if (main.bidiLevel != null && rawSel.caretBidiLevel !== undefined)
                            rawSel.caretBidiLevel = main.bidiLevel;
                    }
                    else if (rawSel.extend) {
                        // Selection.extend can be used to create an 'inverted' selection
                        // (one where the focus is before the anchor), but not all
                        // browsers support it yet.
                        rawSel.collapse(anchor.node, anchor.offset);
                        // Safari will ignore the call above when the editor is
                        // hidden, and then raise an error on the call to extend
                        // (#940).
                        try {
                            rawSel.extend(head.node, head.offset);
                        }
                        catch (_) { }
                    }
                    else {
                        // Primitive (IE) way
                        let range = document.createRange();
                        if (main.anchor > main.head)
                            [anchor, head] = [head, anchor];
                        range.setEnd(head.node, head.offset);
                        range.setStart(anchor.node, anchor.offset);
                        rawSel.removeAllRanges();
                        rawSel.addRange(range);
                    }
                    if (selectionNotFocus && this.view.root.activeElement == this.dom) {
                        this.dom.blur();
                        if (activeElt)
                            activeElt.focus();
                    }
                });
                this.view.observer.setSelectionRange(anchor, head);
            }
            this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
            this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
        }
        // If a zero-length widget is inserted next to the cursor during
        // composition, avoid moving it across it and disrupting the
        // composition.
        suppressWidgetCursorChange(sel, cursor) {
            return this.hasComposition && cursor.empty &&
                isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) &&
                this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor.head;
        }
        enforceCursorAssoc() {
            if (this.hasComposition)
                return;
            let { view } = this, cursor = view.state.selection.main;
            let sel = getSelection(view.root);
            let { anchorNode, anchorOffset } = view.observer.selectionRange;
            if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
                return;
            let line = LineView.find(this, cursor.head);
            if (!line)
                return;
            let lineStart = line.posAtStart;
            if (cursor.head == lineStart || cursor.head == lineStart + line.length)
                return;
            let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
            if (!before || !after || before.bottom > after.top)
                return;
            let dom = this.domAtPos(cursor.head + cursor.assoc);
            sel.collapse(dom.node, dom.offset);
            sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
            // This can go wrong in corner cases like single-character lines,
            // so check and reset if necessary.
            view.observer.readSelectionRange();
            let newRange = view.observer.selectionRange;
            if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
                sel.collapse(anchorNode, anchorOffset);
        }
        // If a position is in/near a block widget, move it to a nearby text
        // line, since we don't want the cursor inside a block widget.
        moveToLine(pos) {
            // Block widgets will return positions before/after them, which
            // are thus directly in the document DOM element.
            let dom = this.dom, newPos;
            if (pos.node != dom)
                return pos;
            for (let i = pos.offset; !newPos && i < dom.childNodes.length; i++) {
                let view = ContentView.get(dom.childNodes[i]);
                if (view instanceof LineView)
                    newPos = view.domAtPos(0);
            }
            for (let i = pos.offset - 1; !newPos && i >= 0; i--) {
                let view = ContentView.get(dom.childNodes[i]);
                if (view instanceof LineView)
                    newPos = view.domAtPos(view.length);
            }
            return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
        }
        nearest(dom) {
            for (let cur = dom; cur;) {
                let domView = ContentView.get(cur);
                if (domView && domView.rootView == this)
                    return domView;
                cur = cur.parentNode;
            }
            return null;
        }
        posFromDOM(node, offset) {
            let view = this.nearest(node);
            if (!view)
                throw new RangeError("Trying to find position for a DOM position outside of the document");
            return view.localPosFromDOM(node, offset) + view.posAtStart;
        }
        domAtPos(pos) {
            let { i, off } = this.childCursor().findPos(pos, -1);
            for (; i < this.children.length - 1;) {
                let child = this.children[i];
                if (off < child.length || child instanceof LineView)
                    break;
                i++;
                off = 0;
            }
            return this.children[i].domAtPos(off);
        }
        coordsAt(pos, side) {
            let best = null, bestPos = 0;
            for (let off = this.length, i = this.children.length - 1; i >= 0; i--) {
                let child = this.children[i], end = off - child.breakAfter, start = end - child.length;
                if (end < pos)
                    break;
                if (start <= pos && (start < pos || child.covers(-1)) && (end > pos || child.covers(1)) &&
                    (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
                    best = child;
                    bestPos = start;
                }
                else if (best && start == pos && end == pos && child instanceof BlockWidgetView && Math.abs(side) < 2) {
                    if (child.deco.startSide < 0)
                        break;
                    else if (i)
                        best = null;
                }
                off = start;
            }
            return best ? best.coordsAt(pos - bestPos, side) : null;
        }
        coordsForChar(pos) {
            let { i, off } = this.childPos(pos, 1), child = this.children[i];
            if (!(child instanceof LineView))
                return null;
            while (child.children.length) {
                let { i, off: childOff } = child.childPos(off, 1);
                for (;; i++) {
                    if (i == child.children.length)
                        return null;
                    if ((child = child.children[i]).length)
                        break;
                }
                off = childOff;
            }
            if (!(child instanceof TextView))
                return null;
            let end = findClusterBreak(child.text, off);
            if (end == off)
                return null;
            let rects = textRange(child.dom, off, end).getClientRects();
            for (let i = 0; i < rects.length; i++) {
                let rect = rects[i];
                if (i == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right)
                    return rect;
            }
            return null;
        }
        measureVisibleLineHeights(viewport) {
            let result = [], { from, to } = viewport;
            let contentWidth = this.view.contentDOM.clientWidth;
            let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
            let widest = -1, ltr = this.view.textDirection == Direction.LTR;
            for (let pos = 0, i = 0; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (end > to)
                    break;
                if (pos >= from) {
                    let childRect = child.dom.getBoundingClientRect();
                    result.push(childRect.height);
                    if (isWider) {
                        let last = child.dom.lastChild;
                        let rects = last ? clientRectsFor(last) : [];
                        if (rects.length) {
                            let rect = rects[rects.length - 1];
                            let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
                            if (width > widest) {
                                widest = width;
                                this.minWidth = contentWidth;
                                this.minWidthFrom = pos;
                                this.minWidthTo = end;
                            }
                        }
                    }
                }
                pos = end + child.breakAfter;
            }
            return result;
        }
        textDirectionAt(pos) {
            let { i } = this.childPos(pos, 1);
            return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
        }
        measureTextSize() {
            for (let child of this.children) {
                if (child instanceof LineView) {
                    let measure = child.measureTextSize();
                    if (measure)
                        return measure;
                }
            }
            // If no workable line exists, force a layout of a measurable element
            let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
            dummy.className = "cm-line";
            dummy.style.width = "99999px";
            dummy.style.position = "absolute";
            dummy.textContent = "abc def ghi jkl mno pqr stu";
            this.view.observer.ignore(() => {
                this.dom.appendChild(dummy);
                let rect = clientRectsFor(dummy.firstChild)[0];
                lineHeight = dummy.getBoundingClientRect().height;
                charWidth = rect ? rect.width / 27 : 7;
                textHeight = rect ? rect.height : lineHeight;
                dummy.remove();
            });
            return { lineHeight, charWidth, textHeight };
        }
        childCursor(pos = this.length) {
            // Move back to start of last element when possible, so that
            // `ChildCursor.findPos` doesn't have to deal with the edge case
            // of being after the last element.
            let i = this.children.length;
            if (i)
                pos -= this.children[--i].length;
            return new ChildCursor(this.children, pos, i);
        }
        computeBlockGapDeco() {
            let deco = [], vs = this.view.viewState;
            for (let pos = 0, i = 0;; i++) {
                let next = i == vs.viewports.length ? null : vs.viewports[i];
                let end = next ? next.from - 1 : this.length;
                if (end > pos) {
                    let height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
                    deco.push(Decoration.replace({
                        widget: new BlockGapWidget(height),
                        block: true,
                        inclusive: true,
                        isBlockGap: true,
                    }).range(pos, end));
                }
                if (!next)
                    break;
                pos = next.to + 1;
            }
            return Decoration.set(deco);
        }
        updateDeco() {
            let i = 1;
            let allDeco = this.view.state.facet(decorations).map(d => {
                let dynamic = this.dynamicDecorationMap[i++] = typeof d == "function";
                return dynamic ? d(this.view) : d;
            });
            let dynamicOuter = false, outerDeco = this.view.state.facet(outerDecorations).map((d, i) => {
                let dynamic = typeof d == "function";
                if (dynamic)
                    dynamicOuter = true;
                return dynamic ? d(this.view) : d;
            });
            if (outerDeco.length) {
                this.dynamicDecorationMap[i++] = dynamicOuter;
                allDeco.push(RangeSet.join(outerDeco));
            }
            this.decorations = [
                this.editContextFormatting,
                ...allDeco,
                this.computeBlockGapDeco(),
                this.view.viewState.lineGapDeco
            ];
            while (i < this.decorations.length)
                this.dynamicDecorationMap[i++] = false;
            return this.decorations;
        }
        scrollIntoView(target) {
            if (target.isSnapshot) {
                let ref = this.view.viewState.lineBlockAt(target.range.head);
                this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
                this.view.scrollDOM.scrollLeft = target.xMargin;
                return;
            }
            for (let handler of this.view.state.facet(scrollHandler)) {
                try {
                    if (handler(this.view, target.range, target))
                        return true;
                }
                catch (e) {
                    logException(this.view.state, e, "scroll handler");
                }
            }
            let { range } = target;
            let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
            if (!rect)
                return;
            if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
                rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),
                    right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };
            let margins = getScrollMargins(this.view);
            let targetRect = {
                left: rect.left - margins.left, top: rect.top - margins.top,
                right: rect.right + margins.right, bottom: rect.bottom + margins.bottom
            };
            let { offsetWidth, offsetHeight } = this.view.scrollDOM;
            scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);
        }
    }
    function betweenUneditable(pos) {
        return pos.node.nodeType == 1 && pos.node.firstChild &&
            (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
            (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
    }
    function findCompositionNode(view, headPos) {
        let sel = view.observer.selectionRange;
        if (!sel.focusNode)
            return null;
        let textBefore = textNodeBefore(sel.focusNode, sel.focusOffset);
        let textAfter = textNodeAfter(sel.focusNode, sel.focusOffset);
        let textNode = textBefore || textAfter;
        if (textAfter && textBefore && textAfter.node != textBefore.node) {
            let descAfter = ContentView.get(textAfter.node);
            if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {
                textNode = textAfter;
            }
            else if (view.docView.lastCompositionAfterCursor) {
                let descBefore = ContentView.get(textBefore.node);
                if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue))
                    textNode = textAfter;
            }
        }
        view.docView.lastCompositionAfterCursor = textNode != textBefore;
        if (!textNode)
            return null;
        let from = headPos - textNode.offset;
        return { from, to: from + textNode.node.nodeValue.length, node: textNode.node };
    }
    function findCompositionRange(view, changes, headPos) {
        let found = findCompositionNode(view, headPos);
        if (!found)
            return null;
        let { node: textNode, from, to } = found, text = textNode.nodeValue;
        // Don't try to preserve multi-line compositions
        if (/[\n\r]/.test(text))
            return null;
        if (view.state.doc.sliceString(found.from, found.to) != text)
            return null;
        let inv = changes.invertedDesc;
        let range = new ChangedRange(inv.mapPos(from), inv.mapPos(to), from, to);
        let marks = [];
        for (let parent = textNode.parentNode;; parent = parent.parentNode) {
            let parentView = ContentView.get(parent);
            if (parentView instanceof MarkView)
                marks.push({ node: parent, deco: parentView.mark });
            else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM)
                return { range, text: textNode, marks, line: parent };
            else if (parent != view.contentDOM)
                marks.push({ node: parent, deco: new MarkDecoration({
                        inclusive: true,
                        attributes: getAttrs(parent),
                        tagName: parent.tagName.toLowerCase()
                    }) });
            else
                return null;
        }
    }
    function nextToUneditable(node, offset) {
        if (node.nodeType != 1)
            return 0;
        return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* NextTo.Before */ : 0) |
            (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* NextTo.After */ : 0);
    }
    let DecorationComparator$1 = class DecorationComparator {
        constructor() {
            this.changes = [];
        }
        compareRange(from, to) { addRange(from, to, this.changes); }
        comparePoint(from, to) { addRange(from, to, this.changes); }
        boundChange(pos) { addRange(pos, pos, this.changes); }
    };
    function findChangedDeco(a, b, diff) {
        let comp = new DecorationComparator$1;
        RangeSet.compare(a, b, diff, comp);
        return comp.changes;
    }
    function inUneditable(node, inside) {
        for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
            if (cur.nodeType == 1 && cur.contentEditable == 'false') {
                return true;
            }
        }
        return false;
    }
    function touchesComposition(changes, composition) {
        let touched = false;
        if (composition)
            changes.iterChangedRanges((from, to) => {
                if (from < composition.to && to > composition.from)
                    touched = true;
            });
        return touched;
    }

    function groupAt(state, pos, bias = 1) {
        let categorize = state.charCategorizer(pos);
        let line = state.doc.lineAt(pos), linePos = pos - line.from;
        if (line.length == 0)
            return EditorSelection.cursor(pos);
        if (linePos == 0)
            bias = 1;
        else if (linePos == line.length)
            bias = -1;
        let from = linePos, to = linePos;
        if (bias < 0)
            from = findClusterBreak(line.text, linePos, false);
        else
            to = findClusterBreak(line.text, linePos);
        let cat = categorize(line.text.slice(from, to));
        while (from > 0) {
            let prev = findClusterBreak(line.text, from, false);
            if (categorize(line.text.slice(prev, from)) != cat)
                break;
            from = prev;
        }
        while (to < line.length) {
            let next = findClusterBreak(line.text, to);
            if (categorize(line.text.slice(to, next)) != cat)
                break;
            to = next;
        }
        return EditorSelection.range(from + line.from, to + line.from);
    }
    // Search the DOM for the {node, offset} position closest to the given
    // coordinates. Very inefficient and crude, but can usually be avoided
    // by calling caret(Position|Range)FromPoint instead.
    function getdx(x, rect) {
        return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
    }
    function getdy(y, rect) {
        return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
    }
    function yOverlap(a, b) {
        return a.top < b.bottom - 1 && a.bottom > b.top + 1;
    }
    function upTop(rect, top) {
        return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
    }
    function upBot(rect, bottom) {
        return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
    }
    function domPosAtCoords(parent, x, y) {
        let closest, closestRect, closestX, closestY, closestOverlap = false;
        let above, below, aboveRect, belowRect;
        for (let child = parent.firstChild; child; child = child.nextSibling) {
            let rects = clientRectsFor(child);
            for (let i = 0; i < rects.length; i++) {
                let rect = rects[i];
                if (closestRect && yOverlap(closestRect, rect))
                    rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
                let dx = getdx(x, rect), dy = getdy(y, rect);
                if (dx == 0 && dy == 0)
                    return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
                if (!closest || closestY > dy || closestY == dy && closestX > dx) {
                    closest = child;
                    closestRect = rect;
                    closestX = dx;
                    closestY = dy;
                    closestOverlap = !dx ? true : x < rect.left ? i > 0 : i < rects.length - 1;
                }
                if (dx == 0) {
                    if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                        above = child;
                        aboveRect = rect;
                    }
                    else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                        below = child;
                        belowRect = rect;
                    }
                }
                else if (aboveRect && yOverlap(aboveRect, rect)) {
                    aboveRect = upBot(aboveRect, rect.bottom);
                }
                else if (belowRect && yOverlap(belowRect, rect)) {
                    belowRect = upTop(belowRect, rect.top);
                }
            }
        }
        if (aboveRect && aboveRect.bottom >= y) {
            closest = above;
            closestRect = aboveRect;
        }
        else if (belowRect && belowRect.top <= y) {
            closest = below;
            closestRect = belowRect;
        }
        if (!closest)
            return { node: parent, offset: 0 };
        let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
        if (closest.nodeType == 3)
            return domPosInText(closest, clipX, y);
        if (closestOverlap && closest.contentEditable != "false")
            return domPosAtCoords(closest, clipX, y);
        let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
            (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
        return { node: parent, offset };
    }
    function domPosInText(node, x, y) {
        let len = node.nodeValue.length;
        let closestOffset = -1, closestDY = 1e9, generalSide = 0;
        for (let i = 0; i < len; i++) {
            let rects = textRange(node, i, i + 1).getClientRects();
            for (let j = 0; j < rects.length; j++) {
                let rect = rects[j];
                if (rect.top == rect.bottom)
                    continue;
                if (!generalSide)
                    generalSide = x - rect.left;
                let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
                if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
                    let right = x >= (rect.left + rect.right) / 2, after = right;
                    if (browser.chrome || browser.gecko) {
                        // Check for RTL on browsers that support getting client
                        // rects for empty ranges.
                        let rectBefore = textRange(node, i).getBoundingClientRect();
                        if (rectBefore.left == rect.right)
                            after = !right;
                    }
                    if (dy <= 0)
                        return { node, offset: i + (after ? 1 : 0) };
                    closestOffset = i + (after ? 1 : 0);
                    closestDY = dy;
                }
            }
        }
        return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
    }
    function posAtCoords(view, coords, precise, bias = -1) {
        var _a, _b;
        let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;
        let block, { docHeight } = view.viewState;
        let { x, y } = coords, yOffset = y - docTop;
        if (yOffset < 0)
            return 0;
        if (yOffset > docHeight)
            return view.state.doc.length;
        // Scan for a text block near the queried y position
        for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false;;) {
            block = view.elementAtHeight(yOffset);
            if (block.type == BlockType.Text)
                break;
            for (;;) {
                // Move the y position out of this block
                yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
                if (yOffset >= 0 && yOffset <= docHeight)
                    break;
                // If the document consists entirely of replaced widgets, we
                // won't find a text block, so return 0
                if (bounced)
                    return precise ? null : 0;
                bounced = true;
                bias = -bias;
            }
        }
        y = docTop + yOffset;
        let lineStart = block.from;
        // If this is outside of the rendered viewport, we can't determine a position
        if (lineStart < view.viewport.from)
            return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
        if (lineStart > view.viewport.to)
            return view.viewport.to == view.state.doc.length ? view.state.doc.length :
                precise ? null : posAtCoordsImprecise(view, content, block, x, y);
        // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
        let doc = view.dom.ownerDocument;
        let root = view.root.elementFromPoint ? view.root : doc;
        let element = root.elementFromPoint(x, y);
        if (element && !view.contentDOM.contains(element))
            element = null;
        // If the element is unexpected, clip x at the sides of the content area and try again
        if (!element) {
            x = Math.max(content.left + 1, Math.min(content.right - 1, x));
            element = root.elementFromPoint(x, y);
            if (element && !view.contentDOM.contains(element))
                element = null;
        }
        // There's visible editor content under the point, so we can try
        // using caret(Position|Range)FromPoint as a shortcut
        let node, offset = -1;
        if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
            if (doc.caretPositionFromPoint) {
                let pos = doc.caretPositionFromPoint(x, y);
                if (pos)
                    ({ offsetNode: node, offset } = pos);
            }
            else if (doc.caretRangeFromPoint) {
                let range = doc.caretRangeFromPoint(x, y);
                if (range) {
                    ({ startContainer: node, startOffset: offset } = range);
                    if (!view.contentDOM.contains(node) ||
                        browser.safari && isSuspiciousSafariCaretResult(node, offset, x) ||
                        browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))
                        node = undefined;
                }
            }
            // Chrome will return offsets into <input> elements without child
            // nodes, which will lead to a null deref below, so clip the
            // offset to the node size.
            if (node)
                offset = Math.min(maxOffset(node), offset);
        }
        // No luck, do our own (potentially expensive) search
        if (!node || !view.docView.dom.contains(node)) {
            let line = LineView.find(view.docView, lineStart);
            if (!line)
                return yOffset > block.top + block.height / 2 ? block.to : block.from;
            ({ node, offset } = domPosAtCoords(line.dom, x, y));
        }
        let nearest = view.docView.nearest(node);
        if (!nearest)
            return null;
        if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
            let rect = nearest.dom.getBoundingClientRect();
            return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2
                ? nearest.posAtStart : nearest.posAtEnd;
        }
        else {
            return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
        }
    }
    function posAtCoordsImprecise(view, contentRect, block, x, y) {
        let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
        if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
            let textHeight = view.viewState.heightOracle.textHeight;
            let line = Math.floor((y - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
            into += line * view.viewState.heightOracle.lineLength;
        }
        let content = view.state.sliceDoc(block.from, block.to);
        return block.from + findColumn(content, into, view.state.tabSize);
    }
    // In case of a high line height, Safari's caretRangeFromPoint treats
    // the space between lines as belonging to the last character of the
    // line before. This is used to detect such a result so that it can be
    // ignored (issue #401).
    function isSuspiciousSafariCaretResult(node, offset, x) {
        let len, scan = node;
        if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
            return false;
        for (;;) { // Check that there is no content after this node
            let next = scan.nextSibling;
            if (next) {
                if (next.nodeName == "BR")
                    break;
                return false;
            }
            else {
                let parent = scan.parentNode;
                if (!parent || parent.nodeName == "DIV")
                    break;
                scan = parent;
            }
        }
        return textRange(node, len - 1, len).getBoundingClientRect().right > x;
    }
    // Chrome will move positions between lines to the start of the next line
    function isSuspiciousChromeCaretResult(node, offset, x) {
        if (offset != 0)
            return false;
        for (let cur = node;;) {
            let parent = cur.parentNode;
            if (!parent || parent.nodeType != 1 || parent.firstChild != cur)
                return false;
            if (parent.classList.contains("cm-line"))
                break;
            cur = parent;
        }
        let rect = node.nodeType == 1 ? node.getBoundingClientRect()
            : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
        return x - rect.left > 5;
    }
    function blockAt(view, pos, side) {
        let line = view.lineBlockAt(pos);
        if (Array.isArray(line.type)) {
            let best;
            for (let l of line.type) {
                if (l.from > pos)
                    break;
                if (l.to < pos)
                    continue;
                if (l.from < pos && l.to > pos)
                    return l;
                if (!best || (l.type == BlockType.Text && (best.type != l.type || (side < 0 ? l.from < pos : l.to > pos))))
                    best = l;
            }
            return best || line;
        }
        return line;
    }
    function moveToLineBoundary(view, start, forward, includeWrap) {
        let line = blockAt(view, start.head, start.assoc || -1);
        let coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null
            : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
        if (coords) {
            let editorRect = view.dom.getBoundingClientRect();
            let direction = view.textDirectionAt(line.from);
            let pos = view.posAtCoords({ x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
                y: (coords.top + coords.bottom) / 2 });
            if (pos != null)
                return EditorSelection.cursor(pos, forward ? -1 : 1);
        }
        return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
    }
    function moveByChar(view, start, forward, by) {
        let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
        let direction = view.textDirectionAt(line.from);
        for (let cur = start, check = null;;) {
            let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;
            if (!next) {
                if (line.number == (forward ? view.state.doc.lines : 1))
                    return cur;
                char = "\n";
                line = view.state.doc.line(line.number + (forward ? 1 : -1));
                spans = view.bidiSpans(line);
                next = view.visualLineSide(line, !forward);
            }
            if (!check) {
                if (!by)
                    return next;
                check = by(char);
            }
            else if (!check(char)) {
                return cur;
            }
            cur = next;
        }
    }
    function byGroup(view, pos, start) {
        let categorize = view.state.charCategorizer(pos);
        let cat = categorize(start);
        return (next) => {
            let nextCat = categorize(next);
            if (cat == CharCategory.Space)
                cat = nextCat;
            return cat == nextCat;
        };
    }
    function moveVertically(view, start, forward, distance) {
        let startPos = start.head, dir = forward ? 1 : -1;
        if (startPos == (forward ? view.state.doc.length : 0))
            return EditorSelection.cursor(startPos, start.assoc);
        let goal = start.goalColumn, startY;
        let rect = view.contentDOM.getBoundingClientRect();
        let startCoords = view.coordsAtPos(startPos, start.assoc || -1), docTop = view.documentTop;
        if (startCoords) {
            if (goal == null)
                goal = startCoords.left - rect.left;
            startY = dir < 0 ? startCoords.top : startCoords.bottom;
        }
        else {
            let line = view.viewState.lineBlockAt(startPos);
            if (goal == null)
                goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
            startY = (dir < 0 ? line.top : line.bottom) + docTop;
        }
        let resolvedGoal = rect.left + goal;
        let dist = distance !== null && distance !== void 0 ? distance : (view.viewState.heightOracle.textHeight >> 1);
        for (let extra = 0;; extra += 10) {
            let curY = startY + (dist + extra) * dir;
            let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
            if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
                let charRect = view.docView.coordsForChar(pos);
                let assoc = !charRect || curY < charRect.top ? -1 : 1;
                return EditorSelection.cursor(pos, assoc, undefined, goal);
            }
        }
    }
    function skipAtomicRanges(atoms, pos, bias) {
        for (;;) {
            let moved = 0;
            for (let set of atoms) {
                set.between(pos - 1, pos + 1, (from, to, value) => {
                    if (pos > from && pos < to) {
                        let side = moved || bias || (pos - from < to - pos ? -1 : 1);
                        pos = side < 0 ? from : to;
                        moved = side;
                    }
                });
            }
            if (!moved)
                return pos;
        }
    }
    function skipAtoms(view, oldPos, pos) {
        let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map(f => f(view)), pos.from, oldPos.head > pos.from ? -1 : 1);
        return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
    }

    const LineBreakPlaceholder = "\uffff";
    class DOMReader {
        constructor(points, state) {
            this.points = points;
            this.text = "";
            this.lineSeparator = state.facet(EditorState.lineSeparator);
        }
        append(text) {
            this.text += text;
        }
        lineBreak() {
            this.text += LineBreakPlaceholder;
        }
        readRange(start, end) {
            if (!start)
                return this;
            let parent = start.parentNode;
            for (let cur = start;;) {
                this.findPointBefore(parent, cur);
                let oldLen = this.text.length;
                this.readNode(cur);
                let next = cur.nextSibling;
                if (next == end)
                    break;
                let view = ContentView.get(cur), nextView = ContentView.get(next);
                if (view && nextView ? view.breakAfter :
                    (view ? view.breakAfter : isBlockElement(cur)) ||
                        (isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore) && this.text.length > oldLen))
                    this.lineBreak();
                cur = next;
            }
            this.findPointBefore(parent, end);
            return this;
        }
        readTextNode(node) {
            let text = node.nodeValue;
            for (let point of this.points)
                if (point.node == node)
                    point.pos = this.text.length + Math.min(point.offset, text.length);
            for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
                let nextBreak = -1, breakSize = 1, m;
                if (this.lineSeparator) {
                    nextBreak = text.indexOf(this.lineSeparator, off);
                    breakSize = this.lineSeparator.length;
                }
                else if (m = re.exec(text)) {
                    nextBreak = m.index;
                    breakSize = m[0].length;
                }
                this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
                if (nextBreak < 0)
                    break;
                this.lineBreak();
                if (breakSize > 1)
                    for (let point of this.points)
                        if (point.node == node && point.pos > this.text.length)
                            point.pos -= breakSize - 1;
                off = nextBreak + breakSize;
            }
        }
        readNode(node) {
            if (node.cmIgnore)
                return;
            let view = ContentView.get(node);
            let fromView = view && view.overrideDOMText;
            if (fromView != null) {
                this.findPointInside(node, fromView.length);
                for (let i = fromView.iter(); !i.next().done;) {
                    if (i.lineBreak)
                        this.lineBreak();
                    else
                        this.append(i.value);
                }
            }
            else if (node.nodeType == 3) {
                this.readTextNode(node);
            }
            else if (node.nodeName == "BR") {
                if (node.nextSibling)
                    this.lineBreak();
            }
            else if (node.nodeType == 1) {
                this.readRange(node.firstChild, null);
            }
        }
        findPointBefore(node, next) {
            for (let point of this.points)
                if (point.node == node && node.childNodes[point.offset] == next)
                    point.pos = this.text.length;
        }
        findPointInside(node, length) {
            for (let point of this.points)
                if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
                    point.pos = this.text.length + (isAtEnd(node, point.node, point.offset) ? length : 0);
        }
    }
    function isAtEnd(parent, node, offset) {
        for (;;) {
            if (!node || offset < maxOffset(node))
                return false;
            if (node == parent)
                return true;
            offset = domIndex(node) + 1;
            node = node.parentNode;
        }
    }
    class DOMPoint {
        constructor(node, offset) {
            this.node = node;
            this.offset = offset;
            this.pos = -1;
        }
    }

    class DOMChange {
        constructor(view, start, end, typeOver) {
            this.typeOver = typeOver;
            this.bounds = null;
            this.text = "";
            this.domChanged = start > -1;
            let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
            if (view.state.readOnly && start > -1) {
                // Ignore changes when the editor is read-only
                this.newSel = null;
            }
            else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
                let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
                let reader = new DOMReader(selPoints, view.state);
                reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
                this.text = reader.text;
                this.newSel = selectionFromPoints(selPoints, this.bounds.from);
            }
            else {
                let domSel = view.observer.selectionRange;
                let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||
                    !contains(view.contentDOM, domSel.focusNode)
                    ? view.state.selection.main.head
                    : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
                let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||
                    !contains(view.contentDOM, domSel.anchorNode)
                    ? view.state.selection.main.anchor
                    : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
                // iOS will refuse to select the block gaps when doing
                // select-all.
                // Chrome will put the selection *inside* them, confusing
                // posFromDOM
                let vp = view.viewport;
                if ((browser.ios || browser.chrome) && view.state.selection.main.empty && head != anchor &&
                    (vp.from > 0 || vp.to < view.state.doc.length)) {
                    let from = Math.min(head, anchor), to = Math.max(head, anchor);
                    let offFrom = vp.from - from, offTo = vp.to - to;
                    if ((offFrom == 0 || offFrom == 1 || from == 0) && (offTo == 0 || offTo == -1 || to == view.state.doc.length)) {
                        head = 0;
                        anchor = view.state.doc.length;
                    }
                }
                this.newSel = EditorSelection.single(anchor, head);
            }
        }
    }
    function applyDOMChange(view, domChange) {
        let change;
        let { newSel } = domChange, sel = view.state.selection.main;
        let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
        if (domChange.bounds) {
            let { from, to } = domChange.bounds;
            let preferredPos = sel.from, preferredSide = null;
            // Prefer anchoring to end when Backspace is pressed (or, on
            // Android, when something was deleted)
            if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
                preferredPos = sel.to;
                preferredSide = "end";
            }
            let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
            if (diff) {
                // Chrome inserts two newlines when pressing shift-enter at the
                // end of a line. DomChange drops one of those.
                if (browser.chrome && lastKey == 13 &&
                    diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
                    diff.toB--;
                change = { from: from + diff.from, to: from + diff.toA,
                    insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };
            }
        }
        else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
            newSel = null;
        }
        if (!change && !newSel)
            return false;
        if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
            // Heuristic to notice typing over a selected character
            change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
        }
        else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 &&
            /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
            // Detect insert-period-on-double-space Mac and Android behavior,
            // and transform it into a regular space insert.
            if (newSel && change.insert.length == 2)
                newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
            change = { from: change.from, to: change.to, insert: Text.of([change.insert.toString().replace(".", " ")]) };
        }
        else if (change && change.from >= sel.from && change.to <= sel.to &&
            (change.from != sel.from || change.to != sel.to) &&
            (sel.to - sel.from) - (change.to - change.from) <= 4) {
            // If the change is inside the selection and covers most of it,
            // assume it is a selection replace (with identical characters at
            // the start/end not included in the diff)
            change = {
                from: sel.from, to: sel.to,
                insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
            };
        }
        else if (browser.chrome && change && change.from == change.to && change.from == sel.head &&
            change.insert.toString() == "\n " && view.lineWrapping) {
            // In Chrome, if you insert a space at the start of a wrapped
            // line, it will actually insert a newline and a space, causing a
            // bogus new line to be created in CodeMirror (#968)
            if (newSel)
                newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
            change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
        }
        if (change) {
            return applyDOMChangeInner(view, change, newSel, lastKey);
        }
        else if (newSel && !newSel.main.eq(sel)) {
            let scrollIntoView = false, userEvent = "select";
            if (view.inputState.lastSelectionTime > Date.now() - 50) {
                if (view.inputState.lastSelectionOrigin == "select")
                    scrollIntoView = true;
                userEvent = view.inputState.lastSelectionOrigin;
            }
            view.dispatch({ selection: newSel, scrollIntoView, userEvent });
            return true;
        }
        else {
            return false;
        }
    }
    function applyDOMChangeInner(view, change, newSel, lastKey = -1) {
        if (browser.ios && view.inputState.flushIOSKey(change))
            return true;
        let sel = view.state.selection.main;
        // Android browsers don't fire reasonable key events for enter,
        // backspace, or delete. So this detects changes that look like
        // they're caused by those keys, and reinterprets them as key
        // events. (Some of these keys are also handled by beforeinput
        // events and the pendingAndroidKey mechanism, but that's not
        // reliable in all situations.)
        if (browser.android &&
            ((change.to == sel.to &&
                // GBoard will sometimes remove a space it just inserted
                // after a completion when you press enter
                (change.from == sel.from || change.from == sel.from - 1 && view.state.sliceDoc(change.from, sel.from) == " ") &&
                change.insert.length == 1 && change.insert.lines == 2 &&
                dispatchKey(view.contentDOM, "Enter", 13)) ||
                ((change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 ||
                    lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) &&
                    dispatchKey(view.contentDOM, "Backspace", 8)) ||
                (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
                    dispatchKey(view.contentDOM, "Delete", 46))))
            return true;
        let text = change.insert.toString();
        if (view.inputState.composing >= 0)
            view.inputState.composing++;
        let defaultTr;
        let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
        if (!view.state.facet(inputHandler$1).some(h => h(view, change.from, change.to, text, defaultInsert)))
            view.dispatch(defaultInsert());
        return true;
    }
    function applyDefaultInsert(view, change, newSel) {
        let tr, startState = view.state, sel = startState.selection.main;
        if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
            (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&
            view.inputState.composing < 0) {
            let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
            let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
            tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
        }
        else {
            let changes = startState.changes(change);
            let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;
            // Try to apply a composition change to all cursors
            if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&
                change.to <= sel.to && change.to >= sel.to - 10) {
                let replaced = view.state.sliceDoc(change.from, change.to);
                let compositionRange, composition = newSel && findCompositionNode(view, newSel.main.head);
                if (composition) {
                    let dLen = change.insert.length - (change.to - change.from);
                    compositionRange = { from: composition.from, to: composition.to - dLen };
                }
                else {
                    compositionRange = view.state.doc.lineAt(sel.head);
                }
                let offset = sel.to - change.to, size = sel.to - sel.from;
                tr = startState.changeByRange(range => {
                    if (range.from == sel.from && range.to == sel.to)
                        return { changes, range: mainSel || range.map(changes) };
                    let to = range.to - offset, from = to - replaced.length;
                    if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
                        // Unfortunately, there's no way to make multiple
                        // changes in the same node work without aborting
                        // composition, so cursors in the composition range are
                        // ignored.
                        range.to >= compositionRange.from && range.from <= compositionRange.to)
                        return { range };
                    let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
                    return {
                        changes: rangeChanges,
                        range: !mainSel ? range.map(rangeChanges) :
                            EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
                    };
                });
            }
            else {
                tr = {
                    changes,
                    selection: mainSel && startState.selection.replaceRange(mainSel)
                };
            }
        }
        let userEvent = "input.type";
        if (view.composing ||
            view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
            view.inputState.compositionPendingChange = false;
            userEvent += ".compose";
            if (view.inputState.compositionFirstChange) {
                userEvent += ".start";
                view.inputState.compositionFirstChange = false;
            }
        }
        return startState.update(tr, { userEvent, scrollIntoView: true });
    }
    function findDiff(a, b, preferredPos, preferredSide) {
        let minLen = Math.min(a.length, b.length);
        let from = 0;
        while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
            from++;
        if (from == minLen && a.length == b.length)
            return null;
        let toA = a.length, toB = b.length;
        while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
            toA--;
            toB--;
        }
        if (preferredSide == "end") {
            let adjust = Math.max(0, from - Math.min(toA, toB));
            preferredPos -= toA + adjust - from;
        }
        if (toA < from && a.length < b.length) {
            let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
            from -= move;
            toB = from + (toB - toA);
            toA = from;
        }
        else if (toB < from) {
            let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
            from -= move;
            toA = from + (toA - toB);
            toB = from;
        }
        return { from, toA, toB };
    }
    function selectionPoints(view) {
        let result = [];
        if (view.root.activeElement != view.contentDOM)
            return result;
        let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
        if (anchorNode) {
            result.push(new DOMPoint(anchorNode, anchorOffset));
            if (focusNode != anchorNode || focusOffset != anchorOffset)
                result.push(new DOMPoint(focusNode, focusOffset));
        }
        return result;
    }
    function selectionFromPoints(points, base) {
        if (points.length == 0)
            return null;
        let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
        return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
    }

    class InputState {
        setSelectionOrigin(origin) {
            this.lastSelectionOrigin = origin;
            this.lastSelectionTime = Date.now();
        }
        constructor(view) {
            this.view = view;
            this.lastKeyCode = 0;
            this.lastKeyTime = 0;
            this.lastTouchTime = 0;
            this.lastFocusTime = 0;
            this.lastScrollTop = 0;
            this.lastScrollLeft = 0;
            // On iOS, some keys need to have their default behavior happen
            // (after which we retroactively handle them and reset the DOM) to
            // avoid messing up the virtual keyboard state.
            this.pendingIOSKey = undefined;
            /**
            When enabled (>-1), tab presses are not given to key handlers,
            leaving the browser's default behavior. If >0, the mode expires
            at that timestamp, and any other keypress clears it.
            Esc enables temporary tab focus mode for two seconds when not
            otherwise handled.
            */
            this.tabFocusMode = -1;
            this.lastSelectionOrigin = null;
            this.lastSelectionTime = 0;
            this.lastContextMenu = 0;
            this.scrollHandlers = [];
            this.handlers = Object.create(null);
            // -1 means not in a composition. Otherwise, this counts the number
            // of changes made during the composition. The count is used to
            // avoid treating the start state of the composition, before any
            // changes have been made, as part of the composition.
            this.composing = -1;
            // Tracks whether the next change should be marked as starting the
            // composition (null means no composition, true means next is the
            // first, false means first has already been marked for this
            // composition)
            this.compositionFirstChange = null;
            // End time of the previous composition
            this.compositionEndedAt = 0;
            // Used in a kludge to detect when an Enter keypress should be
            // considered part of the composition on Safari, which fires events
            // in the wrong order
            this.compositionPendingKey = false;
            // Used to categorize changes as part of a composition, even when
            // the mutation events fire shortly after the compositionend event
            this.compositionPendingChange = false;
            this.mouseSelection = null;
            // When a drag from the editor is active, this points at the range
            // being dragged.
            this.draggedContent = null;
            this.handleEvent = this.handleEvent.bind(this);
            this.notifiedFocused = view.hasFocus;
            // On Safari adding an input event handler somehow prevents an
            // issue where the composition vanishes when you press enter.
            if (browser.safari)
                view.contentDOM.addEventListener("input", () => null);
            if (browser.gecko)
                firefoxCopyCutHack(view.contentDOM.ownerDocument);
        }
        handleEvent(event) {
            if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))
                return;
            if (event.type == "keydown" && this.keydown(event))
                return;
            if (this.view.updateState != 0 /* UpdateState.Idle */)
                Promise.resolve().then(() => this.runHandlers(event.type, event));
            else
                this.runHandlers(event.type, event);
        }
        runHandlers(type, event) {
            let handlers = this.handlers[type];
            if (handlers) {
                for (let observer of handlers.observers)
                    observer(this.view, event);
                for (let handler of handlers.handlers) {
                    if (event.defaultPrevented)
                        break;
                    if (handler(this.view, event)) {
                        event.preventDefault();
                        break;
                    }
                }
            }
        }
        ensureHandlers(plugins) {
            let handlers = computeHandlers(plugins), prev = this.handlers, dom = this.view.contentDOM;
            for (let type in handlers)
                if (type != "scroll") {
                    let passive = !handlers[type].handlers.length;
                    let exists = prev[type];
                    if (exists && passive != !exists.handlers.length) {
                        dom.removeEventListener(type, this.handleEvent);
                        exists = null;
                    }
                    if (!exists)
                        dom.addEventListener(type, this.handleEvent, { passive });
                }
            for (let type in prev)
                if (type != "scroll" && !handlers[type])
                    dom.removeEventListener(type, this.handleEvent);
            this.handlers = handlers;
        }
        keydown(event) {
            // Must always run, even if a custom handler handled the event
            this.lastKeyCode = event.keyCode;
            this.lastKeyTime = Date.now();
            if (event.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
                return true;
            if (this.tabFocusMode > 0 && event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
                this.tabFocusMode = -1;
            // Chrome for Android usually doesn't fire proper key events, but
            // occasionally does, usually surrounded by a bunch of complicated
            // composition changes. When an enter or backspace key event is
            // seen, hold off on handling DOM events for a bit, and then
            // dispatch it.
            if (browser.android && browser.chrome && !event.synthetic &&
                (event.keyCode == 13 || event.keyCode == 8)) {
                this.view.observer.delayAndroidKey(event.key, event.keyCode);
                return true;
            }
            // Preventing the default behavior of Enter on iOS makes the
            // virtual keyboard get stuck in the wrong (lowercase)
            // state. So we let it go through, and then, in
            // applyDOMChange, notify key handlers of it and reset to
            // the state they produce.
            let pending;
            if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey &&
                ((pending = PendingKeys.find(key => key.keyCode == event.keyCode)) && !event.ctrlKey ||
                    EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
                this.pendingIOSKey = pending || event;
                setTimeout(() => this.flushIOSKey(), 250);
                return true;
            }
            if (event.keyCode != 229)
                this.view.observer.forceFlush();
            return false;
        }
        flushIOSKey(change) {
            let key = this.pendingIOSKey;
            if (!key)
                return false;
            // This looks like an autocorrection before Enter
            if (key.key == "Enter" && change && change.from < change.to && /^\S+$/.test(change.insert.toString()))
                return false;
            this.pendingIOSKey = undefined;
            return dispatchKey(this.view.contentDOM, key.key, key.keyCode, key instanceof KeyboardEvent ? key : undefined);
        }
        ignoreDuringComposition(event) {
            if (!/^key/.test(event.type))
                return false;
            if (this.composing > 0)
                return true;
            // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
            // On some input method editors (IMEs), the Enter key is used to
            // confirm character selection. On Safari, when Enter is pressed,
            // compositionend and keydown events are sometimes emitted in the
            // wrong order. The key event should still be ignored, even when
            // it happens after the compositionend event.
            if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
                this.compositionPendingKey = false;
                return true;
            }
            return false;
        }
        startMouseSelection(mouseSelection) {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
            this.mouseSelection = mouseSelection;
        }
        update(update) {
            this.view.observer.update(update);
            if (this.mouseSelection)
                this.mouseSelection.update(update);
            if (this.draggedContent && update.docChanged)
                this.draggedContent = this.draggedContent.map(update.changes);
            if (update.transactions.length)
                this.lastKeyCode = this.lastSelectionTime = 0;
        }
        destroy() {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
        }
    }
    function bindHandler(plugin, handler) {
        return (view, event) => {
            try {
                return handler.call(plugin, event, view);
            }
            catch (e) {
                logException(view.state, e);
            }
        };
    }
    function computeHandlers(plugins) {
        let result = Object.create(null);
        function record(type) {
            return result[type] || (result[type] = { observers: [], handlers: [] });
        }
        for (let plugin of plugins) {
            let spec = plugin.spec, handlers = spec && spec.plugin.domEventHandlers, observers = spec && spec.plugin.domEventObservers;
            if (handlers)
                for (let type in handlers) {
                    let f = handlers[type];
                    if (f)
                        record(type).handlers.push(bindHandler(plugin.value, f));
                }
            if (observers)
                for (let type in observers) {
                    let f = observers[type];
                    if (f)
                        record(type).observers.push(bindHandler(plugin.value, f));
                }
        }
        for (let type in handlers)
            record(type).handlers.push(handlers[type]);
        for (let type in observers)
            record(type).observers.push(observers[type]);
        return result;
    }
    const PendingKeys = [
        { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
        { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
        { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
        { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
    ];
    const EmacsyPendingKeys = "dthko";
    // Key codes for modifier keys
    const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
    const dragScrollMargin = 6;
    function dragScrollSpeed(dist) {
        return Math.max(0, dist) * 0.7 + 8;
    }
    function dist(a, b) {
        return Math.max(Math.abs(a.clientX - b.clientX), Math.abs(a.clientY - b.clientY));
    }
    class MouseSelection {
        constructor(view, startEvent, style, mustSelect) {
            this.view = view;
            this.startEvent = startEvent;
            this.style = style;
            this.mustSelect = mustSelect;
            this.scrollSpeed = { x: 0, y: 0 };
            this.scrolling = -1;
            this.lastEvent = startEvent;
            this.scrollParents = scrollableParents(view.contentDOM);
            this.atoms = view.state.facet(atomicRanges).map(f => f(view));
            let doc = view.contentDOM.ownerDocument;
            doc.addEventListener("mousemove", this.move = this.move.bind(this));
            doc.addEventListener("mouseup", this.up = this.up.bind(this));
            this.extend = startEvent.shiftKey;
            this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
            this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
        }
        start(event) {
            // When clicking outside of the selection, immediately apply the
            // effect of starting the selection
            if (this.dragging === false)
                this.select(event);
        }
        move(event) {
            if (event.buttons == 0)
                return this.destroy();
            if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)
                return;
            this.select(this.lastEvent = event);
            let sx = 0, sy = 0;
            let left = 0, top = 0, right = this.view.win.innerWidth, bottom = this.view.win.innerHeight;
            if (this.scrollParents.x)
                ({ left, right } = this.scrollParents.x.getBoundingClientRect());
            if (this.scrollParents.y)
                ({ top, bottom } = this.scrollParents.y.getBoundingClientRect());
            let margins = getScrollMargins(this.view);
            if (event.clientX - margins.left <= left + dragScrollMargin)
                sx = -dragScrollSpeed(left - event.clientX);
            else if (event.clientX + margins.right >= right - dragScrollMargin)
                sx = dragScrollSpeed(event.clientX - right);
            if (event.clientY - margins.top <= top + dragScrollMargin)
                sy = -dragScrollSpeed(top - event.clientY);
            else if (event.clientY + margins.bottom >= bottom - dragScrollMargin)
                sy = dragScrollSpeed(event.clientY - bottom);
            this.setScrollSpeed(sx, sy);
        }
        up(event) {
            if (this.dragging == null)
                this.select(this.lastEvent);
            if (!this.dragging)
                event.preventDefault();
            this.destroy();
        }
        destroy() {
            this.setScrollSpeed(0, 0);
            let doc = this.view.contentDOM.ownerDocument;
            doc.removeEventListener("mousemove", this.move);
            doc.removeEventListener("mouseup", this.up);
            this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
        }
        setScrollSpeed(sx, sy) {
            this.scrollSpeed = { x: sx, y: sy };
            if (sx || sy) {
                if (this.scrolling < 0)
                    this.scrolling = setInterval(() => this.scroll(), 50);
            }
            else if (this.scrolling > -1) {
                clearInterval(this.scrolling);
                this.scrolling = -1;
            }
        }
        scroll() {
            let { x, y } = this.scrollSpeed;
            if (x && this.scrollParents.x) {
                this.scrollParents.x.scrollLeft += x;
                x = 0;
            }
            if (y && this.scrollParents.y) {
                this.scrollParents.y.scrollTop += y;
                y = 0;
            }
            if (x || y)
                this.view.win.scrollBy(x, y);
            if (this.dragging === false)
                this.select(this.lastEvent);
        }
        skipAtoms(sel) {
            let ranges = null;
            for (let i = 0; i < sel.ranges.length; i++) {
                let range = sel.ranges[i], updated = null;
                if (range.empty) {
                    let pos = skipAtomicRanges(this.atoms, range.from, 0);
                    if (pos != range.from)
                        updated = EditorSelection.cursor(pos, -1);
                }
                else {
                    let from = skipAtomicRanges(this.atoms, range.from, -1);
                    let to = skipAtomicRanges(this.atoms, range.to, 1);
                    if (from != range.from || to != range.to)
                        updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);
                }
                if (updated) {
                    if (!ranges)
                        ranges = sel.ranges.slice();
                    ranges[i] = updated;
                }
            }
            return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
        }
        select(event) {
            let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
            if (this.mustSelect || !selection.eq(view.state.selection, this.dragging === false))
                this.view.dispatch({
                    selection,
                    userEvent: "select.pointer"
                });
            this.mustSelect = false;
        }
        update(update) {
            if (update.transactions.some(tr => tr.isUserEvent("input.type")))
                this.destroy();
            else if (this.style.update(update))
                setTimeout(() => this.select(this.lastEvent), 20);
        }
    }
    function addsSelectionRange(view, event) {
        let facet = view.state.facet(clickAddsSelectionRange);
        return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
    }
    function dragMovesSelection(view, event) {
        let facet = view.state.facet(dragMovesSelection$1);
        return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
    }
    function isInPrimarySelection(view, event) {
        let { main } = view.state.selection;
        if (main.empty)
            return false;
        // On boundary clicks, check whether the coordinates are inside the
        // selection's client rectangles
        let sel = getSelection(view.root);
        if (!sel || sel.rangeCount == 0)
            return true;
        let rects = sel.getRangeAt(0).getClientRects();
        for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            if (rect.left <= event.clientX && rect.right >= event.clientX &&
                rect.top <= event.clientY && rect.bottom >= event.clientY)
                return true;
        }
        return false;
    }
    function eventBelongsToEditor(view, event) {
        if (!event.bubbles)
            return true;
        if (event.defaultPrevented)
            return false;
        for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
            if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
                return false;
        return true;
    }
    const handlers = /*@__PURE__*/Object.create(null);
    const observers = /*@__PURE__*/Object.create(null);
    // This is very crude, but unfortunately both these browsers _pretend_
    // that they have a clipboard API—all the objects and methods are
    // there, they just don't work, and they are hard to test.
    const brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||
        (browser.ios && browser.webkit_version < 604);
    function capturePaste(view) {
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        setTimeout(() => {
            view.focus();
            target.remove();
            doPaste(view, target.value);
        }, 50);
    }
    function textFilter(state, facet, text) {
        for (let filter of state.facet(facet))
            text = filter(text, state);
        return text;
    }
    function doPaste(view, input) {
        input = textFilter(view.state, clipboardInputFilter, input);
        let { state } = view, changes, i = 1, text = state.toText(input);
        let byLine = text.lines == state.selection.ranges.length;
        let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
        if (linewise) {
            let lastLine = -1;
            changes = state.changeByRange(range => {
                let line = state.doc.lineAt(range.from);
                if (line.from == lastLine)
                    return { range };
                lastLine = line.from;
                let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
                return { changes: { from: line.from, insert },
                    range: EditorSelection.cursor(range.from + insert.length) };
            });
        }
        else if (byLine) {
            changes = state.changeByRange(range => {
                let line = text.line(i++);
                return { changes: { from: range.from, to: range.to, insert: line.text },
                    range: EditorSelection.cursor(range.from + line.length) };
            });
        }
        else {
            changes = state.replaceSelection(text);
        }
        view.dispatch(changes, {
            userEvent: "input.paste",
            scrollIntoView: true
        });
    }
    observers.scroll = view => {
        view.inputState.lastScrollTop = view.scrollDOM.scrollTop;
        view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;
    };
    handlers.keydown = (view, event) => {
        view.inputState.setSelectionOrigin("select");
        if (event.keyCode == 27 && view.inputState.tabFocusMode != 0)
            view.inputState.tabFocusMode = Date.now() + 2000;
        return false;
    };
    observers.touchstart = (view, e) => {
        view.inputState.lastTouchTime = Date.now();
        view.inputState.setSelectionOrigin("select.pointer");
    };
    observers.touchmove = view => {
        view.inputState.setSelectionOrigin("select.pointer");
    };
    handlers.mousedown = (view, event) => {
        view.observer.flush();
        if (view.inputState.lastTouchTime > Date.now() - 2000)
            return false; // Ignore touch interaction
        let style = null;
        for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
            style = makeStyle(view, event);
            if (style)
                break;
        }
        if (!style && event.button == 0)
            style = basicMouseSelection(view, event);
        if (style) {
            let mustFocus = !view.hasFocus;
            view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
            if (mustFocus)
                view.observer.ignore(() => {
                    focusPreventScroll(view.contentDOM);
                    let active = view.root.activeElement;
                    if (active && !active.contains(view.contentDOM))
                        active.blur();
                });
            let mouseSel = view.inputState.mouseSelection;
            if (mouseSel) {
                mouseSel.start(event);
                return mouseSel.dragging === false;
            }
        }
        return false;
    };
    function rangeForClick(view, pos, bias, type) {
        if (type == 1) { // Single click
            return EditorSelection.cursor(pos, bias);
        }
        else if (type == 2) { // Double click
            return groupAt(view.state, pos, bias);
        }
        else { // Triple click
            let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
            let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
            if (to < view.state.doc.length && to == line.to)
                to++;
            return EditorSelection.range(from, to);
        }
    }
    let inside = (x, y, rect) => y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right;
    // Try to determine, for the given coordinates, associated with the
    // given position, whether they are related to the element before or
    // the element after the position.
    function findPositionSide(view, pos, x, y) {
        let line = LineView.find(view.docView, pos);
        if (!line)
            return 1;
        let off = pos - line.posAtStart;
        // Line boundaries point into the line
        if (off == 0)
            return 1;
        if (off == line.length)
            return -1;
        // Positions on top of an element point at that element
        let before = line.coordsAt(off, -1);
        if (before && inside(x, y, before))
            return -1;
        let after = line.coordsAt(off, 1);
        if (after && inside(x, y, after))
            return 1;
        // This is probably a line wrap point. Pick before if the point is
        // above its bottom.
        return before && before.bottom >= y ? -1 : 1;
    }
    function queryPos(view, event) {
        let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
    }
    const BadMouseDetail = browser.ie && browser.ie_version <= 11;
    let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
    function getClickType(event) {
        if (!BadMouseDetail)
            return event.detail;
        let last = lastMouseDown, lastTime = lastMouseDownTime;
        lastMouseDown = event;
        lastMouseDownTime = Date.now();
        return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
            Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
    }
    function basicMouseSelection(view, event) {
        let start = queryPos(view, event), type = getClickType(event);
        let startSel = view.state.selection;
        return {
            update(update) {
                if (update.docChanged) {
                    start.pos = update.changes.mapPos(start.pos);
                    startSel = startSel.map(update.changes);
                }
            },
            get(event, extend, multiple) {
                let cur = queryPos(view, event), removed;
                let range = rangeForClick(view, cur.pos, cur.bias, type);
                if (start.pos != cur.pos && !extend) {
                    let startRange = rangeForClick(view, start.pos, start.bias, type);
                    let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
                    range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
                }
                if (extend)
                    return startSel.replaceRange(startSel.main.extend(range.from, range.to));
                else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos)))
                    return removed;
                else if (multiple)
                    return startSel.addRange(range);
                else
                    return EditorSelection.create([range]);
            }
        };
    }
    function removeRangeAround(sel, pos) {
        for (let i = 0; i < sel.ranges.length; i++) {
            let { from, to } = sel.ranges[i];
            if (from <= pos && to >= pos)
                return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
        }
        return null;
    }
    handlers.dragstart = (view, event) => {
        let { selection: { main: range } } = view.state;
        if (event.target.draggable) {
            let cView = view.docView.nearest(event.target);
            if (cView && cView.isWidget) {
                let from = cView.posAtStart, to = from + cView.length;
                if (from >= range.to || to <= range.from)
                    range = EditorSelection.range(from, to);
            }
        }
        let { inputState } = view;
        if (inputState.mouseSelection)
            inputState.mouseSelection.dragging = true;
        inputState.draggedContent = range;
        if (event.dataTransfer) {
            event.dataTransfer.setData("Text", textFilter(view.state, clipboardOutputFilter, view.state.sliceDoc(range.from, range.to)));
            event.dataTransfer.effectAllowed = "copyMove";
        }
        return false;
    };
    handlers.dragend = view => {
        view.inputState.draggedContent = null;
        return false;
    };
    function dropText(view, event, text, direct) {
        text = textFilter(view.state, clipboardInputFilter, text);
        if (!text)
            return;
        let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        let { draggedContent } = view.inputState;
        let del = direct && draggedContent && dragMovesSelection(view, event)
            ? { from: draggedContent.from, to: draggedContent.to } : null;
        let ins = { from: dropPos, insert: text };
        let changes = view.state.changes(del ? [del, ins] : ins);
        view.focus();
        view.dispatch({
            changes,
            selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
            userEvent: del ? "move.drop" : "input.drop"
        });
        view.inputState.draggedContent = null;
    }
    handlers.drop = (view, event) => {
        if (!event.dataTransfer)
            return false;
        if (view.state.readOnly)
            return true;
        let files = event.dataTransfer.files;
        if (files && files.length) { // For a file drop, read the file's text.
            let text = Array(files.length), read = 0;
            let finishFile = () => {
                if (++read == files.length)
                    dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
            };
            for (let i = 0; i < files.length; i++) {
                let reader = new FileReader;
                reader.onerror = finishFile;
                reader.onload = () => {
                    if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
                        text[i] = reader.result;
                    finishFile();
                };
                reader.readAsText(files[i]);
            }
            return true;
        }
        else {
            let text = event.dataTransfer.getData("Text");
            if (text) {
                dropText(view, event, text, true);
                return true;
            }
        }
        return false;
    };
    handlers.paste = (view, event) => {
        if (view.state.readOnly)
            return true;
        view.observer.flush();
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data) {
            doPaste(view, data.getData("text/plain") || data.getData("text/uri-list"));
            return true;
        }
        else {
            capturePaste(view);
            return false;
        }
    };
    function captureCopy(view, text) {
        // The extra wrapper is somehow necessary on IE/Edge to prevent the
        // content from being mangled when it is put onto the clipboard
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.value = text;
        target.focus();
        target.selectionEnd = text.length;
        target.selectionStart = 0;
        setTimeout(() => {
            target.remove();
            view.focus();
        }, 50);
    }
    function copiedRange(state) {
        let content = [], ranges = [], linewise = false;
        for (let range of state.selection.ranges)
            if (!range.empty) {
                content.push(state.sliceDoc(range.from, range.to));
                ranges.push(range);
            }
        if (!content.length) {
            // Nothing selected, do a line-wise copy
            let upto = -1;
            for (let { from } of state.selection.ranges) {
                let line = state.doc.lineAt(from);
                if (line.number > upto) {
                    content.push(line.text);
                    ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
                }
                upto = line.number;
            }
            linewise = true;
        }
        return { text: textFilter(state, clipboardOutputFilter, content.join(state.lineBreak)), ranges, linewise };
    }
    let lastLinewiseCopy = null;
    handlers.copy = handlers.cut = (view, event) => {
        let { text, ranges, linewise } = copiedRange(view.state);
        if (!text && !linewise)
            return false;
        lastLinewiseCopy = linewise ? text : null;
        if (event.type == "cut" && !view.state.readOnly)
            view.dispatch({
                changes: ranges,
                scrollIntoView: true,
                userEvent: "delete.cut"
            });
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data) {
            data.clearData();
            data.setData("text/plain", text);
            return true;
        }
        else {
            captureCopy(view, text);
            return false;
        }
    };
    const isFocusChange = /*@__PURE__*/Annotation.define();
    function focusChangeTransaction(state, focus) {
        let effects = [];
        for (let getEffect of state.facet(focusChangeEffect)) {
            let effect = getEffect(state, focus);
            if (effect)
                effects.push(effect);
        }
        return effects.length ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
    }
    function updateForFocusChange(view) {
        setTimeout(() => {
            let focus = view.hasFocus;
            if (focus != view.inputState.notifiedFocused) {
                let tr = focusChangeTransaction(view.state, focus);
                if (tr)
                    view.dispatch(tr);
                else
                    view.update([]);
            }
        }, 10);
    }
    observers.focus = view => {
        view.inputState.lastFocusTime = Date.now();
        // When focusing reset the scroll position, move it back to where it was
        if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
            view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
            view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
        }
        updateForFocusChange(view);
    };
    observers.blur = view => {
        view.observer.clearSelectionRange();
        updateForFocusChange(view);
    };
    observers.compositionstart = observers.compositionupdate = view => {
        if (view.observer.editContext)
            return; // Composition handled by edit context
        if (view.inputState.compositionFirstChange == null)
            view.inputState.compositionFirstChange = true;
        if (view.inputState.composing < 0) {
            // FIXME possibly set a timeout to clear it again on Android
            view.inputState.composing = 0;
        }
    };
    observers.compositionend = view => {
        if (view.observer.editContext)
            return; // Composition handled by edit context
        view.inputState.composing = -1;
        view.inputState.compositionEndedAt = Date.now();
        view.inputState.compositionPendingKey = true;
        view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
        view.inputState.compositionFirstChange = null;
        if (browser.chrome && browser.android) {
            // Delay flushing for a bit on Android because it'll often fire a
            // bunch of contradictory changes in a row at end of compositon
            view.observer.flushSoon();
        }
        else if (view.inputState.compositionPendingChange) {
            // If we found pending records, schedule a flush.
            Promise.resolve().then(() => view.observer.flush());
        }
        else {
            // Otherwise, make sure that, if no changes come in soon, the
            // composition view is cleared.
            setTimeout(() => {
                if (view.inputState.composing < 0 && view.docView.hasComposition)
                    view.update([]);
            }, 50);
        }
    };
    observers.contextmenu = view => {
        view.inputState.lastContextMenu = Date.now();
    };
    handlers.beforeinput = (view, event) => {
        var _a, _b;
        // In EditContext mode, we must handle insertReplacementText events
        // directly, to make spell checking corrections work
        if (event.inputType == "insertReplacementText" && view.observer.editContext) {
            let text = (_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.getData("text/plain"), ranges = event.getTargetRanges();
            if (text && ranges.length) {
                let r = ranges[0];
                let from = view.posAtDOM(r.startContainer, r.startOffset), to = view.posAtDOM(r.endContainer, r.endOffset);
                applyDOMChangeInner(view, { from, to, insert: view.state.toText(text) }, null);
                return true;
            }
        }
        // Because Chrome Android doesn't fire useful key events, use
        // beforeinput to detect backspace (and possibly enter and delete,
        // but those usually don't even seem to fire beforeinput events at
        // the moment) and fake a key event for it.
        //
        // (preventDefault on beforeinput, though supported in the spec,
        // seems to do nothing at all on Chrome).
        let pending;
        if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {
            view.observer.delayAndroidKey(pending.key, pending.keyCode);
            if (pending.key == "Backspace" || pending.key == "Delete") {
                let startViewHeight = ((_b = window.visualViewport) === null || _b === void 0 ? void 0 : _b.height) || 0;
                setTimeout(() => {
                    var _a;
                    // Backspacing near uneditable nodes on Chrome Android sometimes
                    // closes the virtual keyboard. This tries to crudely detect
                    // that and refocus to get it back.
                    if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
                        view.contentDOM.blur();
                        view.focus();
                    }
                }, 100);
            }
        }
        if (browser.ios && event.inputType == "deleteContentForward") {
            // For some reason, DOM changes (and beforeinput) happen _before_
            // the key event for ctrl-d on iOS when using an external
            // keyboard.
            view.observer.flushSoon();
        }
        // Safari will occasionally forget to fire compositionend at the end of a dead-key composition
        if (browser.safari && event.inputType == "insertText" && view.inputState.composing >= 0) {
            setTimeout(() => observers.compositionend(view, event), 20);
        }
        return false;
    };
    const appliedFirefoxHack = /*@__PURE__*/new Set;
    // In Firefox, when cut/copy handlers are added to the document, that
    // somehow avoids a bug where those events aren't fired when the
    // selection is empty. See https://github.com/codemirror/dev/issues/1082
    // and https://bugzilla.mozilla.org/show_bug.cgi?id=995961
    function firefoxCopyCutHack(doc) {
        if (!appliedFirefoxHack.has(doc)) {
            appliedFirefoxHack.add(doc);
            doc.addEventListener("copy", () => { });
            doc.addEventListener("cut", () => { });
        }
    }

    const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
    // Used to track, during updateHeight, if any actual heights changed
    let heightChangeFlag = false;
    function clearHeightChangeFlag() { heightChangeFlag = false; }
    class HeightOracle {
        constructor(lineWrapping) {
            this.lineWrapping = lineWrapping;
            this.doc = Text.empty;
            this.heightSamples = {};
            this.lineHeight = 14; // The height of an entire line (line-height)
            this.charWidth = 7;
            this.textHeight = 14; // The height of the actual font (font-size)
            this.lineLength = 30;
        }
        heightForGap(from, to) {
            let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
            if (this.lineWrapping)
                lines += Math.max(0, Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength));
            return this.lineHeight * lines;
        }
        heightForLine(length) {
            if (!this.lineWrapping)
                return this.lineHeight;
            let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
            return lines * this.lineHeight;
        }
        setDoc(doc) { this.doc = doc; return this; }
        mustRefreshForWrapping(whiteSpace) {
            return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;
        }
        mustRefreshForHeights(lineHeights) {
            let newHeight = false;
            for (let i = 0; i < lineHeights.length; i++) {
                let h = lineHeights[i];
                if (h < 0) {
                    i++;
                }
                else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
                    newHeight = true;
                    this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return newHeight;
        }
        refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
            let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
            let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
            this.lineWrapping = lineWrapping;
            this.lineHeight = lineHeight;
            this.charWidth = charWidth;
            this.textHeight = textHeight;
            this.lineLength = lineLength;
            if (changed) {
                this.heightSamples = {};
                for (let i = 0; i < knownHeights.length; i++) {
                    let h = knownHeights[i];
                    if (h < 0)
                        i++;
                    else
                        this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return changed;
        }
    }
    // This object is used by `updateHeight` to make DOM measurements
    // arrive at the right nides. The `heights` array is a sequence of
    // block heights, starting from position `from`.
    class MeasuredHeights {
        constructor(from, heights) {
            this.from = from;
            this.heights = heights;
            this.index = 0;
        }
        get more() { return this.index < this.heights.length; }
    }
    /**
    Record used to represent information about a block-level element
    in the editor view.
    */
    class BlockInfo {
        /**
        @internal
        */
        constructor(
        /**
        The start of the element in the document.
        */
        from, 
        /**
        The length of the element.
        */
        length, 
        /**
        The top position of the element (relative to the top of the
        document).
        */
        top, 
        /**
        Its height.
        */
        height, 
        /**
        @internal Weird packed field that holds an array of children
        for composite blocks, a decoration for block widgets, and a
        number indicating the amount of widget-create line breaks for
        text blocks.
        */
        _content) {
            this.from = from;
            this.length = length;
            this.top = top;
            this.height = height;
            this._content = _content;
        }
        /**
        The type of element this is. When querying lines, this may be
        an array of all the blocks that make up the line.
        */
        get type() {
            return typeof this._content == "number" ? BlockType.Text :
                Array.isArray(this._content) ? this._content : this._content.type;
        }
        /**
        The end of the element as a document position.
        */
        get to() { return this.from + this.length; }
        /**
        The bottom position of the element.
        */
        get bottom() { return this.top + this.height; }
        /**
        If this is a widget block, this will return the widget
        associated with it.
        */
        get widget() {
            return this._content instanceof PointDecoration ? this._content.widget : null;
        }
        /**
        If this is a textblock, this holds the number of line breaks
        that appear in widgets inside the block.
        */
        get widgetLineBreaks() {
            return typeof this._content == "number" ? this._content : 0;
        }
        /**
        @internal
        */
        join(other) {
            let content = (Array.isArray(this._content) ? this._content : [this])
                .concat(Array.isArray(other._content) ? other._content : [other]);
            return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content);
        }
    }
    var QueryType$1 = /*@__PURE__*/(function (QueryType) {
        QueryType[QueryType["ByPos"] = 0] = "ByPos";
        QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
        QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
    return QueryType})(QueryType$1 || (QueryType$1 = {}));
    const Epsilon = 1e-3;
    class HeightMap {
        constructor(length, // The number of characters covered
        height, // Height of this part of the document
        flags = 2 /* Flag.Outdated */) {
            this.length = length;
            this.height = height;
            this.flags = flags;
        }
        get outdated() { return (this.flags & 2 /* Flag.Outdated */) > 0; }
        set outdated(value) { this.flags = (value ? 2 /* Flag.Outdated */ : 0) | (this.flags & -3 /* Flag.Outdated */); }
        setHeight(height) {
            if (this.height != height) {
                if (Math.abs(this.height - height) > Epsilon)
                    heightChangeFlag = true;
                this.height = height;
            }
        }
        // Base case is to replace a leaf node, which simply builds a tree
        // from the new nodes and returns that (HeightMapBranch and
        // HeightMapGap override this to actually use from/to)
        replace(_from, _to, nodes) {
            return HeightMap.of(nodes);
        }
        // Again, these are base cases, and are overridden for branch and gap nodes.
        decomposeLeft(_to, result) { result.push(this); }
        decomposeRight(_from, result) { result.push(this); }
        applyChanges(decorations, oldDoc, oracle, changes) {
            let me = this, doc = oracle.doc;
            for (let i = changes.length - 1; i >= 0; i--) {
                let { fromA, toA, fromB, toB } = changes[i];
                let start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
                let end = start.to >= toA ? start : me.lineAt(toA, QueryType$1.ByPosNoHeight, oracle, 0, 0);
                toB += end.to - toA;
                toA = end.to;
                while (i > 0 && start.from <= changes[i - 1].toA) {
                    fromA = changes[i - 1].fromA;
                    fromB = changes[i - 1].fromB;
                    i--;
                    if (fromA < start.from)
                        start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oracle, 0, 0);
                }
                fromB += start.from - fromA;
                fromA = start.from;
                let nodes = NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);
                me = replace(me, me.replace(fromA, toA, nodes));
            }
            return me.updateHeight(oracle, 0);
        }
        static empty() { return new HeightMapText(0, 0); }
        // nodes uses null values to indicate the position of line breaks.
        // There are never line breaks at the start or end of the array, or
        // two line breaks next to each other, and the array isn't allowed
        // to be empty (same restrictions as return value from the builder).
        static of(nodes) {
            if (nodes.length == 1)
                return nodes[0];
            let i = 0, j = nodes.length, before = 0, after = 0;
            for (;;) {
                if (i == j) {
                    if (before > after * 2) {
                        let split = nodes[i - 1];
                        if (split.break)
                            nodes.splice(--i, 1, split.left, null, split.right);
                        else
                            nodes.splice(--i, 1, split.left, split.right);
                        j += 1 + split.break;
                        before -= split.size;
                    }
                    else if (after > before * 2) {
                        let split = nodes[j];
                        if (split.break)
                            nodes.splice(j, 1, split.left, null, split.right);
                        else
                            nodes.splice(j, 1, split.left, split.right);
                        j += 2 + split.break;
                        after -= split.size;
                    }
                    else {
                        break;
                    }
                }
                else if (before < after) {
                    let next = nodes[i++];
                    if (next)
                        before += next.size;
                }
                else {
                    let next = nodes[--j];
                    if (next)
                        after += next.size;
                }
            }
            let brk = 0;
            if (nodes[i - 1] == null) {
                brk = 1;
                i--;
            }
            else if (nodes[i] == null) {
                brk = 1;
                j++;
            }
            return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
        }
    }
    function replace(old, val) {
        if (old == val)
            return old;
        if (old.constructor != val.constructor)
            heightChangeFlag = true;
        return val;
    }
    HeightMap.prototype.size = 1;
    class HeightMapBlock extends HeightMap {
        constructor(length, height, deco) {
            super(length, height);
            this.deco = deco;
        }
        blockAt(_height, _oracle, top, offset) {
            return new BlockInfo(offset, this.length, top, this.height, this.deco || 0);
        }
        lineAt(_value, _type, oracle, top, offset) {
            return this.blockAt(0, oracle, top, offset);
        }
        forEachLine(from, to, oracle, top, offset, f) {
            if (from <= offset + this.length && to >= offset)
                f(this.blockAt(0, oracle, top, offset));
        }
        updateHeight(oracle, offset = 0, _force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(measured.heights[measured.index++]);
            this.outdated = false;
            return this;
        }
        toString() { return `block(${this.length})`; }
    }
    class HeightMapText extends HeightMapBlock {
        constructor(length, height) {
            super(length, height, null);
            this.collapsed = 0; // Amount of collapsed content in the line
            this.widgetHeight = 0; // Maximum inline widget height
            this.breaks = 0; // Number of widget-introduced line breaks on the line
        }
        blockAt(_height, _oracle, top, offset) {
            return new BlockInfo(offset, this.length, top, this.height, this.breaks);
        }
        replace(_from, _to, nodes) {
            let node = nodes[0];
            if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* Flag.SingleLine */)) &&
                Math.abs(this.length - node.length) < 10) {
                if (node instanceof HeightMapGap)
                    node = new HeightMapText(node.length, this.height);
                else
                    node.height = this.height;
                if (!this.outdated)
                    node.outdated = false;
                return node;
            }
            else {
                return HeightMap.of(nodes);
            }
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(measured.heights[measured.index++]);
            else if (force || this.outdated)
                this.setHeight(Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) +
                    this.breaks * oracle.lineHeight);
            this.outdated = false;
            return this;
        }
        toString() {
            return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
        }
    }
    class HeightMapGap extends HeightMap {
        constructor(length) { super(length, 0); }
        heightMetrics(oracle, offset) {
            let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
            let lines = lastLine - firstLine + 1;
            let perLine, perChar = 0;
            if (oracle.lineWrapping) {
                let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
                perLine = totalPerLine / lines;
                if (this.length > lines + 1)
                    perChar = (this.height - totalPerLine) / (this.length - lines - 1);
            }
            else {
                perLine = this.height / lines;
            }
            return { firstLine, lastLine, perLine, perChar };
        }
        blockAt(height, oracle, top, offset) {
            let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
            if (oracle.lineWrapping) {
                let guess = offset + (height < oracle.lineHeight ? 0
                    : Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length));
                let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
                let lineTop = Math.max(top, height - lineHeight / 2);
                return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
            }
            else {
                let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));
                let { from, length } = oracle.doc.line(firstLine + line);
                return new BlockInfo(from, length, top + perLine * line, perLine, 0);
            }
        }
        lineAt(value, type, oracle, top, offset) {
            if (type == QueryType$1.ByHeight)
                return this.blockAt(value, oracle, top, offset);
            if (type == QueryType$1.ByPosNoHeight) {
                let { from, to } = oracle.doc.lineAt(value);
                return new BlockInfo(from, to - from, 0, 0, 0);
            }
            let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
            let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
            let linesAbove = line.number - firstLine;
            let lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
            return new BlockInfo(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, 0);
        }
        forEachLine(from, to, oracle, top, offset, f) {
            from = Math.max(from, offset);
            to = Math.min(to, offset + this.length);
            let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
            for (let pos = from, lineTop = top; pos <= to;) {
                let line = oracle.doc.lineAt(pos);
                if (pos == from) {
                    let linesAbove = line.number - firstLine;
                    lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
                }
                let lineHeight = perLine + perChar * line.length;
                f(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
                lineTop += lineHeight;
                pos = line.to + 1;
            }
        }
        replace(from, to, nodes) {
            let after = this.length - to;
            if (after > 0) {
                let last = nodes[nodes.length - 1];
                if (last instanceof HeightMapGap)
                    nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
                else
                    nodes.push(null, new HeightMapGap(after - 1));
            }
            if (from > 0) {
                let first = nodes[0];
                if (first instanceof HeightMapGap)
                    nodes[0] = new HeightMapGap(from + first.length);
                else
                    nodes.unshift(new HeightMapGap(from - 1), null);
            }
            return HeightMap.of(nodes);
        }
        decomposeLeft(to, result) {
            result.push(new HeightMapGap(to - 1), null);
        }
        decomposeRight(from, result) {
            result.push(null, new HeightMapGap(this.length - from - 1));
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let end = offset + this.length;
            if (measured && measured.from <= offset + this.length && measured.more) {
                // Fill in part of this gap with measured lines. We know there
                // can't be widgets or collapsed ranges in those lines, because
                // they would already have been added to the heightmap (gaps
                // only contain plain text).
                let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
                if (measured.from > offset)
                    nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
                while (pos <= end && measured.more) {
                    let len = oracle.doc.lineAt(pos).length;
                    if (nodes.length)
                        nodes.push(null);
                    let height = measured.heights[measured.index++];
                    if (singleHeight == -1)
                        singleHeight = height;
                    else if (Math.abs(height - singleHeight) >= Epsilon)
                        singleHeight = -2;
                    let line = new HeightMapText(len, height);
                    line.outdated = false;
                    nodes.push(line);
                    pos += len + 1;
                }
                if (pos <= end)
                    nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
                let result = HeightMap.of(nodes);
                if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||
                    Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
                    heightChangeFlag = true;
                return replace(this, result);
            }
            else if (force || this.outdated) {
                this.setHeight(oracle.heightForGap(offset, offset + this.length));
                this.outdated = false;
            }
            return this;
        }
        toString() { return `gap(${this.length})`; }
    }
    class HeightMapBranch extends HeightMap {
        constructor(left, brk, right) {
            super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0));
            this.left = left;
            this.right = right;
            this.size = left.size + right.size;
        }
        get break() { return this.flags & 1 /* Flag.Break */; }
        blockAt(height, oracle, top, offset) {
            let mid = top + this.left.height;
            return height < mid ? this.left.blockAt(height, oracle, top, offset)
                : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
        }
        lineAt(value, type, oracle, top, offset) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            let left = type == QueryType$1.ByHeight ? value < rightTop : value < rightOffset;
            let base = left ? this.left.lineAt(value, type, oracle, top, offset)
                : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
            if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
                return base;
            let subQuery = type == QueryType$1.ByPosNoHeight ? QueryType$1.ByPosNoHeight : QueryType$1.ByPos;
            if (left)
                return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
            else
                return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);
        }
        forEachLine(from, to, oracle, top, offset, f) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            if (this.break) {
                if (from < rightOffset)
                    this.left.forEachLine(from, to, oracle, top, offset, f);
                if (to >= rightOffset)
                    this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
            }
            else {
                let mid = this.lineAt(rightOffset, QueryType$1.ByPos, oracle, top, offset);
                if (from < mid.from)
                    this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);
                if (mid.to >= from && mid.from <= to)
                    f(mid);
                if (to > mid.to)
                    this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
            }
        }
        replace(from, to, nodes) {
            let rightStart = this.left.length + this.break;
            if (to < rightStart)
                return this.balanced(this.left.replace(from, to, nodes), this.right);
            if (from > this.left.length)
                return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
            let result = [];
            if (from > 0)
                this.decomposeLeft(from, result);
            let left = result.length;
            for (let node of nodes)
                result.push(node);
            if (from > 0)
                mergeGaps(result, left - 1);
            if (to < this.length) {
                let right = result.length;
                this.decomposeRight(to, result);
                mergeGaps(result, right);
            }
            return HeightMap.of(result);
        }
        decomposeLeft(to, result) {
            let left = this.left.length;
            if (to <= left)
                return this.left.decomposeLeft(to, result);
            result.push(this.left);
            if (this.break) {
                left++;
                if (to >= left)
                    result.push(null);
            }
            if (to > left)
                this.right.decomposeLeft(to - left, result);
        }
        decomposeRight(from, result) {
            let left = this.left.length, right = left + this.break;
            if (from >= right)
                return this.right.decomposeRight(from - right, result);
            if (from < left)
                this.left.decomposeRight(from, result);
            if (this.break && from < right)
                result.push(null);
            result.push(this.right);
        }
        balanced(left, right) {
            if (left.size > 2 * right.size || right.size > 2 * left.size)
                return HeightMap.of(this.break ? [left, null, right] : [left, right]);
            this.left = replace(this.left, left);
            this.right = replace(this.right, right);
            this.setHeight(left.height + right.height);
            this.outdated = left.outdated || right.outdated;
            this.size = left.size + right.size;
            this.length = left.length + this.break + right.length;
            return this;
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
            if (measured && measured.from <= offset + left.length && measured.more)
                rebalance = left = left.updateHeight(oracle, offset, force, measured);
            else
                left.updateHeight(oracle, offset, force);
            if (measured && measured.from <= rightStart + right.length && measured.more)
                rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
            else
                right.updateHeight(oracle, rightStart, force);
            if (rebalance)
                return this.balanced(left, right);
            this.height = this.left.height + this.right.height;
            this.outdated = false;
            return this;
        }
        toString() { return this.left + (this.break ? " " : "-") + this.right; }
    }
    function mergeGaps(nodes, around) {
        let before, after;
        if (nodes[around] == null &&
            (before = nodes[around - 1]) instanceof HeightMapGap &&
            (after = nodes[around + 1]) instanceof HeightMapGap)
            nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
    }
    const relevantWidgetHeight = 5;
    class NodeBuilder {
        constructor(pos, oracle) {
            this.pos = pos;
            this.oracle = oracle;
            this.nodes = [];
            this.lineStart = -1;
            this.lineEnd = -1;
            this.covering = null;
            this.writtenTo = pos;
        }
        get isCovered() {
            return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
        }
        span(_from, to) {
            if (this.lineStart > -1) {
                let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
                if (last instanceof HeightMapText)
                    last.length += end - this.pos;
                else if (end > this.pos || !this.isCovered)
                    this.nodes.push(new HeightMapText(end - this.pos, -1));
                this.writtenTo = end;
                if (to > end) {
                    this.nodes.push(null);
                    this.writtenTo++;
                    this.lineStart = -1;
                }
            }
            this.pos = to;
        }
        point(from, to, deco) {
            if (from < to || deco.heightRelevant) {
                let height = deco.widget ? deco.widget.estimatedHeight : 0;
                let breaks = deco.widget ? deco.widget.lineBreaks : 0;
                if (height < 0)
                    height = this.oracle.lineHeight;
                let len = to - from;
                if (deco.block) {
                    this.addBlock(new HeightMapBlock(len, height, deco));
                }
                else if (len || breaks || height >= relevantWidgetHeight) {
                    this.addLineDeco(height, breaks, len);
                }
            }
            else if (to > from) {
                this.span(from, to);
            }
            if (this.lineEnd > -1 && this.lineEnd < this.pos)
                this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
        }
        enterLine() {
            if (this.lineStart > -1)
                return;
            let { from, to } = this.oracle.doc.lineAt(this.pos);
            this.lineStart = from;
            this.lineEnd = to;
            if (this.writtenTo < from) {
                if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
                    this.nodes.push(this.blankContent(this.writtenTo, from - 1));
                this.nodes.push(null);
            }
            if (this.pos > from)
                this.nodes.push(new HeightMapText(this.pos - from, -1));
            this.writtenTo = this.pos;
        }
        blankContent(from, to) {
            let gap = new HeightMapGap(to - from);
            if (this.oracle.doc.lineAt(from).to == to)
                gap.flags |= 4 /* Flag.SingleLine */;
            return gap;
        }
        ensureLine() {
            this.enterLine();
            let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
            if (last instanceof HeightMapText)
                return last;
            let line = new HeightMapText(0, -1);
            this.nodes.push(line);
            return line;
        }
        addBlock(block) {
            this.enterLine();
            let deco = block.deco;
            if (deco && deco.startSide > 0 && !this.isCovered)
                this.ensureLine();
            this.nodes.push(block);
            this.writtenTo = this.pos = this.pos + block.length;
            if (deco && deco.endSide > 0)
                this.covering = block;
        }
        addLineDeco(height, breaks, length) {
            let line = this.ensureLine();
            line.length += length;
            line.collapsed += length;
            line.widgetHeight = Math.max(line.widgetHeight, height);
            line.breaks += breaks;
            this.writtenTo = this.pos = this.pos + length;
        }
        finish(from) {
            let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
            if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
                this.nodes.push(new HeightMapText(0, -1));
            else if (this.writtenTo < this.pos || last == null)
                this.nodes.push(this.blankContent(this.writtenTo, this.pos));
            let pos = from;
            for (let node of this.nodes) {
                if (node instanceof HeightMapText)
                    node.updateHeight(this.oracle, pos);
                pos += node ? node.length : 1;
            }
            return this.nodes;
        }
        // Always called with a region that on both sides either stretches
        // to a line break or the end of the document.
        // The returned array uses null to indicate line breaks, but never
        // starts or ends in a line break, or has multiple line breaks next
        // to each other.
        static build(oracle, decorations, from, to) {
            let builder = new NodeBuilder(from, oracle);
            RangeSet.spans(decorations, from, to, builder, 0);
            return builder.finish(from);
        }
    }
    function heightRelevantDecoChanges(a, b, diff) {
        let comp = new DecorationComparator;
        RangeSet.compare(a, b, diff, comp, 0);
        return comp.changes;
    }
    class DecorationComparator {
        constructor() {
            this.changes = [];
        }
        compareRange() { }
        comparePoint(from, to, a, b) {
            if (from < to || a && a.heightRelevant || b && b.heightRelevant)
                addRange(from, to, this.changes, 5);
        }
    }

    function visiblePixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        let doc = dom.ownerDocument, win = doc.defaultView || window;
        let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
        let top = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
        for (let parent = dom.parentNode; parent && parent != doc.body;) {
            if (parent.nodeType == 1) {
                let elt = parent;
                let style = window.getComputedStyle(elt);
                if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&
                    style.overflow != "visible") {
                    let parentRect = elt.getBoundingClientRect();
                    left = Math.max(left, parentRect.left);
                    right = Math.min(right, parentRect.right);
                    top = Math.max(top, parentRect.top);
                    bottom = Math.min(parent == dom.parentNode ? win.innerHeight : bottom, parentRect.bottom);
                }
                parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
            }
            else if (parent.nodeType == 11) { // Shadow root
                parent = parent.host;
            }
            else {
                break;
            }
        }
        return { left: left - rect.left, right: Math.max(left, right) - rect.left,
            top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };
    }
    function inWindow(elt) {
        let rect = elt.getBoundingClientRect(), win = elt.ownerDocument.defaultView || window;
        return rect.left < win.innerWidth && rect.right > 0 &&
            rect.top < win.innerHeight && rect.bottom > 0;
    }
    function fullPixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        return { left: 0, right: rect.right - rect.left,
            top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };
    }
    // Line gaps are placeholder widgets used to hide pieces of overlong
    // lines within the viewport, as a kludge to keep the editor
    // responsive when a ridiculously long line is loaded into it.
    class LineGap {
        constructor(from, to, size, displaySize) {
            this.from = from;
            this.to = to;
            this.size = size;
            this.displaySize = displaySize;
        }
        static same(a, b) {
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++) {
                let gA = a[i], gB = b[i];
                if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
                    return false;
            }
            return true;
        }
        draw(viewState, wrapping) {
            return Decoration.replace({
                widget: new LineGapWidget(this.displaySize * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
            }).range(this.from, this.to);
        }
    }
    class LineGapWidget extends WidgetType {
        constructor(size, vertical) {
            super();
            this.size = size;
            this.vertical = vertical;
        }
        eq(other) { return other.size == this.size && other.vertical == this.vertical; }
        toDOM() {
            let elt = document.createElement("div");
            if (this.vertical) {
                elt.style.height = this.size + "px";
            }
            else {
                elt.style.width = this.size + "px";
                elt.style.height = "2px";
                elt.style.display = "inline-block";
            }
            return elt;
        }
        get estimatedHeight() { return this.vertical ? this.size : -1; }
    }
    class ViewState {
        constructor(state) {
            this.state = state;
            // These are contentDOM-local coordinates
            this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
            this.inView = true;
            this.paddingTop = 0; // Padding above the document, scaled
            this.paddingBottom = 0; // Padding below the document, scaled
            this.contentDOMWidth = 0; // contentDOM.getBoundingClientRect().width
            this.contentDOMHeight = 0; // contentDOM.getBoundingClientRect().height
            this.editorHeight = 0; // scrollDOM.clientHeight, unscaled
            this.editorWidth = 0; // scrollDOM.clientWidth, unscaled
            this.scrollTop = 0; // Last seen scrollDOM.scrollTop, scaled
            this.scrolledToBottom = false;
            // The CSS-transformation scale of the editor (transformed size /
            // concrete size)
            this.scaleX = 1;
            this.scaleY = 1;
            // The vertical position (document-relative) to which to anchor the
            // scroll position. -1 means anchor to the end of the document.
            this.scrollAnchorPos = 0;
            // The height at the anchor position. Set by the DOM update phase.
            // -1 means no height available.
            this.scrollAnchorHeight = -1;
            // See VP.MaxDOMHeight
            this.scaler = IdScaler;
            this.scrollTarget = null;
            // Briefly set to true when printing, to disable viewport limiting
            this.printing = false;
            // Flag set when editor content was redrawn, so that the next
            // measure stage knows it must read DOM layout
            this.mustMeasureContent = true;
            this.defaultTextDirection = Direction.LTR;
            this.visibleRanges = [];
            // Cursor 'assoc' is only significant when the cursor is on a line
            // wrap point, where it must stick to the character that it is
            // associated with. Since browsers don't provide a reasonable
            // interface to set or query this, when a selection is set that
            // might cause this to be significant, this flag is set. The next
            // measure phase will check whether the cursor is on a line-wrapping
            // boundary and, if so, reset it to make sure it is positioned in
            // the right place.
            this.mustEnforceCursorAssoc = false;
            let guessWrapping = state.facet(contentAttributes).some(v => typeof v != "function" && v.class == "cm-lineWrapping");
            this.heightOracle = new HeightOracle(guessWrapping);
            this.stateDeco = state.facet(decorations).filter(d => typeof d != "function");
            this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
            for (let i = 0; i < 2; i++) {
                this.viewport = this.getViewport(0, null);
                if (!this.updateForViewport())
                    break;
            }
            this.updateViewportLines();
            this.lineGaps = this.ensureLineGaps([]);
            this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(this, false)));
            this.computeVisibleRanges();
        }
        updateForViewport() {
            let viewports = [this.viewport], { main } = this.state.selection;
            for (let i = 0; i <= 1; i++) {
                let pos = i ? main.head : main.anchor;
                if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
                    let { from, to } = this.lineBlockAt(pos);
                    viewports.push(new Viewport(from, to));
                }
            }
            this.viewports = viewports.sort((a, b) => a.from - b.from);
            return this.updateScaler();
        }
        updateScaler() {
            let scaler = this.scaler;
            this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler :
                new BigScaler(this.heightOracle, this.heightMap, this.viewports);
            return scaler.eq(this.scaler) ? 0 : 2 /* UpdateFlag.Height */;
        }
        updateViewportLines() {
            this.viewportLines = [];
            this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, block => {
                this.viewportLines.push(scaleBlock(block, this.scaler));
            });
        }
        update(update, scrollTarget = null) {
            this.state = update.state;
            let prevDeco = this.stateDeco;
            this.stateDeco = this.state.facet(decorations).filter(d => typeof d != "function");
            let contentChanges = update.changedRanges;
            let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
            let prevHeight = this.heightMap.height;
            let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
            clearHeightChangeFlag();
            this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
            if (this.heightMap.height != prevHeight || heightChangeFlag)
                update.flags |= 2 /* UpdateFlag.Height */;
            if (scrollAnchor) {
                this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
                this.scrollAnchorHeight = scrollAnchor.top;
            }
            else {
                this.scrollAnchorPos = -1;
                this.scrollAnchorHeight = prevHeight;
            }
            let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
            if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||
                !this.viewportIsAppropriate(viewport))
                viewport = this.getViewport(0, scrollTarget);
            let viewportChange = viewport.from != this.viewport.from || viewport.to != this.viewport.to;
            this.viewport = viewport;
            update.flags |= this.updateForViewport();
            if (viewportChange || !update.changes.empty || (update.flags & 2 /* UpdateFlag.Height */))
                this.updateViewportLines();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
                this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
            update.flags |= this.computeVisibleRanges(update.changes);
            if (scrollTarget)
                this.scrollTarget = scrollTarget;
            if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
                update.state.selection.main.empty && update.state.selection.main.assoc &&
                !update.state.facet(nativeSelectionHidden))
                this.mustEnforceCursorAssoc = true;
        }
        measure(view) {
            let dom = view.contentDOM, style = window.getComputedStyle(dom);
            let oracle = this.heightOracle;
            let whiteSpace = style.whiteSpace;
            this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
            let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
            let domRect = dom.getBoundingClientRect();
            let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
            this.contentDOMHeight = domRect.height;
            this.mustMeasureContent = false;
            let result = 0, bias = 0;
            if (domRect.width && domRect.height) {
                let { scaleX, scaleY } = getScale(dom, domRect);
                if (scaleX > .005 && Math.abs(this.scaleX - scaleX) > .005 ||
                    scaleY > .005 && Math.abs(this.scaleY - scaleY) > .005) {
                    this.scaleX = scaleX;
                    this.scaleY = scaleY;
                    result |= 16 /* UpdateFlag.Geometry */;
                    refresh = measureContent = true;
                }
            }
            // Vertical padding
            let paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
            let paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
            if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
                this.paddingTop = paddingTop;
                this.paddingBottom = paddingBottom;
                result |= 16 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;
            }
            if (this.editorWidth != view.scrollDOM.clientWidth) {
                if (oracle.lineWrapping)
                    measureContent = true;
                this.editorWidth = view.scrollDOM.clientWidth;
                result |= 16 /* UpdateFlag.Geometry */;
            }
            let scrollTop = view.scrollDOM.scrollTop * this.scaleY;
            if (this.scrollTop != scrollTop) {
                this.scrollAnchorHeight = -1;
                this.scrollTop = scrollTop;
            }
            this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
            // Pixel viewport
            let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
            let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
            this.pixelViewport = pixelViewport;
            let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
            if (inView != this.inView) {
                this.inView = inView;
                if (inView)
                    measureContent = true;
            }
            if (!this.inView && !this.scrollTarget && !inWindow(view.dom))
                return 0;
            let contentWidth = domRect.width;
            if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
                this.contentDOMWidth = domRect.width;
                this.editorHeight = view.scrollDOM.clientHeight;
                result |= 16 /* UpdateFlag.Geometry */;
            }
            if (measureContent) {
                let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
                if (oracle.mustRefreshForHeights(lineHeights))
                    refresh = true;
                if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
                    let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
                    refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
                    if (refresh) {
                        view.docView.minWidth = 0;
                        result |= 16 /* UpdateFlag.Geometry */;
                    }
                }
                if (dTop > 0 && dBottom > 0)
                    bias = Math.max(dTop, dBottom);
                else if (dTop < 0 && dBottom < 0)
                    bias = Math.min(dTop, dBottom);
                clearHeightChangeFlag();
                for (let vp of this.viewports) {
                    let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
                    this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
                }
                if (heightChangeFlag)
                    result |= 2 /* UpdateFlag.Height */;
            }
            let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||
                this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from ||
                    this.scrollTarget.range.head > this.viewport.to);
            if (viewportChange) {
                if (result & 2 /* UpdateFlag.Height */)
                    result |= this.updateScaler();
                this.viewport = this.getViewport(bias, this.scrollTarget);
                result |= this.updateForViewport();
            }
            if ((result & 2 /* UpdateFlag.Height */) || viewportChange)
                this.updateViewportLines();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
                this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
            result |= this.computeVisibleRanges();
            if (this.mustEnforceCursorAssoc) {
                this.mustEnforceCursorAssoc = false;
                // This is done in the read stage, because moving the selection
                // to a line end is going to trigger a layout anyway, so it
                // can't be a pure write. It should be rare that it does any
                // writing.
                view.docView.enforceCursorAssoc();
            }
            return result;
        }
        get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }
        get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }
        getViewport(bias, scrollTarget) {
            // This will divide VP.Margin between the top and the
            // bottom, depending on the bias (the change in viewport position
            // since the last update). It'll hold a number between 0 and 1
            let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));
            let map = this.heightMap, oracle = this.heightOracle;
            let { visibleTop, visibleBottom } = this;
            let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType$1.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType$1.ByHeight, oracle, 0, 0).to);
            // If scrollTarget is given, make sure the viewport includes that position
            if (scrollTarget) {
                let { head } = scrollTarget.range;
                if (head < viewport.from || head > viewport.to) {
                    let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
                    let block = map.lineAt(head, QueryType$1.ByPos, oracle, 0, 0), topPos;
                    if (scrollTarget.y == "center")
                        topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
                    else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
                        topPos = block.top;
                    else
                        topPos = block.bottom - viewHeight;
                    viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType$1.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType$1.ByHeight, oracle, 0, 0).to);
                }
            }
            return viewport;
        }
        mapViewport(viewport, changes) {
            let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
            return new Viewport(this.heightMap.lineAt(from, QueryType$1.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType$1.ByPos, this.heightOracle, 0, 0).to);
        }
        // Checks if a given viewport covers the visible part of the
        // document and not too much beyond that.
        viewportIsAppropriate({ from, to }, bias = 0) {
            if (!this.inView)
                return true;
            let { top } = this.heightMap.lineAt(from, QueryType$1.ByPos, this.heightOracle, 0, 0);
            let { bottom } = this.heightMap.lineAt(to, QueryType$1.ByPos, this.heightOracle, 0, 0);
            let { visibleTop, visibleBottom } = this;
            return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) &&
                (to == this.state.doc.length ||
                    bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) &&
                (top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */);
        }
        mapLineGaps(gaps, changes) {
            if (!gaps.length || changes.empty)
                return gaps;
            let mapped = [];
            for (let gap of gaps)
                if (!changes.touchesRange(gap.from, gap.to))
                    mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size, gap.displaySize));
            return mapped;
        }
        // Computes positions in the viewport where the start or end of a
        // line should be hidden, trying to reuse existing line gaps when
        // appropriate to avoid unneccesary redraws.
        // Uses crude character-counting for the positioning and sizing,
        // since actual DOM coordinates aren't always available and
        // predictable. Relies on generous margins (see LG.Margin) to hide
        // the artifacts this might produce from the user.
        ensureLineGaps(current, mayMeasure) {
            let wrapping = this.heightOracle.lineWrapping;
            let margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */, halfMargin = margin >> 1, doubleMargin = margin << 1;
            // The non-wrapping logic won't work at all in predominantly right-to-left text.
            if (this.defaultTextDirection != Direction.LTR && !wrapping)
                return [];
            let gaps = [];
            let addGap = (from, to, line, structure) => {
                if (to - from < halfMargin)
                    return;
                let sel = this.state.selection.main, avoid = [sel.from];
                if (!sel.empty)
                    avoid.push(sel.to);
                for (let pos of avoid) {
                    if (pos > from && pos < to) {
                        addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);
                        addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);
                        return;
                    }
                }
                let gap = find(current, gap => gap.from >= line.from && gap.to <= line.to &&
                    Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin &&
                    !avoid.some(pos => gap.from < pos && gap.to > pos));
                if (!gap) {
                    // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping
                    if (to < line.to && mayMeasure && wrapping &&
                        mayMeasure.visibleRanges.some(r => r.from <= to && r.to >= to)) {
                        let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
                        if (lineStart > from)
                            to = lineStart;
                    }
                    let size = this.gapSize(line, from, to, structure);
                    let displaySize = wrapping || size < 2000000 /* VP.MaxHorizGap */ ? size : 2000000 /* VP.MaxHorizGap */;
                    gap = new LineGap(from, to, size, displaySize);
                }
                gaps.push(gap);
            };
            let checkLine = (line) => {
                if (line.length < doubleMargin || line.type != BlockType.Text)
                    return;
                let structure = lineStructure(line.from, line.to, this.stateDeco);
                if (structure.total < doubleMargin)
                    return;
                let target = this.scrollTarget ? this.scrollTarget.range.head : null;
                let viewFrom, viewTo;
                if (wrapping) {
                    let marginHeight = (margin / this.heightOracle.lineLength) * this.heightOracle.lineHeight;
                    let top, bot;
                    if (target != null) {
                        let targetFrac = findFraction(structure, target);
                        let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
                        top = targetFrac - spaceFrac;
                        bot = targetFrac + spaceFrac;
                    }
                    else {
                        top = (this.visibleTop - line.top - marginHeight) / line.height;
                        bot = (this.visibleBottom - line.top + marginHeight) / line.height;
                    }
                    viewFrom = findPosition(structure, top);
                    viewTo = findPosition(structure, bot);
                }
                else {
                    let totalWidth = structure.total * this.heightOracle.charWidth;
                    let marginWidth = margin * this.heightOracle.charWidth;
                    let horizOffset = 0;
                    if (totalWidth > 2000000 /* VP.MaxHorizGap */)
                        for (let old of current) {
                            if (old.from >= line.from && old.from < line.to && old.size != old.displaySize &&
                                old.from * this.heightOracle.charWidth + horizOffset < this.pixelViewport.left)
                                horizOffset = old.size - old.displaySize;
                        }
                    let pxLeft = this.pixelViewport.left + horizOffset, pxRight = this.pixelViewport.right + horizOffset;
                    let left, right;
                    if (target != null) {
                        let targetFrac = findFraction(structure, target);
                        let spaceFrac = ((pxRight - pxLeft) / 2 + marginWidth) / totalWidth;
                        left = targetFrac - spaceFrac;
                        right = targetFrac + spaceFrac;
                    }
                    else {
                        left = (pxLeft - marginWidth) / totalWidth;
                        right = (pxRight + marginWidth) / totalWidth;
                    }
                    viewFrom = findPosition(structure, left);
                    viewTo = findPosition(structure, right);
                }
                if (viewFrom > line.from)
                    addGap(line.from, viewFrom, line, structure);
                if (viewTo < line.to)
                    addGap(viewTo, line.to, line, structure);
            };
            for (let line of this.viewportLines) {
                if (Array.isArray(line.type))
                    line.type.forEach(checkLine);
                else
                    checkLine(line);
            }
            return gaps;
        }
        gapSize(line, from, to, structure) {
            let fraction = findFraction(structure, to) - findFraction(structure, from);
            if (this.heightOracle.lineWrapping) {
                return line.height * fraction;
            }
            else {
                return structure.total * this.heightOracle.charWidth * fraction;
            }
        }
        updateLineGaps(gaps) {
            if (!LineGap.same(gaps, this.lineGaps)) {
                this.lineGaps = gaps;
                this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this, this.heightOracle.lineWrapping)));
            }
        }
        computeVisibleRanges(changes) {
            let deco = this.stateDeco;
            if (this.lineGaps.length)
                deco = deco.concat(this.lineGapDeco);
            let ranges = [];
            RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
                span(from, to) { ranges.push({ from, to }); },
                point() { }
            }, 20);
            let changed = 0;
            if (ranges.length != this.visibleRanges.length) {
                changed = 8 /* UpdateFlag.ViewportMoved */ | 4 /* UpdateFlag.Viewport */;
            }
            else {
                for (let i = 0; i < ranges.length && !(changed & 8 /* UpdateFlag.ViewportMoved */); i++) {
                    let old = this.visibleRanges[i], nw = ranges[i];
                    if (old.from != nw.from || old.to != nw.to) {
                        changed |= 4 /* UpdateFlag.Viewport */;
                        if (!(changes && changes.mapPos(old.from, -1) == nw.from && changes.mapPos(old.to, 1) == nw.to))
                            changed |= 8 /* UpdateFlag.ViewportMoved */;
                    }
                }
            }
            this.visibleRanges = ranges;
            return changed;
        }
        lineBlockAt(pos) {
            return (pos >= this.viewport.from && pos <= this.viewport.to &&
                this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||
                scaleBlock(this.heightMap.lineAt(pos, QueryType$1.ByPos, this.heightOracle, 0, 0), this.scaler);
        }
        lineBlockAtHeight(height) {
            return (height >= this.viewportLines[0].top && height <= this.viewportLines[this.viewportLines.length - 1].bottom &&
                this.viewportLines.find(l => l.top <= height && l.bottom >= height)) ||
                scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType$1.ByHeight, this.heightOracle, 0, 0), this.scaler);
        }
        scrollAnchorAt(scrollTop) {
            let block = this.lineBlockAtHeight(scrollTop + 8);
            return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];
        }
        elementAtHeight(height) {
            return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
        }
        get docHeight() {
            return this.scaler.toDOM(this.heightMap.height);
        }
        get contentHeight() {
            return this.docHeight + this.paddingTop + this.paddingBottom;
        }
    }
    class Viewport {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
    }
    function lineStructure(from, to, stateDeco) {
        let ranges = [], pos = from, total = 0;
        RangeSet.spans(stateDeco, from, to, {
            span() { },
            point(from, to) {
                if (from > pos) {
                    ranges.push({ from: pos, to: from });
                    total += from - pos;
                }
                pos = to;
            }
        }, 20); // We're only interested in collapsed ranges of a significant size
        if (pos < to) {
            ranges.push({ from: pos, to });
            total += to - pos;
        }
        return { total, ranges };
    }
    function findPosition({ total, ranges }, ratio) {
        if (ratio <= 0)
            return ranges[0].from;
        if (ratio >= 1)
            return ranges[ranges.length - 1].to;
        let dist = Math.floor(total * ratio);
        for (let i = 0;; i++) {
            let { from, to } = ranges[i], size = to - from;
            if (dist <= size)
                return from + dist;
            dist -= size;
        }
    }
    function findFraction(structure, pos) {
        let counted = 0;
        for (let { from, to } of structure.ranges) {
            if (pos <= to) {
                counted += pos - from;
                break;
            }
            counted += to - from;
        }
        return counted / structure.total;
    }
    function find(array, f) {
        for (let val of array)
            if (f(val))
                return val;
        return undefined;
    }
    // Don't scale when the document height is within the range of what
    // the DOM can handle.
    const IdScaler = {
        toDOM(n) { return n; },
        fromDOM(n) { return n; },
        scale: 1,
        eq(other) { return other == this; }
    };
    // When the height is too big (> VP.MaxDOMHeight), scale down the
    // regions outside the viewports so that the total height is
    // VP.MaxDOMHeight.
    class BigScaler {
        constructor(oracle, heightMap, viewports) {
            let vpHeight = 0, base = 0, domBase = 0;
            this.viewports = viewports.map(({ from, to }) => {
                let top = heightMap.lineAt(from, QueryType$1.ByPos, oracle, 0, 0).top;
                let bottom = heightMap.lineAt(to, QueryType$1.ByPos, oracle, 0, 0).bottom;
                vpHeight += bottom - top;
                return { from, to, top, bottom, domTop: 0, domBottom: 0 };
            });
            this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
            for (let obj of this.viewports) {
                obj.domTop = domBase + (obj.top - base) * this.scale;
                domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
                base = obj.bottom;
            }
        }
        toDOM(n) {
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.top)
                    return domBase + (n - base) * this.scale;
                if (n <= vp.bottom)
                    return vp.domTop + (n - vp.top);
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
        fromDOM(n) {
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.domTop)
                    return base + (n - domBase) / this.scale;
                if (n <= vp.domBottom)
                    return vp.top + (n - vp.domTop);
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
        eq(other) {
            if (!(other instanceof BigScaler))
                return false;
            return this.scale == other.scale && this.viewports.length == other.viewports.length &&
                this.viewports.every((vp, i) => vp.from == other.viewports[i].from && vp.to == other.viewports[i].to);
        }
    }
    function scaleBlock(block, scaler) {
        if (scaler.scale == 1)
            return block;
        let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
        return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map(b => scaleBlock(b, scaler)) : block._content);
    }

    const theme = /*@__PURE__*/Facet.define({ combine: strs => strs.join(" ") });
    const darkTheme = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });
    const baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();
    const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
    function buildTheme(main, spec, scopes) {
        return new StyleModule(spec, {
            finish(sel) {
                return /&/.test(sel) ? sel.replace(/&\w*/, m => {
                    if (m == "&")
                        return main;
                    if (!scopes || !scopes[m])
                        throw new RangeError(`Unsupported selector: ${m}`);
                    return scopes[m];
                }) : main + " " + sel;
            }
        });
    }
    const baseTheme$1$3 = /*@__PURE__*/buildTheme("." + baseThemeID, {
        "&": {
            position: "relative !important",
            boxSizing: "border-box",
            "&.cm-focused": {
                // Provide a simple default outline to make sure a focused
                // editor is visually distinct. Can't leave the default behavior
                // because that will apply to the content element, which is
                // inside the scrollable container and doesn't include the
                // gutters. We also can't use an 'auto' outline, since those
                // are, for some reason, drawn behind the element content, which
                // will cause things like the active line background to cover
                // the outline (#297).
                outline: "1px dotted #212121"
            },
            display: "flex !important",
            flexDirection: "column"
        },
        ".cm-scroller": {
            display: "flex !important",
            alignItems: "flex-start !important",
            fontFamily: "monospace",
            lineHeight: 1.4,
            height: "100%",
            overflowX: "auto",
            position: "relative",
            zIndex: 0,
            overflowAnchor: "none",
        },
        ".cm-content": {
            margin: 0,
            flexGrow: 2,
            flexShrink: 0,
            display: "block",
            whiteSpace: "pre",
            wordWrap: "normal", // https://github.com/codemirror/dev/issues/456
            boxSizing: "border-box",
            minHeight: "100%",
            padding: "4px 0",
            outline: "none",
            "&[contenteditable=true]": {
                WebkitUserModify: "read-write-plaintext-only",
            }
        },
        ".cm-lineWrapping": {
            whiteSpace_fallback: "pre-wrap", // For IE
            whiteSpace: "break-spaces",
            wordBreak: "break-word", // For Safari, which doesn't support overflow-wrap: anywhere
            overflowWrap: "anywhere",
            flexShrink: 1
        },
        "&light .cm-content": { caretColor: "black" },
        "&dark .cm-content": { caretColor: "white" },
        ".cm-line": {
            display: "block",
            padding: "0 2px 0 6px"
        },
        ".cm-layer": {
            position: "absolute",
            left: 0,
            top: 0,
            contain: "size style",
            "& > *": {
                position: "absolute"
            }
        },
        "&light .cm-selectionBackground": {
            background: "#d9d9d9"
        },
        "&dark .cm-selectionBackground": {
            background: "#222"
        },
        "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
            background: "#d7d4f0"
        },
        "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
            background: "#233"
        },
        ".cm-cursorLayer": {
            pointerEvents: "none"
        },
        "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
            animation: "steps(1) cm-blink 1.2s infinite"
        },
        // Two animations defined so that we can switch between them to
        // restart the animation without forcing another style
        // recomputation.
        "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
        "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
        ".cm-cursor, .cm-dropCursor": {
            borderLeft: "1.2px solid black",
            marginLeft: "-0.6px",
            pointerEvents: "none",
        },
        ".cm-cursor": {
            display: "none"
        },
        "&dark .cm-cursor": {
            borderLeftColor: "#ddd"
        },
        ".cm-dropCursor": {
            position: "absolute"
        },
        "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
            display: "block"
        },
        ".cm-iso": {
            unicodeBidi: "isolate"
        },
        ".cm-announced": {
            position: "fixed",
            top: "-10000px"
        },
        "@media print": {
            ".cm-announced": { display: "none" }
        },
        "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
        "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
        "&light .cm-specialChar": { color: "red" },
        "&dark .cm-specialChar": { color: "#f78" },
        ".cm-gutters": {
            flexShrink: 0,
            display: "flex",
            height: "100%",
            boxSizing: "border-box",
            zIndex: 200,
        },
        ".cm-gutters-before": { insetInlineStart: 0 },
        ".cm-gutters-after": { insetInlineEnd: 0 },
        "&light .cm-gutters": {
            backgroundColor: "#f5f5f5",
            color: "#6c6c6c",
            border: "0px solid #ddd",
            "&.cm-gutters-before": { borderRightWidth: "1px" },
            "&.cm-gutters-after": { borderLeftWidth: "1px" },
        },
        "&dark .cm-gutters": {
            backgroundColor: "#333338",
            color: "#ccc"
        },
        ".cm-gutter": {
            display: "flex !important", // Necessary -- prevents margin collapsing
            flexDirection: "column",
            flexShrink: 0,
            boxSizing: "border-box",
            minHeight: "100%",
            overflow: "hidden"
        },
        ".cm-gutterElement": {
            boxSizing: "border-box"
        },
        ".cm-lineNumbers .cm-gutterElement": {
            padding: "0 3px 0 5px",
            minWidth: "20px",
            textAlign: "right",
            whiteSpace: "nowrap"
        },
        "&light .cm-activeLineGutter": {
            backgroundColor: "#e2f2ff"
        },
        "&dark .cm-activeLineGutter": {
            backgroundColor: "#222227"
        },
        ".cm-panels": {
            boxSizing: "border-box",
            position: "sticky",
            left: 0,
            right: 0,
            zIndex: 300
        },
        "&light .cm-panels": {
            backgroundColor: "#f5f5f5",
            color: "black"
        },
        "&light .cm-panels-top": {
            borderBottom: "1px solid #ddd"
        },
        "&light .cm-panels-bottom": {
            borderTop: "1px solid #ddd"
        },
        "&dark .cm-panels": {
            backgroundColor: "#333338",
            color: "white"
        },
        ".cm-dialog": {
            padding: "2px 19px 4px 6px",
            position: "relative",
            "& label": { fontSize: "80%" },
        },
        ".cm-dialog-close": {
            position: "absolute",
            top: "3px",
            right: "4px",
            backgroundColor: "inherit",
            border: "none",
            font: "inherit",
            fontSize: "14px",
            padding: "0"
        },
        ".cm-tab": {
            display: "inline-block",
            overflow: "hidden",
            verticalAlign: "bottom"
        },
        ".cm-widgetBuffer": {
            verticalAlign: "text-top",
            height: "1em",
            width: 0,
            display: "inline"
        },
        ".cm-placeholder": {
            color: "#888",
            display: "inline-block",
            verticalAlign: "top",
            userSelect: "none"
        },
        ".cm-highlightSpace": {
            backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
            backgroundPosition: "center",
        },
        ".cm-highlightTab": {
            backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
            backgroundSize: "auto 100%",
            backgroundPosition: "right 90%",
            backgroundRepeat: "no-repeat"
        },
        ".cm-trailingSpace": {
            backgroundColor: "#ff332255"
        },
        ".cm-button": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            padding: ".2em 1em",
            borderRadius: "1px"
        },
        "&light .cm-button": {
            backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
            }
        },
        "&dark .cm-button": {
            backgroundImage: "linear-gradient(#393939, #111)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#111, #333)"
            }
        },
        ".cm-textfield": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            border: "1px solid silver",
            padding: ".2em .5em"
        },
        "&light .cm-textfield": {
            backgroundColor: "white"
        },
        "&dark .cm-textfield": {
            border: "1px solid #555",
            backgroundColor: "inherit"
        }
    }, lightDarkIDs);

    const observeOptions = {
        childList: true,
        characterData: true,
        subtree: true,
        attributes: true,
        characterDataOldValue: true
    };
    // IE11 has very broken mutation observers, so we also listen to
    // DOMCharacterDataModified there
    const useCharData = browser.ie && browser.ie_version <= 11;
    class DOMObserver {
        constructor(view) {
            this.view = view;
            this.active = false;
            this.editContext = null;
            // The known selection. Kept in our own object, as opposed to just
            // directly accessing the selection because:
            //  - Safari doesn't report the right selection in shadow DOM
            //  - Reading from the selection forces a DOM layout
            //  - This way, we can ignore selectionchange events if we have
            //    already seen the 'new' selection
            this.selectionRange = new DOMSelectionState;
            // Set when a selection change is detected, cleared on flush
            this.selectionChanged = false;
            this.delayedFlush = -1;
            this.resizeTimeout = -1;
            this.queue = [];
            this.delayedAndroidKey = null;
            this.flushingAndroidKey = -1;
            this.lastChange = 0;
            this.scrollTargets = [];
            this.intersection = null;
            this.resizeScroll = null;
            this.intersecting = false;
            this.gapIntersection = null;
            this.gaps = [];
            this.printQuery = null;
            // Timeout for scheduling check of the parents that need scroll handlers
            this.parentCheck = -1;
            this.dom = view.contentDOM;
            this.observer = new MutationObserver(mutations => {
                for (let mut of mutations)
                    this.queue.push(mut);
                // IE11 will sometimes (on typing over a selection or
                // backspacing out a single character text node) call the
                // observer callback before actually updating the DOM.
                //
                // Unrelatedly, iOS Safari will, when ending a composition,
                // sometimes first clear it, deliver the mutations, and then
                // reinsert the finished text. CodeMirror's handling of the
                // deletion will prevent the reinsertion from happening,
                // breaking composition.
                if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&
                    mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                        m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                    this.flushSoon();
                else
                    this.flush();
            });
            if (window.EditContext && browser.android && view.constructor.EDIT_CONTEXT !== false &&
                // Chrome <126 doesn't support inverted selections in edit context (#1392)
                !(browser.chrome && browser.chrome_version < 126)) {
                this.editContext = new EditContextManager(view);
                if (view.state.facet(editable))
                    view.contentDOM.editContext = this.editContext.editContext;
            }
            if (useCharData)
                this.onCharData = (event) => {
                    this.queue.push({ target: event.target,
                        type: "characterData",
                        oldValue: event.prevValue });
                    this.flushSoon();
                };
            this.onSelectionChange = this.onSelectionChange.bind(this);
            this.onResize = this.onResize.bind(this);
            this.onPrint = this.onPrint.bind(this);
            this.onScroll = this.onScroll.bind(this);
            if (window.matchMedia)
                this.printQuery = window.matchMedia("print");
            if (typeof ResizeObserver == "function") {
                this.resizeScroll = new ResizeObserver(() => {
                    var _a;
                    if (((_a = this.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75)
                        this.onResize();
                });
                this.resizeScroll.observe(view.scrollDOM);
            }
            this.addWindowListeners(this.win = view.win);
            this.start();
            if (typeof IntersectionObserver == "function") {
                this.intersection = new IntersectionObserver(entries => {
                    if (this.parentCheck < 0)
                        this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
                    if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {
                        this.intersecting = !this.intersecting;
                        if (this.intersecting != this.view.inView)
                            this.onScrollChanged(document.createEvent("Event"));
                    }
                }, { threshold: [0, .001] });
                this.intersection.observe(this.dom);
                this.gapIntersection = new IntersectionObserver(entries => {
                    if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
                        this.onScrollChanged(document.createEvent("Event"));
                }, {});
            }
            this.listenForScroll();
            this.readSelectionRange();
        }
        onScrollChanged(e) {
            this.view.inputState.runHandlers("scroll", e);
            if (this.intersecting)
                this.view.measure();
        }
        onScroll(e) {
            if (this.intersecting)
                this.flush(false);
            if (this.editContext)
                this.view.requestMeasure(this.editContext.measureReq);
            this.onScrollChanged(e);
        }
        onResize() {
            if (this.resizeTimeout < 0)
                this.resizeTimeout = setTimeout(() => {
                    this.resizeTimeout = -1;
                    this.view.requestMeasure();
                }, 50);
        }
        onPrint(event) {
            if ((event.type == "change" || !event.type) && !event.matches)
                return;
            this.view.viewState.printing = true;
            this.view.measure();
            setTimeout(() => {
                this.view.viewState.printing = false;
                this.view.requestMeasure();
            }, 500);
        }
        updateGaps(gaps) {
            if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
                this.gapIntersection.disconnect();
                for (let gap of gaps)
                    this.gapIntersection.observe(gap);
                this.gaps = gaps;
            }
        }
        onSelectionChange(event) {
            let wasChanged = this.selectionChanged;
            if (!this.readSelectionRange() || this.delayedAndroidKey)
                return;
            let { view } = this, sel = this.selectionRange;
            if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(this.dom, sel))
                return;
            let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
            if (context && context.ignoreEvent(event)) {
                if (!wasChanged)
                    this.selectionChanged = false;
                return;
            }
            // Deletions on IE11 fire their events in the wrong order, giving
            // us a selection change event before the DOM changes are
            // reported.
            // Chrome Android has a similar issue when backspacing out a
            // selection (#645).
            if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
                // (Selection.isCollapsed isn't reliable on IE)
                sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                this.flushSoon();
            else
                this.flush(false);
        }
        readSelectionRange() {
            let { view } = this;
            // The Selection object is broken in shadow roots in Safari. See
            // https://github.com/codemirror/dev/issues/414
            let selection = getSelection(view.root);
            if (!selection)
                return false;
            let range = browser.safari && view.root.nodeType == 11 &&
                view.root.activeElement == this.dom &&
                safariSelectionRangeHack(this.view, selection) || selection;
            if (!range || this.selectionRange.eq(range))
                return false;
            let local = hasSelection(this.dom, range);
            // Detect the situation where the browser has, on focus, moved the
            // selection to the start of the content element. Reset it to the
            // position from the editor state.
            if (local && !this.selectionChanged &&
                view.inputState.lastFocusTime > Date.now() - 200 &&
                view.inputState.lastTouchTime < Date.now() - 300 &&
                atElementStart(this.dom, range)) {
                this.view.inputState.lastFocusTime = 0;
                view.docView.updateSelection();
                return false;
            }
            this.selectionRange.setRange(range);
            if (local)
                this.selectionChanged = true;
            return true;
        }
        setSelectionRange(anchor, head) {
            this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
            this.selectionChanged = false;
        }
        clearSelectionRange() {
            this.selectionRange.set(null, 0, null, 0);
        }
        listenForScroll() {
            this.parentCheck = -1;
            let i = 0, changed = null;
            for (let dom = this.dom; dom;) {
                if (dom.nodeType == 1) {
                    if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                        i++;
                    else if (!changed)
                        changed = this.scrollTargets.slice(0, i);
                    if (changed)
                        changed.push(dom);
                    dom = dom.assignedSlot || dom.parentNode;
                }
                else if (dom.nodeType == 11) { // Shadow root
                    dom = dom.host;
                }
                else {
                    break;
                }
            }
            if (i < this.scrollTargets.length && !changed)
                changed = this.scrollTargets.slice(0, i);
            if (changed) {
                for (let dom of this.scrollTargets)
                    dom.removeEventListener("scroll", this.onScroll);
                for (let dom of this.scrollTargets = changed)
                    dom.addEventListener("scroll", this.onScroll);
            }
        }
        ignore(f) {
            if (!this.active)
                return f();
            try {
                this.stop();
                return f();
            }
            finally {
                this.start();
                this.clear();
            }
        }
        start() {
            if (this.active)
                return;
            this.observer.observe(this.dom, observeOptions);
            if (useCharData)
                this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
            this.active = true;
        }
        stop() {
            if (!this.active)
                return;
            this.active = false;
            this.observer.disconnect();
            if (useCharData)
                this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
        }
        // Throw away any pending changes
        clear() {
            this.processRecords();
            this.queue.length = 0;
            this.selectionChanged = false;
        }
        // Chrome Android, especially in combination with GBoard, not only
        // doesn't reliably fire regular key events, but also often
        // surrounds the effect of enter or backspace with a bunch of
        // composition events that, when interrupted, cause text duplication
        // or other kinds of corruption. This hack makes the editor back off
        // from handling DOM changes for a moment when such a key is
        // detected (via beforeinput or keydown), and then tries to flush
        // them or, if that has no effect, dispatches the given key.
        delayAndroidKey(key, keyCode) {
            var _a;
            if (!this.delayedAndroidKey) {
                let flush = () => {
                    let key = this.delayedAndroidKey;
                    if (key) {
                        this.clearDelayedAndroidKey();
                        this.view.inputState.lastKeyCode = key.keyCode;
                        this.view.inputState.lastKeyTime = Date.now();
                        let flushed = this.flush();
                        if (!flushed && key.force)
                            dispatchKey(this.dom, key.key, key.keyCode);
                    }
                };
                this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
            }
            // Since backspace beforeinput is sometimes signalled spuriously,
            // Enter always takes precedence.
            if (!this.delayedAndroidKey || key == "Enter")
                this.delayedAndroidKey = {
                    key, keyCode,
                    // Only run the key handler when no changes are detected if
                    // this isn't coming right after another change, in which case
                    // it is probably part of a weird chain of updates, and should
                    // be ignored if it returns the DOM to its previous state.
                    force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)
                };
        }
        clearDelayedAndroidKey() {
            this.win.cancelAnimationFrame(this.flushingAndroidKey);
            this.delayedAndroidKey = null;
            this.flushingAndroidKey = -1;
        }
        flushSoon() {
            if (this.delayedFlush < 0)
                this.delayedFlush = this.view.win.requestAnimationFrame(() => { this.delayedFlush = -1; this.flush(); });
        }
        forceFlush() {
            if (this.delayedFlush >= 0) {
                this.view.win.cancelAnimationFrame(this.delayedFlush);
                this.delayedFlush = -1;
            }
            this.flush();
        }
        pendingRecords() {
            for (let mut of this.observer.takeRecords())
                this.queue.push(mut);
            return this.queue;
        }
        processRecords() {
            let records = this.pendingRecords();
            if (records.length)
                this.queue = [];
            let from = -1, to = -1, typeOver = false;
            for (let record of records) {
                let range = this.readMutation(record);
                if (!range)
                    continue;
                if (range.typeOver)
                    typeOver = true;
                if (from == -1) {
                    ({ from, to } = range);
                }
                else {
                    from = Math.min(range.from, from);
                    to = Math.max(range.to, to);
                }
            }
            return { from, to, typeOver };
        }
        readChange() {
            let { from, to, typeOver } = this.processRecords();
            let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
            if (from < 0 && !newSel)
                return null;
            if (from > -1)
                this.lastChange = Date.now();
            this.view.inputState.lastFocusTime = 0;
            this.selectionChanged = false;
            let change = new DOMChange(this.view, from, to, typeOver);
            this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };
            return change;
        }
        // Apply pending changes, if any
        flush(readSelection = true) {
            // Completely hold off flushing when pending keys are set—the code
            // managing those will make sure processRecords is called and the
            // view is resynchronized after
            if (this.delayedFlush >= 0 || this.delayedAndroidKey)
                return false;
            if (readSelection)
                this.readSelectionRange();
            let domChange = this.readChange();
            if (!domChange) {
                this.view.requestMeasure();
                return false;
            }
            let startState = this.view.state;
            let handled = applyDOMChange(this.view, domChange);
            // The view wasn't updated but DOM/selection changes were seen. Reset the view.
            if (this.view.state == startState &&
                (domChange.domChanged || domChange.newSel && !domChange.newSel.main.eq(this.view.state.selection.main)))
                this.view.update([]);
            return handled;
        }
        readMutation(rec) {
            let cView = this.view.docView.nearest(rec.target);
            if (!cView || cView.ignoreMutation(rec))
                return null;
            cView.markDirty(rec.type == "attributes");
            if (rec.type == "attributes")
                cView.flags |= 4 /* ViewFlag.AttrsDirty */;
            if (rec.type == "childList") {
                let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
                let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
                return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                    to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
            }
            else if (rec.type == "characterData") {
                return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
            }
            else {
                return null;
            }
        }
        setWindow(win) {
            if (win != this.win) {
                this.removeWindowListeners(this.win);
                this.win = win;
                this.addWindowListeners(this.win);
            }
        }
        addWindowListeners(win) {
            win.addEventListener("resize", this.onResize);
            if (this.printQuery) {
                if (this.printQuery.addEventListener)
                    this.printQuery.addEventListener("change", this.onPrint);
                else
                    this.printQuery.addListener(this.onPrint);
            }
            else
                win.addEventListener("beforeprint", this.onPrint);
            win.addEventListener("scroll", this.onScroll);
            win.document.addEventListener("selectionchange", this.onSelectionChange);
        }
        removeWindowListeners(win) {
            win.removeEventListener("scroll", this.onScroll);
            win.removeEventListener("resize", this.onResize);
            if (this.printQuery) {
                if (this.printQuery.removeEventListener)
                    this.printQuery.removeEventListener("change", this.onPrint);
                else
                    this.printQuery.removeListener(this.onPrint);
            }
            else
                win.removeEventListener("beforeprint", this.onPrint);
            win.document.removeEventListener("selectionchange", this.onSelectionChange);
        }
        update(update) {
            if (this.editContext) {
                this.editContext.update(update);
                if (update.startState.facet(editable) != update.state.facet(editable))
                    update.view.contentDOM.editContext = update.state.facet(editable) ? this.editContext.editContext : null;
            }
        }
        destroy() {
            var _a, _b, _c;
            this.stop();
            (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
            (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
            (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
            for (let dom of this.scrollTargets)
                dom.removeEventListener("scroll", this.onScroll);
            this.removeWindowListeners(this.win);
            clearTimeout(this.parentCheck);
            clearTimeout(this.resizeTimeout);
            this.win.cancelAnimationFrame(this.delayedFlush);
            this.win.cancelAnimationFrame(this.flushingAndroidKey);
            if (this.editContext) {
                this.view.contentDOM.editContext = null;
                this.editContext.destroy();
            }
        }
    }
    function findChild(cView, dom, dir) {
        while (dom) {
            let curView = ContentView.get(dom);
            if (curView && curView.parent == cView)
                return curView;
            let parent = dom.parentNode;
            dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
        }
        return null;
    }
    function buildSelectionRangeFromRange(view, range) {
        let anchorNode = range.startContainer, anchorOffset = range.startOffset;
        let focusNode = range.endContainer, focusOffset = range.endOffset;
        let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
        // Since such a range doesn't distinguish between anchor and head,
        // use a heuristic that flips it around if its end matches the
        // current anchor.
        if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
            [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
        return { anchorNode, anchorOffset, focusNode, focusOffset };
    }
    // Used to work around a Safari Selection/shadow DOM bug (#414)
    function safariSelectionRangeHack(view, selection) {
        if (selection.getComposedRanges) {
            let range = selection.getComposedRanges(view.root)[0];
            if (range)
                return buildSelectionRangeFromRange(view, range);
        }
        let found = null;
        // Because Safari (at least in 2018-2021) doesn't provide regular
        // access to the selection inside a shadowroot, we have to perform a
        // ridiculous hack to get at it—using `execCommand` to trigger a
        // `beforeInput` event so that we can read the target range from the
        // event.
        function read(event) {
            event.preventDefault();
            event.stopImmediatePropagation();
            found = event.getTargetRanges()[0];
        }
        view.contentDOM.addEventListener("beforeinput", read, true);
        view.dom.ownerDocument.execCommand("indent");
        view.contentDOM.removeEventListener("beforeinput", read, true);
        return found ? buildSelectionRangeFromRange(view, found) : null;
    }
    class EditContextManager {
        constructor(view) {
            // The document window for which the text in the context is
            // maintained. For large documents, this may be smaller than the
            // editor document. This window always includes the selection head.
            this.from = 0;
            this.to = 0;
            // When applying a transaction, this is used to compare the change
            // made to the context content to the change in the transaction in
            // order to make the minimal changes to the context (since touching
            // that sometimes breaks series of multiple edits made for a single
            // user action on some Android keyboards)
            this.pendingContextChange = null;
            this.handlers = Object.create(null);
            // Kludge to work around the fact that EditContext does not respond
            // well to having its content updated during a composition (see #1472)
            this.composing = null;
            this.resetRange(view.state);
            let context = this.editContext = new window.EditContext({
                text: view.state.doc.sliceString(this.from, this.to),
                selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, view.state.selection.main.anchor))),
                selectionEnd: this.toContextPos(view.state.selection.main.head)
            });
            this.handlers.textupdate = e => {
                let main = view.state.selection.main, { anchor, head } = main;
                let from = this.toEditorPos(e.updateRangeStart), to = this.toEditorPos(e.updateRangeEnd);
                if (view.inputState.composing >= 0 && !this.composing)
                    this.composing = { contextBase: e.updateRangeStart, editorBase: from, drifted: false };
                let change = { from, to, insert: Text.of(e.text.split("\n")) };
                // If the window doesn't include the anchor, assume changes
                // adjacent to a side go up to the anchor.
                if (change.from == this.from && anchor < this.from)
                    change.from = anchor;
                else if (change.to == this.to && anchor > this.to)
                    change.to = anchor;
                // Edit contexts sometimes fire empty changes
                if (change.from == change.to && !change.insert.length) {
                    let newSel = EditorSelection.single(this.toEditorPos(e.selectionStart), this.toEditorPos(e.selectionEnd));
                    if (!newSel.main.eq(main))
                        view.dispatch({ selection: newSel, userEvent: "select" });
                    return;
                }
                if ((browser.mac || browser.android) && change.from == head - 1 &&
                    /^\. ?$/.test(e.text) && view.contentDOM.getAttribute("autocorrect") == "off")
                    change = { from, to, insert: Text.of([e.text.replace(".", " ")]) };
                this.pendingContextChange = change;
                if (!view.state.readOnly) {
                    let newLen = this.to - this.from + (change.to - change.from + change.insert.length);
                    applyDOMChangeInner(view, change, EditorSelection.single(this.toEditorPos(e.selectionStart, newLen), this.toEditorPos(e.selectionEnd, newLen)));
                }
                // If the transaction didn't flush our change, revert it so
                // that the context is in sync with the editor state again.
                if (this.pendingContextChange) {
                    this.revertPending(view.state);
                    this.setSelection(view.state);
                }
            };
            this.handlers.characterboundsupdate = e => {
                let rects = [], prev = null;
                for (let i = this.toEditorPos(e.rangeStart), end = this.toEditorPos(e.rangeEnd); i < end; i++) {
                    let rect = view.coordsForChar(i);
                    prev = (rect && new DOMRect(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top))
                        || prev || new DOMRect;
                    rects.push(prev);
                }
                context.updateCharacterBounds(e.rangeStart, rects);
            };
            this.handlers.textformatupdate = e => {
                let deco = [];
                for (let format of e.getTextFormats()) {
                    let lineStyle = format.underlineStyle, thickness = format.underlineThickness;
                    if (lineStyle != "None" && thickness != "None") {
                        let from = this.toEditorPos(format.rangeStart), to = this.toEditorPos(format.rangeEnd);
                        if (from < to) {
                            let style = `text-decoration: underline ${lineStyle == "Dashed" ? "dashed " : lineStyle == "Squiggle" ? "wavy " : ""}${thickness == "Thin" ? 1 : 2}px`;
                            deco.push(Decoration.mark({ attributes: { style } }).range(from, to));
                        }
                    }
                }
                view.dispatch({ effects: setEditContextFormatting.of(Decoration.set(deco)) });
            };
            this.handlers.compositionstart = () => {
                if (view.inputState.composing < 0) {
                    view.inputState.composing = 0;
                    view.inputState.compositionFirstChange = true;
                }
            };
            this.handlers.compositionend = () => {
                view.inputState.composing = -1;
                view.inputState.compositionFirstChange = null;
                if (this.composing) {
                    let { drifted } = this.composing;
                    this.composing = null;
                    if (drifted)
                        this.reset(view.state);
                }
            };
            for (let event in this.handlers)
                context.addEventListener(event, this.handlers[event]);
            this.measureReq = { read: view => {
                    this.editContext.updateControlBounds(view.contentDOM.getBoundingClientRect());
                    let sel = getSelection(view.root);
                    if (sel && sel.rangeCount)
                        this.editContext.updateSelectionBounds(sel.getRangeAt(0).getBoundingClientRect());
                } };
        }
        applyEdits(update) {
            let off = 0, abort = false, pending = this.pendingContextChange;
            update.changes.iterChanges((fromA, toA, _fromB, _toB, insert) => {
                if (abort)
                    return;
                let dLen = insert.length - (toA - fromA);
                if (pending && toA >= pending.to) {
                    if (pending.from == fromA && pending.to == toA && pending.insert.eq(insert)) {
                        pending = this.pendingContextChange = null; // Match
                        off += dLen;
                        this.to += dLen;
                        return;
                    }
                    else { // Mismatch, revert
                        pending = null;
                        this.revertPending(update.state);
                    }
                }
                fromA += off;
                toA += off;
                if (toA <= this.from) { // Before the window
                    this.from += dLen;
                    this.to += dLen;
                }
                else if (fromA < this.to) { // Overlaps with window
                    if (fromA < this.from || toA > this.to || (this.to - this.from) + insert.length > 30000 /* CxVp.MaxSize */) {
                        abort = true;
                        return;
                    }
                    this.editContext.updateText(this.toContextPos(fromA), this.toContextPos(toA), insert.toString());
                    this.to += dLen;
                }
                off += dLen;
            });
            if (pending && !abort)
                this.revertPending(update.state);
            return !abort;
        }
        update(update) {
            let reverted = this.pendingContextChange, startSel = update.startState.selection.main;
            if (this.composing &&
                (this.composing.drifted ||
                    (!update.changes.touchesRange(startSel.from, startSel.to) &&
                        update.transactions.some(tr => !tr.isUserEvent("input.type") && tr.changes.touchesRange(this.from, this.to))))) {
                this.composing.drifted = true;
                this.composing.editorBase = update.changes.mapPos(this.composing.editorBase);
            }
            else if (!this.applyEdits(update) || !this.rangeIsValid(update.state)) {
                this.pendingContextChange = null;
                this.reset(update.state);
            }
            else if (update.docChanged || update.selectionSet || reverted) {
                this.setSelection(update.state);
            }
            if (update.geometryChanged || update.docChanged || update.selectionSet)
                update.view.requestMeasure(this.measureReq);
        }
        resetRange(state) {
            let { head } = state.selection.main;
            this.from = Math.max(0, head - 10000 /* CxVp.Margin */);
            this.to = Math.min(state.doc.length, head + 10000 /* CxVp.Margin */);
        }
        reset(state) {
            this.resetRange(state);
            this.editContext.updateText(0, this.editContext.text.length, state.doc.sliceString(this.from, this.to));
            this.setSelection(state);
        }
        revertPending(state) {
            let pending = this.pendingContextChange;
            this.pendingContextChange = null;
            this.editContext.updateText(this.toContextPos(pending.from), this.toContextPos(pending.from + pending.insert.length), state.doc.sliceString(pending.from, pending.to));
        }
        setSelection(state) {
            let { main } = state.selection;
            let start = this.toContextPos(Math.max(this.from, Math.min(this.to, main.anchor)));
            let end = this.toContextPos(main.head);
            if (this.editContext.selectionStart != start || this.editContext.selectionEnd != end)
                this.editContext.updateSelection(start, end);
        }
        rangeIsValid(state) {
            let { head } = state.selection.main;
            return !(this.from > 0 && head - this.from < 500 /* CxVp.MinMargin */ ||
                this.to < state.doc.length && this.to - head < 500 /* CxVp.MinMargin */ ||
                this.to - this.from > 10000 /* CxVp.Margin */ * 3);
        }
        toEditorPos(contextPos, clipLen = this.to - this.from) {
            contextPos = Math.min(contextPos, clipLen);
            let c = this.composing;
            return c && c.drifted ? c.editorBase + (contextPos - c.contextBase) : contextPos + this.from;
        }
        toContextPos(editorPos) {
            let c = this.composing;
            return c && c.drifted ? c.contextBase + (editorPos - c.editorBase) : editorPos - this.from;
        }
        destroy() {
            for (let event in this.handlers)
                this.editContext.removeEventListener(event, this.handlers[event]);
        }
    }

    // The editor's update state machine looks something like this:
    //
    //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
    //                                         ↑      ↓
    //                                         Updating (measure)
    //
    // The difference between 'Idle' and 'Idle (unchecked)' lies in
    // whether a layout check has been scheduled. A regular update through
    // the `update` method updates the DOM in a write-only fashion, and
    // relies on a check (scheduled with `requestAnimationFrame`) to make
    // sure everything is where it should be and the viewport covers the
    // visible code. That check continues to measure and then optionally
    // update until it reaches a coherent state.
    /**
    An editor view represents the editor's user interface. It holds
    the editable DOM surface, and possibly other elements such as the
    line number gutter. It handles events and dispatches state
    transactions for editing actions.
    */
    class EditorView {
        /**
        The current editor state.
        */
        get state() { return this.viewState.state; }
        /**
        To be able to display large documents without consuming too much
        memory or overloading the browser, CodeMirror only draws the
        code that is visible (plus a margin around it) to the DOM. This
        property tells you the extent of the current drawn viewport, in
        document positions.
        */
        get viewport() { return this.viewState.viewport; }
        /**
        When there are, for example, large collapsed ranges in the
        viewport, its size can be a lot bigger than the actual visible
        content. Thus, if you are doing something like styling the
        content in the viewport, it is preferable to only do so for
        these ranges, which are the subset of the viewport that is
        actually drawn.
        */
        get visibleRanges() { return this.viewState.visibleRanges; }
        /**
        Returns false when the editor is entirely scrolled out of view
        or otherwise hidden.
        */
        get inView() { return this.viewState.inView; }
        /**
        Indicates whether the user is currently composing text via
        [IME](https://en.wikipedia.org/wiki/Input_method), and at least
        one change has been made in the current composition.
        */
        get composing() { return !!this.inputState && this.inputState.composing > 0; }
        /**
        Indicates whether the user is currently in composing state. Note
        that on some platforms, like Android, this will be the case a
        lot, since just putting the cursor on a word starts a
        composition there.
        */
        get compositionStarted() { return !!this.inputState && this.inputState.composing >= 0; }
        /**
        The document or shadow root that the view lives in.
        */
        get root() { return this._root; }
        /**
        @internal
        */
        get win() { return this.dom.ownerDocument.defaultView || window; }
        /**
        Construct a new view. You'll want to either provide a `parent`
        option, or put `view.dom` into your document after creating a
        view, so that the user can see the editor.
        */
        constructor(config = {}) {
            var _a;
            this.plugins = [];
            this.pluginMap = new Map;
            this.editorAttrs = {};
            this.contentAttrs = {};
            this.bidiCache = [];
            this.destroyed = false;
            /**
            @internal
            */
            this.updateState = 2 /* UpdateState.Updating */;
            /**
            @internal
            */
            this.measureScheduled = -1;
            /**
            @internal
            */
            this.measureRequests = [];
            this.contentDOM = document.createElement("div");
            this.scrollDOM = document.createElement("div");
            this.scrollDOM.tabIndex = -1;
            this.scrollDOM.className = "cm-scroller";
            this.scrollDOM.appendChild(this.contentDOM);
            this.announceDOM = document.createElement("div");
            this.announceDOM.className = "cm-announced";
            this.announceDOM.setAttribute("aria-live", "polite");
            this.dom = document.createElement("div");
            this.dom.appendChild(this.announceDOM);
            this.dom.appendChild(this.scrollDOM);
            if (config.parent)
                config.parent.appendChild(this.dom);
            let { dispatch } = config;
            this.dispatchTransactions = config.dispatchTransactions ||
                (dispatch && ((trs) => trs.forEach(tr => dispatch(tr, this)))) ||
                ((trs) => this.update(trs));
            this.dispatch = this.dispatch.bind(this);
            this._root = (config.root || getRoot(config.parent) || document);
            this.viewState = new ViewState(config.state || EditorState.create(config));
            if (config.scrollTo && config.scrollTo.is(scrollIntoView$1))
                this.viewState.scrollTarget = config.scrollTo.value.clip(this.viewState.state);
            this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));
            for (let plugin of this.plugins)
                plugin.update(this);
            this.observer = new DOMObserver(this);
            this.inputState = new InputState(this);
            this.inputState.ensureHandlers(this.plugins);
            this.docView = new DocView(this);
            this.mountStyles();
            this.updateAttrs();
            this.updateState = 0 /* UpdateState.Idle */;
            this.requestMeasure();
            if ((_a = document.fonts) === null || _a === void 0 ? void 0 : _a.ready)
                document.fonts.ready.then(() => this.requestMeasure());
        }
        dispatch(...input) {
            let trs = input.length == 1 && input[0] instanceof Transaction ? input
                : input.length == 1 && Array.isArray(input[0]) ? input[0]
                    : [this.state.update(...input)];
            this.dispatchTransactions(trs, this);
        }
        /**
        Update the view for the given array of transactions. This will
        update the visible document and selection to match the state
        produced by the transactions, and notify view plugins of the
        change. You should usually call
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
        as a primitive.
        */
        update(transactions) {
            if (this.updateState != 0 /* UpdateState.Idle */)
                throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
            let redrawn = false, attrsChanged = false, update;
            let state = this.state;
            for (let tr of transactions) {
                if (tr.startState != state)
                    throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
                state = tr.state;
            }
            if (this.destroyed) {
                this.viewState.state = state;
                return;
            }
            let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
            if (transactions.some(tr => tr.annotation(isFocusChange))) {
                this.inputState.notifiedFocused = focus;
                // If a focus-change transaction is being dispatched, set this update flag.
                focusFlag = 1 /* UpdateFlag.Focus */;
            }
            else if (focus != this.inputState.notifiedFocused) {
                this.inputState.notifiedFocused = focus;
                // Schedule a separate focus transaction if necessary, otherwise
                // add a flag to this update
                dispatchFocus = focusChangeTransaction(state, focus);
                if (!dispatchFocus)
                    focusFlag = 1 /* UpdateFlag.Focus */;
            }
            // If there was a pending DOM change, eagerly read it and try to
            // apply it after the given transactions.
            let pendingKey = this.observer.delayedAndroidKey, domChange = null;
            if (pendingKey) {
                this.observer.clearDelayedAndroidKey();
                domChange = this.observer.readChange();
                // Only try to apply DOM changes if the transactions didn't
                // change the doc or selection.
                if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
                    domChange = null;
            }
            else {
                this.observer.clear();
            }
            // When the phrases change, redraw the editor
            if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
                return this.setState(state);
            update = ViewUpdate.create(this, state, transactions);
            update.flags |= focusFlag;
            let scrollTarget = this.viewState.scrollTarget;
            try {
                this.updateState = 2 /* UpdateState.Updating */;
                for (let tr of transactions) {
                    if (scrollTarget)
                        scrollTarget = scrollTarget.map(tr.changes);
                    if (tr.scrollIntoView) {
                        let { main } = tr.state.selection;
                        scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
                    }
                    for (let e of tr.effects)
                        if (e.is(scrollIntoView$1))
                            scrollTarget = e.value.clip(this.state);
                }
                this.viewState.update(update, scrollTarget);
                this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
                if (!update.empty) {
                    this.updatePlugins(update);
                    this.inputState.update(update);
                }
                redrawn = this.docView.update(update);
                if (this.state.facet(styleModule) != this.styleModules)
                    this.mountStyles();
                attrsChanged = this.updateAttrs();
                this.showAnnouncements(transactions);
                this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent("select.pointer")));
            }
            finally {
                this.updateState = 0 /* UpdateState.Idle */;
            }
            if (update.startState.facet(theme) != update.state.facet(theme))
                this.viewState.mustMeasureContent = true;
            if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
                this.requestMeasure();
            if (redrawn)
                this.docViewUpdate();
            if (!update.empty)
                for (let listener of this.state.facet(updateListener)) {
                    try {
                        listener(update);
                    }
                    catch (e) {
                        logException(this.state, e, "update listener");
                    }
                }
            if (dispatchFocus || domChange)
                Promise.resolve().then(() => {
                    if (dispatchFocus && this.state == dispatchFocus.startState)
                        this.dispatch(dispatchFocus);
                    if (domChange) {
                        if (!applyDOMChange(this, domChange) && pendingKey.force)
                            dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
                    }
                });
        }
        /**
        Reset the view to the given state. (This will cause the entire
        document to be redrawn and all view plugins to be reinitialized,
        so you should probably only use it when the new state isn't
        derived from the old state. Otherwise, use
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
        */
        setState(newState) {
            if (this.updateState != 0 /* UpdateState.Idle */)
                throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
            if (this.destroyed) {
                this.viewState.state = newState;
                return;
            }
            this.updateState = 2 /* UpdateState.Updating */;
            let hadFocus = this.hasFocus;
            try {
                for (let plugin of this.plugins)
                    plugin.destroy(this);
                this.viewState = new ViewState(newState);
                this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));
                this.pluginMap.clear();
                for (let plugin of this.plugins)
                    plugin.update(this);
                this.docView.destroy();
                this.docView = new DocView(this);
                this.inputState.ensureHandlers(this.plugins);
                this.mountStyles();
                this.updateAttrs();
                this.bidiCache = [];
            }
            finally {
                this.updateState = 0 /* UpdateState.Idle */;
            }
            if (hadFocus)
                this.focus();
            this.requestMeasure();
        }
        updatePlugins(update) {
            let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
            if (prevSpecs != specs) {
                let newPlugins = [];
                for (let spec of specs) {
                    let found = prevSpecs.indexOf(spec);
                    if (found < 0) {
                        newPlugins.push(new PluginInstance(spec));
                    }
                    else {
                        let plugin = this.plugins[found];
                        plugin.mustUpdate = update;
                        newPlugins.push(plugin);
                    }
                }
                for (let plugin of this.plugins)
                    if (plugin.mustUpdate != update)
                        plugin.destroy(this);
                this.plugins = newPlugins;
                this.pluginMap.clear();
            }
            else {
                for (let p of this.plugins)
                    p.mustUpdate = update;
            }
            for (let i = 0; i < this.plugins.length; i++)
                this.plugins[i].update(this);
            if (prevSpecs != specs)
                this.inputState.ensureHandlers(this.plugins);
        }
        docViewUpdate() {
            for (let plugin of this.plugins) {
                let val = plugin.value;
                if (val && val.docViewUpdate) {
                    try {
                        val.docViewUpdate(this);
                    }
                    catch (e) {
                        logException(this.state, e, "doc view update listener");
                    }
                }
            }
        }
        /**
        @internal
        */
        measure(flush = true) {
            if (this.destroyed)
                return;
            if (this.measureScheduled > -1)
                this.win.cancelAnimationFrame(this.measureScheduled);
            if (this.observer.delayedAndroidKey) {
                this.measureScheduled = -1;
                this.requestMeasure();
                return;
            }
            this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
            if (flush)
                this.observer.forceFlush();
            let updated = null;
            let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
            let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
            if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
                scrollAnchorHeight = -1;
            this.viewState.scrollAnchorHeight = -1;
            try {
                for (let i = 0;; i++) {
                    if (scrollAnchorHeight < 0) {
                        if (isScrolledToBottom(sDOM)) {
                            scrollAnchorPos = -1;
                            scrollAnchorHeight = this.viewState.heightMap.height;
                        }
                        else {
                            let block = this.viewState.scrollAnchorAt(scrollTop);
                            scrollAnchorPos = block.from;
                            scrollAnchorHeight = block.top;
                        }
                    }
                    this.updateState = 1 /* UpdateState.Measuring */;
                    let changed = this.viewState.measure(this);
                    if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
                        break;
                    if (i > 5) {
                        console.warn(this.measureRequests.length
                            ? "Measure loop restarted more than 5 times"
                            : "Viewport failed to stabilize");
                        break;
                    }
                    let measuring = [];
                    // Only run measure requests in this cycle when the viewport didn't change
                    if (!(changed & 4 /* UpdateFlag.Viewport */))
                        [this.measureRequests, measuring] = [measuring, this.measureRequests];
                    let measured = measuring.map(m => {
                        try {
                            return m.read(this);
                        }
                        catch (e) {
                            logException(this.state, e);
                            return BadMeasure;
                        }
                    });
                    let update = ViewUpdate.create(this, this.state, []), redrawn = false;
                    update.flags |= changed;
                    if (!updated)
                        updated = update;
                    else
                        updated.flags |= changed;
                    this.updateState = 2 /* UpdateState.Updating */;
                    if (!update.empty) {
                        this.updatePlugins(update);
                        this.inputState.update(update);
                        this.updateAttrs();
                        redrawn = this.docView.update(update);
                        if (redrawn)
                            this.docViewUpdate();
                    }
                    for (let i = 0; i < measuring.length; i++)
                        if (measured[i] != BadMeasure) {
                            try {
                                let m = measuring[i];
                                if (m.write)
                                    m.write(measured[i], this);
                            }
                            catch (e) {
                                logException(this.state, e);
                            }
                        }
                    if (redrawn)
                        this.docView.updateSelection(true);
                    if (!update.viewportChanged && this.measureRequests.length == 0) {
                        if (this.viewState.editorHeight) {
                            if (this.viewState.scrollTarget) {
                                this.docView.scrollIntoView(this.viewState.scrollTarget);
                                this.viewState.scrollTarget = null;
                                scrollAnchorHeight = -1;
                                continue;
                            }
                            else {
                                let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height :
                                    this.viewState.lineBlockAt(scrollAnchorPos).top;
                                let diff = newAnchorHeight - scrollAnchorHeight;
                                if (diff > 1 || diff < -1) {
                                    scrollTop = scrollTop + diff;
                                    sDOM.scrollTop = scrollTop / this.scaleY;
                                    scrollAnchorHeight = -1;
                                    continue;
                                }
                            }
                        }
                        break;
                    }
                }
            }
            finally {
                this.updateState = 0 /* UpdateState.Idle */;
                this.measureScheduled = -1;
            }
            if (updated && !updated.empty)
                for (let listener of this.state.facet(updateListener))
                    listener(updated);
        }
        /**
        Get the CSS classes for the currently active editor themes.
        */
        get themeClasses() {
            return baseThemeID + " " +
                (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " +
                this.state.facet(theme);
        }
        updateAttrs() {
            let editorAttrs = attrsFromFacet(this, editorAttributes, {
                class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
            });
            let contentAttrs = {
                spellcheck: "false",
                autocorrect: "off",
                autocapitalize: "off",
                writingsuggestions: "false",
                translate: "no",
                contenteditable: !this.state.facet(editable) ? "false" : "true",
                class: "cm-content",
                style: `${browser.tabSize}: ${this.state.tabSize}`,
                role: "textbox",
                "aria-multiline": "true"
            };
            if (this.state.readOnly)
                contentAttrs["aria-readonly"] = "true";
            attrsFromFacet(this, contentAttributes, contentAttrs);
            let changed = this.observer.ignore(() => {
                let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
                let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
                return changedContent || changedEditor;
            });
            this.editorAttrs = editorAttrs;
            this.contentAttrs = contentAttrs;
            return changed;
        }
        showAnnouncements(trs) {
            let first = true;
            for (let tr of trs)
                for (let effect of tr.effects)
                    if (effect.is(EditorView.announce)) {
                        if (first)
                            this.announceDOM.textContent = "";
                        first = false;
                        let div = this.announceDOM.appendChild(document.createElement("div"));
                        div.textContent = effect.value;
                    }
        }
        mountStyles() {
            this.styleModules = this.state.facet(styleModule);
            let nonce = this.state.facet(EditorView.cspNonce);
            StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1$3).reverse(), nonce ? { nonce } : undefined);
        }
        readMeasured() {
            if (this.updateState == 2 /* UpdateState.Updating */)
                throw new Error("Reading the editor layout isn't allowed during an update");
            if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1)
                this.measure(false);
        }
        /**
        Schedule a layout measurement, optionally providing callbacks to
        do custom DOM measuring followed by a DOM write phase. Using
        this is preferable reading DOM layout directly from, for
        example, an event handler, because it'll make sure measuring and
        drawing done by other components is synchronized, avoiding
        unnecessary DOM layout computations.
        */
        requestMeasure(request) {
            if (this.measureScheduled < 0)
                this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
            if (request) {
                if (this.measureRequests.indexOf(request) > -1)
                    return;
                if (request.key != null)
                    for (let i = 0; i < this.measureRequests.length; i++) {
                        if (this.measureRequests[i].key === request.key) {
                            this.measureRequests[i] = request;
                            return;
                        }
                    }
                this.measureRequests.push(request);
            }
        }
        /**
        Get the value of a specific plugin, if present. Note that
        plugins that crash can be dropped from a view, so even when you
        know you registered a given plugin, it is recommended to check
        the return value of this method.
        */
        plugin(plugin) {
            let known = this.pluginMap.get(plugin);
            if (known === undefined || known && known.plugin != plugin)
                this.pluginMap.set(plugin, known = this.plugins.find(p => p.plugin == plugin) || null);
            return known && known.update(this).value;
        }
        /**
        The top position of the document, in screen coordinates. This
        may be negative when the editor is scrolled down. Points
        directly to the top of the first line, not above the padding.
        */
        get documentTop() {
            return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
        }
        /**
        Reports the padding above and below the document.
        */
        get documentPadding() {
            return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
        }
        /**
        If the editor is transformed with CSS, this provides the scale
        along the X axis. Otherwise, it will just be 1. Note that
        transforms other than translation and scaling are not supported.
        */
        get scaleX() { return this.viewState.scaleX; }
        /**
        Provide the CSS transformed scale along the Y axis.
        */
        get scaleY() { return this.viewState.scaleY; }
        /**
        Find the text line or block widget at the given vertical
        position (which is interpreted as relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
        */
        elementAtHeight(height) {
            this.readMeasured();
            return this.viewState.elementAtHeight(height);
        }
        /**
        Find the line block (see
        [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
        height, again interpreted relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
        */
        lineBlockAtHeight(height) {
            this.readMeasured();
            return this.viewState.lineBlockAtHeight(height);
        }
        /**
        Get the extent and vertical position of all [line
        blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
        are relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
        */
        get viewportLineBlocks() {
            return this.viewState.viewportLines;
        }
        /**
        Find the line block around the given document position. A line
        block is a range delimited on both sides by either a
        non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
        start/end of the document. It will usually just hold a line of
        text, but may be broken into multiple textblocks by block
        widgets.
        */
        lineBlockAt(pos) {
            return this.viewState.lineBlockAt(pos);
        }
        /**
        The editor's total content height.
        */
        get contentHeight() {
            return this.viewState.contentHeight;
        }
        /**
        Move a cursor position by [grapheme
        cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
        the motion is away from the line start, or towards it. In
        bidirectional text, the line is traversed in visual order, using
        the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
        When the start position was the last one on the line, the
        returned position will be across the line break. If there is no
        further line, the original position is returned.
        
        By default, this method moves over a single cluster. The
        optional `by` argument can be used to move across more. It will
        be called with the first cluster as argument, and should return
        a predicate that determines, for each subsequent cluster,
        whether it should also be moved over.
        */
        moveByChar(start, forward, by) {
            return skipAtoms(this, start, moveByChar(this, start, forward, by));
        }
        /**
        Move a cursor position across the next group of either
        [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
        non-whitespace characters.
        */
        moveByGroup(start, forward) {
            return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
        }
        /**
        Get the cursor position visually at the start or end of a line.
        Note that this may differ from the _logical_ position at its
        start or end (which is simply at `line.from`/`line.to`) if text
        at the start or end goes against the line's base text direction.
        */
        visualLineSide(line, end) {
            let order = this.bidiSpans(line), dir = this.textDirectionAt(line.from);
            let span = order[end ? order.length - 1 : 0];
            return EditorSelection.cursor(span.side(end, dir) + line.from, span.forward(!end, dir) ? 1 : -1);
        }
        /**
        Move to the next line boundary in the given direction. If
        `includeWrap` is true, line wrapping is on, and there is a
        further wrap point on the current line, the wrap point will be
        returned. Otherwise this function will return the start or end
        of the line.
        */
        moveToLineBoundary(start, forward, includeWrap = true) {
            return moveToLineBoundary(this, start, forward, includeWrap);
        }
        /**
        Move a cursor position vertically. When `distance` isn't given,
        it defaults to moving to the next line (including wrapped
        lines). Otherwise, `distance` should provide a positive distance
        in pixels.
        
        When `start` has a
        [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
        motion will use that as a target horizontal position. Otherwise,
        the cursor's own horizontal position is used. The returned
        cursor will have its goal column set to whichever column was
        used.
        */
        moveVertically(start, forward, distance) {
            return skipAtoms(this, start, moveVertically(this, start, forward, distance));
        }
        /**
        Find the DOM parent node and offset (child offset if `node` is
        an element, character offset when it is a text node) at the
        given document position.
        
        Note that for positions that aren't currently in
        `visibleRanges`, the resulting DOM position isn't necessarily
        meaningful (it may just point before or after a placeholder
        element).
        */
        domAtPos(pos) {
            return this.docView.domAtPos(pos);
        }
        /**
        Find the document position at the given DOM node. Can be useful
        for associating positions with DOM events. Will raise an error
        when `node` isn't part of the editor content.
        */
        posAtDOM(node, offset = 0) {
            return this.docView.posFromDOM(node, offset);
        }
        posAtCoords(coords, precise = true) {
            this.readMeasured();
            return posAtCoords(this, coords, precise);
        }
        /**
        Get the screen coordinates at the given document position.
        `side` determines whether the coordinates are based on the
        element before (-1) or after (1) the position (if no element is
        available on the given side, the method will transparently use
        another strategy to get reasonable coordinates).
        */
        coordsAtPos(pos, side = 1) {
            this.readMeasured();
            let rect = this.docView.coordsAt(pos, side);
            if (!rect || rect.left == rect.right)
                return rect;
            let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
            let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
            return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));
        }
        /**
        Return the rectangle around a given character. If `pos` does not
        point in front of a character that is in the viewport and
        rendered (i.e. not replaced, not a line break), this will return
        null. For space characters that are a line wrap point, this will
        return the position before the line break.
        */
        coordsForChar(pos) {
            this.readMeasured();
            return this.docView.coordsForChar(pos);
        }
        /**
        The default width of a character in the editor. May not
        accurately reflect the width of all characters (given variable
        width fonts or styling of invididual ranges).
        */
        get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
        /**
        The default height of a line in the editor. May not be accurate
        for all lines.
        */
        get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
        /**
        The text direction
        ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
        CSS property) of the editor's content element.
        */
        get textDirection() { return this.viewState.defaultTextDirection; }
        /**
        Find the text direction of the block at the given position, as
        assigned by CSS. If
        [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
        isn't enabled, or the given position is outside of the viewport,
        this will always return the same as
        [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
        this may trigger a DOM layout.
        */
        textDirectionAt(pos) {
            let perLine = this.state.facet(perLineTextDirection);
            if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
                return this.textDirection;
            this.readMeasured();
            return this.docView.textDirectionAt(pos);
        }
        /**
        Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
        (as determined by the
        [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
        CSS property of its content element).
        */
        get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
        /**
        Returns the bidirectional text structure of the given line
        (which should be in the current document) as an array of span
        objects. The order of these spans matches the [text
        direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
        left-to-right, the leftmost spans come first, otherwise the
        rightmost spans come first.
        */
        bidiSpans(line) {
            if (line.length > MaxBidiLine)
                return trivialOrder(line.length);
            let dir = this.textDirectionAt(line.from), isolates;
            for (let entry of this.bidiCache) {
                if (entry.from == line.from && entry.dir == dir &&
                    (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line))))
                    return entry.order;
            }
            if (!isolates)
                isolates = getIsolatedRanges(this, line);
            let order = computeOrder(line.text, dir, isolates);
            this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));
            return order;
        }
        /**
        Check whether the editor has focus.
        */
        get hasFocus() {
            var _a;
            // Safari return false for hasFocus when the context menu is open
            // or closing, which leads us to ignore selection changes from the
            // context menu because it looks like the editor isn't focused.
            // This kludges around that.
            return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&
                this.root.activeElement == this.contentDOM;
        }
        /**
        Put focus on the editor.
        */
        focus() {
            this.observer.ignore(() => {
                focusPreventScroll(this.contentDOM);
                this.docView.updateSelection();
            });
        }
        /**
        Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
        necessary when moving the editor's existing DOM to a new window or shadow root.
        */
        setRoot(root) {
            if (this._root != root) {
                this._root = root;
                this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
                this.mountStyles();
            }
        }
        /**
        Clean up this editor view, removing its element from the
        document, unregistering event handlers, and notifying
        plugins. The view instance can no longer be used after
        calling this.
        */
        destroy() {
            if (this.root.activeElement == this.contentDOM)
                this.contentDOM.blur();
            for (let plugin of this.plugins)
                plugin.destroy(this);
            this.plugins = [];
            this.inputState.destroy();
            this.docView.destroy();
            this.dom.remove();
            this.observer.destroy();
            if (this.measureScheduled > -1)
                this.win.cancelAnimationFrame(this.measureScheduled);
            this.destroyed = true;
        }
        /**
        Returns an effect that can be
        [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
        cause it to scroll the given position or range into view.
        */
        static scrollIntoView(pos, options = {}) {
            return scrollIntoView$1.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
        }
        /**
        Return an effect that resets the editor to its current (at the
        time this method was called) scroll position. Note that this
        only affects the editor's own scrollable element, not parents.
        See also
        [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
        
        The effect should be used with a document identical to the one
        it was created for. Failing to do so is not an error, but may
        not scroll to the expected position. You can
        [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
        */
        scrollSnapshot() {
            let { scrollTop, scrollLeft } = this.scrollDOM;
            let ref = this.viewState.scrollAnchorAt(scrollTop);
            return scrollIntoView$1.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
        }
        /**
        Enable or disable tab-focus mode, which disables key bindings
        for Tab and Shift-Tab, letting the browser's default
        focus-changing behavior go through instead. This is useful to
        prevent trapping keyboard users in your editor.
        
        Without argument, this toggles the mode. With a boolean, it
        enables (true) or disables it (false). Given a number, it
        temporarily enables the mode until that number of milliseconds
        have passed or another non-Tab key is pressed.
        */
        setTabFocusMode(to) {
            if (to == null)
                this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1;
            else if (typeof to == "boolean")
                this.inputState.tabFocusMode = to ? 0 : -1;
            else if (this.inputState.tabFocusMode != 0)
                this.inputState.tabFocusMode = Date.now() + to;
        }
        /**
        Returns an extension that can be used to add DOM event handlers.
        The value should be an object mapping event names to handler
        functions. For any given event, such functions are ordered by
        extension precedence, and the first handler to return true will
        be assumed to have handled that event, and no other handlers or
        built-in behavior will be activated for it. These are registered
        on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
        for `scroll` handlers, which will be called any time the
        editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
        its parent nodes is scrolled.
        */
        static domEventHandlers(handlers) {
            return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
        }
        /**
        Create an extension that registers DOM event observers. Contrary
        to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
        observers can't be prevented from running by a higher-precedence
        handler returning true. They also don't prevent other handlers
        and observers from running when they return true, and should not
        call `preventDefault`.
        */
        static domEventObservers(observers) {
            return ViewPlugin.define(() => ({}), { eventObservers: observers });
        }
        /**
        Create a theme extension. The first argument can be a
        [`style-mod`](https://github.com/marijnh/style-mod#documentation)
        style spec providing the styles for the theme. These will be
        prefixed with a generated class for the style.
        
        Because the selectors will be prefixed with a scope class, rule
        that directly match the editor's [wrapper
        element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
        added—need to be explicitly differentiated by adding an `&` to
        the selector for that element—for example
        `&.cm-focused`.
        
        When `dark` is set to true, the theme will be marked as dark,
        which will cause the `&dark` rules from [base
        themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
        `&light` when a light theme is active).
        */
        static theme(spec, options) {
            let prefix = StyleModule.newName();
            let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
            if (options && options.dark)
                result.push(darkTheme.of(true));
            return result;
        }
        /**
        Create an extension that adds styles to the base theme. Like
        with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
        place of the editor wrapper element when directly targeting
        that. You can also use `&dark` or `&light` instead to only
        target editors with a dark or light theme.
        */
        static baseTheme(spec) {
            return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
        }
        /**
        Retrieve an editor view instance from the view's DOM
        representation.
        */
        static findFromDOM(dom) {
            var _a;
            let content = dom.querySelector(".cm-content");
            let cView = content && ContentView.get(content) || ContentView.get(dom);
            return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
        }
    }
    /**
    Facet to add a [style
    module](https://github.com/marijnh/style-mod#documentation) to
    an editor view. The view will ensure that the module is
    mounted in its [document
    root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
    */
    EditorView.styleModule = styleModule;
    /**
    An input handler can override the way changes to the editable
    DOM content are handled. Handlers are passed the document
    positions between which the change was found, and the new
    content. When one returns true, no further input handlers are
    called and the default behavior is prevented.

    The `insert` argument can be used to get the default transaction
    that would be applied for this input. This can be useful when
    dispatching the custom behavior as a separate transaction.
    */
    EditorView.inputHandler = inputHandler$1;
    /**
    Functions provided in this facet will be used to transform text
    pasted or dropped into the editor.
    */
    EditorView.clipboardInputFilter = clipboardInputFilter;
    /**
    Transform text copied or dragged from the editor.
    */
    EditorView.clipboardOutputFilter = clipboardOutputFilter;
    /**
    Scroll handlers can override how things are scrolled into view.
    If they return `true`, no further handling happens for the
    scrolling. If they return false, the default scroll behavior is
    applied. Scroll handlers should never initiate editor updates.
    */
    EditorView.scrollHandler = scrollHandler;
    /**
    This facet can be used to provide functions that create effects
    to be dispatched when the editor's focus state changes.
    */
    EditorView.focusChangeEffect = focusChangeEffect;
    /**
    By default, the editor assumes all its content has the same
    [text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
    value to make it read the text direction of every (rendered)
    line separately.
    */
    EditorView.perLineTextDirection = perLineTextDirection;
    /**
    Allows you to provide a function that should be called when the
    library catches an exception from an extension (mostly from view
    plugins, but may be used by other extensions to route exceptions
    from user-code-provided callbacks). This is mostly useful for
    debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
    */
    EditorView.exceptionSink = exceptionSink;
    /**
    A facet that can be used to register a function to be called
    every time the view updates.
    */
    EditorView.updateListener = updateListener;
    /**
    Facet that controls whether the editor content DOM is editable.
    When its highest-precedence value is `false`, the element will
    not have its `contenteditable` attribute set. (Note that this
    doesn't affect API calls that change the editor content, even
    when those are bound to keys or buttons. See the
    [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
    */
    EditorView.editable = editable;
    /**
    Allows you to influence the way mouse selection happens. The
    functions in this facet will be called for a `mousedown` event
    on the editor, and can return an object that overrides the way a
    selection is computed from that mouse click or drag.
    */
    EditorView.mouseSelectionStyle = mouseSelectionStyle;
    /**
    Facet used to configure whether a given selection drag event
    should move or copy the selection. The given predicate will be
    called with the `mousedown` event, and can return `true` when
    the drag should move the content.
    */
    EditorView.dragMovesSelection = dragMovesSelection$1;
    /**
    Facet used to configure whether a given selecting click adds a
    new range to the existing selection or replaces it entirely. The
    default behavior is to check `event.metaKey` on macOS, and
    `event.ctrlKey` elsewhere.
    */
    EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
    /**
    A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
    are shown in the view. Decorations can be provided in two
    ways—directly, or via a function that takes an editor view.

    Only decoration sets provided directly are allowed to influence
    the editor's vertical layout structure. The ones provided as
    functions are called _after_ the new viewport has been computed,
    and thus **must not** introduce block widgets or replacing
    decorations that cover line breaks.

    If you want decorated ranges to behave like atomic units for
    cursor motion and deletion purposes, also provide the range set
    containing the decorations to
    [`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).
    */
    EditorView.decorations = decorations;
    /**
    Facet that works much like
    [`decorations`](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), but puts its
    inputs at the very bottom of the precedence stack, meaning mark
    decorations provided here will only be split by other, partially
    overlapping \`outerDecorations\` ranges, and wrap around all
    regular decorations. Use this for mark elements that should, as
    much as possible, remain in one piece.
    */
    EditorView.outerDecorations = outerDecorations;
    /**
    Used to provide ranges that should be treated as atoms as far as
    cursor motion is concerned. This causes methods like
    [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
    [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
    commands built on top of them) to skip across such regions when
    a selection endpoint would enter them. This does _not_ prevent
    direct programmatic [selection
    updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
    regions.
    */
    EditorView.atomicRanges = atomicRanges;
    /**
    When range decorations add a `unicode-bidi: isolate` style, they
    should also include a
    [`bidiIsolate`](https://codemirror.net/6/docs/ref/#view.MarkDecorationSpec.bidiIsolate) property
    in their decoration spec, and be exposed through this facet, so
    that the editor can compute the proper text order. (Other values
    for `unicode-bidi`, except of course `normal`, are not
    supported.)
    */
    EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
    /**
    Facet that allows extensions to provide additional scroll
    margins (space around the sides of the scrolling element that
    should be considered invisible). This can be useful when the
    plugin introduces elements that cover part of that element (for
    example a horizontally fixed gutter).
    */
    EditorView.scrollMargins = scrollMargins;
    /**
    This facet records whether a dark theme is active. The extension
    returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
    includes an instance of this when the `dark` option is set to
    true.
    */
    EditorView.darkTheme = darkTheme;
    /**
    Provides a Content Security Policy nonce to use when creating
    the style sheets for the editor. Holds the empty string when no
    nonce has been provided.
    */
    EditorView.cspNonce = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : "" });
    /**
    Facet that provides additional DOM attributes for the editor's
    editable DOM element.
    */
    EditorView.contentAttributes = contentAttributes;
    /**
    Facet that provides DOM attributes for the editor's outer
    element.
    */
    EditorView.editorAttributes = editorAttributes;
    /**
    An extension that enables line wrapping in the editor (by
    setting CSS `white-space` to `pre-wrap` in the content).
    */
    EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
    /**
    State effect used to include screen reader announcements in a
    transaction. These will be added to the DOM in a visually hidden
    element with `aria-live="polite"` set, and should be used to
    describe effects that are visually obvious but may not be
    noticed by screen reader users (such as moving to the next
    search match).
    */
    EditorView.announce = /*@__PURE__*/StateEffect.define();
    // Maximum line length for which we compute accurate bidi info
    const MaxBidiLine = 4096;
    const BadMeasure = {};
    class CachedOrder {
        constructor(from, to, dir, isolates, fresh, order) {
            this.from = from;
            this.to = to;
            this.dir = dir;
            this.isolates = isolates;
            this.fresh = fresh;
            this.order = order;
        }
        static update(cache, changes) {
            if (changes.empty && !cache.some(c => c.fresh))
                return cache;
            let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
            for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
                let entry = cache[i];
                if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
                    result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
            }
            return result;
        }
    }
    function attrsFromFacet(view, facet, base) {
        for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
            let source = sources[i], value = typeof source == "function" ? source(view) : source;
            if (value)
                combineAttrs(value, base);
        }
        return base;
    }

    const currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
    function normalizeKeyName(name, platform) {
        const parts = name.split(/-(?!$)/);
        let result = parts[parts.length - 1];
        if (result == "Space")
            result = " ";
        let alt, ctrl, shift, meta;
        for (let i = 0; i < parts.length - 1; ++i) {
            const mod = parts[i];
            if (/^(cmd|meta|m)$/i.test(mod))
                meta = true;
            else if (/^a(lt)?$/i.test(mod))
                alt = true;
            else if (/^(c|ctrl|control)$/i.test(mod))
                ctrl = true;
            else if (/^s(hift)?$/i.test(mod))
                shift = true;
            else if (/^mod$/i.test(mod)) {
                if (platform == "mac")
                    meta = true;
                else
                    ctrl = true;
            }
            else
                throw new Error("Unrecognized modifier name: " + mod);
        }
        if (alt)
            result = "Alt-" + result;
        if (ctrl)
            result = "Ctrl-" + result;
        if (meta)
            result = "Meta-" + result;
        if (shift)
            result = "Shift-" + result;
        return result;
    }
    function modifiers(name, event, shift) {
        if (event.altKey)
            name = "Alt-" + name;
        if (event.ctrlKey)
            name = "Ctrl-" + name;
        if (event.metaKey)
            name = "Meta-" + name;
        if (shift !== false && event.shiftKey)
            name = "Shift-" + name;
        return name;
    }
    const handleKeyEvents = /*@__PURE__*/Prec.default(/*@__PURE__*/EditorView.domEventHandlers({
        keydown(event, view) {
            return runHandlers(getKeymap(view.state), event, view, "editor");
        }
    }));
    /**
    Facet used for registering keymaps.

    You can add multiple keymaps to an editor. Their priorities
    determine their precedence (the ones specified early or with high
    priority get checked first). When a handler has returned `true`
    for a given key, no further handlers are called.
    */
    const keymap = /*@__PURE__*/Facet.define({ enables: handleKeyEvents });
    const Keymaps = /*@__PURE__*/new WeakMap();
    // This is hidden behind an indirection, rather than directly computed
    // by the facet, to keep internal types out of the facet's type.
    function getKeymap(state) {
        let bindings = state.facet(keymap);
        let map = Keymaps.get(bindings);
        if (!map)
            Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
        return map;
    }
    /**
    Run the key handlers registered for a given scope. The event
    object should be a `"keydown"` event. Returns true if any of the
    handlers handled it.
    */
    function runScopeHandlers(view, event, scope) {
        return runHandlers(getKeymap(view.state), event, view, scope);
    }
    let storedPrefix = null;
    const PrefixTimeout = 4000;
    function buildKeymap(bindings, platform = currentPlatform) {
        let bound = Object.create(null);
        let isPrefix = Object.create(null);
        let checkPrefix = (name, is) => {
            let current = isPrefix[name];
            if (current == null)
                isPrefix[name] = is;
            else if (current != is)
                throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
        };
        let add = (scope, key, command, preventDefault, stopPropagation) => {
            var _a, _b;
            let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
            let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
            for (let i = 1; i < parts.length; i++) {
                let prefix = parts.slice(0, i).join(" ");
                checkPrefix(prefix, true);
                if (!scopeObj[prefix])
                    scopeObj[prefix] = {
                        preventDefault: true,
                        stopPropagation: false,
                        run: [(view) => {
                                let ourObj = storedPrefix = { view, prefix, scope };
                                setTimeout(() => { if (storedPrefix == ourObj)
                                    storedPrefix = null; }, PrefixTimeout);
                                return true;
                            }]
                    };
            }
            let full = parts.join(" ");
            checkPrefix(full, false);
            let binding = scopeObj[full] || (scopeObj[full] = {
                preventDefault: false,
                stopPropagation: false,
                run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
            });
            if (command)
                binding.run.push(command);
            if (preventDefault)
                binding.preventDefault = true;
            if (stopPropagation)
                binding.stopPropagation = true;
        };
        for (let b of bindings) {
            let scopes = b.scope ? b.scope.split(" ") : ["editor"];
            if (b.any)
                for (let scope of scopes) {
                    let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
                    if (!scopeObj._any)
                        scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };
                    let { any } = b;
                    for (let key in scopeObj)
                        scopeObj[key].run.push(view => any(view, currentKeyEvent));
                }
            let name = b[platform] || b.key;
            if (!name)
                continue;
            for (let scope of scopes) {
                add(scope, name, b.run, b.preventDefault, b.stopPropagation);
                if (b.shift)
                    add(scope, "Shift-" + name, b.shift, b.preventDefault, b.stopPropagation);
            }
        }
        return bound;
    }
    let currentKeyEvent = null;
    function runHandlers(map, event, view, scope) {
        currentKeyEvent = event;
        let name = keyName(event);
        let charCode = codePointAt(name, 0), isChar = codePointSize(charCode) == name.length && name != " ";
        let prefix = "", handled = false, prevented = false, stopPropagation = false;
        if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
            prefix = storedPrefix.prefix + " ";
            if (modifierCodes.indexOf(event.keyCode) < 0) {
                prevented = true;
                storedPrefix = null;
            }
        }
        let ran = new Set;
        let runFor = (binding) => {
            if (binding) {
                for (let cmd of binding.run)
                    if (!ran.has(cmd)) {
                        ran.add(cmd);
                        if (cmd(view)) {
                            if (binding.stopPropagation)
                                stopPropagation = true;
                            return true;
                        }
                    }
                if (binding.preventDefault) {
                    if (binding.stopPropagation)
                        stopPropagation = true;
                    prevented = true;
                }
            }
            return false;
        };
        let scopeObj = map[scope], baseName, shiftName;
        if (scopeObj) {
            if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) {
                handled = true;
            }
            else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) &&
                // Ctrl-Alt may be used for AltGr on Windows
                !(browser.windows && event.ctrlKey && event.altKey) &&
                (baseName = base[event.keyCode]) && baseName != name) {
                if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {
                    handled = true;
                }
                else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name && shiftName != baseName &&
                    runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {
                    handled = true;
                }
            }
            else if (isChar && event.shiftKey &&
                runFor(scopeObj[prefix + modifiers(name, event, true)])) {
                handled = true;
            }
            if (!handled && runFor(scopeObj._any))
                handled = true;
        }
        if (prevented)
            handled = true;
        if (handled && stopPropagation)
            event.stopPropagation();
        currentKeyEvent = null;
        return handled;
    }

    /**
    Implementation of [`LayerMarker`](https://codemirror.net/6/docs/ref/#view.LayerMarker) that creates
    a rectangle at a given set of coordinates.
    */
    class RectangleMarker {
        /**
        Create a marker with the given class and dimensions. If `width`
        is null, the DOM element will get no width style.
        */
        constructor(className, 
        /**
        The left position of the marker (in pixels, document-relative).
        */
        left, 
        /**
        The top position of the marker.
        */
        top, 
        /**
        The width of the marker, or null if it shouldn't get a width assigned.
        */
        width, 
        /**
        The height of the marker.
        */
        height) {
            this.className = className;
            this.left = left;
            this.top = top;
            this.width = width;
            this.height = height;
        }
        draw() {
            let elt = document.createElement("div");
            elt.className = this.className;
            this.adjust(elt);
            return elt;
        }
        update(elt, prev) {
            if (prev.className != this.className)
                return false;
            this.adjust(elt);
            return true;
        }
        adjust(elt) {
            elt.style.left = this.left + "px";
            elt.style.top = this.top + "px";
            if (this.width != null)
                elt.style.width = this.width + "px";
            elt.style.height = this.height + "px";
        }
        eq(p) {
            return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&
                this.className == p.className;
        }
        /**
        Create a set of rectangles for the given selection range,
        assigning them theclass`className`. Will create a single
        rectangle for empty ranges, and a set of selection-style
        rectangles covering the range's content (in a bidi-aware
        way) for non-empty ones.
        */
        static forRange(view, className, range) {
            if (range.empty) {
                let pos = view.coordsAtPos(range.head, range.assoc || 1);
                if (!pos)
                    return [];
                let base = getBase(view);
                return [new RectangleMarker(className, pos.left - base.left, pos.top - base.top, null, pos.bottom - pos.top)];
            }
            else {
                return rectanglesForRange(view, className, range);
            }
        }
    }
    function getBase(view) {
        let rect = view.scrollDOM.getBoundingClientRect();
        let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth * view.scaleX;
        return { left: left - view.scrollDOM.scrollLeft * view.scaleX, top: rect.top - view.scrollDOM.scrollTop * view.scaleY };
    }
    function wrappedLine(view, pos, side, inside) {
        let coords = view.coordsAtPos(pos, side * 2);
        if (!coords)
            return inside;
        let editorRect = view.dom.getBoundingClientRect();
        let y = (coords.top + coords.bottom) / 2;
        let left = view.posAtCoords({ x: editorRect.left + 1, y });
        let right = view.posAtCoords({ x: editorRect.right - 1, y });
        if (left == null || right == null)
            return inside;
        return { from: Math.max(inside.from, Math.min(left, right)), to: Math.min(inside.to, Math.max(left, right)) };
    }
    function rectanglesForRange(view, className, range) {
        if (range.to <= view.viewport.from || range.from >= view.viewport.to)
            return [];
        let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
        let ltr = view.textDirection == Direction.LTR;
        let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);
        let lineElt = content.querySelector(".cm-line"), lineStyle = lineElt && window.getComputedStyle(lineElt);
        let leftSide = contentRect.left +
            (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
        let rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
        let startBlock = blockAt(view, from, 1), endBlock = blockAt(view, to, -1);
        let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
        let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
        if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks))
            visualStart = wrappedLine(view, from, 1, visualStart);
        if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks))
            visualEnd = wrappedLine(view, to, -1, visualEnd);
        if (visualStart && visualEnd && visualStart.from == visualEnd.from && visualStart.to == visualEnd.to) {
            return pieces(drawForLine(range.from, range.to, visualStart));
        }
        else {
            let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
            let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
            let between = [];
            if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) ||
                startBlock.widgetLineBreaks > 1 && top.bottom + view.defaultLineHeight / 2 < bottom.top)
                between.push(piece(leftSide, top.bottom, rightSide, bottom.top));
            else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == BlockType.Text)
                top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
            return pieces(top).concat(between).concat(pieces(bottom));
        }
        function piece(left, top, right, bottom) {
            return new RectangleMarker(className, left - base.left, top - base.top, right - left, bottom - top);
        }
        function pieces({ top, bottom, horizontal }) {
            let pieces = [];
            for (let i = 0; i < horizontal.length; i += 2)
                pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
            return pieces;
        }
        // Gets passed from/to in line-local positions
        function drawForLine(from, to, line) {
            let top = 1e9, bottom = -1e9, horizontal = [];
            function addSpan(from, fromOpen, to, toOpen, dir) {
                // Passing 2/-2 is a kludge to force the view to return
                // coordinates on the proper side of block widgets, since
                // normalizing the side there, though appropriate for most
                // coordsAtPos queries, would break selection drawing.
                let fromCoords = view.coordsAtPos(from, (from == line.to ? -2 : 2));
                let toCoords = view.coordsAtPos(to, (to == line.from ? 2 : -2));
                if (!fromCoords || !toCoords)
                    return;
                top = Math.min(fromCoords.top, toCoords.top, top);
                bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
                if (dir == Direction.LTR)
                    horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
                else
                    horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
            }
            let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;
            // Split the range by visible range and document line
            for (let r of view.visibleRanges)
                if (r.to > start && r.from < end) {
                    for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {
                        let docLine = view.state.doc.lineAt(pos);
                        for (let span of view.bidiSpans(docLine)) {
                            let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
                            if (spanFrom >= endPos)
                                break;
                            if (spanTo > pos)
                                addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
                        }
                        pos = docLine.to + 1;
                        if (pos >= endPos)
                            break;
                    }
                }
            if (horizontal.length == 0)
                addSpan(start, from == null, end, to == null, view.textDirection);
            return { top, bottom, horizontal };
        }
        function drawForWidget(block, top) {
            let y = contentRect.top + (top ? block.top : block.bottom);
            return { top: y, bottom: y, horizontal: [] };
        }
    }
    function sameMarker(a, b) {
        return a.constructor == b.constructor && a.eq(b);
    }
    class LayerView {
        constructor(view, layer) {
            this.view = view;
            this.layer = layer;
            this.drawn = [];
            this.scaleX = 1;
            this.scaleY = 1;
            this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };
            this.dom = view.scrollDOM.appendChild(document.createElement("div"));
            this.dom.classList.add("cm-layer");
            if (layer.above)
                this.dom.classList.add("cm-layer-above");
            if (layer.class)
                this.dom.classList.add(layer.class);
            this.scale();
            this.dom.setAttribute("aria-hidden", "true");
            this.setOrder(view.state);
            view.requestMeasure(this.measureReq);
            if (layer.mount)
                layer.mount(this.dom, view);
        }
        update(update) {
            if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))
                this.setOrder(update.state);
            if (this.layer.update(update, this.dom) || update.geometryChanged) {
                this.scale();
                update.view.requestMeasure(this.measureReq);
            }
        }
        docViewUpdate(view) {
            if (this.layer.updateOnDocViewUpdate !== false)
                view.requestMeasure(this.measureReq);
        }
        setOrder(state) {
            let pos = 0, order = state.facet(layerOrder);
            while (pos < order.length && order[pos] != this.layer)
                pos++;
            this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
        }
        measure() {
            return this.layer.markers(this.view);
        }
        scale() {
            let { scaleX, scaleY } = this.view;
            if (scaleX != this.scaleX || scaleY != this.scaleY) {
                this.scaleX = scaleX;
                this.scaleY = scaleY;
                this.dom.style.transform = `scale(${1 / scaleX}, ${1 / scaleY})`;
            }
        }
        draw(markers) {
            if (markers.length != this.drawn.length || markers.some((p, i) => !sameMarker(p, this.drawn[i]))) {
                let old = this.dom.firstChild, oldI = 0;
                for (let marker of markers) {
                    if (marker.update && old && marker.constructor && this.drawn[oldI].constructor &&
                        marker.update(old, this.drawn[oldI])) {
                        old = old.nextSibling;
                        oldI++;
                    }
                    else {
                        this.dom.insertBefore(marker.draw(), old);
                    }
                }
                while (old) {
                    let next = old.nextSibling;
                    old.remove();
                    old = next;
                }
                this.drawn = markers;
            }
        }
        destroy() {
            if (this.layer.destroy)
                this.layer.destroy(this.dom, this.view);
            this.dom.remove();
        }
    }
    const layerOrder = /*@__PURE__*/Facet.define();
    /**
    Define a layer.
    */
    function layer(config) {
        return [
            ViewPlugin.define(v => new LayerView(v, config)),
            layerOrder.of(config)
        ];
    }

    const selectionConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                cursorBlinkRate: 1200,
                drawRangeCursor: true
            }, {
                cursorBlinkRate: (a, b) => Math.min(a, b),
                drawRangeCursor: (a, b) => a || b
            });
        }
    });
    /**
    Returns an extension that hides the browser's native selection and
    cursor, replacing the selection with a background behind the text
    (with the `cm-selectionBackground` class), and the
    cursors with elements overlaid over the code (using
    `cm-cursor-primary` and `cm-cursor-secondary`).

    This allows the editor to display secondary selection ranges, and
    tends to produce a type of selection more in line with that users
    expect in a text editor (the native selection styling will often
    leave gaps between lines and won't fill the horizontal space after
    a line when the selection continues past it).

    It does have a performance cost, in that it requires an extra DOM
    layout cycle for many updates (the selection is drawn based on DOM
    layout information that's only available after laying out the
    content).
    */
    function drawSelection(config = {}) {
        return [
            selectionConfig.of(config),
            cursorLayer,
            selectionLayer,
            hideNativeSelection,
            nativeSelectionHidden.of(true)
        ];
    }
    function configChanged(update) {
        return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
    }
    const cursorLayer = /*@__PURE__*/layer({
        above: true,
        markers(view) {
            let { state } = view, conf = state.facet(selectionConfig);
            let cursors = [];
            for (let r of state.selection.ranges) {
                let prim = r == state.selection.main;
                if (r.empty || conf.drawRangeCursor) {
                    let className = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
                    let cursor = r.empty ? r : EditorSelection.cursor(r.head, r.head > r.anchor ? -1 : 1);
                    for (let piece of RectangleMarker.forRange(view, className, cursor))
                        cursors.push(piece);
                }
            }
            return cursors;
        },
        update(update, dom) {
            if (update.transactions.some(tr => tr.selection))
                dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
            let confChange = configChanged(update);
            if (confChange)
                setBlinkRate(update.state, dom);
            return update.docChanged || update.selectionSet || confChange;
        },
        mount(dom, view) {
            setBlinkRate(view.state, dom);
        },
        class: "cm-cursorLayer"
    });
    function setBlinkRate(state, dom) {
        dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
    }
    const selectionLayer = /*@__PURE__*/layer({
        above: false,
        markers(view) {
            return view.state.selection.ranges.map(r => r.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r))
                .reduce((a, b) => a.concat(b));
        },
        update(update, dom) {
            return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);
        },
        class: "cm-selectionLayer"
    });
    const hideNativeSelection = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.theme({
        ".cm-line": {
            "& ::selection, &::selection": { backgroundColor: "transparent !important" },
            caretColor: "transparent !important"
        },
        ".cm-content": {
            caretColor: "transparent !important",
            "& :focus": {
                caretColor: "initial !important",
                "&::selection, & ::selection": {
                    backgroundColor: "Highlight !important"
                }
            }
        }
    }));

    const setDropCursorPos = /*@__PURE__*/StateEffect.define({
        map(pos, mapping) { return pos == null ? null : mapping.mapPos(pos); }
    });
    const dropCursorPos = /*@__PURE__*/StateField.define({
        create() { return null; },
        update(pos, tr) {
            if (pos != null)
                pos = tr.changes.mapPos(pos);
            return tr.effects.reduce((pos, e) => e.is(setDropCursorPos) ? e.value : pos, pos);
        }
    });
    const drawDropCursor = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.cursor = null;
            this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
        }
        update(update) {
            var _a;
            let cursorPos = update.state.field(dropCursorPos);
            if (cursorPos == null) {
                if (this.cursor != null) {
                    (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();
                    this.cursor = null;
                }
            }
            else {
                if (!this.cursor) {
                    this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
                    this.cursor.className = "cm-dropCursor";
                }
                if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)
                    this.view.requestMeasure(this.measureReq);
            }
        }
        readPos() {
            let { view } = this;
            let pos = view.state.field(dropCursorPos);
            let rect = pos != null && view.coordsAtPos(pos);
            if (!rect)
                return null;
            let outer = view.scrollDOM.getBoundingClientRect();
            return {
                left: rect.left - outer.left + view.scrollDOM.scrollLeft * view.scaleX,
                top: rect.top - outer.top + view.scrollDOM.scrollTop * view.scaleY,
                height: rect.bottom - rect.top
            };
        }
        drawCursor(pos) {
            if (this.cursor) {
                let { scaleX, scaleY } = this.view;
                if (pos) {
                    this.cursor.style.left = pos.left / scaleX + "px";
                    this.cursor.style.top = pos.top / scaleY + "px";
                    this.cursor.style.height = pos.height / scaleY + "px";
                }
                else {
                    this.cursor.style.left = "-100000px";
                }
            }
        }
        destroy() {
            if (this.cursor)
                this.cursor.remove();
        }
        setDropPos(pos) {
            if (this.view.state.field(dropCursorPos) != pos)
                this.view.dispatch({ effects: setDropCursorPos.of(pos) });
        }
    }, {
        eventObservers: {
            dragover(event) {
                this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));
            },
            dragleave(event) {
                if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))
                    this.setDropPos(null);
            },
            dragend() {
                this.setDropPos(null);
            },
            drop() {
                this.setDropPos(null);
            }
        }
    });
    /**
    Draws a cursor at the current drop position when something is
    dragged over the editor.
    */
    function dropCursor() {
        return [dropCursorPos, drawDropCursor];
    }

    function iterMatches(doc, re, from, to, f) {
        re.lastIndex = 0;
        for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
            if (!cursor.lineBreak)
                while (m = re.exec(cursor.value))
                    f(pos + m.index, m);
        }
    }
    function matchRanges(view, maxLength) {
        let visible = view.visibleRanges;
        if (visible.length == 1 && visible[0].from == view.viewport.from &&
            visible[0].to == view.viewport.to)
            return visible;
        let result = [];
        for (let { from, to } of visible) {
            from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
            to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
            if (result.length && result[result.length - 1].to >= from)
                result[result.length - 1].to = to;
            else
                result.push({ from, to });
        }
        return result;
    }
    /**
    Helper class used to make it easier to maintain decorations on
    visible code that matches a given regular expression. To be used
    in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
    represent a matching configuration.
    */
    class MatchDecorator {
        /**
        Create a decorator.
        */
        constructor(config) {
            const { regexp, decoration, decorate, boundary, maxLength = 1000 } = config;
            if (!regexp.global)
                throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
            this.regexp = regexp;
            if (decorate) {
                this.addMatch = (match, view, from, add) => decorate(add, from, from + match[0].length, match, view);
            }
            else if (typeof decoration == "function") {
                this.addMatch = (match, view, from, add) => {
                    let deco = decoration(match, view, from);
                    if (deco)
                        add(from, from + match[0].length, deco);
                };
            }
            else if (decoration) {
                this.addMatch = (match, _view, from, add) => add(from, from + match[0].length, decoration);
            }
            else {
                throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
            }
            this.boundary = boundary;
            this.maxLength = maxLength;
        }
        /**
        Compute the full set of decorations for matches in the given
        view's viewport. You'll want to call this when initializing your
        plugin.
        */
        createDeco(view) {
            let build = new RangeSetBuilder(), add = build.add.bind(build);
            for (let { from, to } of matchRanges(view, this.maxLength))
                iterMatches(view.state.doc, this.regexp, from, to, (from, m) => this.addMatch(m, view, from, add));
            return build.finish();
        }
        /**
        Update a set of decorations for a view update. `deco` _must_ be
        the set of decorations produced by _this_ `MatchDecorator` for
        the view state before the update.
        */
        updateDeco(update, deco) {
            let changeFrom = 1e9, changeTo = -1;
            if (update.docChanged)
                update.changes.iterChanges((_f, _t, from, to) => {
                    if (to >= update.view.viewport.from && from <= update.view.viewport.to) {
                        changeFrom = Math.min(from, changeFrom);
                        changeTo = Math.max(to, changeTo);
                    }
                });
            if (update.viewportMoved || changeTo - changeFrom > 1000)
                return this.createDeco(update.view);
            if (changeTo > -1)
                return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
            return deco;
        }
        updateRange(view, deco, updateFrom, updateTo) {
            for (let r of view.visibleRanges) {
                let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);
                if (to >= from) {
                    let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
                    let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);
                    if (this.boundary) {
                        for (; from > fromLine.from; from--)
                            if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                                start = from;
                                break;
                            }
                        for (; to < toLine.to; to++)
                            if (this.boundary.test(toLine.text[to - toLine.from])) {
                                end = to;
                                break;
                            }
                    }
                    let ranges = [], m;
                    let add = (from, to, deco) => ranges.push(deco.range(from, to));
                    if (fromLine == toLine) {
                        this.regexp.lastIndex = start - fromLine.from;
                        while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from)
                            this.addMatch(m, view, m.index + fromLine.from, add);
                    }
                    else {
                        iterMatches(view.state.doc, this.regexp, start, end, (from, m) => this.addMatch(m, view, from, add));
                    }
                    deco = deco.update({ filterFrom: start, filterTo: end, filter: (from, to) => from < start || to > end, add: ranges });
                }
            }
            return deco;
        }
    }

    const UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
    const Specials = /*@__PURE__*/new RegExp("[\u0000-\u0008\u000a-\u001f\u007f-\u009f\u00ad\u061c\u200b\u200e\u200f\u2028\u2029\u202d\u202e\u2066\u2067\u2069\ufeff\ufff9-\ufffc]", UnicodeRegexpSupport);
    const Names = {
        0: "null",
        7: "bell",
        8: "backspace",
        10: "newline",
        11: "vertical tab",
        13: "carriage return",
        27: "escape",
        8203: "zero width space",
        8204: "zero width non-joiner",
        8205: "zero width joiner",
        8206: "left-to-right mark",
        8207: "right-to-left mark",
        8232: "line separator",
        8237: "left-to-right override",
        8238: "right-to-left override",
        8294: "left-to-right isolate",
        8295: "right-to-left isolate",
        8297: "pop directional isolate",
        8233: "paragraph separator",
        65279: "zero width no-break space",
        65532: "object replacement"
    };
    let _supportsTabSize = null;
    function supportsTabSize() {
        var _a;
        if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
            let styles = document.body.style;
            _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
        }
        return _supportsTabSize || false;
    }
    const specialCharConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            let config = combineConfig(configs, {
                render: null,
                specialChars: Specials,
                addSpecialChars: null
            });
            if (config.replaceTabs = !supportsTabSize())
                config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
            if (config.addSpecialChars)
                config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
            return config;
        }
    });
    /**
    Returns an extension that installs highlighting of special
    characters.
    */
    function highlightSpecialChars(
    /**
    Configuration options.
    */
    config = {}) {
        return [specialCharConfig.of(config), specialCharPlugin()];
    }
    let _plugin = null;
    function specialCharPlugin() {
        return _plugin || (_plugin = ViewPlugin.fromClass(class {
            constructor(view) {
                this.view = view;
                this.decorations = Decoration.none;
                this.decorationCache = Object.create(null);
                this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
                this.decorations = this.decorator.createDeco(view);
            }
            makeDecorator(conf) {
                return new MatchDecorator({
                    regexp: conf.specialChars,
                    decoration: (m, view, pos) => {
                        let { doc } = view.state;
                        let code = codePointAt(m[0], 0);
                        if (code == 9) {
                            let line = doc.lineAt(pos);
                            let size = view.state.tabSize, col = countColumn(line.text, size, pos - line.from);
                            return Decoration.replace({
                                widget: new TabWidget((size - (col % size)) * this.view.defaultCharacterWidth / this.view.scaleX)
                            });
                        }
                        return this.decorationCache[code] ||
                            (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));
                    },
                    boundary: conf.replaceTabs ? undefined : /[^]/
                });
            }
            update(update) {
                let conf = update.state.facet(specialCharConfig);
                if (update.startState.facet(specialCharConfig) != conf) {
                    this.decorator = this.makeDecorator(conf);
                    this.decorations = this.decorator.createDeco(update.view);
                }
                else {
                    this.decorations = this.decorator.updateDeco(update, this.decorations);
                }
            }
        }, {
            decorations: v => v.decorations
        }));
    }
    const DefaultPlaceholder = "\u2022";
    // Assigns placeholder characters from the Control Pictures block to
    // ASCII control characters
    function placeholder$1(code) {
        if (code >= 32)
            return DefaultPlaceholder;
        if (code == 10)
            return "\u2424";
        return String.fromCharCode(9216 + code);
    }
    class SpecialCharWidget extends WidgetType {
        constructor(options, code) {
            super();
            this.options = options;
            this.code = code;
        }
        eq(other) { return other.code == this.code; }
        toDOM(view) {
            let ph = placeholder$1(this.code);
            let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
            let custom = this.options.render && this.options.render(this.code, desc, ph);
            if (custom)
                return custom;
            let span = document.createElement("span");
            span.textContent = ph;
            span.title = desc;
            span.setAttribute("aria-label", desc);
            span.className = "cm-specialChar";
            return span;
        }
        ignoreEvent() { return false; }
    }
    class TabWidget extends WidgetType {
        constructor(width) {
            super();
            this.width = width;
        }
        eq(other) { return other.width == this.width; }
        toDOM() {
            let span = document.createElement("span");
            span.textContent = "\t";
            span.className = "cm-tab";
            span.style.width = this.width + "px";
            return span;
        }
        ignoreEvent() { return false; }
    }

    /**
    Mark lines that have a cursor on them with the `"cm-activeLine"`
    DOM class.
    */
    function highlightActiveLine() {
        return activeLineHighlighter;
    }
    const lineDeco = /*@__PURE__*/Decoration.line({ class: "cm-activeLine" });
    const activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.decorations = this.getDeco(view);
        }
        update(update) {
            if (update.docChanged || update.selectionSet)
                this.decorations = this.getDeco(update.view);
        }
        getDeco(view) {
            let lastLineStart = -1, deco = [];
            for (let r of view.state.selection.ranges) {
                let line = view.lineBlockAt(r.head);
                if (line.from > lastLineStart) {
                    deco.push(lineDeco.range(line.from));
                    lastLineStart = line.from;
                }
            }
            return Decoration.set(deco);
        }
    }, {
        decorations: v => v.decorations
    });

    // Don't compute precise column positions for line offsets above this
    // (since it could get expensive). Assume offset==column for them.
    const MaxOff = 2000;
    function rectangleFor(state, a, b) {
        let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);
        let ranges = [];
        if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
            let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);
            for (let i = startLine; i <= endLine; i++) {
                let line = state.doc.line(i);
                if (line.length <= endOff)
                    ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
            }
        }
        else {
            let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);
            for (let i = startLine; i <= endLine; i++) {
                let line = state.doc.line(i);
                let start = findColumn(line.text, startCol, state.tabSize, true);
                if (start < 0) {
                    ranges.push(EditorSelection.cursor(line.to));
                }
                else {
                    let end = findColumn(line.text, endCol, state.tabSize);
                    ranges.push(EditorSelection.range(line.from + start, line.from + end));
                }
            }
        }
        return ranges;
    }
    function absoluteColumn(view, x) {
        let ref = view.coordsAtPos(view.viewport.from);
        return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
    }
    function getPos(view, event) {
        let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        let line = view.state.doc.lineAt(offset), off = offset - line.from;
        let col = off > MaxOff ? -1
            : off == line.length ? absoluteColumn(view, event.clientX)
                : countColumn(line.text, view.state.tabSize, offset - line.from);
        return { line: line.number, col, off };
    }
    function rectangleSelectionStyle(view, event) {
        let start = getPos(view, event), startSel = view.state.selection;
        if (!start)
            return null;
        return {
            update(update) {
                if (update.docChanged) {
                    let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
                    let newLine = update.state.doc.lineAt(newStart);
                    start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
                    startSel = startSel.map(update.changes);
                }
            },
            get(event, _extend, multiple) {
                let cur = getPos(view, event);
                if (!cur)
                    return startSel;
                let ranges = rectangleFor(view.state, start, cur);
                if (!ranges.length)
                    return startSel;
                if (multiple)
                    return EditorSelection.create(ranges.concat(startSel.ranges));
                else
                    return EditorSelection.create(ranges);
            }
        };
    }
    /**
    Create an extension that enables rectangular selections. By
    default, it will react to left mouse drag with the Alt key held
    down. When such a selection occurs, the text within the rectangle
    that was dragged over will be selected, as one selection
    [range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.
    */
    function rectangularSelection(options) {
        let filter = (e => e.altKey && e.button == 0);
        return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
    }
    const keys = {
        Alt: [18, e => !!e.altKey],
        Control: [17, e => !!e.ctrlKey],
        Shift: [16, e => !!e.shiftKey],
        Meta: [91, e => !!e.metaKey]
    };
    const showCrosshair = { style: "cursor: crosshair" };
    /**
    Returns an extension that turns the pointer cursor into a
    crosshair when a given modifier key, defaulting to Alt, is held
    down. Can serve as a visual hint that rectangular selection is
    going to happen when paired with
    [`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).
    */
    function crosshairCursor(options = {}) {
        let [code, getter] = keys[options.key || "Alt"];
        let plugin = ViewPlugin.fromClass(class {
            constructor(view) {
                this.view = view;
                this.isDown = false;
            }
            set(isDown) {
                if (this.isDown != isDown) {
                    this.isDown = isDown;
                    this.view.update([]);
                }
            }
        }, {
            eventObservers: {
                keydown(e) {
                    this.set(e.keyCode == code || getter(e));
                },
                keyup(e) {
                    if (e.keyCode == code || !getter(e))
                        this.set(false);
                },
                mousemove(e) {
                    this.set(getter(e));
                }
            }
        });
        return [
            plugin,
            EditorView.contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null; })
        ];
    }

    const Outside = "-10000px";
    class TooltipViewManager {
        constructor(view, facet, createTooltipView, removeTooltipView) {
            this.facet = facet;
            this.createTooltipView = createTooltipView;
            this.removeTooltipView = removeTooltipView;
            this.input = view.state.facet(facet);
            this.tooltips = this.input.filter(t => t);
            let prev = null;
            this.tooltipViews = this.tooltips.map(t => prev = createTooltipView(t, prev));
        }
        update(update, above) {
            var _a;
            let input = update.state.facet(this.facet);
            let tooltips = input.filter(x => x);
            if (input === this.input) {
                for (let t of this.tooltipViews)
                    if (t.update)
                        t.update(update);
                return false;
            }
            let tooltipViews = [], newAbove = above ? [] : null;
            for (let i = 0; i < tooltips.length; i++) {
                let tip = tooltips[i], known = -1;
                if (!tip)
                    continue;
                for (let i = 0; i < this.tooltips.length; i++) {
                    let other = this.tooltips[i];
                    if (other && other.create == tip.create)
                        known = i;
                }
                if (known < 0) {
                    tooltipViews[i] = this.createTooltipView(tip, i ? tooltipViews[i - 1] : null);
                    if (newAbove)
                        newAbove[i] = !!tip.above;
                }
                else {
                    let tooltipView = tooltipViews[i] = this.tooltipViews[known];
                    if (newAbove)
                        newAbove[i] = above[known];
                    if (tooltipView.update)
                        tooltipView.update(update);
                }
            }
            for (let t of this.tooltipViews)
                if (tooltipViews.indexOf(t) < 0) {
                    this.removeTooltipView(t);
                    (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);
                }
            if (above) {
                newAbove.forEach((val, i) => above[i] = val);
                above.length = newAbove.length;
            }
            this.input = input;
            this.tooltips = tooltips;
            this.tooltipViews = tooltipViews;
            return true;
        }
    }
    function windowSpace(view) {
        let docElt = view.dom.ownerDocument.documentElement;
        return { top: 0, left: 0, bottom: docElt.clientHeight, right: docElt.clientWidth };
    }
    const tooltipConfig = /*@__PURE__*/Facet.define({
        combine: values => {
            var _a, _b, _c;
            return ({
                position: browser.ios ? "absolute" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
                parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
                tooltipSpace: ((_c = values.find(conf => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace,
            });
        }
    });
    const knownHeight = /*@__PURE__*/new WeakMap();
    const tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.above = [];
            this.inView = true;
            this.madeAbsolute = false;
            this.lastTransaction = 0;
            this.measureTimeout = -1;
            let config = view.state.facet(tooltipConfig);
            this.position = config.position;
            this.parent = config.parent;
            this.classes = view.themeClasses;
            this.createContainer();
            this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
            this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null;
            this.manager = new TooltipViewManager(view, showTooltip, (t, p) => this.createTooltip(t, p), t => {
                if (this.resizeObserver)
                    this.resizeObserver.unobserve(t.dom);
                t.dom.remove();
            });
            this.above = this.manager.tooltips.map(t => !!t.above);
            this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(entries => {
                if (Date.now() > this.lastTransaction - 50 &&
                    entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
                    this.measureSoon();
            }, { threshold: [1] }) : null;
            this.observeIntersection();
            view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
            this.maybeMeasure();
        }
        createContainer() {
            if (this.parent) {
                this.container = document.createElement("div");
                this.container.style.position = "relative";
                this.container.className = this.view.themeClasses;
                this.parent.appendChild(this.container);
            }
            else {
                this.container = this.view.dom;
            }
        }
        observeIntersection() {
            if (this.intersectionObserver) {
                this.intersectionObserver.disconnect();
                for (let tooltip of this.manager.tooltipViews)
                    this.intersectionObserver.observe(tooltip.dom);
            }
        }
        measureSoon() {
            if (this.measureTimeout < 0)
                this.measureTimeout = setTimeout(() => {
                    this.measureTimeout = -1;
                    this.maybeMeasure();
                }, 50);
        }
        update(update) {
            if (update.transactions.length)
                this.lastTransaction = Date.now();
            let updated = this.manager.update(update, this.above);
            if (updated)
                this.observeIntersection();
            let shouldMeasure = updated || update.geometryChanged;
            let newConfig = update.state.facet(tooltipConfig);
            if (newConfig.position != this.position && !this.madeAbsolute) {
                this.position = newConfig.position;
                for (let t of this.manager.tooltipViews)
                    t.dom.style.position = this.position;
                shouldMeasure = true;
            }
            if (newConfig.parent != this.parent) {
                if (this.parent)
                    this.container.remove();
                this.parent = newConfig.parent;
                this.createContainer();
                for (let t of this.manager.tooltipViews)
                    this.container.appendChild(t.dom);
                shouldMeasure = true;
            }
            else if (this.parent && this.view.themeClasses != this.classes) {
                this.classes = this.container.className = this.view.themeClasses;
            }
            if (shouldMeasure)
                this.maybeMeasure();
        }
        createTooltip(tooltip, prev) {
            let tooltipView = tooltip.create(this.view);
            let before = prev ? prev.dom : null;
            tooltipView.dom.classList.add("cm-tooltip");
            if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
                let arrow = document.createElement("div");
                arrow.className = "cm-tooltip-arrow";
                tooltipView.dom.appendChild(arrow);
            }
            tooltipView.dom.style.position = this.position;
            tooltipView.dom.style.top = Outside;
            tooltipView.dom.style.left = "0px";
            this.container.insertBefore(tooltipView.dom, before);
            if (tooltipView.mount)
                tooltipView.mount(this.view);
            if (this.resizeObserver)
                this.resizeObserver.observe(tooltipView.dom);
            return tooltipView;
        }
        destroy() {
            var _a, _b, _c;
            this.view.win.removeEventListener("resize", this.measureSoon);
            for (let tooltipView of this.manager.tooltipViews) {
                tooltipView.dom.remove();
                (_a = tooltipView.destroy) === null || _a === void 0 ? void 0 : _a.call(tooltipView);
            }
            if (this.parent)
                this.container.remove();
            (_b = this.resizeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
            (_c = this.intersectionObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
            clearTimeout(this.measureTimeout);
        }
        readMeasure() {
            let scaleX = 1, scaleY = 1, makeAbsolute = false;
            if (this.position == "fixed" && this.manager.tooltipViews.length) {
                let { dom } = this.manager.tooltipViews[0];
                if (browser.gecko) {
                    // Firefox sets the element's `offsetParent` to the
                    // transformed element when a transform interferes with fixed
                    // positioning.
                    makeAbsolute = dom.offsetParent != this.container.ownerDocument.body;
                }
                else if (dom.style.top == Outside && dom.style.left == "0px") {
                    // On other browsers, we have to awkwardly try and use other
                    // information to detect a transform.
                    let rect = dom.getBoundingClientRect();
                    makeAbsolute = Math.abs(rect.top + 10000) > 1 || Math.abs(rect.left) > 1;
                }
            }
            if (makeAbsolute || this.position == "absolute") {
                if (this.parent) {
                    let rect = this.parent.getBoundingClientRect();
                    if (rect.width && rect.height) {
                        scaleX = rect.width / this.parent.offsetWidth;
                        scaleY = rect.height / this.parent.offsetHeight;
                    }
                }
                else {
                    ({ scaleX, scaleY } = this.view.viewState);
                }
            }
            let visible = this.view.scrollDOM.getBoundingClientRect(), margins = getScrollMargins(this.view);
            return {
                visible: {
                    left: visible.left + margins.left, top: visible.top + margins.top,
                    right: visible.right - margins.right, bottom: visible.bottom - margins.bottom
                },
                parent: this.parent ? this.container.getBoundingClientRect() : this.view.dom.getBoundingClientRect(),
                pos: this.manager.tooltips.map((t, i) => {
                    let tv = this.manager.tooltipViews[i];
                    return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);
                }),
                size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
                space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
                scaleX, scaleY, makeAbsolute
            };
        }
        writeMeasure(measured) {
            var _a;
            if (measured.makeAbsolute) {
                this.madeAbsolute = true;
                this.position = "absolute";
                for (let t of this.manager.tooltipViews)
                    t.dom.style.position = "absolute";
            }
            let { visible, space, scaleX, scaleY } = measured;
            let others = [];
            for (let i = 0; i < this.manager.tooltips.length; i++) {
                let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;
                let pos = measured.pos[i], size = measured.size[i];
                // Hide tooltips that are outside of the editor.
                if (!pos || tooltip.clip !== false && (pos.bottom <= Math.max(visible.top, space.top) ||
                    pos.top >= Math.min(visible.bottom, space.bottom) ||
                    pos.right < Math.max(visible.left, space.left) - .1 ||
                    pos.left > Math.min(visible.right, space.right) + .1)) {
                    dom.style.top = Outside;
                    continue;
                }
                let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
                let arrowHeight = arrow ? 7 /* Arrow.Size */ : 0;
                let width = size.right - size.left, height = (_a = knownHeight.get(tView)) !== null && _a !== void 0 ? _a : size.bottom - size.top;
                let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;
                let left = size.width > space.right - space.left
                    ? (ltr ? space.left : space.right - size.width)
                    : ltr ? Math.max(space.left, Math.min(pos.left - (arrow ? 14 /* Arrow.Offset */ : 0) + offset.x, space.right - width))
                        : Math.min(Math.max(space.left, pos.left - width + (arrow ? 14 /* Arrow.Offset */ : 0) - offset.x), space.right - width);
                let above = this.above[i];
                if (!tooltip.strictSide && (above
                    ? pos.top - height - arrowHeight - offset.y < space.top
                    : pos.bottom + height + arrowHeight + offset.y > space.bottom) &&
                    above == (space.bottom - pos.bottom > pos.top - space.top))
                    above = this.above[i] = !above;
                let spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;
                if (spaceVert < height && tView.resize !== false) {
                    if (spaceVert < this.view.defaultLineHeight) {
                        dom.style.top = Outside;
                        continue;
                    }
                    knownHeight.set(tView, height);
                    dom.style.height = (height = spaceVert) / scaleY + "px";
                }
                else if (dom.style.height) {
                    dom.style.height = "";
                }
                let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
                let right = left + width;
                if (tView.overlap !== true)
                    for (let r of others)
                        if (r.left < right && r.right > left && r.top < top + height && r.bottom > top)
                            top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;
                if (this.position == "absolute") {
                    dom.style.top = (top - measured.parent.top) / scaleY + "px";
                    setLeftStyle(dom, (left - measured.parent.left) / scaleX);
                }
                else {
                    dom.style.top = top / scaleY + "px";
                    setLeftStyle(dom, left / scaleX);
                }
                if (arrow) {
                    let arrowLeft = pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Arrow.Offset */ - 7 /* Arrow.Size */);
                    arrow.style.left = arrowLeft / scaleX + "px";
                }
                if (tView.overlap !== true)
                    others.push({ left, top, right, bottom: top + height });
                dom.classList.toggle("cm-tooltip-above", above);
                dom.classList.toggle("cm-tooltip-below", !above);
                if (tView.positioned)
                    tView.positioned(measured.space);
            }
        }
        maybeMeasure() {
            if (this.manager.tooltips.length) {
                if (this.view.inView)
                    this.view.requestMeasure(this.measureReq);
                if (this.inView != this.view.inView) {
                    this.inView = this.view.inView;
                    if (!this.inView)
                        for (let tv of this.manager.tooltipViews)
                            tv.dom.style.top = Outside;
                }
            }
        }
    }, {
        eventObservers: {
            scroll() { this.maybeMeasure(); }
        }
    });
    function setLeftStyle(elt, value) {
        let current = parseInt(elt.style.left, 10);
        if (isNaN(current) || Math.abs(value - current) > 1)
            elt.style.left = value + "px";
    }
    const baseTheme$4 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-tooltip": {
            zIndex: 500,
            boxSizing: "border-box"
        },
        "&light .cm-tooltip": {
            border: "1px solid #bbb",
            backgroundColor: "#f5f5f5"
        },
        "&light .cm-tooltip-section:not(:first-child)": {
            borderTop: "1px solid #bbb",
        },
        "&dark .cm-tooltip": {
            backgroundColor: "#333338",
            color: "white"
        },
        ".cm-tooltip-arrow": {
            height: `${7 /* Arrow.Size */}px`,
            width: `${7 /* Arrow.Size */ * 2}px`,
            position: "absolute",
            zIndex: -1,
            overflow: "hidden",
            "&:before, &:after": {
                content: "''",
                position: "absolute",
                width: 0,
                height: 0,
                borderLeft: `${7 /* Arrow.Size */}px solid transparent`,
                borderRight: `${7 /* Arrow.Size */}px solid transparent`,
            },
            ".cm-tooltip-above &": {
                bottom: `-${7 /* Arrow.Size */}px`,
                "&:before": {
                    borderTop: `${7 /* Arrow.Size */}px solid #bbb`,
                },
                "&:after": {
                    borderTop: `${7 /* Arrow.Size */}px solid #f5f5f5`,
                    bottom: "1px"
                }
            },
            ".cm-tooltip-below &": {
                top: `-${7 /* Arrow.Size */}px`,
                "&:before": {
                    borderBottom: `${7 /* Arrow.Size */}px solid #bbb`,
                },
                "&:after": {
                    borderBottom: `${7 /* Arrow.Size */}px solid #f5f5f5`,
                    top: "1px"
                }
            },
        },
        "&dark .cm-tooltip .cm-tooltip-arrow": {
            "&:before": {
                borderTopColor: "#333338",
                borderBottomColor: "#333338"
            },
            "&:after": {
                borderTopColor: "transparent",
                borderBottomColor: "transparent"
            }
        }
    });
    const noOffset = { x: 0, y: 0 };
    /**
    Facet to which an extension can add a value to show a tooltip.
    */
    const showTooltip = /*@__PURE__*/Facet.define({
        enables: [tooltipPlugin, baseTheme$4]
    });
    const showHoverTooltip = /*@__PURE__*/Facet.define({
        combine: inputs => inputs.reduce((a, i) => a.concat(i), [])
    });
    class HoverTooltipHost {
        // Needs to be static so that host tooltip instances always match
        static create(view) {
            return new HoverTooltipHost(view);
        }
        constructor(view) {
            this.view = view;
            this.mounted = false;
            this.dom = document.createElement("div");
            this.dom.classList.add("cm-tooltip-hover");
            this.manager = new TooltipViewManager(view, showHoverTooltip, (t, p) => this.createHostedView(t, p), t => t.dom.remove());
        }
        createHostedView(tooltip, prev) {
            let hostedView = tooltip.create(this.view);
            hostedView.dom.classList.add("cm-tooltip-section");
            this.dom.insertBefore(hostedView.dom, prev ? prev.dom.nextSibling : this.dom.firstChild);
            if (this.mounted && hostedView.mount)
                hostedView.mount(this.view);
            return hostedView;
        }
        mount(view) {
            for (let hostedView of this.manager.tooltipViews) {
                if (hostedView.mount)
                    hostedView.mount(view);
            }
            this.mounted = true;
        }
        positioned(space) {
            for (let hostedView of this.manager.tooltipViews) {
                if (hostedView.positioned)
                    hostedView.positioned(space);
            }
        }
        update(update) {
            this.manager.update(update);
        }
        destroy() {
            var _a;
            for (let t of this.manager.tooltipViews)
                (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);
        }
        passProp(name) {
            let value = undefined;
            for (let view of this.manager.tooltipViews) {
                let given = view[name];
                if (given !== undefined) {
                    if (value === undefined)
                        value = given;
                    else if (value !== given)
                        return undefined;
                }
            }
            return value;
        }
        get offset() { return this.passProp("offset"); }
        get getCoords() { return this.passProp("getCoords"); }
        get overlap() { return this.passProp("overlap"); }
        get resize() { return this.passProp("resize"); }
    }
    const showHoverTooltipHost = /*@__PURE__*/showTooltip.compute([showHoverTooltip], state => {
        let tooltips = state.facet(showHoverTooltip);
        if (tooltips.length === 0)
            return null;
        return {
            pos: Math.min(...tooltips.map(t => t.pos)),
            end: Math.max(...tooltips.map(t => { var _a; return (_a = t.end) !== null && _a !== void 0 ? _a : t.pos; })),
            create: HoverTooltipHost.create,
            above: tooltips[0].above,
            arrow: tooltips.some(t => t.arrow),
        };
    });
    class HoverPlugin {
        constructor(view, source, field, setHover, hoverTime) {
            this.view = view;
            this.source = source;
            this.field = field;
            this.setHover = setHover;
            this.hoverTime = hoverTime;
            this.hoverTimeout = -1;
            this.restartTimeout = -1;
            this.pending = null;
            this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };
            this.checkHover = this.checkHover.bind(this);
            view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
            view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
        }
        update() {
            if (this.pending) {
                this.pending = null;
                clearTimeout(this.restartTimeout);
                this.restartTimeout = setTimeout(() => this.startHover(), 20);
            }
        }
        get active() {
            return this.view.state.field(this.field);
        }
        checkHover() {
            this.hoverTimeout = -1;
            if (this.active.length)
                return;
            let hovered = Date.now() - this.lastMove.time;
            if (hovered < this.hoverTime)
                this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
            else
                this.startHover();
        }
        startHover() {
            clearTimeout(this.restartTimeout);
            let { view, lastMove } = this;
            let desc = view.docView.nearest(lastMove.target);
            if (!desc)
                return;
            let pos, side = 1;
            if (desc instanceof WidgetView) {
                pos = desc.posAtStart;
            }
            else {
                pos = view.posAtCoords(lastMove);
                if (pos == null)
                    return;
                let posCoords = view.coordsAtPos(pos);
                if (!posCoords ||
                    lastMove.y < posCoords.top || lastMove.y > posCoords.bottom ||
                    lastMove.x < posCoords.left - view.defaultCharacterWidth ||
                    lastMove.x > posCoords.right + view.defaultCharacterWidth)
                    return;
                let bidi = view.bidiSpans(view.state.doc.lineAt(pos)).find(s => s.from <= pos && s.to >= pos);
                let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
                side = (lastMove.x < posCoords.left ? -rtl : rtl);
            }
            let open = this.source(view, pos, side);
            if (open === null || open === void 0 ? void 0 : open.then) {
                let pending = this.pending = { pos };
                open.then(result => {
                    if (this.pending == pending) {
                        this.pending = null;
                        if (result && !(Array.isArray(result) && !result.length))
                            view.dispatch({ effects: this.setHover.of(Array.isArray(result) ? result : [result]) });
                    }
                }, e => logException(view.state, e, "hover tooltip"));
            }
            else if (open && !(Array.isArray(open) && !open.length)) {
                view.dispatch({ effects: this.setHover.of(Array.isArray(open) ? open : [open]) });
            }
        }
        get tooltip() {
            let plugin = this.view.plugin(tooltipPlugin);
            let index = plugin ? plugin.manager.tooltips.findIndex(t => t.create == HoverTooltipHost.create) : -1;
            return index > -1 ? plugin.manager.tooltipViews[index] : null;
        }
        mousemove(event) {
            var _a, _b;
            this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };
            if (this.hoverTimeout < 0)
                this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
            let { active, tooltip } = this;
            if (active.length && tooltip && !isInTooltip(tooltip.dom, event) || this.pending) {
                let { pos } = active[0] || this.pending, end = (_b = (_a = active[0]) === null || _a === void 0 ? void 0 : _a.end) !== null && _b !== void 0 ? _b : pos;
                if ((pos == end ? this.view.posAtCoords(this.lastMove) != pos
                    : !isOverRange(this.view, pos, end, event.clientX, event.clientY))) {
                    this.view.dispatch({ effects: this.setHover.of([]) });
                    this.pending = null;
                }
            }
        }
        mouseleave(event) {
            clearTimeout(this.hoverTimeout);
            this.hoverTimeout = -1;
            let { active } = this;
            if (active.length) {
                let { tooltip } = this;
                let inTooltip = tooltip && tooltip.dom.contains(event.relatedTarget);
                if (!inTooltip)
                    this.view.dispatch({ effects: this.setHover.of([]) });
                else
                    this.watchTooltipLeave(tooltip.dom);
            }
        }
        watchTooltipLeave(tooltip) {
            let watch = (event) => {
                tooltip.removeEventListener("mouseleave", watch);
                if (this.active.length && !this.view.dom.contains(event.relatedTarget))
                    this.view.dispatch({ effects: this.setHover.of([]) });
            };
            tooltip.addEventListener("mouseleave", watch);
        }
        destroy() {
            clearTimeout(this.hoverTimeout);
            this.view.dom.removeEventListener("mouseleave", this.mouseleave);
            this.view.dom.removeEventListener("mousemove", this.mousemove);
        }
    }
    const tooltipMargin = 4;
    function isInTooltip(tooltip, event) {
        let { left, right, top, bottom } = tooltip.getBoundingClientRect(), arrow;
        if (arrow = tooltip.querySelector(".cm-tooltip-arrow")) {
            let arrowRect = arrow.getBoundingClientRect();
            top = Math.min(arrowRect.top, top);
            bottom = Math.max(arrowRect.bottom, bottom);
        }
        return event.clientX >= left - tooltipMargin && event.clientX <= right + tooltipMargin &&
            event.clientY >= top - tooltipMargin && event.clientY <= bottom + tooltipMargin;
    }
    function isOverRange(view, from, to, x, y, margin) {
        let rect = view.scrollDOM.getBoundingClientRect();
        let docBottom = view.documentTop + view.documentPadding.top + view.contentHeight;
        if (rect.left > x || rect.right < x || rect.top > y || Math.min(rect.bottom, docBottom) < y)
            return false;
        let pos = view.posAtCoords({ x, y }, false);
        return pos >= from && pos <= to;
    }
    /**
    Set up a hover tooltip, which shows up when the pointer hovers
    over ranges of text. The callback is called when the mouse hovers
    over the document text. It should, if there is a tooltip
    associated with position `pos`, return the tooltip description
    (either directly or in a promise). The `side` argument indicates
    on which side of the position the pointer is—it will be -1 if the
    pointer is before the position, 1 if after the position.

    Note that all hover tooltips are hosted within a single tooltip
    container element. This allows multiple tooltips over the same
    range to be "merged" together without overlapping.

    The return value is a valid [editor extension](https://codemirror.net/6/docs/ref/#state.Extension)
    but also provides an `active` property holding a state field that
    can be used to read the currently active tooltips produced by this
    extension.
    */
    function hoverTooltip(source, options = {}) {
        let setHover = StateEffect.define();
        let hoverState = StateField.define({
            create() { return []; },
            update(value, tr) {
                if (value.length) {
                    if (options.hideOnChange && (tr.docChanged || tr.selection))
                        value = [];
                    else if (options.hideOn)
                        value = value.filter(v => !options.hideOn(tr, v));
                    if (tr.docChanged) {
                        let mapped = [];
                        for (let tooltip of value) {
                            let newPos = tr.changes.mapPos(tooltip.pos, -1, MapMode.TrackDel);
                            if (newPos != null) {
                                let copy = Object.assign(Object.create(null), tooltip);
                                copy.pos = newPos;
                                if (copy.end != null)
                                    copy.end = tr.changes.mapPos(copy.end);
                                mapped.push(copy);
                            }
                        }
                        value = mapped;
                    }
                }
                for (let effect of tr.effects) {
                    if (effect.is(setHover))
                        value = effect.value;
                    if (effect.is(closeHoverTooltipEffect))
                        value = [];
                }
                return value;
            },
            provide: f => showHoverTooltip.from(f)
        });
        return {
            active: hoverState,
            extension: [
                hoverState,
                ViewPlugin.define(view => new HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300 /* Hover.Time */)),
                showHoverTooltipHost
            ]
        };
    }
    /**
    Get the active tooltip view for a given tooltip, if available.
    */
    function getTooltip(view, tooltip) {
        let plugin = view.plugin(tooltipPlugin);
        if (!plugin)
            return null;
        let found = plugin.manager.tooltips.indexOf(tooltip);
        return found < 0 ? null : plugin.manager.tooltipViews[found];
    }
    const closeHoverTooltipEffect = /*@__PURE__*/StateEffect.define();

    const panelConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            let topContainer, bottomContainer;
            for (let c of configs) {
                topContainer = topContainer || c.topContainer;
                bottomContainer = bottomContainer || c.bottomContainer;
            }
            return { topContainer, bottomContainer };
        }
    });
    /**
    Get the active panel created by the given constructor, if any.
    This can be useful when you need access to your panels' DOM
    structure.
    */
    function getPanel(view, panel) {
        let plugin = view.plugin(panelPlugin);
        let index = plugin ? plugin.specs.indexOf(panel) : -1;
        return index > -1 ? plugin.panels[index] : null;
    }
    const panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.input = view.state.facet(showPanel);
            this.specs = this.input.filter(s => s);
            this.panels = this.specs.map(spec => spec(view));
            let conf = view.state.facet(panelConfig);
            this.top = new PanelGroup(view, true, conf.topContainer);
            this.bottom = new PanelGroup(view, false, conf.bottomContainer);
            this.top.sync(this.panels.filter(p => p.top));
            this.bottom.sync(this.panels.filter(p => !p.top));
            for (let p of this.panels) {
                p.dom.classList.add("cm-panel");
                if (p.mount)
                    p.mount();
            }
        }
        update(update) {
            let conf = update.state.facet(panelConfig);
            if (this.top.container != conf.topContainer) {
                this.top.sync([]);
                this.top = new PanelGroup(update.view, true, conf.topContainer);
            }
            if (this.bottom.container != conf.bottomContainer) {
                this.bottom.sync([]);
                this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
            }
            this.top.syncClasses();
            this.bottom.syncClasses();
            let input = update.state.facet(showPanel);
            if (input != this.input) {
                let specs = input.filter(x => x);
                let panels = [], top = [], bottom = [], mount = [];
                for (let spec of specs) {
                    let known = this.specs.indexOf(spec), panel;
                    if (known < 0) {
                        panel = spec(update.view);
                        mount.push(panel);
                    }
                    else {
                        panel = this.panels[known];
                        if (panel.update)
                            panel.update(update);
                    }
                    panels.push(panel);
                    (panel.top ? top : bottom).push(panel);
                }
                this.specs = specs;
                this.panels = panels;
                this.top.sync(top);
                this.bottom.sync(bottom);
                for (let p of mount) {
                    p.dom.classList.add("cm-panel");
                    if (p.mount)
                        p.mount();
                }
            }
            else {
                for (let p of this.panels)
                    if (p.update)
                        p.update(update);
            }
        }
        destroy() {
            this.top.sync([]);
            this.bottom.sync([]);
        }
    }, {
        provide: plugin => EditorView.scrollMargins.of(view => {
            let value = view.plugin(plugin);
            return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
        })
    });
    class PanelGroup {
        constructor(view, top, container) {
            this.view = view;
            this.top = top;
            this.container = container;
            this.dom = undefined;
            this.classes = "";
            this.panels = [];
            this.syncClasses();
        }
        sync(panels) {
            for (let p of this.panels)
                if (p.destroy && panels.indexOf(p) < 0)
                    p.destroy();
            this.panels = panels;
            this.syncDOM();
        }
        syncDOM() {
            if (this.panels.length == 0) {
                if (this.dom) {
                    this.dom.remove();
                    this.dom = undefined;
                }
                return;
            }
            if (!this.dom) {
                this.dom = document.createElement("div");
                this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
                this.dom.style[this.top ? "top" : "bottom"] = "0";
                let parent = this.container || this.view.dom;
                parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
            }
            let curDOM = this.dom.firstChild;
            for (let panel of this.panels) {
                if (panel.dom.parentNode == this.dom) {
                    while (curDOM != panel.dom)
                        curDOM = rm(curDOM);
                    curDOM = curDOM.nextSibling;
                }
                else {
                    this.dom.insertBefore(panel.dom, curDOM);
                }
            }
            while (curDOM)
                curDOM = rm(curDOM);
        }
        scrollMargin() {
            return !this.dom || this.container ? 0
                : Math.max(0, this.top ?
                    this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) :
                    Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
        }
        syncClasses() {
            if (!this.container || this.classes == this.view.themeClasses)
                return;
            for (let cls of this.classes.split(" "))
                if (cls)
                    this.container.classList.remove(cls);
            for (let cls of (this.classes = this.view.themeClasses).split(" "))
                if (cls)
                    this.container.classList.add(cls);
        }
    }
    function rm(node) {
        let next = node.nextSibling;
        node.remove();
        return next;
    }
    /**
    Opening a panel is done by providing a constructor function for
    the panel through this facet. (The panel is closed again when its
    constructor is no longer provided.) Values of `null` are ignored.
    */
    const showPanel = /*@__PURE__*/Facet.define({
        enables: panelPlugin
    });

    /**
    A gutter marker represents a bit of information attached to a line
    in a specific gutter. Your own custom markers have to extend this
    class.
    */
    class GutterMarker extends RangeValue {
        /**
        @internal
        */
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        Compare this marker to another marker of the same type.
        */
        eq(other) { return false; }
        /**
        Called if the marker has a `toDOM` method and its representation
        was removed from a gutter.
        */
        destroy(dom) { }
    }
    GutterMarker.prototype.elementClass = "";
    GutterMarker.prototype.toDOM = undefined;
    GutterMarker.prototype.mapMode = MapMode.TrackBefore;
    GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
    GutterMarker.prototype.point = true;
    /**
    Facet used to add a class to all gutter elements for a given line.
    Markers given to this facet should _only_ define an
    [`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a
    [`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear
    in all gutters for the line).
    */
    const gutterLineClass = /*@__PURE__*/Facet.define();
    /**
    Facet used to add a class to all gutter elements next to a widget.
    Should not provide widgets with a `toDOM` method.
    */
    const gutterWidgetClass = /*@__PURE__*/Facet.define();
    const defaults$1 = {
        class: "",
        renderEmptyElements: false,
        elementStyle: "",
        markers: () => RangeSet.empty,
        lineMarker: () => null,
        widgetMarker: () => null,
        lineMarkerChange: null,
        initialSpacer: null,
        updateSpacer: null,
        domEventHandlers: {},
        side: "before"
    };
    const activeGutters = /*@__PURE__*/Facet.define();
    /**
    Define an editor gutter. The order in which the gutters appear is
    determined by their extension priority.
    */
    function gutter(config) {
        return [gutters(), activeGutters.of({ ...defaults$1, ...config })];
    }
    const unfixGutters = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    /**
    The gutter-drawing plugin is automatically enabled when you add a
    gutter, but you can use this function to explicitly configure it.

    Unless `fixed` is explicitly set to `false`, the gutters are
    fixed, meaning they don't scroll along with the content
    horizontally (except on Internet Explorer, which doesn't support
    CSS [`position:
    sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
    */
    function gutters(config) {
        let result = [
            gutterView,
        ];
        return result;
    }
    const gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.domAfter = null;
            this.prevViewport = view.viewport;
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutters cm-gutters-before";
            this.dom.setAttribute("aria-hidden", "true");
            this.dom.style.minHeight = (this.view.contentHeight / this.view.scaleY) + "px";
            this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));
            this.fixed = !view.state.facet(unfixGutters);
            for (let gutter of this.gutters) {
                if (gutter.config.side == "after")
                    this.getDOMAfter().appendChild(gutter.dom);
                else
                    this.dom.appendChild(gutter.dom);
            }
            if (this.fixed) {
                // FIXME IE11 fallback, which doesn't support position: sticky,
                // by using position: relative + event handlers that realign the
                // gutter (or just force fixed=false on IE11?)
                this.dom.style.position = "sticky";
            }
            this.syncGutters(false);
            view.scrollDOM.insertBefore(this.dom, view.contentDOM);
        }
        getDOMAfter() {
            if (!this.domAfter) {
                this.domAfter = document.createElement("div");
                this.domAfter.className = "cm-gutters cm-gutters-after";
                this.domAfter.setAttribute("aria-hidden", "true");
                this.domAfter.style.minHeight = (this.view.contentHeight / this.view.scaleY) + "px";
                this.domAfter.style.position = this.fixed ? "sticky" : "";
                this.view.scrollDOM.appendChild(this.domAfter);
            }
            return this.domAfter;
        }
        update(update) {
            if (this.updateGutters(update)) {
                // Detach during sync when the viewport changed significantly
                // (such as during scrolling), since for large updates that is
                // faster.
                let vpA = this.prevViewport, vpB = update.view.viewport;
                let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
                this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
            }
            if (update.geometryChanged) {
                let min = (this.view.contentHeight / this.view.scaleY) + "px";
                this.dom.style.minHeight = min;
                if (this.domAfter)
                    this.domAfter.style.minHeight = min;
            }
            if (this.view.state.facet(unfixGutters) != !this.fixed) {
                this.fixed = !this.fixed;
                this.dom.style.position = this.fixed ? "sticky" : "";
                if (this.domAfter)
                    this.domAfter.style.position = this.fixed ? "sticky" : "";
            }
            this.prevViewport = update.view.viewport;
        }
        syncGutters(detach) {
            let after = this.dom.nextSibling;
            if (detach) {
                this.dom.remove();
                if (this.domAfter)
                    this.domAfter.remove();
            }
            let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
            let classSet = [];
            let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));
            for (let line of this.view.viewportLineBlocks) {
                if (classSet.length)
                    classSet = [];
                if (Array.isArray(line.type)) {
                    let first = true;
                    for (let b of line.type) {
                        if (b.type == BlockType.Text && first) {
                            advanceCursor(lineClasses, classSet, b.from);
                            for (let cx of contexts)
                                cx.line(this.view, b, classSet);
                            first = false;
                        }
                        else if (b.widget) {
                            for (let cx of contexts)
                                cx.widget(this.view, b);
                        }
                    }
                }
                else if (line.type == BlockType.Text) {
                    advanceCursor(lineClasses, classSet, line.from);
                    for (let cx of contexts)
                        cx.line(this.view, line, classSet);
                }
                else if (line.widget) {
                    for (let cx of contexts)
                        cx.widget(this.view, line);
                }
            }
            for (let cx of contexts)
                cx.finish();
            if (detach) {
                this.view.scrollDOM.insertBefore(this.dom, after);
                if (this.domAfter)
                    this.view.scrollDOM.appendChild(this.domAfter);
            }
        }
        updateGutters(update) {
            let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);
            let change = update.docChanged || update.heightChanged || update.viewportChanged ||
                !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
            if (prev == cur) {
                for (let gutter of this.gutters)
                    if (gutter.update(update))
                        change = true;
            }
            else {
                change = true;
                let gutters = [];
                for (let conf of cur) {
                    let known = prev.indexOf(conf);
                    if (known < 0) {
                        gutters.push(new SingleGutterView(this.view, conf));
                    }
                    else {
                        this.gutters[known].update(update);
                        gutters.push(this.gutters[known]);
                    }
                }
                for (let g of this.gutters) {
                    g.dom.remove();
                    if (gutters.indexOf(g) < 0)
                        g.destroy();
                }
                for (let g of gutters) {
                    if (g.config.side == "after")
                        this.getDOMAfter().appendChild(g.dom);
                    else
                        this.dom.appendChild(g.dom);
                }
                this.gutters = gutters;
            }
            return change;
        }
        destroy() {
            for (let view of this.gutters)
                view.destroy();
            this.dom.remove();
            if (this.domAfter)
                this.domAfter.remove();
        }
    }, {
        provide: plugin => EditorView.scrollMargins.of(view => {
            let value = view.plugin(plugin);
            if (!value || value.gutters.length == 0 || !value.fixed)
                return null;
            let before = value.dom.offsetWidth * view.scaleX, after = value.domAfter ? value.domAfter.offsetWidth * view.scaleX : 0;
            return view.textDirection == Direction.LTR
                ? { left: before, right: after }
                : { right: before, left: after };
        })
    });
    function asArray(val) { return (Array.isArray(val) ? val : [val]); }
    function advanceCursor(cursor, collect, pos) {
        while (cursor.value && cursor.from <= pos) {
            if (cursor.from == pos)
                collect.push(cursor.value);
            cursor.next();
        }
    }
    class UpdateContext {
        constructor(gutter, viewport, height) {
            this.gutter = gutter;
            this.height = height;
            this.i = 0;
            this.cursor = RangeSet.iter(gutter.markers, viewport.from);
        }
        addElement(view, block, markers) {
            let { gutter } = this, above = (block.top - this.height) / view.scaleY, height = block.height / view.scaleY;
            if (this.i == gutter.elements.length) {
                let newElt = new GutterElement(view, height, above, markers);
                gutter.elements.push(newElt);
                gutter.dom.appendChild(newElt.dom);
            }
            else {
                gutter.elements[this.i].update(view, height, above, markers);
            }
            this.height = block.bottom;
            this.i++;
        }
        line(view, line, extraMarkers) {
            let localMarkers = [];
            advanceCursor(this.cursor, localMarkers, line.from);
            if (extraMarkers.length)
                localMarkers = localMarkers.concat(extraMarkers);
            let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
            if (forLine)
                localMarkers.unshift(forLine);
            let gutter = this.gutter;
            if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)
                return;
            this.addElement(view, line, localMarkers);
        }
        widget(view, block) {
            let marker = this.gutter.config.widgetMarker(view, block.widget, block), markers = marker ? [marker] : null;
            for (let cls of view.state.facet(gutterWidgetClass)) {
                let marker = cls(view, block.widget, block);
                if (marker)
                    (markers || (markers = [])).push(marker);
            }
            if (markers)
                this.addElement(view, block, markers);
        }
        finish() {
            let gutter = this.gutter;
            while (gutter.elements.length > this.i) {
                let last = gutter.elements.pop();
                gutter.dom.removeChild(last.dom);
                last.destroy();
            }
        }
    }
    class SingleGutterView {
        constructor(view, config) {
            this.view = view;
            this.config = config;
            this.elements = [];
            this.spacer = null;
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
            for (let prop in config.domEventHandlers) {
                this.dom.addEventListener(prop, (event) => {
                    let target = event.target, y;
                    if (target != this.dom && this.dom.contains(target)) {
                        while (target.parentNode != this.dom)
                            target = target.parentNode;
                        let rect = target.getBoundingClientRect();
                        y = (rect.top + rect.bottom) / 2;
                    }
                    else {
                        y = event.clientY;
                    }
                    let line = view.lineBlockAtHeight(y - view.documentTop);
                    if (config.domEventHandlers[prop](view, line, event))
                        event.preventDefault();
                });
            }
            this.markers = asArray(config.markers(view));
            if (config.initialSpacer) {
                this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
                this.dom.appendChild(this.spacer.dom);
                this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
            }
        }
        update(update) {
            let prevMarkers = this.markers;
            this.markers = asArray(this.config.markers(update.view));
            if (this.spacer && this.config.updateSpacer) {
                let updated = this.config.updateSpacer(this.spacer.markers[0], update);
                if (updated != this.spacer.markers[0])
                    this.spacer.update(update.view, 0, 0, [updated]);
            }
            let vp = update.view.viewport;
            return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) ||
                (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
        }
        destroy() {
            for (let elt of this.elements)
                elt.destroy();
        }
    }
    class GutterElement {
        constructor(view, height, above, markers) {
            this.height = -1;
            this.above = 0;
            this.markers = [];
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutterElement";
            this.update(view, height, above, markers);
        }
        update(view, height, above, markers) {
            if (this.height != height) {
                this.height = height;
                this.dom.style.height = height + "px";
            }
            if (this.above != above)
                this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
            if (!sameMarkers(this.markers, markers))
                this.setMarkers(view, markers);
        }
        setMarkers(view, markers) {
            let cls = "cm-gutterElement", domPos = this.dom.firstChild;
            for (let iNew = 0, iOld = 0;;) {
                let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
                if (marker) {
                    let c = marker.elementClass;
                    if (c)
                        cls += " " + c;
                    for (let i = iOld; i < this.markers.length; i++)
                        if (this.markers[i].compare(marker)) {
                            skipTo = i;
                            matched = true;
                            break;
                        }
                }
                else {
                    skipTo = this.markers.length;
                }
                while (iOld < skipTo) {
                    let next = this.markers[iOld++];
                    if (next.toDOM) {
                        next.destroy(domPos);
                        let after = domPos.nextSibling;
                        domPos.remove();
                        domPos = after;
                    }
                }
                if (!marker)
                    break;
                if (marker.toDOM) {
                    if (matched)
                        domPos = domPos.nextSibling;
                    else
                        this.dom.insertBefore(marker.toDOM(view), domPos);
                }
                if (matched)
                    iOld++;
            }
            this.dom.className = cls;
            this.markers = markers;
        }
        destroy() {
            this.setMarkers(null, []); // First argument not used unless creating markers
        }
    }
    function sameMarkers(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!a[i].compare(b[i]))
                return false;
        return true;
    }
    /**
    Facet used to provide markers to the line number gutter.
    */
    const lineNumberMarkers = /*@__PURE__*/Facet.define();
    /**
    Facet used to create markers in the line number gutter next to widgets.
    */
    const lineNumberWidgetMarker = /*@__PURE__*/Facet.define();
    const lineNumberConfig = /*@__PURE__*/Facet.define({
        combine(values) {
            return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
                domEventHandlers(a, b) {
                    let result = Object.assign({}, a);
                    for (let event in b) {
                        let exists = result[event], add = b[event];
                        result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
                    }
                    return result;
                }
            });
        }
    });
    class NumberMarker extends GutterMarker {
        constructor(number) {
            super();
            this.number = number;
        }
        eq(other) { return this.number == other.number; }
        toDOM() { return document.createTextNode(this.number); }
    }
    function formatNumber(view, number) {
        return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
    }
    const lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], state => ({
        class: "cm-lineNumbers",
        renderEmptyElements: false,
        markers(view) { return view.state.facet(lineNumberMarkers); },
        lineMarker(view, line, others) {
            if (others.some(m => m.toDOM))
                return null;
            return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
        },
        widgetMarker: (view, widget, block) => {
            for (let m of view.state.facet(lineNumberWidgetMarker)) {
                let result = m(view, widget, block);
                if (result)
                    return result;
            }
            return null;
        },
        lineMarkerChange: update => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
        initialSpacer(view) {
            return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
        },
        updateSpacer(spacer, update) {
            let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
            return max == spacer.number ? spacer : new NumberMarker(max);
        },
        domEventHandlers: state.facet(lineNumberConfig).domEventHandlers,
        side: "before"
    }));
    /**
    Create a line number gutter extension.
    */
    function lineNumbers(config = {}) {
        return [
            lineNumberConfig.of(config),
            gutters(),
            lineNumberGutter
        ];
    }
    function maxLineNumber(lines) {
        let last = 9;
        while (last < lines)
            last = last * 10 + 9;
        return last;
    }
    const activeLineGutterMarker = /*@__PURE__*/new class extends GutterMarker {
        constructor() {
            super(...arguments);
            this.elementClass = "cm-activeLineGutter";
        }
    };
    const activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute(["selection"], state => {
        let marks = [], last = -1;
        for (let range of state.selection.ranges) {
            let linePos = state.doc.lineAt(range.head).from;
            if (linePos > last) {
                last = linePos;
                marks.push(activeLineGutterMarker.range(linePos));
            }
        }
        return RangeSet.of(marks);
    });
    /**
    Returns an extension that adds a `cm-activeLineGutter` class to
    all gutter elements on the [active
    line](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).
    */
    function highlightActiveLineGutter() {
        return activeLineGutterHighlighter;
    }

    /**
    The default maximum length of a `TreeBuffer` node.
    */
    const DefaultBufferLength = 1024;
    let nextPropID = 0;
    class Range {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
    }
    /**
    Each [node type](#common.NodeType) or [individual tree](#common.Tree)
    can have metadata associated with it in props. Instances of this
    class represent prop names.
    */
    class NodeProp {
        /**
        Create a new node prop type.
        */
        constructor(config = {}) {
            this.id = nextPropID++;
            this.perNode = !!config.perNode;
            this.deserialize = config.deserialize || (() => {
                throw new Error("This node type doesn't define a deserialize function");
            });
        }
        /**
        This is meant to be used with
        [`NodeSet.extend`](#common.NodeSet.extend) or
        [`LRParser.configure`](#lr.ParserConfig.props) to compute
        prop values for each node type in the set. Takes a [match
        object](#common.NodeType^match) or function that returns undefined
        if the node type doesn't get this prop, and the prop's value if
        it does.
        */
        add(match) {
            if (this.perNode)
                throw new RangeError("Can't add per-node props to node types");
            if (typeof match != "function")
                match = NodeType.match(match);
            return (type) => {
                let result = match(type);
                return result === undefined ? null : [this, result];
            };
        }
    }
    /**
    Prop that is used to describe matching delimiters. For opening
    delimiters, this holds an array of node names (written as a
    space-separated string when declaring this prop in a grammar)
    for the node types of closing delimiters that match it.
    */
    NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
    /**
    The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
    attached to closing delimiters, holding an array of node names
    of types of matching opening delimiters.
    */
    NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
    /**
    Used to assign node types to groups (for example, all node
    types that represent an expression could be tagged with an
    `"Expression"` group).
    */
    NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
    /**
    Attached to nodes to indicate these should be
    [displayed](https://codemirror.net/docs/ref/#language.syntaxTree)
    in a bidirectional text isolate, so that direction-neutral
    characters on their sides don't incorrectly get associated with
    surrounding text. You'll generally want to set this for nodes
    that contain arbitrary text, like strings and comments, and for
    nodes that appear _inside_ arbitrary text, like HTML tags. When
    not given a value, in a grammar declaration, defaults to
    `"auto"`.
    */
    NodeProp.isolate = new NodeProp({ deserialize: value => {
            if (value && value != "rtl" && value != "ltr" && value != "auto")
                throw new RangeError("Invalid value for isolate: " + value);
            return value || "auto";
        } });
    /**
    The hash of the [context](#lr.ContextTracker.constructor)
    that the node was parsed in, if any. Used to limit reuse of
    contextual nodes.
    */
    NodeProp.contextHash = new NodeProp({ perNode: true });
    /**
    The distance beyond the end of the node that the tokenizer
    looked ahead for any of the tokens inside the node. (The LR
    parser only stores this when it is larger than 25, for
    efficiency reasons.)
    */
    NodeProp.lookAhead = new NodeProp({ perNode: true });
    /**
    This per-node prop is used to replace a given node, or part of a
    node, with another tree. This is useful to include trees from
    different languages in mixed-language parsers.
    */
    NodeProp.mounted = new NodeProp({ perNode: true });
    /**
    A mounted tree, which can be [stored](#common.NodeProp^mounted) on
    a tree node to indicate that parts of its content are
    represented by another tree.
    */
    class MountedTree {
        constructor(
        /**
        The inner tree.
        */
        tree, 
        /**
        If this is null, this tree replaces the entire node (it will
        be included in the regular iteration instead of its host
        node). If not, only the given ranges are considered to be
        covered by this tree. This is used for trees that are mixed in
        a way that isn't strictly hierarchical. Such mounted trees are
        only entered by [`resolveInner`](#common.Tree.resolveInner)
        and [`enter`](#common.SyntaxNode.enter).
        */
        overlay, 
        /**
        The parser used to create this subtree.
        */
        parser) {
            this.tree = tree;
            this.overlay = overlay;
            this.parser = parser;
        }
        /**
        @internal
        */
        static get(tree) {
            return tree && tree.props && tree.props[NodeProp.mounted.id];
        }
    }
    const noProps = Object.create(null);
    /**
    Each node in a syntax tree has a node type associated with it.
    */
    class NodeType {
        /**
        @internal
        */
        constructor(
        /**
        The name of the node type. Not necessarily unique, but if the
        grammar was written properly, different node types with the
        same name within a node set should play the same semantic
        role.
        */
        name, 
        /**
        @internal
        */
        props, 
        /**
        The id of this node in its set. Corresponds to the term ids
        used in the parser.
        */
        id, 
        /**
        @internal
        */
        flags = 0) {
            this.name = name;
            this.props = props;
            this.id = id;
            this.flags = flags;
        }
        /**
        Define a node type.
        */
        static define(spec) {
            let props = spec.props && spec.props.length ? Object.create(null) : noProps;
            let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |
                (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);
            let type = new NodeType(spec.name || "", props, spec.id, flags);
            if (spec.props)
                for (let src of spec.props) {
                    if (!Array.isArray(src))
                        src = src(type);
                    if (src) {
                        if (src[0].perNode)
                            throw new RangeError("Can't store a per-node prop on a node type");
                        props[src[0].id] = src[1];
                    }
                }
            return type;
        }
        /**
        Retrieves a node prop for this type. Will return `undefined` if
        the prop isn't present on this node.
        */
        prop(prop) { return this.props[prop.id]; }
        /**
        True when this is the top node of a grammar.
        */
        get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }
        /**
        True when this node is produced by a skip rule.
        */
        get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }
        /**
        Indicates whether this is an error node.
        */
        get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }
        /**
        When true, this node type doesn't correspond to a user-declared
        named node, for example because it is used to cache repetition.
        */
        get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }
        /**
        Returns true when this node's name or one of its
        [groups](#common.NodeProp^group) matches the given string.
        */
        is(name) {
            if (typeof name == 'string') {
                if (this.name == name)
                    return true;
                let group = this.prop(NodeProp.group);
                return group ? group.indexOf(name) > -1 : false;
            }
            return this.id == name;
        }
        /**
        Create a function from node types to arbitrary values by
        specifying an object whose property names are node or
        [group](#common.NodeProp^group) names. Often useful with
        [`NodeProp.add`](#common.NodeProp.add). You can put multiple
        names, separated by spaces, in a single property name to map
        multiple node names to a single value.
        */
        static match(map) {
            let direct = Object.create(null);
            for (let prop in map)
                for (let name of prop.split(" "))
                    direct[name] = map[prop];
            return (node) => {
                for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
                    let found = direct[i < 0 ? node.name : groups[i]];
                    if (found)
                        return found;
                }
            };
        }
    }
    /**
    An empty dummy node type to use when no actual type is available.
    */
    NodeType.none = new NodeType("", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);
    /**
    A node set holds a collection of node types. It is used to
    compactly represent trees by storing their type ids, rather than a
    full pointer to the type object, in a numeric array. Each parser
    [has](#lr.LRParser.nodeSet) a node set, and [tree
    buffers](#common.TreeBuffer) can only store collections of nodes
    from the same set. A set can have a maximum of 2**16 (65536) node
    types in it, so that the ids fit into 16-bit typed array slots.
    */
    class NodeSet {
        /**
        Create a set with the given types. The `id` property of each
        type should correspond to its position within the array.
        */
        constructor(
        /**
        The node types in this set, by id.
        */
        types) {
            this.types = types;
            for (let i = 0; i < types.length; i++)
                if (types[i].id != i)
                    throw new RangeError("Node type ids should correspond to array positions when creating a node set");
        }
        /**
        Create a copy of this set with some node properties added. The
        arguments to this method can be created with
        [`NodeProp.add`](#common.NodeProp.add).
        */
        extend(...props) {
            let newTypes = [];
            for (let type of this.types) {
                let newProps = null;
                for (let source of props) {
                    let add = source(type);
                    if (add) {
                        if (!newProps)
                            newProps = Object.assign({}, type.props);
                        newProps[add[0].id] = add[1];
                    }
                }
                newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
            }
            return new NodeSet(newTypes);
        }
    }
    const CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();
    /**
    Options that control iteration. Can be combined with the `|`
    operator to enable multiple ones.
    */
    var IterMode;
    (function (IterMode) {
        /**
        When enabled, iteration will only visit [`Tree`](#common.Tree)
        objects, not nodes packed into
        [`TreeBuffer`](#common.TreeBuffer)s.
        */
        IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
        /**
        Enable this to make iteration include anonymous nodes (such as
        the nodes that wrap repeated grammar constructs into a balanced
        tree).
        */
        IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
        /**
        By default, regular [mounted](#common.NodeProp^mounted) nodes
        replace their base node in iteration. Enable this to ignore them
        instead.
        */
        IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
        /**
        This option only applies in
        [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
        library to not enter mounted overlays if one covers the given
        position.
        */
        IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
    })(IterMode || (IterMode = {}));
    /**
    A piece of syntax tree. There are two ways to approach these
    trees: the way they are actually stored in memory, and the
    convenient way.

    Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
    objects. By packing detail information into `TreeBuffer` leaf
    nodes, the representation is made a lot more memory-efficient.

    However, when you want to actually work with tree nodes, this
    representation is very awkward, so most client code will want to
    use the [`TreeCursor`](#common.TreeCursor) or
    [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
    a view on some part of this data structure, and can be used to
    move around to adjacent nodes.
    */
    class Tree {
        /**
        Construct a new tree. See also [`Tree.build`](#common.Tree^build).
        */
        constructor(
        /**
        The type of the top node.
        */
        type, 
        /**
        This node's child nodes.
        */
        children, 
        /**
        The positions (offsets relative to the start of this tree) of
        the children.
        */
        positions, 
        /**
        The total length of this tree
        */
        length, 
        /**
        Per-node [node props](#common.NodeProp) to associate with this node.
        */
        props) {
            this.type = type;
            this.children = children;
            this.positions = positions;
            this.length = length;
            /**
            @internal
            */
            this.props = null;
            if (props && props.length) {
                this.props = Object.create(null);
                for (let [prop, value] of props)
                    this.props[typeof prop == "number" ? prop : prop.id] = value;
            }
        }
        /**
        @internal
        */
        toString() {
            let mounted = MountedTree.get(this);
            if (mounted && !mounted.overlay)
                return mounted.tree.toString();
            let children = "";
            for (let ch of this.children) {
                let str = ch.toString();
                if (str) {
                    if (children)
                        children += ",";
                    children += str;
                }
            }
            return !this.type.name ? children :
                (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                    (children.length ? "(" + children + ")" : "");
        }
        /**
        Get a [tree cursor](#common.TreeCursor) positioned at the top of
        the tree. Mode can be used to [control](#common.IterMode) which
        nodes the cursor visits.
        */
        cursor(mode = 0) {
            return new TreeCursor(this.topNode, mode);
        }
        /**
        Get a [tree cursor](#common.TreeCursor) pointing into this tree
        at the given position and side (see
        [`moveTo`](#common.TreeCursor.moveTo).
        */
        cursorAt(pos, side = 0, mode = 0) {
            let scope = CachedNode.get(this) || this.topNode;
            let cursor = new TreeCursor(scope);
            cursor.moveTo(pos, side);
            CachedNode.set(this, cursor._tree);
            return cursor;
        }
        /**
        Get a [syntax node](#common.SyntaxNode) object for the top of the
        tree.
        */
        get topNode() {
            return new TreeNode(this, 0, 0, null);
        }
        /**
        Get the [syntax node](#common.SyntaxNode) at the given position.
        If `side` is -1, this will move into nodes that end at the
        position. If 1, it'll move into nodes that start at the
        position. With 0, it'll only enter nodes that cover the position
        from both sides.
        
        Note that this will not enter
        [overlays](#common.MountedTree.overlay), and you often want
        [`resolveInner`](#common.Tree.resolveInner) instead.
        */
        resolve(pos, side = 0) {
            let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
            CachedNode.set(this, node);
            return node;
        }
        /**
        Like [`resolve`](#common.Tree.resolve), but will enter
        [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
        pointing into the innermost overlaid tree at the given position
        (with parent links going through all parent structure, including
        the host trees).
        */
        resolveInner(pos, side = 0) {
            let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
            CachedInnerNode.set(this, node);
            return node;
        }
        /**
        In some situations, it can be useful to iterate through all
        nodes around a position, including those in overlays that don't
        directly cover the position. This method gives you an iterator
        that will produce all nodes, from small to big, around the given
        position.
        */
        resolveStack(pos, side = 0) {
            return stackIterator(this, pos, side);
        }
        /**
        Iterate over the tree and its children, calling `enter` for any
        node that touches the `from`/`to` region (if given) before
        running over such a node's children, and `leave` (if given) when
        leaving the node. When `enter` returns `false`, that node will
        not have its children iterated over (or `leave` called).
        */
        iterate(spec) {
            let { enter, leave, from = 0, to = this.length } = spec;
            let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
            for (let c = this.cursor(mode | IterMode.IncludeAnonymous);;) {
                let entered = false;
                if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {
                    if (c.firstChild())
                        continue;
                    entered = true;
                }
                for (;;) {
                    if (entered && leave && (anon || !c.type.isAnonymous))
                        leave(c);
                    if (c.nextSibling())
                        break;
                    if (!c.parent())
                        return;
                    entered = true;
                }
            }
        }
        /**
        Get the value of the given [node prop](#common.NodeProp) for this
        node. Works with both per-node and per-type props.
        */
        prop(prop) {
            return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
        }
        /**
        Returns the node's [per-node props](#common.NodeProp.perNode) in a
        format that can be passed to the [`Tree`](#common.Tree)
        constructor.
        */
        get propValues() {
            let result = [];
            if (this.props)
                for (let id in this.props)
                    result.push([+id, this.props[id]]);
            return result;
        }
        /**
        Balance the direct children of this tree, producing a copy of
        which may have children grouped into subtrees with type
        [`NodeType.none`](#common.NodeType^none).
        */
        balance(config = {}) {
            return this.children.length <= 8 /* Balance.BranchFactor */ ? this :
                balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
        }
        /**
        Build a tree from a postfix-ordered buffer of node information,
        or a cursor over such a buffer.
        */
        static build(data) { return buildTree(data); }
    }
    /**
    The empty tree
    */
    Tree.empty = new Tree(NodeType.none, [], [], 0);
    class FlatBufferCursor {
        constructor(buffer, index) {
            this.buffer = buffer;
            this.index = index;
        }
        get id() { return this.buffer[this.index - 4]; }
        get start() { return this.buffer[this.index - 3]; }
        get end() { return this.buffer[this.index - 2]; }
        get size() { return this.buffer[this.index - 1]; }
        get pos() { return this.index; }
        next() { this.index -= 4; }
        fork() { return new FlatBufferCursor(this.buffer, this.index); }
    }
    /**
    Tree buffers contain (type, start, end, endIndex) quads for each
    node. In such a buffer, nodes are stored in prefix order (parents
    before children, with the endIndex of the parent indicating which
    children belong to it).
    */
    class TreeBuffer {
        /**
        Create a tree buffer.
        */
        constructor(
        /**
        The buffer's content.
        */
        buffer, 
        /**
        The total length of the group of nodes in the buffer.
        */
        length, 
        /**
        The node set used in this buffer.
        */
        set) {
            this.buffer = buffer;
            this.length = length;
            this.set = set;
        }
        /**
        @internal
        */
        get type() { return NodeType.none; }
        /**
        @internal
        */
        toString() {
            let result = [];
            for (let index = 0; index < this.buffer.length;) {
                result.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result.join(",");
        }
        /**
        @internal
        */
        childString(index) {
            let id = this.buffer[index], endIndex = this.buffer[index + 3];
            let type = this.set.types[id], result = type.name;
            if (/\W/.test(result) && !type.isError)
                result = JSON.stringify(result);
            index += 4;
            if (endIndex == index)
                return result;
            let children = [];
            while (index < endIndex) {
                children.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result + "(" + children.join(",") + ")";
        }
        /**
        @internal
        */
        findChild(startIndex, endIndex, dir, pos, side) {
            let { buffer } = this, pick = -1;
            for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
                if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
                    pick = i;
                    if (dir > 0)
                        break;
                }
            }
            return pick;
        }
        /**
        @internal
        */
        slice(startI, endI, from) {
            let b = this.buffer;
            let copy = new Uint16Array(endI - startI), len = 0;
            for (let i = startI, j = 0; i < endI;) {
                copy[j++] = b[i++];
                copy[j++] = b[i++] - from;
                let to = copy[j++] = b[i++] - from;
                copy[j++] = b[i++] - startI;
                len = Math.max(len, to);
            }
            return new TreeBuffer(copy, len, this.set);
        }
    }
    function checkSide(side, pos, from, to) {
        switch (side) {
            case -2 /* Side.Before */: return from < pos;
            case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;
            case 0 /* Side.Around */: return from < pos && to > pos;
            case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;
            case 2 /* Side.After */: return to > pos;
            case 4 /* Side.DontCare */: return true;
        }
    }
    function resolveNode(node, pos, side, overlays) {
        var _a;
        // Move up to a node that actually holds the position, if possible
        while (node.from == node.to ||
            (side < 1 ? node.from >= pos : node.from > pos) ||
            (side > -1 ? node.to <= pos : node.to < pos)) {
            let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
            if (!parent)
                return node;
            node = parent;
        }
        let mode = overlays ? 0 : IterMode.IgnoreOverlays;
        // Must go up out of overlays when those do not overlap with pos
        if (overlays)
            for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
                if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)
                    node = parent;
            }
        for (;;) {
            let inner = node.enter(pos, side, mode);
            if (!inner)
                return node;
            node = inner;
        }
    }
    class BaseNode {
        cursor(mode = 0) { return new TreeCursor(this, mode); }
        getChild(type, before = null, after = null) {
            let r = getChildren(this, type, before, after);
            return r.length ? r[0] : null;
        }
        getChildren(type, before = null, after = null) {
            return getChildren(this, type, before, after);
        }
        resolve(pos, side = 0) {
            return resolveNode(this, pos, side, false);
        }
        resolveInner(pos, side = 0) {
            return resolveNode(this, pos, side, true);
        }
        matchContext(context) {
            return matchNodeContext(this.parent, context);
        }
        enterUnfinishedNodesBefore(pos) {
            let scan = this.childBefore(pos), node = this;
            while (scan) {
                let last = scan.lastChild;
                if (!last || last.to != scan.to)
                    break;
                if (last.type.isError && last.from == last.to) {
                    node = scan;
                    scan = last.prevSibling;
                }
                else {
                    scan = last;
                }
            }
            return node;
        }
        get node() { return this; }
        get next() { return this.parent; }
    }
    class TreeNode extends BaseNode {
        constructor(_tree, from, 
        // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
        index, _parent) {
            super();
            this._tree = _tree;
            this.from = from;
            this.index = index;
            this._parent = _parent;
        }
        get type() { return this._tree.type; }
        get name() { return this._tree.type.name; }
        get to() { return this.from + this._tree.length; }
        nextChild(i, dir, pos, side, mode = 0) {
            for (let parent = this;;) {
                for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                    let next = children[i], start = positions[i] + parent.from;
                    if (!checkSide(side, pos, start, start + next.length))
                        continue;
                    if (next instanceof TreeBuffer) {
                        if (mode & IterMode.ExcludeBuffers)
                            continue;
                        let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
                        if (index > -1)
                            return new BufferNode(new BufferContext(parent, next, i, start), null, index);
                    }
                    else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {
                        let mounted;
                        if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)
                            return new TreeNode(mounted.tree, start, i, parent);
                        let inner = new TreeNode(next, start, i, parent);
                        return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner
                            : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
                    }
                }
                if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)
                    return null;
                if (parent.index >= 0)
                    i = parent.index + dir;
                else
                    i = dir < 0 ? -1 : parent._parent._tree.children.length;
                parent = parent._parent;
                if (!parent)
                    return null;
            }
        }
        get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }
        get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }
        childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }
        childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }
        enter(pos, side, mode = 0) {
            let mounted;
            if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
                let rPos = pos - this.from;
                for (let { from, to } of mounted.overlay) {
                    if ((side > 0 ? from <= rPos : from < rPos) &&
                        (side < 0 ? to >= rPos : to > rPos))
                        return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
                }
            }
            return this.nextChild(0, 1, pos, side, mode);
        }
        nextSignificantParent() {
            let val = this;
            while (val.type.isAnonymous && val._parent)
                val = val._parent;
            return val;
        }
        get parent() {
            return this._parent ? this._parent.nextSignificantParent() : null;
        }
        get nextSibling() {
            return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;
        }
        get prevSibling() {
            return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;
        }
        get tree() { return this._tree; }
        toTree() { return this._tree; }
        /**
        @internal
        */
        toString() { return this._tree.toString(); }
    }
    function getChildren(node, type, before, after) {
        let cur = node.cursor(), result = [];
        if (!cur.firstChild())
            return result;
        if (before != null)
            for (let found = false; !found;) {
                found = cur.type.is(before);
                if (!cur.nextSibling())
                    return result;
            }
        for (;;) {
            if (after != null && cur.type.is(after))
                return result;
            if (cur.type.is(type))
                result.push(cur.node);
            if (!cur.nextSibling())
                return after == null ? result : [];
        }
    }
    function matchNodeContext(node, context, i = context.length - 1) {
        for (let p = node; i >= 0; p = p.parent) {
            if (!p)
                return false;
            if (!p.type.isAnonymous) {
                if (context[i] && context[i] != p.name)
                    return false;
                i--;
            }
        }
        return true;
    }
    class BufferContext {
        constructor(parent, buffer, index, start) {
            this.parent = parent;
            this.buffer = buffer;
            this.index = index;
            this.start = start;
        }
    }
    class BufferNode extends BaseNode {
        get name() { return this.type.name; }
        get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
        get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
        constructor(context, _parent, index) {
            super();
            this.context = context;
            this._parent = _parent;
            this.index = index;
            this.type = context.buffer.set.types[context.buffer.buffer[index]];
        }
        child(dir, pos, side) {
            let { buffer } = this.context;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
            return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }
        get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }
        childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }
        childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }
        enter(pos, side, mode = 0) {
            if (mode & IterMode.ExcludeBuffers)
                return null;
            let { buffer } = this.context;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
            return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get parent() {
            return this._parent || this.context.parent.nextSignificantParent();
        }
        externalSibling(dir) {
            return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);
        }
        get nextSibling() {
            let { buffer } = this.context;
            let after = buffer.buffer[this.index + 3];
            if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
                return new BufferNode(this.context, this._parent, after);
            return this.externalSibling(1);
        }
        get prevSibling() {
            let { buffer } = this.context;
            let parentStart = this._parent ? this._parent.index + 4 : 0;
            if (this.index == parentStart)
                return this.externalSibling(-1);
            return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
        }
        get tree() { return null; }
        toTree() {
            let children = [], positions = [];
            let { buffer } = this.context;
            let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
            if (endI > startI) {
                let from = buffer.buffer[this.index + 1];
                children.push(buffer.slice(startI, endI, from));
                positions.push(0);
            }
            return new Tree(this.type, children, positions, this.to - this.from);
        }
        /**
        @internal
        */
        toString() { return this.context.buffer.childString(this.index); }
    }
    function iterStack(heads) {
        if (!heads.length)
            return null;
        let pick = 0, picked = heads[0];
        for (let i = 1; i < heads.length; i++) {
            let node = heads[i];
            if (node.from > picked.from || node.to < picked.to) {
                picked = node;
                pick = i;
            }
        }
        let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
        let newHeads = heads.slice();
        if (next)
            newHeads[pick] = next;
        else
            newHeads.splice(pick, 1);
        return new StackIterator(newHeads, picked);
    }
    class StackIterator {
        constructor(heads, node) {
            this.heads = heads;
            this.node = node;
        }
        get next() { return iterStack(this.heads); }
    }
    function stackIterator(tree, pos, side) {
        let inner = tree.resolveInner(pos, side), layers = null;
        for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
            if (scan.index < 0) { // This is an overlay root
                let parent = scan.parent;
                (layers || (layers = [inner])).push(parent.resolve(pos, side));
                scan = parent;
            }
            else {
                let mount = MountedTree.get(scan.tree);
                // Relevant overlay branching off
                if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {
                    let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
                    (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));
                }
            }
        }
        return layers ? iterStack(layers) : inner;
    }
    /**
    A tree cursor object focuses on a given node in a syntax tree, and
    allows you to move to adjacent nodes.
    */
    class TreeCursor {
        /**
        Shorthand for `.type.name`.
        */
        get name() { return this.type.name; }
        /**
        @internal
        */
        constructor(node, 
        /**
        @internal
        */
        mode = 0) {
            this.mode = mode;
            /**
            @internal
            */
            this.buffer = null;
            this.stack = [];
            /**
            @internal
            */
            this.index = 0;
            this.bufferNode = null;
            if (node instanceof TreeNode) {
                this.yieldNode(node);
            }
            else {
                this._tree = node.context.parent;
                this.buffer = node.context;
                for (let n = node._parent; n; n = n._parent)
                    this.stack.unshift(n.index);
                this.bufferNode = node;
                this.yieldBuf(node.index);
            }
        }
        yieldNode(node) {
            if (!node)
                return false;
            this._tree = node;
            this.type = node.type;
            this.from = node.from;
            this.to = node.to;
            return true;
        }
        yieldBuf(index, type) {
            this.index = index;
            let { start, buffer } = this.buffer;
            this.type = type || buffer.set.types[buffer.buffer[index]];
            this.from = start + buffer.buffer[index + 1];
            this.to = start + buffer.buffer[index + 2];
            return true;
        }
        /**
        @internal
        */
        yield(node) {
            if (!node)
                return false;
            if (node instanceof TreeNode) {
                this.buffer = null;
                return this.yieldNode(node);
            }
            this.buffer = node.context;
            return this.yieldBuf(node.index, node.type);
        }
        /**
        @internal
        */
        toString() {
            return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
        }
        /**
        @internal
        */
        enterChild(dir, pos, side) {
            if (!this.buffer)
                return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
            let { buffer } = this.buffer;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
            if (index < 0)
                return false;
            this.stack.push(this.index);
            return this.yieldBuf(index);
        }
        /**
        Move the cursor to this node's first child. When this returns
        false, the node has no child, and the cursor has not been moved.
        */
        firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }
        /**
        Move the cursor to this node's last child.
        */
        lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }
        /**
        Move the cursor to the first child that ends after `pos`.
        */
        childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }
        /**
        Move to the last child that starts before `pos`.
        */
        childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }
        /**
        Move the cursor to the child around `pos`. If side is -1 the
        child may end at that position, when 1 it may start there. This
        will also enter [overlaid](#common.MountedTree.overlay)
        [mounted](#common.NodeProp^mounted) trees unless `overlays` is
        set to false.
        */
        enter(pos, side, mode = this.mode) {
            if (!this.buffer)
                return this.yield(this._tree.enter(pos, side, mode));
            return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
        }
        /**
        Move to the node's parent node, if this isn't the top node.
        */
        parent() {
            if (!this.buffer)
                return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);
            if (this.stack.length)
                return this.yieldBuf(this.stack.pop());
            let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
            this.buffer = null;
            return this.yieldNode(parent);
        }
        /**
        @internal
        */
        sibling(dir) {
            if (!this.buffer)
                return !this._tree._parent ? false
                    : this.yield(this._tree.index < 0 ? null
                        : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));
            let { buffer } = this.buffer, d = this.stack.length - 1;
            if (dir < 0) {
                let parentStart = d < 0 ? 0 : this.stack[d] + 4;
                if (this.index != parentStart)
                    return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
            }
            else {
                let after = buffer.buffer[this.index + 3];
                if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                    return this.yieldBuf(after);
            }
            return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;
        }
        /**
        Move to this node's next sibling, if any.
        */
        nextSibling() { return this.sibling(1); }
        /**
        Move to this node's previous sibling, if any.
        */
        prevSibling() { return this.sibling(-1); }
        atLastNode(dir) {
            let index, parent, { buffer } = this;
            if (buffer) {
                if (dir > 0) {
                    if (this.index < buffer.buffer.buffer.length)
                        return false;
                }
                else {
                    for (let i = 0; i < this.index; i++)
                        if (buffer.buffer.buffer[i + 3] < this.index)
                            return false;
                }
                ({ index, parent } = buffer);
            }
            else {
                ({ index, _parent: parent } = this._tree);
            }
            for (; parent; { index, _parent: parent } = parent) {
                if (index > -1)
                    for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
                        let child = parent._tree.children[i];
                        if ((this.mode & IterMode.IncludeAnonymous) ||
                            child instanceof TreeBuffer ||
                            !child.type.isAnonymous ||
                            hasChild(child))
                            return false;
                    }
            }
            return true;
        }
        move(dir, enter) {
            if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))
                return true;
            for (;;) {
                if (this.sibling(dir))
                    return true;
                if (this.atLastNode(dir) || !this.parent())
                    return false;
            }
        }
        /**
        Move to the next node in a
        [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
        traversal, going from a node to its first child or, if the
        current node is empty or `enter` is false, its next sibling or
        the next sibling of the first parent node that has one.
        */
        next(enter = true) { return this.move(1, enter); }
        /**
        Move to the next node in a last-to-first pre-order traversal. A
        node is followed by its last child or, if it has none, its
        previous sibling or the previous sibling of the first parent
        node that has one.
        */
        prev(enter = true) { return this.move(-1, enter); }
        /**
        Move the cursor to the innermost node that covers `pos`. If
        `side` is -1, it will enter nodes that end at `pos`. If it is 1,
        it will enter nodes that start at `pos`.
        */
        moveTo(pos, side = 0) {
            // Move up to a node that actually holds the position, if possible
            while (this.from == this.to ||
                (side < 1 ? this.from >= pos : this.from > pos) ||
                (side > -1 ? this.to <= pos : this.to < pos))
                if (!this.parent())
                    break;
            // Then scan down into child nodes as far as possible
            while (this.enterChild(1, pos, side)) { }
            return this;
        }
        /**
        Get a [syntax node](#common.SyntaxNode) at the cursor's current
        position.
        */
        get node() {
            if (!this.buffer)
                return this._tree;
            let cache = this.bufferNode, result = null, depth = 0;
            if (cache && cache.context == this.buffer) {
                scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
                    for (let c = cache; c; c = c._parent)
                        if (c.index == index) {
                            if (index == this.index)
                                return c;
                            result = c;
                            depth = d + 1;
                            break scan;
                        }
                    index = this.stack[--d];
                }
            }
            for (let i = depth; i < this.stack.length; i++)
                result = new BufferNode(this.buffer, result, this.stack[i]);
            return this.bufferNode = new BufferNode(this.buffer, result, this.index);
        }
        /**
        Get the [tree](#common.Tree) that represents the current node, if
        any. Will return null when the node is in a [tree
        buffer](#common.TreeBuffer).
        */
        get tree() {
            return this.buffer ? null : this._tree._tree;
        }
        /**
        Iterate over the current node and all its descendants, calling
        `enter` when entering a node and `leave`, if given, when leaving
        one. When `enter` returns `false`, any children of that node are
        skipped, and `leave` isn't called for it.
        */
        iterate(enter, leave) {
            for (let depth = 0;;) {
                let mustLeave = false;
                if (this.type.isAnonymous || enter(this) !== false) {
                    if (this.firstChild()) {
                        depth++;
                        continue;
                    }
                    if (!this.type.isAnonymous)
                        mustLeave = true;
                }
                for (;;) {
                    if (mustLeave && leave)
                        leave(this);
                    mustLeave = this.type.isAnonymous;
                    if (!depth)
                        return;
                    if (this.nextSibling())
                        break;
                    this.parent();
                    depth--;
                    mustLeave = true;
                }
            }
        }
        /**
        Test whether the current node matches a given context—a sequence
        of direct parent node names. Empty strings in the context array
        are treated as wildcards.
        */
        matchContext(context) {
            if (!this.buffer)
                return matchNodeContext(this.node.parent, context);
            let { buffer } = this.buffer, { types } = buffer.set;
            for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
                if (d < 0)
                    return matchNodeContext(this._tree, context, i);
                let type = types[buffer.buffer[this.stack[d]]];
                if (!type.isAnonymous) {
                    if (context[i] && context[i] != type.name)
                        return false;
                    i--;
                }
            }
            return true;
        }
    }
    function hasChild(tree) {
        return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
    }
    function buildTree(data) {
        var _a;
        let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
        let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
        let types = nodeSet.types;
        let contextHash = 0, lookAhead = 0;
        function takeNode(parentStart, minPos, children, positions, inRepeat, depth) {
            let { id, start, end, size } = cursor;
            let lookAheadAtStart = lookAhead, contextAtStart = contextHash;
            while (size < 0) {
                cursor.next();
                if (size == -1 /* SpecialRecord.Reuse */) {
                    let node = reused[id];
                    children.push(node);
                    positions.push(start - parentStart);
                    return;
                }
                else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change
                    contextHash = id;
                    return;
                }
                else if (size == -4 /* SpecialRecord.LookAhead */) {
                    lookAhead = id;
                    return;
                }
                else {
                    throw new RangeError(`Unrecognized record size: ${size}`);
                }
            }
            let type = types[id], node, buffer;
            let startPos = start - parentStart;
            if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
                // Small enough for a buffer, and no reused nodes inside
                let data = new Uint16Array(buffer.size - buffer.skip);
                let endPos = cursor.pos - buffer.size, index = data.length;
                while (cursor.pos > endPos)
                    index = copyToBuffer(buffer.start, data, index);
                node = new TreeBuffer(data, end - buffer.start, nodeSet);
                startPos = buffer.start - parentStart;
            }
            else { // Make it a node
                let endPos = cursor.pos - size;
                cursor.next();
                let localChildren = [], localPositions = [];
                let localInRepeat = id >= minRepeatType ? id : -1;
                let lastGroup = 0, lastEnd = end;
                while (cursor.pos > endPos) {
                    if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
                        if (cursor.end <= lastEnd - maxBufferLength) {
                            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
                            lastGroup = localChildren.length;
                            lastEnd = cursor.end;
                        }
                        cursor.next();
                    }
                    else if (depth > 2500 /* CutOff.Depth */) {
                        takeFlatNode(start, endPos, localChildren, localPositions);
                    }
                    else {
                        takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth + 1);
                    }
                }
                if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
                    makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
                localChildren.reverse();
                localPositions.reverse();
                if (localInRepeat > -1 && lastGroup > 0) {
                    let make = makeBalanced(type, contextAtStart);
                    node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
                }
                else {
                    node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end, contextAtStart);
                }
            }
            children.push(node);
            positions.push(startPos);
        }
        function takeFlatNode(parentStart, minPos, children, positions) {
            let nodes = []; // Temporary, inverted array of leaf nodes found, with absolute positions
            let nodeCount = 0, stopAt = -1;
            while (cursor.pos > minPos) {
                let { id, start, end, size } = cursor;
                if (size > 4) { // Not a leaf
                    cursor.next();
                }
                else if (stopAt > -1 && start < stopAt) {
                    break;
                }
                else {
                    if (stopAt < 0)
                        stopAt = end - maxBufferLength;
                    nodes.push(id, start, end);
                    nodeCount++;
                    cursor.next();
                }
            }
            if (nodeCount) {
                let buffer = new Uint16Array(nodeCount * 4);
                let start = nodes[nodes.length - 2];
                for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {
                    buffer[j++] = nodes[i];
                    buffer[j++] = nodes[i + 1] - start;
                    buffer[j++] = nodes[i + 2] - start;
                    buffer[j++] = j;
                }
                children.push(new TreeBuffer(buffer, nodes[2] - start, nodeSet));
                positions.push(start - parentStart);
            }
        }
        function makeBalanced(type, contextHash) {
            return (children, positions, length) => {
                let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;
                if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
                    if (!lastI && last.type == type && last.length == length)
                        return last;
                    if (lookAheadProp = last.prop(NodeProp.lookAhead))
                        lookAhead = positions[lastI] + last.length + lookAheadProp;
                }
                return makeTree(type, children, positions, length, lookAhead, contextHash);
            };
        }
        function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead, contextHash) {
            let localChildren = [], localPositions = [];
            while (children.length > i) {
                localChildren.push(children.pop());
                localPositions.push(positions.pop() + base - from);
            }
            children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to, contextHash));
            positions.push(from - base);
        }
        function makeTree(type, children, positions, length, lookAhead, contextHash, props) {
            if (contextHash) {
                let pair = [NodeProp.contextHash, contextHash];
                props = props ? [pair].concat(props) : [pair];
            }
            if (lookAhead > 25) {
                let pair = [NodeProp.lookAhead, lookAhead];
                props = props ? [pair].concat(props) : [pair];
            }
            return new Tree(type, children, positions, length, props);
        }
        function findBufferSize(maxSize, inRepeat) {
            // Scan through the buffer to find previous siblings that fit
            // together in a TreeBuffer, and don't contain any reused nodes
            // (which can't be stored in a buffer).
            // If `inRepeat` is > -1, ignore node boundaries of that type for
            // nesting, but make sure the end falls either at the start
            // (`maxSize`) or before such a node.
            let fork = cursor.fork();
            let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
            let result = { size: 0, start: 0, skip: 0 };
            scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
                let nodeSize = fork.size;
                // Pretend nested repeat nodes of the same type don't exist
                if (fork.id == inRepeat && nodeSize >= 0) {
                    // Except that we store the current state as a valid return
                    // value.
                    result.size = size;
                    result.start = start;
                    result.skip = skip;
                    skip += 4;
                    size += 4;
                    fork.next();
                    continue;
                }
                let startPos = fork.pos - nodeSize;
                if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                    break;
                let localSkipped = fork.id >= minRepeatType ? 4 : 0;
                let nodeStart = fork.start;
                fork.next();
                while (fork.pos > startPos) {
                    if (fork.size < 0) {
                        if (fork.size == -3 /* SpecialRecord.ContextChange */)
                            localSkipped += 4;
                        else
                            break scan;
                    }
                    else if (fork.id >= minRepeatType) {
                        localSkipped += 4;
                    }
                    fork.next();
                }
                start = nodeStart;
                size += nodeSize;
                skip += localSkipped;
            }
            if (inRepeat < 0 || size == maxSize) {
                result.size = size;
                result.start = start;
                result.skip = skip;
            }
            return result.size > 4 ? result : undefined;
        }
        function copyToBuffer(bufferStart, buffer, index) {
            let { id, start, end, size } = cursor;
            cursor.next();
            if (size >= 0 && id < minRepeatType) {
                let startIndex = index;
                if (size > 4) {
                    let endPos = cursor.pos - (size - 4);
                    while (cursor.pos > endPos)
                        index = copyToBuffer(bufferStart, buffer, index);
                }
                buffer[--index] = startIndex;
                buffer[--index] = end - bufferStart;
                buffer[--index] = start - bufferStart;
                buffer[--index] = id;
            }
            else if (size == -3 /* SpecialRecord.ContextChange */) {
                contextHash = id;
            }
            else if (size == -4 /* SpecialRecord.LookAhead */) {
                lookAhead = id;
            }
            return index;
        }
        let children = [], positions = [];
        while (cursor.pos > 0)
            takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);
        let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
        return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
    }
    const nodeSizeCache = new WeakMap;
    function nodeSize(balanceType, node) {
        if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
            return 1;
        let size = nodeSizeCache.get(node);
        if (size == null) {
            size = 1;
            for (let child of node.children) {
                if (child.type != balanceType || !(child instanceof Tree)) {
                    size = 1;
                    break;
                }
                size += nodeSize(balanceType, child);
            }
            nodeSizeCache.set(node, size);
        }
        return size;
    }
    function balanceRange(
    // The type the balanced tree's inner nodes.
    balanceType, 
    // The direct children and their positions
    children, positions, 
    // The index range in children/positions to use
    from, to, 
    // The start position of the nodes, relative to their parent.
    start, 
    // Length of the outer node
    length, 
    // Function to build the top node of the balanced tree
    mkTop, 
    // Function to build internal nodes for the balanced tree
    mkTree) {
        let total = 0;
        for (let i = from; i < to; i++)
            total += nodeSize(balanceType, children[i]);
        let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);
        let localChildren = [], localPositions = [];
        function divide(children, positions, from, to, offset) {
            for (let i = from; i < to;) {
                let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);
                i++;
                for (; i < to; i++) {
                    let nextSize = nodeSize(balanceType, children[i]);
                    if (groupSize + nextSize >= maxChild)
                        break;
                    groupSize += nextSize;
                }
                if (i == groupFrom + 1) {
                    if (groupSize > maxChild) {
                        let only = children[groupFrom]; // Only trees can have a size > 1
                        divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
                        continue;
                    }
                    localChildren.push(children[groupFrom]);
                }
                else {
                    let length = positions[i - 1] + children[i - 1].length - groupStart;
                    localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));
                }
                localPositions.push(groupStart + offset - start);
            }
        }
        divide(children, positions, from, to, 0);
        return (mkTop || mkTree)(localChildren, localPositions, length);
    }
    /**
    Provides a way to associate values with pieces of trees. As long
    as that part of the tree is reused, the associated values can be
    retrieved from an updated tree.
    */
    class NodeWeakMap {
        constructor() {
            this.map = new WeakMap();
        }
        setBuffer(buffer, index, value) {
            let inner = this.map.get(buffer);
            if (!inner)
                this.map.set(buffer, inner = new Map);
            inner.set(index, value);
        }
        getBuffer(buffer, index) {
            let inner = this.map.get(buffer);
            return inner && inner.get(index);
        }
        /**
        Set the value for this syntax node.
        */
        set(node, value) {
            if (node instanceof BufferNode)
                this.setBuffer(node.context.buffer, node.index, value);
            else if (node instanceof TreeNode)
                this.map.set(node.tree, value);
        }
        /**
        Retrieve value for this syntax node, if it exists in the map.
        */
        get(node) {
            return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)
                : node instanceof TreeNode ? this.map.get(node.tree) : undefined;
        }
        /**
        Set the value for the node that a cursor currently points to.
        */
        cursorSet(cursor, value) {
            if (cursor.buffer)
                this.setBuffer(cursor.buffer.buffer, cursor.index, value);
            else
                this.map.set(cursor.tree, value);
        }
        /**
        Retrieve the value for the node that a cursor currently points
        to.
        */
        cursorGet(cursor) {
            return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);
        }
    }

    /**
    Tree fragments are used during [incremental
    parsing](#common.Parser.startParse) to track parts of old trees
    that can be reused in a new parse. An array of fragments is used
    to track regions of an old tree whose nodes might be reused in new
    parses. Use the static
    [`applyChanges`](#common.TreeFragment^applyChanges) method to
    update fragments for document changes.
    */
    class TreeFragment {
        /**
        Construct a tree fragment. You'll usually want to use
        [`addTree`](#common.TreeFragment^addTree) and
        [`applyChanges`](#common.TreeFragment^applyChanges) instead of
        calling this directly.
        */
        constructor(
        /**
        The start of the unchanged range pointed to by this fragment.
        This refers to an offset in the _updated_ document (as opposed
        to the original tree).
        */
        from, 
        /**
        The end of the unchanged range.
        */
        to, 
        /**
        The tree that this fragment is based on.
        */
        tree, 
        /**
        The offset between the fragment's tree and the document that
        this fragment can be used against. Add this when going from
        document to tree positions, subtract it to go from tree to
        document positions.
        */
        offset, openStart = false, openEnd = false) {
            this.from = from;
            this.to = to;
            this.tree = tree;
            this.offset = offset;
            this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);
        }
        /**
        Whether the start of the fragment represents the start of a
        parse, or the end of a change. (In the second case, it may not
        be safe to reuse some nodes at the start, depending on the
        parsing algorithm.)
        */
        get openStart() { return (this.open & 1 /* Open.Start */) > 0; }
        /**
        Whether the end of the fragment represents the end of a
        full-document parse, or the start of a change.
        */
        get openEnd() { return (this.open & 2 /* Open.End */) > 0; }
        /**
        Create a set of fragments from a freshly parsed tree, or update
        an existing set of fragments by replacing the ones that overlap
        with a tree with content from the new tree. When `partial` is
        true, the parse is treated as incomplete, and the resulting
        fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
        true.
        */
        static addTree(tree, fragments = [], partial = false) {
            let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
            for (let f of fragments)
                if (f.to > tree.length)
                    result.push(f);
            return result;
        }
        /**
        Apply a set of edits to an array of fragments, removing or
        splitting fragments as necessary to remove edited ranges, and
        adjusting offsets for fragments that moved.
        */
        static applyChanges(fragments, changes, minGap = 128) {
            if (!changes.length)
                return fragments;
            let result = [];
            let fI = 1, nextF = fragments.length ? fragments[0] : null;
            for (let cI = 0, pos = 0, off = 0;; cI++) {
                let nextC = cI < changes.length ? changes[cI] : null;
                let nextPos = nextC ? nextC.fromA : 1e9;
                if (nextPos - pos >= minGap)
                    while (nextF && nextF.from < nextPos) {
                        let cut = nextF;
                        if (pos >= cut.from || nextPos <= cut.to || off) {
                            let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                            cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
                        }
                        if (cut)
                            result.push(cut);
                        if (nextF.to > nextPos)
                            break;
                        nextF = fI < fragments.length ? fragments[fI++] : null;
                    }
                if (!nextC)
                    break;
                pos = nextC.toA;
                off = nextC.toA - nextC.toB;
            }
            return result;
        }
    }
    /**
    A superclass that parsers should extend.
    */
    class Parser {
        /**
        Start a parse, returning a [partial parse](#common.PartialParse)
        object. [`fragments`](#common.TreeFragment) can be passed in to
        make the parse incremental.
        
        By default, the entire input is parsed. You can pass `ranges`,
        which should be a sorted array of non-empty, non-overlapping
        ranges, to parse only those ranges. The tree returned in that
        case will start at `ranges[0].from`.
        */
        startParse(input, fragments, ranges) {
            if (typeof input == "string")
                input = new StringInput(input);
            ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];
            return this.createParse(input, fragments || [], ranges);
        }
        /**
        Run a full parse, returning the resulting tree.
        */
        parse(input, fragments, ranges) {
            let parse = this.startParse(input, fragments, ranges);
            for (;;) {
                let done = parse.advance();
                if (done)
                    return done;
            }
        }
    }
    class StringInput {
        constructor(string) {
            this.string = string;
        }
        get length() { return this.string.length; }
        chunk(from) { return this.string.slice(from); }
        get lineChunks() { return false; }
        read(from, to) { return this.string.slice(from, to); }
    }
    new NodeProp({ perNode: true });

    let nextTagID = 0;
    /**
    Highlighting tags are markers that denote a highlighting category.
    They are [associated](#highlight.styleTags) with parts of a syntax
    tree by a language mode, and then mapped to an actual CSS style by
    a [highlighter](#highlight.Highlighter).

    Because syntax tree node types and highlight styles have to be
    able to talk the same language, CodeMirror uses a mostly _closed_
    [vocabulary](#highlight.tags) of syntax tags (as opposed to
    traditional open string-based systems, which make it hard for
    highlighting themes to cover all the tokens produced by the
    various languages).

    It _is_ possible to [define](#highlight.Tag^define) your own
    highlighting tags for system-internal use (where you control both
    the language package and the highlighter), but such tags will not
    be picked up by regular highlighters (though you can derive them
    from standard tags to allow highlighters to fall back to those).
    */
    class Tag {
        /**
        @internal
        */
        constructor(
        /**
        The optional name of the base tag @internal
        */
        name, 
        /**
        The set of this tag and all its parent tags, starting with
        this one itself and sorted in order of decreasing specificity.
        */
        set, 
        /**
        The base unmodified tag that this one is based on, if it's
        modified @internal
        */
        base, 
        /**
        The modifiers applied to this.base @internal
        */
        modified) {
            this.name = name;
            this.set = set;
            this.base = base;
            this.modified = modified;
            /**
            @internal
            */
            this.id = nextTagID++;
        }
        toString() {
            let { name } = this;
            for (let mod of this.modified)
                if (mod.name)
                    name = `${mod.name}(${name})`;
            return name;
        }
        static define(nameOrParent, parent) {
            let name = typeof nameOrParent == "string" ? nameOrParent : "?";
            if (nameOrParent instanceof Tag)
                parent = nameOrParent;
            if (parent === null || parent === void 0 ? void 0 : parent.base)
                throw new Error("Can not derive from a modified tag");
            let tag = new Tag(name, [], null, []);
            tag.set.push(tag);
            if (parent)
                for (let t of parent.set)
                    tag.set.push(t);
            return tag;
        }
        /**
        Define a tag _modifier_, which is a function that, given a tag,
        will return a tag that is a subtag of the original. Applying the
        same modifier to a twice tag will return the same value (`m1(t1)
        == m1(t1)`) and applying multiple modifiers will, regardless or
        order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
        
        When multiple modifiers are applied to a given base tag, each
        smaller set of modifiers is registered as a parent, so that for
        example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
        `m1(m3(t1)`, and so on.
        */
        static defineModifier(name) {
            let mod = new Modifier(name);
            return (tag) => {
                if (tag.modified.indexOf(mod) > -1)
                    return tag;
                return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
            };
        }
    }
    let nextModifierID = 0;
    class Modifier {
        constructor(name) {
            this.name = name;
            this.instances = [];
            this.id = nextModifierID++;
        }
        static get(base, mods) {
            if (!mods.length)
                return base;
            let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));
            if (exists)
                return exists;
            let set = [], tag = new Tag(base.name, set, base, mods);
            for (let m of mods)
                m.instances.push(tag);
            let configs = powerSet(mods);
            for (let parent of base.set)
                if (!parent.modified.length)
                    for (let config of configs)
                        set.push(Modifier.get(parent, config));
            return tag;
        }
    }
    function sameArray(a, b) {
        return a.length == b.length && a.every((x, i) => x == b[i]);
    }
    function powerSet(array) {
        let sets = [[]];
        for (let i = 0; i < array.length; i++) {
            for (let j = 0, e = sets.length; j < e; j++) {
                sets.push(sets[j].concat(array[i]));
            }
        }
        return sets.sort((a, b) => b.length - a.length);
    }
    /**
    This function is used to add a set of tags to a language syntax
    via [`NodeSet.extend`](#common.NodeSet.extend) or
    [`LRParser.configure`](#lr.LRParser.configure).

    The argument object maps node selectors to [highlighting
    tags](#highlight.Tag) or arrays of tags.

    Node selectors may hold one or more (space-separated) node paths.
    Such a path can be a [node name](#common.NodeType.name), or
    multiple node names (or `*` wildcards) separated by slash
    characters, as in `"Block/Declaration/VariableName"`. Such a path
    matches the final node but only if its direct parent nodes are the
    other nodes mentioned. A `*` in such a path matches any parent,
    but only a single level—wildcards that match multiple parents
    aren't supported, both for efficiency reasons and because Lezer
    trees make it rather hard to reason about what they would match.)

    A path can be ended with `/...` to indicate that the tag assigned
    to the node should also apply to all child nodes, even if they
    match their own style (by default, only the innermost style is
    used).

    When a path ends in `!`, as in `Attribute!`, no further matching
    happens for the node's child nodes, and the entire node gets the
    given style.

    In this notation, node names that contain `/`, `!`, `*`, or `...`
    must be quoted as JSON strings.

    For example:

    ```javascript
    parser.withProps(
      styleTags({
        // Style Number and BigNumber nodes
        "Number BigNumber": tags.number,
        // Style Escape nodes whose parent is String
        "String/Escape": tags.escape,
        // Style anything inside Attributes nodes
        "Attributes!": tags.meta,
        // Add a style to all content inside Italic nodes
        "Italic/...": tags.emphasis,
        // Style InvalidString nodes as both `string` and `invalid`
        "InvalidString": [tags.string, tags.invalid],
        // Style the node named "/" as punctuation
        '"/"': tags.punctuation
      })
    )
    ```
    */
    function styleTags(spec) {
        let byName = Object.create(null);
        for (let prop in spec) {
            let tags = spec[prop];
            if (!Array.isArray(tags))
                tags = [tags];
            for (let part of prop.split(" "))
                if (part) {
                    let pieces = [], mode = 2 /* Mode.Normal */, rest = part;
                    for (let pos = 0;;) {
                        if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                            mode = 1 /* Mode.Inherit */;
                            break;
                        }
                        let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                        if (!m)
                            throw new RangeError("Invalid path: " + part);
                        pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                        pos += m[0].length;
                        if (pos == part.length)
                            break;
                        let next = part[pos++];
                        if (pos == part.length && next == "!") {
                            mode = 0 /* Mode.Opaque */;
                            break;
                        }
                        if (next != "/")
                            throw new RangeError("Invalid path: " + part);
                        rest = part.slice(pos);
                    }
                    let last = pieces.length - 1, inner = pieces[last];
                    if (!inner)
                        throw new RangeError("Invalid path: " + part);
                    let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
                    byName[inner] = rule.sort(byName[inner]);
                }
        }
        return ruleNodeProp.add(byName);
    }
    const ruleNodeProp = new NodeProp();
    class Rule {
        constructor(tags, mode, context, next) {
            this.tags = tags;
            this.mode = mode;
            this.context = context;
            this.next = next;
        }
        get opaque() { return this.mode == 0 /* Mode.Opaque */; }
        get inherit() { return this.mode == 1 /* Mode.Inherit */; }
        sort(other) {
            if (!other || other.depth < this.depth) {
                this.next = other;
                return this;
            }
            other.next = this.sort(other.next);
            return other;
        }
        get depth() { return this.context ? this.context.length : 0; }
    }
    Rule.empty = new Rule([], 2 /* Mode.Normal */, null);
    /**
    Define a [highlighter](#highlight.Highlighter) from an array of
    tag/class pairs. Classes associated with more specific tags will
    take precedence.
    */
    function tagHighlighter(tags, options) {
        let map = Object.create(null);
        for (let style of tags) {
            if (!Array.isArray(style.tag))
                map[style.tag.id] = style.class;
            else
                for (let tag of style.tag)
                    map[tag.id] = style.class;
        }
        let { scope, all = null } = options || {};
        return {
            style: (tags) => {
                let cls = all;
                for (let tag of tags) {
                    for (let sub of tag.set) {
                        let tagClass = map[sub.id];
                        if (tagClass) {
                            cls = cls ? cls + " " + tagClass : tagClass;
                            break;
                        }
                    }
                }
                return cls;
            },
            scope
        };
    }
    function highlightTags(highlighters, tags) {
        let result = null;
        for (let highlighter of highlighters) {
            let value = highlighter.style(tags);
            if (value)
                result = result ? result + " " + value : value;
        }
        return result;
    }
    /**
    Highlight the given [tree](#common.Tree) with the given
    [highlighter](#highlight.Highlighter). Often, the higher-level
    [`highlightCode`](#highlight.highlightCode) function is easier to
    use.
    */
    function highlightTree(tree, highlighter, 
    /**
    Assign styling to a region of the text. Will be called, in order
    of position, for any ranges where more than zero classes apply.
    `classes` is a space separated string of CSS classes.
    */
    putStyle, 
    /**
    The start of the range to highlight.
    */
    from = 0, 
    /**
    The end of the range.
    */
    to = tree.length) {
        let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
        builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
        builder.flush(to);
    }
    class HighlightBuilder {
        constructor(at, highlighters, span) {
            this.at = at;
            this.highlighters = highlighters;
            this.span = span;
            this.class = "";
        }
        startSpan(at, cls) {
            if (cls != this.class) {
                this.flush(at);
                if (at > this.at)
                    this.at = at;
                this.class = cls;
            }
        }
        flush(to) {
            if (to > this.at && this.class)
                this.span(this.at, to, this.class);
        }
        highlightRange(cursor, from, to, inheritedClass, highlighters) {
            let { type, from: start, to: end } = cursor;
            if (start >= to || end <= from)
                return;
            if (type.isTop)
                highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));
            let cls = inheritedClass;
            let rule = getStyleTags(cursor) || Rule.empty;
            let tagCls = highlightTags(highlighters, rule.tags);
            if (tagCls) {
                if (cls)
                    cls += " ";
                cls += tagCls;
                if (rule.mode == 1 /* Mode.Inherit */)
                    inheritedClass += (inheritedClass ? " " : "") + tagCls;
            }
            this.startSpan(Math.max(from, start), cls);
            if (rule.opaque)
                return;
            let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
            if (mounted && mounted.overlay) {
                let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
                let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));
                let hasChild = cursor.firstChild();
                for (let i = 0, pos = start;; i++) {
                    let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
                    let nextPos = next ? next.from + start : end;
                    let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
                    if (rangeFrom < rangeTo && hasChild) {
                        while (cursor.from < rangeTo) {
                            this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
                            this.startSpan(Math.min(rangeTo, cursor.to), cls);
                            if (cursor.to >= nextPos || !cursor.nextSibling())
                                break;
                        }
                    }
                    if (!next || nextPos > to)
                        break;
                    pos = next.to + start;
                    if (pos > from) {
                        this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), "", innerHighlighters);
                        this.startSpan(Math.min(to, pos), cls);
                    }
                }
                if (hasChild)
                    cursor.parent();
            }
            else if (cursor.firstChild()) {
                if (mounted)
                    inheritedClass = "";
                do {
                    if (cursor.to <= from)
                        continue;
                    if (cursor.from >= to)
                        break;
                    this.highlightRange(cursor, from, to, inheritedClass, highlighters);
                    this.startSpan(Math.min(to, cursor.to), cls);
                } while (cursor.nextSibling());
                cursor.parent();
            }
        }
    }
    /**
    Match a syntax node's [highlight rules](#highlight.styleTags). If
    there's a match, return its set of tags, and whether it is
    opaque (uses a `!`) or applies to all child nodes (`/...`).
    */
    function getStyleTags(node) {
        let rule = node.type.prop(ruleNodeProp);
        while (rule && rule.context && !node.matchContext(rule.context))
            rule = rule.next;
        return rule || null;
    }
    const t = Tag.define;
    const comment = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();
    /**
    The default set of highlighting [tags](#highlight.Tag).

    This collection is heavily biased towards programming languages,
    and necessarily incomplete. A full ontology of syntactic
    constructs would fill a stack of books, and be impractical to
    write themes for. So try to make do with this set. If all else
    fails, [open an
    issue](https://github.com/codemirror/codemirror.next) to propose a
    new tag, or [define](#highlight.Tag^define) a local custom tag for
    your use case.

    Note that it is not obligatory to always attach the most specific
    tag possible to an element—if your grammar can't easily
    distinguish a certain type of element (such as a local variable),
    it is okay to style it as its more general variant (a variable).

    For tags that extend some parent tag, the documentation links to
    the parent.
    */
    const tags = {
        /**
        A comment.
        */
        comment,
        /**
        A line [comment](#highlight.tags.comment).
        */
        lineComment: t(comment),
        /**
        A block [comment](#highlight.tags.comment).
        */
        blockComment: t(comment),
        /**
        A documentation [comment](#highlight.tags.comment).
        */
        docComment: t(comment),
        /**
        Any kind of identifier.
        */
        name,
        /**
        The [name](#highlight.tags.name) of a variable.
        */
        variableName: t(name),
        /**
        A type [name](#highlight.tags.name).
        */
        typeName: typeName,
        /**
        A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
        */
        tagName: t(typeName),
        /**
        A property or field [name](#highlight.tags.name).
        */
        propertyName: propertyName,
        /**
        An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
        */
        attributeName: t(propertyName),
        /**
        The [name](#highlight.tags.name) of a class.
        */
        className: t(name),
        /**
        A label [name](#highlight.tags.name).
        */
        labelName: t(name),
        /**
        A namespace [name](#highlight.tags.name).
        */
        namespace: t(name),
        /**
        The [name](#highlight.tags.name) of a macro.
        */
        macroName: t(name),
        /**
        A literal value.
        */
        literal,
        /**
        A string [literal](#highlight.tags.literal).
        */
        string,
        /**
        A documentation [string](#highlight.tags.string).
        */
        docString: t(string),
        /**
        A character literal (subtag of [string](#highlight.tags.string)).
        */
        character: t(string),
        /**
        An attribute value (subtag of [string](#highlight.tags.string)).
        */
        attributeValue: t(string),
        /**
        A number [literal](#highlight.tags.literal).
        */
        number,
        /**
        An integer [number](#highlight.tags.number) literal.
        */
        integer: t(number),
        /**
        A floating-point [number](#highlight.tags.number) literal.
        */
        float: t(number),
        /**
        A boolean [literal](#highlight.tags.literal).
        */
        bool: t(literal),
        /**
        Regular expression [literal](#highlight.tags.literal).
        */
        regexp: t(literal),
        /**
        An escape [literal](#highlight.tags.literal), for example a
        backslash escape in a string.
        */
        escape: t(literal),
        /**
        A color [literal](#highlight.tags.literal).
        */
        color: t(literal),
        /**
        A URL [literal](#highlight.tags.literal).
        */
        url: t(literal),
        /**
        A language keyword.
        */
        keyword,
        /**
        The [keyword](#highlight.tags.keyword) for the self or this
        object.
        */
        self: t(keyword),
        /**
        The [keyword](#highlight.tags.keyword) for null.
        */
        null: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) denoting some atomic value.
        */
        atom: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) that represents a unit.
        */
        unit: t(keyword),
        /**
        A modifier [keyword](#highlight.tags.keyword).
        */
        modifier: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) that acts as an operator.
        */
        operatorKeyword: t(keyword),
        /**
        A control-flow related [keyword](#highlight.tags.keyword).
        */
        controlKeyword: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) that defines something.
        */
        definitionKeyword: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) related to defining or
        interfacing with modules.
        */
        moduleKeyword: t(keyword),
        /**
        An operator.
        */
        operator,
        /**
        An [operator](#highlight.tags.operator) that dereferences something.
        */
        derefOperator: t(operator),
        /**
        Arithmetic-related [operator](#highlight.tags.operator).
        */
        arithmeticOperator: t(operator),
        /**
        Logical [operator](#highlight.tags.operator).
        */
        logicOperator: t(operator),
        /**
        Bit [operator](#highlight.tags.operator).
        */
        bitwiseOperator: t(operator),
        /**
        Comparison [operator](#highlight.tags.operator).
        */
        compareOperator: t(operator),
        /**
        [Operator](#highlight.tags.operator) that updates its operand.
        */
        updateOperator: t(operator),
        /**
        [Operator](#highlight.tags.operator) that defines something.
        */
        definitionOperator: t(operator),
        /**
        Type-related [operator](#highlight.tags.operator).
        */
        typeOperator: t(operator),
        /**
        Control-flow [operator](#highlight.tags.operator).
        */
        controlOperator: t(operator),
        /**
        Program or markup punctuation.
        */
        punctuation,
        /**
        [Punctuation](#highlight.tags.punctuation) that separates
        things.
        */
        separator: t(punctuation),
        /**
        Bracket-style [punctuation](#highlight.tags.punctuation).
        */
        bracket,
        /**
        Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
        tokens).
        */
        angleBracket: t(bracket),
        /**
        Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
        tokens).
        */
        squareBracket: t(bracket),
        /**
        Parentheses (usually `(` and `)` tokens). Subtag of
        [bracket](#highlight.tags.bracket).
        */
        paren: t(bracket),
        /**
        Braces (usually `{` and `}` tokens). Subtag of
        [bracket](#highlight.tags.bracket).
        */
        brace: t(bracket),
        /**
        Content, for example plain text in XML or markup documents.
        */
        content,
        /**
        [Content](#highlight.tags.content) that represents a heading.
        */
        heading,
        /**
        A level 1 [heading](#highlight.tags.heading).
        */
        heading1: t(heading),
        /**
        A level 2 [heading](#highlight.tags.heading).
        */
        heading2: t(heading),
        /**
        A level 3 [heading](#highlight.tags.heading).
        */
        heading3: t(heading),
        /**
        A level 4 [heading](#highlight.tags.heading).
        */
        heading4: t(heading),
        /**
        A level 5 [heading](#highlight.tags.heading).
        */
        heading5: t(heading),
        /**
        A level 6 [heading](#highlight.tags.heading).
        */
        heading6: t(heading),
        /**
        A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
        */
        contentSeparator: t(content),
        /**
        [Content](#highlight.tags.content) that represents a list.
        */
        list: t(content),
        /**
        [Content](#highlight.tags.content) that represents a quote.
        */
        quote: t(content),
        /**
        [Content](#highlight.tags.content) that is emphasized.
        */
        emphasis: t(content),
        /**
        [Content](#highlight.tags.content) that is styled strong.
        */
        strong: t(content),
        /**
        [Content](#highlight.tags.content) that is part of a link.
        */
        link: t(content),
        /**
        [Content](#highlight.tags.content) that is styled as code or
        monospace.
        */
        monospace: t(content),
        /**
        [Content](#highlight.tags.content) that has a strike-through
        style.
        */
        strikethrough: t(content),
        /**
        Inserted text in a change-tracking format.
        */
        inserted: t(),
        /**
        Deleted text.
        */
        deleted: t(),
        /**
        Changed text.
        */
        changed: t(),
        /**
        An invalid or unsyntactic element.
        */
        invalid: t(),
        /**
        Metadata or meta-instruction.
        */
        meta,
        /**
        [Metadata](#highlight.tags.meta) that applies to the entire
        document.
        */
        documentMeta: t(meta),
        /**
        [Metadata](#highlight.tags.meta) that annotates or adds
        attributes to a given syntactic element.
        */
        annotation: t(meta),
        /**
        Processing instruction or preprocessor directive. Subtag of
        [meta](#highlight.tags.meta).
        */
        processingInstruction: t(meta),
        /**
        [Modifier](#highlight.Tag^defineModifier) that indicates that a
        given element is being defined. Expected to be used with the
        various [name](#highlight.tags.name) tags.
        */
        definition: Tag.defineModifier("definition"),
        /**
        [Modifier](#highlight.Tag^defineModifier) that indicates that
        something is constant. Mostly expected to be used with
        [variable names](#highlight.tags.variableName).
        */
        constant: Tag.defineModifier("constant"),
        /**
        [Modifier](#highlight.Tag^defineModifier) used to indicate that
        a [variable](#highlight.tags.variableName) or [property
        name](#highlight.tags.propertyName) is being called or defined
        as a function.
        */
        function: Tag.defineModifier("function"),
        /**
        [Modifier](#highlight.Tag^defineModifier) that can be applied to
        [names](#highlight.tags.name) to indicate that they belong to
        the language's standard environment.
        */
        standard: Tag.defineModifier("standard"),
        /**
        [Modifier](#highlight.Tag^defineModifier) that indicates a given
        [names](#highlight.tags.name) is local to some scope.
        */
        local: Tag.defineModifier("local"),
        /**
        A generic variant [modifier](#highlight.Tag^defineModifier) that
        can be used to tag language-specific alternative variants of
        some common tag. It is recommended for themes to define special
        forms of at least the [string](#highlight.tags.string) and
        [variable name](#highlight.tags.variableName) tags, since those
        come up a lot.
        */
        special: Tag.defineModifier("special")
    };
    for (let name in tags) {
        let val = tags[name];
        if (val instanceof Tag)
            val.name = name;
    }
    /**
    This is a highlighter that adds stable, predictable classes to
    tokens, for styling with external CSS.

    The following tags are mapped to their name prefixed with `"tok-"`
    (for example `"tok-comment"`):

    * [`link`](#highlight.tags.link)
    * [`heading`](#highlight.tags.heading)
    * [`emphasis`](#highlight.tags.emphasis)
    * [`strong`](#highlight.tags.strong)
    * [`keyword`](#highlight.tags.keyword)
    * [`atom`](#highlight.tags.atom)
    * [`bool`](#highlight.tags.bool)
    * [`url`](#highlight.tags.url)
    * [`labelName`](#highlight.tags.labelName)
    * [`inserted`](#highlight.tags.inserted)
    * [`deleted`](#highlight.tags.deleted)
    * [`literal`](#highlight.tags.literal)
    * [`string`](#highlight.tags.string)
    * [`number`](#highlight.tags.number)
    * [`variableName`](#highlight.tags.variableName)
    * [`typeName`](#highlight.tags.typeName)
    * [`namespace`](#highlight.tags.namespace)
    * [`className`](#highlight.tags.className)
    * [`macroName`](#highlight.tags.macroName)
    * [`propertyName`](#highlight.tags.propertyName)
    * [`operator`](#highlight.tags.operator)
    * [`comment`](#highlight.tags.comment)
    * [`meta`](#highlight.tags.meta)
    * [`punctuation`](#highlight.tags.punctuation)
    * [`invalid`](#highlight.tags.invalid)

    In addition, these mappings are provided:

    * [`regexp`](#highlight.tags.regexp),
      [`escape`](#highlight.tags.escape), and
      [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
      are mapped to `"tok-string2"`
    * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
      to `"tok-variableName2"`
    * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
      to `"tok-variableName tok-local"`
    * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
      to `"tok-variableName tok-definition"`
    * [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
      to `"tok-propertyName tok-definition"`
    */
    tagHighlighter([
        { tag: tags.link, class: "tok-link" },
        { tag: tags.heading, class: "tok-heading" },
        { tag: tags.emphasis, class: "tok-emphasis" },
        { tag: tags.strong, class: "tok-strong" },
        { tag: tags.keyword, class: "tok-keyword" },
        { tag: tags.atom, class: "tok-atom" },
        { tag: tags.bool, class: "tok-bool" },
        { tag: tags.url, class: "tok-url" },
        { tag: tags.labelName, class: "tok-labelName" },
        { tag: tags.inserted, class: "tok-inserted" },
        { tag: tags.deleted, class: "tok-deleted" },
        { tag: tags.literal, class: "tok-literal" },
        { tag: tags.string, class: "tok-string" },
        { tag: tags.number, class: "tok-number" },
        { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
        { tag: tags.variableName, class: "tok-variableName" },
        { tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
        { tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
        { tag: tags.special(tags.variableName), class: "tok-variableName2" },
        { tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
        { tag: tags.typeName, class: "tok-typeName" },
        { tag: tags.namespace, class: "tok-namespace" },
        { tag: tags.className, class: "tok-className" },
        { tag: tags.macroName, class: "tok-macroName" },
        { tag: tags.propertyName, class: "tok-propertyName" },
        { tag: tags.operator, class: "tok-operator" },
        { tag: tags.comment, class: "tok-comment" },
        { tag: tags.meta, class: "tok-meta" },
        { tag: tags.invalid, class: "tok-invalid" },
        { tag: tags.punctuation, class: "tok-punctuation" }
    ]);

    var _a;
    /**
    Node prop stored in a parser's top syntax node to provide the
    facet that stores language-specific data for that language.
    */
    const languageDataProp = /*@__PURE__*/new NodeProp();
    /**
    Helper function to define a facet (to be added to the top syntax
    node(s) for a language via
    [`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
    used to associate language data with the language. You
    probably only need this when subclassing
    [`Language`](https://codemirror.net/6/docs/ref/#language.Language).
    */
    function defineLanguageFacet(baseData) {
        return Facet.define({
            combine: baseData ? values => values.concat(baseData) : undefined
        });
    }
    /**
    Syntax node prop used to register sublanguages. Should be added to
    the top level node type for the language.
    */
    const sublanguageProp = /*@__PURE__*/new NodeProp();
    /**
    A language object manages parsing and per-language
    [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
    managed as a [Lezer](https://lezer.codemirror.net) tree. The class
    can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
    subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
    via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
    for stream parsers.
    */
    class Language {
        /**
        Construct a language object. If you need to invoke this
        directly, first define a data facet with
        [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
        configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
        to the language's outer syntax node.
        */
        constructor(
        /**
        The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
        used for this language.
        */
        data, parser, extraExtensions = [], 
        /**
        A language name.
        */
        name = "") {
            this.data = data;
            this.name = name;
            // Kludge to define EditorState.tree as a debugging helper,
            // without the EditorState package actually knowing about
            // languages and lezer trees.
            if (!EditorState.prototype.hasOwnProperty("tree"))
                Object.defineProperty(EditorState.prototype, "tree", { get() { return syntaxTree(this); } });
            this.parser = parser;
            this.extension = [
                language.of(this),
                EditorState.languageData.of((state, pos, side) => {
                    let top = topNodeAt(state, pos, side), data = top.type.prop(languageDataProp);
                    if (!data)
                        return [];
                    let base = state.facet(data), sub = top.type.prop(sublanguageProp);
                    if (sub) {
                        let innerNode = top.resolve(pos - top.from, side);
                        for (let sublang of sub)
                            if (sublang.test(innerNode, state)) {
                                let data = state.facet(sublang.facet);
                                return sublang.type == "replace" ? data : data.concat(base);
                            }
                    }
                    return base;
                })
            ].concat(extraExtensions);
        }
        /**
        Query whether this language is active at the given position.
        */
        isActiveAt(state, pos, side = -1) {
            return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
        }
        /**
        Find the document regions that were parsed using this language.
        The returned regions will _include_ any nested languages rooted
        in this language, when those exist.
        */
        findRegions(state) {
            let lang = state.facet(language);
            if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
                return [{ from: 0, to: state.doc.length }];
            if (!lang || !lang.allowsNesting)
                return [];
            let result = [];
            let explore = (tree, from) => {
                if (tree.prop(languageDataProp) == this.data) {
                    result.push({ from, to: from + tree.length });
                    return;
                }
                let mount = tree.prop(NodeProp.mounted);
                if (mount) {
                    if (mount.tree.prop(languageDataProp) == this.data) {
                        if (mount.overlay)
                            for (let r of mount.overlay)
                                result.push({ from: r.from + from, to: r.to + from });
                        else
                            result.push({ from: from, to: from + tree.length });
                        return;
                    }
                    else if (mount.overlay) {
                        let size = result.length;
                        explore(mount.tree, mount.overlay[0].from + from);
                        if (result.length > size)
                            return;
                    }
                }
                for (let i = 0; i < tree.children.length; i++) {
                    let ch = tree.children[i];
                    if (ch instanceof Tree)
                        explore(ch, tree.positions[i] + from);
                }
            };
            explore(syntaxTree(state), 0);
            return result;
        }
        /**
        Indicates whether this language allows nested languages. The
        default implementation returns true.
        */
        get allowsNesting() { return true; }
    }
    /**
    @internal
    */
    Language.setState = /*@__PURE__*/StateEffect.define();
    function topNodeAt(state, pos, side) {
        let topLang = state.facet(language), tree = syntaxTree(state).topNode;
        if (!topLang || topLang.allowsNesting) {
            for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
                if (node.type.isTop)
                    tree = node;
        }
        return tree;
    }
    /**
    A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
    [LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
    parsers.
    */
    class LRLanguage extends Language {
        constructor(data, parser, name) {
            super(data, parser, [], name);
            this.parser = parser;
        }
        /**
        Define a language from a parser.
        */
        static define(spec) {
            let data = defineLanguageFacet(spec.languageData);
            return new LRLanguage(data, spec.parser.configure({
                props: [languageDataProp.add(type => type.isTop ? data : undefined)]
            }), spec.name);
        }
        /**
        Create a new instance of this language with a reconfigured
        version of its parser and optionally a new name.
        */
        configure(options, name) {
            return new LRLanguage(this.data, this.parser.configure(options), name || this.name);
        }
        get allowsNesting() { return this.parser.hasWrappers(); }
    }
    /**
    Get the syntax tree for a state, which is the current (possibly
    incomplete) parse tree of the active
    [language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
    language available.
    */
    function syntaxTree(state) {
        let field = state.field(Language.state, false);
        return field ? field.tree : Tree.empty;
    }
    /**
    Lezer-style
    [`Input`](https://lezer.codemirror.net/docs/ref#common.Input)
    object for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.
    */
    class DocInput {
        /**
        Create an input object for the given document.
        */
        constructor(doc) {
            this.doc = doc;
            this.cursorPos = 0;
            this.string = "";
            this.cursor = doc.iter();
        }
        get length() { return this.doc.length; }
        syncTo(pos) {
            this.string = this.cursor.next(pos - this.cursorPos).value;
            this.cursorPos = pos + this.string.length;
            return this.cursorPos - this.string.length;
        }
        chunk(pos) {
            this.syncTo(pos);
            return this.string;
        }
        get lineChunks() { return true; }
        read(from, to) {
            let stringStart = this.cursorPos - this.string.length;
            if (from < stringStart || to >= this.cursorPos)
                return this.doc.sliceString(from, to);
            else
                return this.string.slice(from - stringStart, to - stringStart);
        }
    }
    let currentContext = null;
    /**
    A parse context provided to parsers working on the editor content.
    */
    class ParseContext {
        constructor(parser, 
        /**
        The current editor state.
        */
        state, 
        /**
        Tree fragments that can be reused by incremental re-parses.
        */
        fragments = [], 
        /**
        @internal
        */
        tree, 
        /**
        @internal
        */
        treeLen, 
        /**
        The current editor viewport (or some overapproximation
        thereof). Intended to be used for opportunistically avoiding
        work (in which case
        [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
        should be called to make sure the parser is restarted when the
        skipped region becomes visible).
        */
        viewport, 
        /**
        @internal
        */
        skipped, 
        /**
        This is where skipping parsers can register a promise that,
        when resolved, will schedule a new parse. It is cleared when
        the parse worker picks up the promise. @internal
        */
        scheduleOn) {
            this.parser = parser;
            this.state = state;
            this.fragments = fragments;
            this.tree = tree;
            this.treeLen = treeLen;
            this.viewport = viewport;
            this.skipped = skipped;
            this.scheduleOn = scheduleOn;
            this.parse = null;
            /**
            @internal
            */
            this.tempSkipped = [];
        }
        /**
        @internal
        */
        static create(parser, state, viewport) {
            return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
        }
        startParse() {
            return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
        }
        /**
        @internal
        */
        work(until, upto) {
            if (upto != null && upto >= this.state.doc.length)
                upto = undefined;
            if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
                this.takeTree();
                return true;
            }
            return this.withContext(() => {
                var _a;
                if (typeof until == "number") {
                    let endTime = Date.now() + until;
                    until = () => Date.now() > endTime;
                }
                if (!this.parse)
                    this.parse = this.startParse();
                if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&
                    upto < this.state.doc.length)
                    this.parse.stopAt(upto);
                for (;;) {
                    let done = this.parse.advance();
                    if (done) {
                        this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
                        this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
                        this.tree = done;
                        this.parse = null;
                        if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
                            this.parse = this.startParse();
                        else
                            return true;
                    }
                    if (until())
                        return false;
                }
            });
        }
        /**
        @internal
        */
        takeTree() {
            let pos, tree;
            if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
                if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
                    this.parse.stopAt(pos);
                this.withContext(() => { while (!(tree = this.parse.advance())) { } });
                this.treeLen = pos;
                this.tree = tree;
                this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
                this.parse = null;
            }
        }
        withContext(f) {
            let prev = currentContext;
            currentContext = this;
            try {
                return f();
            }
            finally {
                currentContext = prev;
            }
        }
        withoutTempSkipped(fragments) {
            for (let r; r = this.tempSkipped.pop();)
                fragments = cutFragments(fragments, r.from, r.to);
            return fragments;
        }
        /**
        @internal
        */
        changes(changes, newState) {
            let { fragments, tree, treeLen, viewport, skipped } = this;
            this.takeTree();
            if (!changes.empty) {
                let ranges = [];
                changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
                fragments = TreeFragment.applyChanges(fragments, ranges);
                tree = Tree.empty;
                treeLen = 0;
                viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
                if (this.skipped.length) {
                    skipped = [];
                    for (let r of this.skipped) {
                        let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
                        if (from < to)
                            skipped.push({ from, to });
                    }
                }
            }
            return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
        }
        /**
        @internal
        */
        updateViewport(viewport) {
            if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
                return false;
            this.viewport = viewport;
            let startLen = this.skipped.length;
            for (let i = 0; i < this.skipped.length; i++) {
                let { from, to } = this.skipped[i];
                if (from < viewport.to && to > viewport.from) {
                    this.fragments = cutFragments(this.fragments, from, to);
                    this.skipped.splice(i--, 1);
                }
            }
            if (this.skipped.length >= startLen)
                return false;
            this.reset();
            return true;
        }
        /**
        @internal
        */
        reset() {
            if (this.parse) {
                this.takeTree();
                this.parse = null;
            }
        }
        /**
        Notify the parse scheduler that the given region was skipped
        because it wasn't in view, and the parse should be restarted
        when it comes into view.
        */
        skipUntilInView(from, to) {
            this.skipped.push({ from, to });
        }
        /**
        Returns a parser intended to be used as placeholder when
        asynchronously loading a nested parser. It'll skip its input and
        mark it as not-really-parsed, so that the next update will parse
        it again.
        
        When `until` is given, a reparse will be scheduled when that
        promise resolves.
        */
        static getSkippingParser(until) {
            return new class extends Parser {
                createParse(input, fragments, ranges) {
                    let from = ranges[0].from, to = ranges[ranges.length - 1].to;
                    let parser = {
                        parsedPos: from,
                        advance() {
                            let cx = currentContext;
                            if (cx) {
                                for (let r of ranges)
                                    cx.tempSkipped.push(r);
                                if (until)
                                    cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                            }
                            this.parsedPos = to;
                            return new Tree(NodeType.none, [], [], to - from);
                        },
                        stoppedAt: null,
                        stopAt() { }
                    };
                    return parser;
                }
            };
        }
        /**
        @internal
        */
        isDone(upto) {
            upto = Math.min(upto, this.state.doc.length);
            let frags = this.fragments;
            return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
        }
        /**
        Get the context for the current parse, or `null` if no editor
        parse is in progress.
        */
        static get() { return currentContext; }
    }
    function cutFragments(fragments, from, to) {
        return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
    }
    class LanguageState {
        constructor(
        // A mutable parse state that is used to preserve work done during
        // the lifetime of a state when moving to the next state.
        context) {
            this.context = context;
            this.tree = context.tree;
        }
        apply(tr) {
            if (!tr.docChanged && this.tree == this.context.tree)
                return this;
            let newCx = this.context.changes(tr.changes, tr.state);
            // If the previous parse wasn't done, go forward only up to its
            // end position or the end of the viewport, to avoid slowing down
            // state updates with parse work beyond the viewport.
            let upto = this.context.treeLen == tr.startState.doc.length ? undefined
                : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
            if (!newCx.work(20 /* Work.Apply */, upto))
                newCx.takeTree();
            return new LanguageState(newCx);
        }
        static init(state) {
            let vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);
            let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
            if (!parseState.work(20 /* Work.Apply */, vpTo))
                parseState.takeTree();
            return new LanguageState(parseState);
        }
    }
    Language.state = /*@__PURE__*/StateField.define({
        create: LanguageState.init,
        update(value, tr) {
            for (let e of tr.effects)
                if (e.is(Language.setState))
                    return e.value;
            if (tr.startState.facet(language) != tr.state.facet(language))
                return LanguageState.init(tr.state);
            return value.apply(tr);
        }
    });
    let requestIdle = (callback) => {
        let timeout = setTimeout(() => callback(), 500 /* Work.MaxPause */);
        return () => clearTimeout(timeout);
    };
    if (typeof requestIdleCallback != "undefined")
        requestIdle = (callback) => {
            let idle = -1, timeout = setTimeout(() => {
                idle = requestIdleCallback(callback, { timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */ });
            }, 100 /* Work.MinPause */);
            return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
        };
    const isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)
        ? () => navigator.scheduling.isInputPending() : null;
    const parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {
        constructor(view) {
            this.view = view;
            this.working = null;
            this.workScheduled = 0;
            // End of the current time chunk
            this.chunkEnd = -1;
            // Milliseconds of budget left for this chunk
            this.chunkBudget = -1;
            this.work = this.work.bind(this);
            this.scheduleWork();
        }
        update(update) {
            let cx = this.view.state.field(Language.state).context;
            if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
                this.scheduleWork();
            if (update.docChanged || update.selectionSet) {
                if (this.view.hasFocus)
                    this.chunkBudget += 50 /* Work.ChangeBonus */;
                this.scheduleWork();
            }
            this.checkAsyncSchedule(cx);
        }
        scheduleWork() {
            if (this.working)
                return;
            let { state } = this.view, field = state.field(Language.state);
            if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
                this.working = requestIdle(this.work);
        }
        work(deadline) {
            this.working = null;
            let now = Date.now();
            if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk
                this.chunkEnd = now + 30000 /* Work.ChunkTime */;
                this.chunkBudget = 3000 /* Work.ChunkBudget */;
            }
            if (this.chunkBudget <= 0)
                return; // No more budget
            let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
            if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */))
                return;
            let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);
            let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
            let done = field.context.work(() => {
                return isInputPending && isInputPending() || Date.now() > endTime;
            }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));
            this.chunkBudget -= Date.now() - now;
            if (done || this.chunkBudget <= 0) {
                field.context.takeTree();
                this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
            }
            if (this.chunkBudget > 0 && !(done && !viewportFirst))
                this.scheduleWork();
            this.checkAsyncSchedule(field.context);
        }
        checkAsyncSchedule(cx) {
            if (cx.scheduleOn) {
                this.workScheduled++;
                cx.scheduleOn
                    .then(() => this.scheduleWork())
                    .catch(err => logException(this.view.state, err))
                    .then(() => this.workScheduled--);
                cx.scheduleOn = null;
            }
        }
        destroy() {
            if (this.working)
                this.working();
        }
        isWorking() {
            return !!(this.working || this.workScheduled > 0);
        }
    }, {
        eventHandlers: { focus() { this.scheduleWork(); } }
    });
    /**
    The facet used to associate a language with an editor state. Used
    by `Language` object's `extension` property (so you don't need to
    manually wrap your languages in this). Can be used to access the
    current language on a state.
    */
    const language = /*@__PURE__*/Facet.define({
        combine(languages) { return languages.length ? languages[0] : null; },
        enables: language => [
            Language.state,
            parseWorker,
            EditorView.contentAttributes.compute([language], state => {
                let lang = state.facet(language);
                return lang && lang.name ? { "data-language": lang.name } : {};
            })
        ]
    });
    /**
    This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
    optional set of supporting extensions. Language packages are
    encouraged to export a function that optionally takes a
    configuration object and returns a `LanguageSupport` instance, as
    the main way for client code to use the package.
    */
    class LanguageSupport {
        /**
        Create a language support object.
        */
        constructor(
        /**
        The language object.
        */
        language, 
        /**
        An optional set of supporting extensions. When nesting a
        language in another language, the outer language is encouraged
        to include the supporting extensions for its inner languages
        in its own set of support extensions.
        */
        support = []) {
            this.language = language;
            this.support = support;
            this.extension = [language, support];
        }
    }

    /**
    Facet that defines a way to provide a function that computes the
    appropriate indentation depth, as a column number (see
    [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given
    line. A return value of `null` indicates no indentation can be
    determined, and the line should inherit the indentation of the one
    above it. A return value of `undefined` defers to the next indent
    service.
    */
    const indentService = /*@__PURE__*/Facet.define();
    /**
    Facet for overriding the unit by which indentation happens. Should
    be a string consisting entirely of the same whitespace character.
    When not set, this defaults to 2 spaces.
    */
    const indentUnit = /*@__PURE__*/Facet.define({
        combine: values => {
            if (!values.length)
                return "  ";
            let unit = values[0];
            if (!unit || /\S/.test(unit) || Array.from(unit).some(e => e != unit[0]))
                throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
            return unit;
        }
    });
    /**
    Return the _column width_ of an indent unit in the state.
    Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
    facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
    contains tabs.
    */
    function getIndentUnit(state) {
        let unit = state.facet(indentUnit);
        return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
    }
    /**
    Create an indentation string that covers columns 0 to `cols`.
    Will use tabs for as much of the columns as possible when the
    [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
    tabs.
    */
    function indentString(state, cols) {
        let result = "", ts = state.tabSize, ch = state.facet(indentUnit)[0];
        if (ch == "\t") {
            while (cols >= ts) {
                result += "\t";
                cols -= ts;
            }
            ch = " ";
        }
        for (let i = 0; i < cols; i++)
            result += ch;
        return result;
    }
    /**
    Get the indentation, as a column number, at the given position.
    Will first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)
    that are registered, and if none of those return an indentation,
    this will check the syntax tree for the [indent node
    prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a
    number when an indentation could be determined, and null
    otherwise.
    */
    function getIndentation(context, pos) {
        if (context instanceof EditorState)
            context = new IndentContext(context);
        for (let service of context.state.facet(indentService)) {
            let result = service(context, pos);
            if (result !== undefined)
                return result;
        }
        let tree = syntaxTree(context.state);
        return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;
    }
    /**
    Indentation contexts are used when calling [indentation
    services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
    useful in indentation logic, and can selectively override the
    indentation reported for some lines.
    */
    class IndentContext {
        /**
        Create an indent context.
        */
        constructor(
        /**
        The editor state.
        */
        state, 
        /**
        @internal
        */
        options = {}) {
            this.state = state;
            this.options = options;
            this.unit = getIndentUnit(state);
        }
        /**
        Get a description of the line at the given position, taking
        [simulated line
        breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
        into account. If there is such a break at `pos`, the `bias`
        argument determines whether the part of the line line before or
        after the break is used.
        */
        lineAt(pos, bias = 1) {
            let line = this.state.doc.lineAt(pos);
            let { simulateBreak, simulateDoubleBreak } = this.options;
            if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
                if (simulateDoubleBreak && simulateBreak == pos)
                    return { text: "", from: pos };
                else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
                    return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
                else
                    return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
            }
            return line;
        }
        /**
        Get the text directly after `pos`, either the entire line
        or the next 100 characters, whichever is shorter.
        */
        textAfterPos(pos, bias = 1) {
            if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
                return "";
            let { text, from } = this.lineAt(pos, bias);
            return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
        }
        /**
        Find the column for the given position.
        */
        column(pos, bias = 1) {
            let { text, from } = this.lineAt(pos, bias);
            let result = this.countColumn(text, pos - from);
            let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
            if (override > -1)
                result += override - this.countColumn(text, text.search(/\S|$/));
            return result;
        }
        /**
        Find the column position (taking tabs into account) of the given
        position in the given string.
        */
        countColumn(line, pos = line.length) {
            return countColumn(line, this.state.tabSize, pos);
        }
        /**
        Find the indentation column of the line at the given point.
        */
        lineIndent(pos, bias = 1) {
            let { text, from } = this.lineAt(pos, bias);
            let override = this.options.overrideIndentation;
            if (override) {
                let overriden = override(from);
                if (overriden > -1)
                    return overriden;
            }
            return this.countColumn(text, text.search(/\S|$/));
        }
        /**
        Returns the [simulated line
        break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
        for this context, if any.
        */
        get simulatedBreak() {
            return this.options.simulateBreak || null;
        }
    }
    /**
    A syntax tree node prop used to associate indentation strategies
    with node types. Such a strategy is a function from an indentation
    context to a column number (see also
    [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null
    indicates that no definitive indentation can be determined.
    */
    const indentNodeProp = /*@__PURE__*/new NodeProp();
    // Compute the indentation for a given position from the syntax tree.
    function syntaxIndentation(cx, ast, pos) {
        let stack = ast.resolveStack(pos);
        let inner = ast.resolveInner(pos, -1).resolve(pos, 0).enterUnfinishedNodesBefore(pos);
        if (inner != stack.node) {
            let add = [];
            for (let cur = inner; cur && !(cur.from < stack.node.from || cur.to > stack.node.to ||
                cur.from == stack.node.from && cur.type == stack.node.type); cur = cur.parent)
                add.push(cur);
            for (let i = add.length - 1; i >= 0; i--)
                stack = { node: add[i], next: stack };
        }
        return indentFor(stack, cx, pos);
    }
    function indentFor(stack, cx, pos) {
        for (let cur = stack; cur; cur = cur.next) {
            let strategy = indentStrategy(cur.node);
            if (strategy)
                return strategy(TreeIndentContext.create(cx, pos, cur));
        }
        return 0;
    }
    function ignoreClosed(cx) {
        return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
    }
    function indentStrategy(tree) {
        let strategy = tree.type.prop(indentNodeProp);
        if (strategy)
            return strategy;
        let first = tree.firstChild, close;
        if (first && (close = first.type.prop(NodeProp.closedBy))) {
            let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
            return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
        }
        return tree.parent == null ? topIndent$1 : null;
    }
    function topIndent$1() { return 0; }
    /**
    Objects of this type provide context information and helper
    methods to indentation functions registered on syntax nodes.
    */
    class TreeIndentContext extends IndentContext {
        constructor(base, 
        /**
        The position at which indentation is being computed.
        */
        pos, 
        /**
        @internal
        */
        context) {
            super(base.state, base.options);
            this.base = base;
            this.pos = pos;
            this.context = context;
        }
        /**
        The syntax tree node to which the indentation strategy
        applies.
        */
        get node() { return this.context.node; }
        /**
        @internal
        */
        static create(base, pos, context) {
            return new TreeIndentContext(base, pos, context);
        }
        /**
        Get the text directly after `this.pos`, either the entire line
        or the next 100 characters, whichever is shorter.
        */
        get textAfter() {
            return this.textAfterPos(this.pos);
        }
        /**
        Get the indentation at the reference line for `this.node`, which
        is the line on which it starts, unless there is a node that is
        _not_ a parent of this node covering the start of that line. If
        so, the line at the start of that node is tried, again skipping
        on if it is covered by another such node.
        */
        get baseIndent() {
            return this.baseIndentFor(this.node);
        }
        /**
        Get the indentation for the reference line of the given node
        (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
        */
        baseIndentFor(node) {
            let line = this.state.doc.lineAt(node.from);
            // Skip line starts that are covered by a sibling (or cousin, etc)
            for (;;) {
                let atBreak = node.resolve(line.from);
                while (atBreak.parent && atBreak.parent.from == atBreak.from)
                    atBreak = atBreak.parent;
                if (isParent(atBreak, node))
                    break;
                line = this.state.doc.lineAt(atBreak.from);
            }
            return this.lineIndent(line.from);
        }
        /**
        Continue looking for indentations in the node's parent nodes,
        and return the result of that.
        */
        continue() {
            return indentFor(this.context.next, this.base, this.pos);
        }
    }
    function isParent(parent, of) {
        for (let cur = of; cur; cur = cur.parent)
            if (parent == cur)
                return true;
        return false;
    }
    // Check whether a delimited node is aligned (meaning there are
    // non-skipped nodes on the same line as the opening delimiter). And
    // if so, return the opening token.
    function bracketedAligned(context) {
        let tree = context.node;
        let openToken = tree.childAfter(tree.from), last = tree.lastChild;
        if (!openToken)
            return null;
        let sim = context.options.simulateBreak;
        let openLine = context.state.doc.lineAt(openToken.from);
        let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
        for (let pos = openToken.to;;) {
            let next = tree.childAfter(pos);
            if (!next || next == last)
                return null;
            if (!next.type.isSkipped) {
                if (next.from >= lineEnd)
                    return null;
                let space = /^ */.exec(openLine.text.slice(openToken.to - openLine.from))[0].length;
                return { from: openToken.from, to: openToken.to + space };
            }
            pos = next.to;
        }
    }
    /**
    An indentation strategy for delimited (usually bracketed) nodes.
    Will, by default, indent one unit more than the parent's base
    indent unless the line starts with a closing token. When `align`
    is true and there are non-skipped nodes on the node's opening
    line, the content of the node will be aligned with the end of the
    opening node, like this:

        foo(bar,
            baz)
    */
    function delimitedIndent({ closing, align = true, units = 1 }) {
        return (context) => delimitedStrategy(context, align, units, closing);
    }
    function delimitedStrategy(context, align, units, closing, closedAt) {
        let after = context.textAfter, space = after.match(/^\s*/)[0].length;
        let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
        let aligned = align ? bracketedAligned(context) : null;
        if (aligned)
            return closed ? context.column(aligned.from) : context.column(aligned.to);
        return context.baseIndent + (closed ? 0 : context.unit * units);
    }
    const DontIndentBeyond = 200;
    /**
    Enables reindentation on input. When a language defines an
    `indentOnInput` field in its [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
    expression, the line at the cursor will be reindented whenever new
    text is typed and the input from the start of the line up to the
    cursor matches that regexp.

    To avoid unneccesary reindents, it is recommended to start the
    regexp with `^` (usually followed by `\s*`), and end it with `$`.
    For example, `/^\s*\}$/` will reindent when a closing brace is
    added at the start of a line.
    */
    function indentOnInput() {
        return EditorState.transactionFilter.of(tr => {
            if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete"))
                return tr;
            let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
            if (!rules.length)
                return tr;
            let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);
            if (head > line.from + DontIndentBeyond)
                return tr;
            let lineStart = doc.sliceString(line.from, head);
            if (!rules.some(r => r.test(lineStart)))
                return tr;
            let { state } = tr, last = -1, changes = [];
            for (let { head } of state.selection.ranges) {
                let line = state.doc.lineAt(head);
                if (line.from == last)
                    continue;
                last = line.from;
                let indent = getIndentation(state, line.from);
                if (indent == null)
                    continue;
                let cur = /^\s*/.exec(line.text)[0];
                let norm = indentString(state, indent);
                if (cur != norm)
                    changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
            }
            return changes.length ? [tr, { changes, sequential: true }] : tr;
        });
    }

    /**
    A facet that registers a code folding service. When called with
    the extent of a line, such a function should return a foldable
    range that starts on that line (but continues beyond it), if one
    can be found.
    */
    const foldService = /*@__PURE__*/Facet.define();
    /**
    This node prop is used to associate folding information with
    syntax node types. Given a syntax node, it should check whether
    that tree is foldable and return the range that can be collapsed
    when it is.
    */
    const foldNodeProp = /*@__PURE__*/new NodeProp();
    /**
    [Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
    the first and the last child of a syntax node. Useful for nodes
    that start and end with delimiters.
    */
    function foldInside(node) {
        let first = node.firstChild, last = node.lastChild;
        return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
    }
    function syntaxFolding(state, start, end) {
        let tree = syntaxTree(state);
        if (tree.length < end)
            return null;
        let stack = tree.resolveStack(end, 1);
        let found = null;
        for (let iter = stack; iter; iter = iter.next) {
            let cur = iter.node;
            if (cur.to <= end || cur.from > end)
                continue;
            if (found && cur.from < start)
                break;
            let prop = cur.type.prop(foldNodeProp);
            if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {
                let value = prop(cur, state);
                if (value && value.from <= end && value.from >= start && value.to > end)
                    found = value;
            }
        }
        return found;
    }
    function isUnfinished(node) {
        let ch = node.lastChild;
        return ch && ch.to == node.to && ch.type.isError;
    }
    /**
    Check whether the given line is foldable. First asks any fold
    services registered through
    [`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
    a result, tries to query the [fold node
    prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
    of the line.
    */
    function foldable(state, lineStart, lineEnd) {
        for (let service of state.facet(foldService)) {
            let result = service(state, lineStart, lineEnd);
            if (result)
                return result;
        }
        return syntaxFolding(state, lineStart, lineEnd);
    }
    function mapRange(range, mapping) {
        let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
        return from >= to ? undefined : { from, to };
    }
    /**
    State effect that can be attached to a transaction to fold the
    given range. (You probably only need this in exceptional
    circumstances—usually you'll just want to let
    [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold
    gutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)
    */
    const foldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
    /**
    State effect that unfolds the given range (if it was folded).
    */
    const unfoldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
    function selectedLines(view) {
        let lines = [];
        for (let { head } of view.state.selection.ranges) {
            if (lines.some(l => l.from <= head && l.to >= head))
                continue;
            lines.push(view.lineBlockAt(head));
        }
        return lines;
    }
    /**
    The state field that stores the folded ranges (as a [decoration
    set](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to
    [`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and
    [`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold
    state.
    */
    const foldState = /*@__PURE__*/StateField.define({
        create() {
            return Decoration.none;
        },
        update(folded, tr) {
            if (tr.isUserEvent("delete"))
                tr.changes.iterChangedRanges((fromA, toA) => folded = clearTouchedFolds(folded, fromA, toA));
            folded = folded.map(tr.changes);
            for (let e of tr.effects) {
                if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {
                    let { preparePlaceholder } = tr.state.facet(foldConfig);
                    let widget = !preparePlaceholder ? foldWidget :
                        Decoration.replace({ widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e.value)) });
                    folded = folded.update({ add: [widget.range(e.value.from, e.value.to)] });
                }
                else if (e.is(unfoldEffect)) {
                    folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,
                        filterFrom: e.value.from, filterTo: e.value.to });
                }
            }
            // Clear folded ranges that cover the selection head
            if (tr.selection)
                folded = clearTouchedFolds(folded, tr.selection.main.head);
            return folded;
        },
        provide: f => EditorView.decorations.from(f),
        toJSON(folded, state) {
            let ranges = [];
            folded.between(0, state.doc.length, (from, to) => { ranges.push(from, to); });
            return ranges;
        },
        fromJSON(value) {
            if (!Array.isArray(value) || value.length % 2)
                throw new RangeError("Invalid JSON for fold state");
            let ranges = [];
            for (let i = 0; i < value.length;) {
                let from = value[i++], to = value[i++];
                if (typeof from != "number" || typeof to != "number")
                    throw new RangeError("Invalid JSON for fold state");
                ranges.push(foldWidget.range(from, to));
            }
            return Decoration.set(ranges, true);
        }
    });
    function clearTouchedFolds(folded, from, to = from) {
        let touched = false;
        folded.between(from, to, (a, b) => { if (a < to && b > from)
            touched = true; });
        return !touched ? folded : folded.update({
            filterFrom: from,
            filterTo: to,
            filter: (a, b) => a >= to || b <= from
        });
    }
    function findFold(state, from, to) {
        var _a;
        let found = null;
        (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {
            if (!found || found.from > from)
                found = { from, to };
        });
        return found;
    }
    function foldExists(folded, from, to) {
        let found = false;
        folded.between(from, from, (a, b) => { if (a == from && b == to)
            found = true; });
        return found;
    }
    function maybeEnable(state, other) {
        return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
    }
    /**
    Fold the lines that are selected, if possible.
    */
    const foldCode = view => {
        for (let line of selectedLines(view)) {
            let range = foldable(view.state, line.from, line.to);
            if (range) {
                view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });
                return true;
            }
        }
        return false;
    };
    /**
    Unfold folded ranges on selected lines.
    */
    const unfoldCode = view => {
        if (!view.state.field(foldState, false))
            return false;
        let effects = [];
        for (let line of selectedLines(view)) {
            let folded = findFold(view.state, line.from, line.to);
            if (folded)
                effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
        }
        if (effects.length)
            view.dispatch({ effects });
        return effects.length > 0;
    };
    function announceFold(view, range, fold = true) {
        let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;
        return EditorView.announce.of(`${view.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view.state.phrase("to")} ${lineTo}.`);
    }
    /**
    Fold all top-level foldable ranges. Note that, in most cases,
    folding information will depend on the [syntax
    tree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work
    reliably when the document hasn't been fully parsed (either
    because the editor state was only just initialized, or because the
    document is so big that the parser decided not to parse it
    entirely).
    */
    const foldAll = view => {
        let { state } = view, effects = [];
        for (let pos = 0; pos < state.doc.length;) {
            let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);
            if (range)
                effects.push(foldEffect.of(range));
            pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
        }
        if (effects.length)
            view.dispatch({ effects: maybeEnable(view.state, effects) });
        return !!effects.length;
    };
    /**
    Unfold all folded code.
    */
    const unfoldAll = view => {
        let field = view.state.field(foldState, false);
        if (!field || !field.size)
            return false;
        let effects = [];
        field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });
        view.dispatch({ effects });
        return true;
    };
    /**
    Default fold-related key bindings.

     - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).
     - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).
     - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).
     - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).
    */
    const foldKeymap = [
        { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
        { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
        { key: "Ctrl-Alt-[", run: foldAll },
        { key: "Ctrl-Alt-]", run: unfoldAll }
    ];
    const defaultConfig = {
        placeholderDOM: null,
        preparePlaceholder: null,
        placeholderText: "…"
    };
    const foldConfig = /*@__PURE__*/Facet.define({
        combine(values) { return combineConfig(values, defaultConfig); }
    });
    /**
    Create an extension that configures code folding.
    */
    function codeFolding(config) {
        let result = [foldState, baseTheme$1$2];
        return result;
    }
    function widgetToDOM(view, prepared) {
        let { state } = view, conf = state.facet(foldConfig);
        let onclick = (event) => {
            let line = view.lineBlockAt(view.posAtDOM(event.target));
            let folded = findFold(view.state, line.from, line.to);
            if (folded)
                view.dispatch({ effects: unfoldEffect.of(folded) });
            event.preventDefault();
        };
        if (conf.placeholderDOM)
            return conf.placeholderDOM(view, onclick, prepared);
        let element = document.createElement("span");
        element.textContent = conf.placeholderText;
        element.setAttribute("aria-label", state.phrase("folded code"));
        element.title = state.phrase("unfold");
        element.className = "cm-foldPlaceholder";
        element.onclick = onclick;
        return element;
    }
    const foldWidget = /*@__PURE__*/Decoration.replace({ widget: /*@__PURE__*/new class extends WidgetType {
            toDOM(view) { return widgetToDOM(view, null); }
        } });
    class PreparedFoldWidget extends WidgetType {
        constructor(value) {
            super();
            this.value = value;
        }
        eq(other) { return this.value == other.value; }
        toDOM(view) { return widgetToDOM(view, this.value); }
    }
    const foldGutterDefaults = {
        openText: "⌄",
        closedText: "›",
        markerDOM: null,
        domEventHandlers: {},
        foldingChanged: () => false
    };
    class FoldMarker extends GutterMarker {
        constructor(config, open) {
            super();
            this.config = config;
            this.open = open;
        }
        eq(other) { return this.config == other.config && this.open == other.open; }
        toDOM(view) {
            if (this.config.markerDOM)
                return this.config.markerDOM(this.open);
            let span = document.createElement("span");
            span.textContent = this.open ? this.config.openText : this.config.closedText;
            span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
            return span;
        }
    }
    /**
    Create an extension that registers a fold gutter, which shows a
    fold status indicator before foldable lines (which can be clicked
    to fold or unfold the line).
    */
    function foldGutter(config = {}) {
        let fullConfig = { ...foldGutterDefaults, ...config };
        let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
        let markers = ViewPlugin.fromClass(class {
            constructor(view) {
                this.from = view.viewport.from;
                this.markers = this.buildMarkers(view);
            }
            update(update) {
                if (update.docChanged || update.viewportChanged ||
                    update.startState.facet(language) != update.state.facet(language) ||
                    update.startState.field(foldState, false) != update.state.field(foldState, false) ||
                    syntaxTree(update.startState) != syntaxTree(update.state) ||
                    fullConfig.foldingChanged(update))
                    this.markers = this.buildMarkers(update.view);
            }
            buildMarkers(view) {
                let builder = new RangeSetBuilder();
                for (let line of view.viewportLineBlocks) {
                    let mark = findFold(view.state, line.from, line.to) ? canUnfold
                        : foldable(view.state, line.from, line.to) ? canFold : null;
                    if (mark)
                        builder.add(line.from, line.from, mark);
                }
                return builder.finish();
            }
        });
        let { domEventHandlers } = fullConfig;
        return [
            markers,
            gutter({
                class: "cm-foldGutter",
                markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty; },
                initialSpacer() {
                    return new FoldMarker(fullConfig, false);
                },
                domEventHandlers: {
                    ...domEventHandlers,
                    click: (view, line, event) => {
                        if (domEventHandlers.click && domEventHandlers.click(view, line, event))
                            return true;
                        let folded = findFold(view.state, line.from, line.to);
                        if (folded) {
                            view.dispatch({ effects: unfoldEffect.of(folded) });
                            return true;
                        }
                        let range = foldable(view.state, line.from, line.to);
                        if (range) {
                            view.dispatch({ effects: foldEffect.of(range) });
                            return true;
                        }
                        return false;
                    }
                }
            }),
            codeFolding()
        ];
    }
    const baseTheme$1$2 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-foldPlaceholder": {
            backgroundColor: "#eee",
            border: "1px solid #ddd",
            color: "#888",
            borderRadius: ".2em",
            margin: "0 1px",
            padding: "0 1px",
            cursor: "pointer"
        },
        ".cm-foldGutter span": {
            padding: "0 1px",
            cursor: "pointer"
        }
    });

    /**
    A highlight style associates CSS styles with higlighting
    [tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
    */
    class HighlightStyle {
        constructor(
        /**
        The tag styles used to create this highlight style.
        */
        specs, options) {
            this.specs = specs;
            let modSpec;
            function def(spec) {
                let cls = StyleModule.newName();
                (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
                return cls;
            }
            const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
            const scopeOpt = options.scope;
            this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data
                : scopeOpt ? (type) => type == scopeOpt : undefined;
            this.style = tagHighlighter(specs.map(style => ({
                tag: style.tag,
                class: style.class || def(Object.assign({}, style, { tag: null }))
            })), {
                all,
            }).style;
            this.module = modSpec ? new StyleModule(modSpec) : null;
            this.themeType = options.themeType;
        }
        /**
        Create a highlighter style that associates the given styles to
        the given tags. The specs must be objects that hold a style tag
        or array of tags in their `tag` property, and either a single
        `class` property providing a static CSS class (for highlighter
        that rely on external styling), or a
        [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
        set of CSS properties (which define the styling for those tags).
        
        The CSS rules created for a highlighter will be emitted in the
        order of the spec's properties. That means that for elements that
        have multiple tags associated with them, styles defined further
        down in the list will have a higher CSS precedence than styles
        defined earlier.
        */
        static define(specs, options) {
            return new HighlightStyle(specs, options || {});
        }
    }
    const highlighterFacet = /*@__PURE__*/Facet.define();
    const fallbackHighlighter = /*@__PURE__*/Facet.define({
        combine(values) { return values.length ? [values[0]] : null; }
    });
    function getHighlighters(state) {
        let main = state.facet(highlighterFacet);
        return main.length ? main : state.facet(fallbackHighlighter);
    }
    /**
    Wrap a highlighter in an editor extension that uses it to apply
    syntax highlighting to the editor content.

    When multiple (non-fallback) styles are provided, the styling
    applied is the union of the classes they emit.
    */
    function syntaxHighlighting(highlighter, options) {
        let ext = [treeHighlighter], themeType;
        if (highlighter instanceof HighlightStyle) {
            if (highlighter.module)
                ext.push(EditorView.styleModule.of(highlighter.module));
            themeType = highlighter.themeType;
        }
        if (options === null || options === void 0 ? void 0 : options.fallback)
            ext.push(fallbackHighlighter.of(highlighter));
        else if (themeType)
            ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {
                return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
            }));
        else
            ext.push(highlighterFacet.of(highlighter));
        return ext;
    }
    class TreeHighlighter {
        constructor(view) {
            this.markCache = Object.create(null);
            this.tree = syntaxTree(view.state);
            this.decorations = this.buildDeco(view, getHighlighters(view.state));
            this.decoratedTo = view.viewport.to;
        }
        update(update) {
            let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
            let styleChange = highlighters != getHighlighters(update.startState);
            let { viewport } = update.view, decoratedToMapped = update.changes.mapPos(this.decoratedTo, 1);
            if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {
                this.decorations = this.decorations.map(update.changes);
                this.decoratedTo = decoratedToMapped;
            }
            else if (tree != this.tree || update.viewportChanged || styleChange) {
                this.tree = tree;
                this.decorations = this.buildDeco(update.view, highlighters);
                this.decoratedTo = viewport.to;
            }
        }
        buildDeco(view, highlighters) {
            if (!highlighters || !this.tree.length)
                return Decoration.none;
            let builder = new RangeSetBuilder();
            for (let { from, to } of view.visibleRanges) {
                highlightTree(this.tree, highlighters, (from, to, style) => {
                    builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
                }, from, to);
            }
            return builder.finish();
        }
    }
    const treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {
        decorations: v => v.decorations
    }));
    /**
    A default highlight style (works well with light themes).
    */
    const defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([
        { tag: tags.meta,
            color: "#404740" },
        { tag: tags.link,
            textDecoration: "underline" },
        { tag: tags.heading,
            textDecoration: "underline",
            fontWeight: "bold" },
        { tag: tags.emphasis,
            fontStyle: "italic" },
        { tag: tags.strong,
            fontWeight: "bold" },
        { tag: tags.strikethrough,
            textDecoration: "line-through" },
        { tag: tags.keyword,
            color: "#708" },
        { tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
            color: "#219" },
        { tag: [tags.literal, tags.inserted],
            color: "#164" },
        { tag: [tags.string, tags.deleted],
            color: "#a11" },
        { tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],
            color: "#e40" },
        { tag: /*@__PURE__*/tags.definition(tags.variableName),
            color: "#00f" },
        { tag: /*@__PURE__*/tags.local(tags.variableName),
            color: "#30a" },
        { tag: [tags.typeName, tags.namespace],
            color: "#085" },
        { tag: tags.className,
            color: "#167" },
        { tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],
            color: "#256" },
        { tag: /*@__PURE__*/tags.definition(tags.propertyName),
            color: "#00c" },
        { tag: tags.comment,
            color: "#940" },
        { tag: tags.invalid,
            color: "#f00" }
    ]);

    const baseTheme$3 = /*@__PURE__*/EditorView.baseTheme({
        "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
        "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
    });
    const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
    const bracketMatchingConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                afterCursor: true,
                brackets: DefaultBrackets,
                maxScanDistance: DefaultScanDist,
                renderMatch: defaultRenderMatch
            });
        }
    });
    const matchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-matchingBracket" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-nonmatchingBracket" });
    function defaultRenderMatch(match) {
        let decorations = [];
        let mark = match.matched ? matchingMark : nonmatchingMark;
        decorations.push(mark.range(match.start.from, match.start.to));
        if (match.end)
            decorations.push(mark.range(match.end.from, match.end.to));
        return decorations;
    }
    const bracketMatchingState = /*@__PURE__*/StateField.define({
        create() { return Decoration.none; },
        update(deco, tr) {
            if (!tr.docChanged && !tr.selection)
                return deco;
            let decorations = [];
            let config = tr.state.facet(bracketMatchingConfig);
            for (let range of tr.state.selection.ranges) {
                if (!range.empty)
                    continue;
                let match = matchBrackets(tr.state, range.head, -1, config)
                    || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))
                    || (config.afterCursor &&
                        (matchBrackets(tr.state, range.head, 1, config) ||
                            (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));
                if (match)
                    decorations = decorations.concat(config.renderMatch(match, tr.state));
            }
            return Decoration.set(decorations, true);
        },
        provide: f => EditorView.decorations.from(f)
    });
    const bracketMatchingUnique = [
        bracketMatchingState,
        baseTheme$3
    ];
    /**
    Create an extension that enables bracket matching. Whenever the
    cursor is next to a bracket, that bracket and the one it matches
    are highlighted. Or, when no matching bracket is found, another
    highlighting style is used to indicate this.
    */
    function bracketMatching(config = {}) {
        return [bracketMatchingConfig.of(config), bracketMatchingUnique];
    }
    /**
    When larger syntax nodes, such as HTML tags, are marked as
    opening/closing, it can be a bit messy to treat the whole node as
    a matchable bracket. This node prop allows you to define, for such
    a node, a ‘handle’—the part of the node that is highlighted, and
    that the cursor must be on to activate highlighting in the first
    place.
    */
    const bracketMatchingHandle = /*@__PURE__*/new NodeProp();
    function matchingNodes(node, dir, brackets) {
        let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
        if (byProp)
            return byProp;
        if (node.name.length == 1) {
            let index = brackets.indexOf(node.name);
            if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
                return [brackets[index + dir]];
        }
        return null;
    }
    function findHandle(node) {
        let hasHandle = node.type.prop(bracketMatchingHandle);
        return hasHandle ? hasHandle(node.node) : node;
    }
    /**
    Find the matching bracket for the token at `pos`, scanning
    direction `dir`. Only the `brackets` and `maxScanDistance`
    properties are used from `config`, if given. Returns null if no
    bracket was found at `pos`, or a match result otherwise.
    */
    function matchBrackets(state, pos, dir, config = {}) {
        let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
        let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
        for (let cur = node; cur; cur = cur.parent) {
            let matches = matchingNodes(cur.type, dir, brackets);
            if (matches && cur.from < cur.to) {
                let handle = findHandle(cur);
                if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))
                    return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);
            }
        }
        return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
    }
    function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {
        let parent = token.parent, firstToken = { from: handle.from, to: handle.to };
        let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
        if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
            do {
                if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
                    if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
                        let endHandle = findHandle(cursor);
                        return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : undefined, matched: true };
                    }
                    else if (matchingNodes(cursor.type, dir, brackets)) {
                        depth++;
                    }
                    else if (matchingNodes(cursor.type, -dir, brackets)) {
                        if (depth == 0) {
                            let endHandle = findHandle(cursor);
                            return {
                                start: firstToken,
                                end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : undefined,
                                matched: false
                            };
                        }
                        depth--;
                    }
                }
            } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
        return { start: firstToken, matched: false };
    }
    function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
        let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
        let bracket = brackets.indexOf(startCh);
        if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
            return null;
        let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
        let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
        for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
            let text = iter.value;
            if (dir < 0)
                distance += text.length;
            let basePos = pos + distance * dir;
            for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
                let found = brackets.indexOf(text[pos]);
                if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType)
                    continue;
                if ((found % 2 == 0) == (dir > 0)) {
                    depth++;
                }
                else if (depth == 1) { // Closing
                    return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
                }
                else {
                    depth--;
                }
            }
            if (dir > 0)
                distance += text.length;
        }
        return iter.done ? { start: startToken, matched: false } : null;
    }
    const noTokens = /*@__PURE__*/Object.create(null);
    const typeArray = [NodeType.none];
    const warned = [];
    // Cache of node types by name and tags
    const byTag = /*@__PURE__*/Object.create(null);
    const defaultTable = /*@__PURE__*/Object.create(null);
    for (let [legacyName, name] of [
        ["variable", "variableName"],
        ["variable-2", "variableName.special"],
        ["string-2", "string.special"],
        ["def", "variableName.definition"],
        ["tag", "tagName"],
        ["attribute", "attributeName"],
        ["type", "typeName"],
        ["builtin", "variableName.standard"],
        ["qualifier", "modifier"],
        ["error", "invalid"],
        ["header", "heading"],
        ["property", "propertyName"]
    ])
        defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);
    function warnForPart(part, msg) {
        if (warned.indexOf(part) > -1)
            return;
        warned.push(part);
        console.warn(msg);
    }
    function createTokenType(extra, tagStr) {
        let tags$1 = [];
        for (let name of tagStr.split(" ")) {
            let found = [];
            for (let part of name.split(".")) {
                let value = (extra[part] || tags[part]);
                if (!value) {
                    warnForPart(part, `Unknown highlighting tag ${part}`);
                }
                else if (typeof value == "function") {
                    if (!found.length)
                        warnForPart(part, `Modifier ${part} used at start of tag`);
                    else
                        found = found.map(value);
                }
                else {
                    if (found.length)
                        warnForPart(part, `Tag ${part} used as modifier`);
                    else
                        found = Array.isArray(value) ? value : [value];
                }
            }
            for (let tag of found)
                tags$1.push(tag);
        }
        if (!tags$1.length)
            return 0;
        let name = tagStr.replace(/ /g, "_"), key = name + " " + tags$1.map(t => t.id);
        let known = byTag[key];
        if (known)
            return known.id;
        let type = byTag[key] = NodeType.define({
            id: typeArray.length,
            name,
            props: [styleTags({ [name]: tags$1 })]
        });
        typeArray.push(type);
        return type.id;
    }
    ({
        rtl: /*@__PURE__*/Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "rtl" }, bidiIsolate: Direction.RTL }),
        ltr: /*@__PURE__*/Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "ltr" }, bidiIsolate: Direction.LTR })});

    /**
    Comment or uncomment the current selection. Will use line comments
    if available, otherwise falling back to block comments.
    */
    const toggleComment = target => {
        let { state } = target, line = state.doc.lineAt(state.selection.main.from), config = getConfig(target.state, line.from);
        return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
    };
    function command(f, option) {
        return ({ state, dispatch }) => {
            if (state.readOnly)
                return false;
            let tr = f(option, state);
            if (!tr)
                return false;
            dispatch(state.update(tr));
            return true;
        };
    }
    /**
    Comment or uncomment the current selection using line comments.
    The line comment syntax is taken from the
    [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
    */
    const toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* CommentOption.Toggle */);
    /**
    Comment or uncomment the current selection using block comments.
    The block comment syntax is taken from the
    [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
    */
    const toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* CommentOption.Toggle */);
    /**
    Comment or uncomment the lines around the current selection using
    block comments.
    */
    const toggleBlockCommentByLine = /*@__PURE__*/command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* CommentOption.Toggle */);
    function getConfig(state, pos) {
        let data = state.languageDataAt("commentTokens", pos, 1);
        return data.length ? data[0] : {};
    }
    const SearchMargin = 50;
    /**
    Determines if the given range is block-commented in the given
    state.
    */
    function findBlockComment(state, { open, close }, from, to) {
        let textBefore = state.sliceDoc(from - SearchMargin, from);
        let textAfter = state.sliceDoc(to, to + SearchMargin);
        let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
        let beforeOff = textBefore.length - spaceBefore;
        if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&
            textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
            return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
                close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };
        }
        let startText, endText;
        if (to - from <= 2 * SearchMargin) {
            startText = endText = state.sliceDoc(from, to);
        }
        else {
            startText = state.sliceDoc(from, from + SearchMargin);
            endText = state.sliceDoc(to - SearchMargin, to);
        }
        let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
        let endOff = endText.length - endSpace - close.length;
        if (startText.slice(startSpace, startSpace + open.length) == open &&
            endText.slice(endOff, endOff + close.length) == close) {
            return { open: { pos: from + startSpace + open.length,
                    margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },
                close: { pos: to - endSpace - close.length,
                    margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };
        }
        return null;
    }
    function selectedLineRanges(state) {
        let ranges = [];
        for (let r of state.selection.ranges) {
            let fromLine = state.doc.lineAt(r.from);
            let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
            if (toLine.from > fromLine.from && toLine.from == r.to)
                toLine = r.to == fromLine.to + 1 ? fromLine : state.doc.lineAt(r.to - 1);
            let last = ranges.length - 1;
            if (last >= 0 && ranges[last].to > fromLine.from)
                ranges[last].to = toLine.to;
            else
                ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
        }
        return ranges;
    }
    // Performs toggle, comment and uncomment of block comments in
    // languages that support them.
    function changeBlockComment(option, state, ranges = state.selection.ranges) {
        let tokens = ranges.map(r => getConfig(state, r.from).block);
        if (!tokens.every(c => c))
            return null;
        let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
        if (option != 2 /* CommentOption.Uncomment */ && !comments.every(c => c)) {
            return { changes: state.changes(ranges.map((range, i) => {
                    if (comments[i])
                        return [];
                    return [{ from: range.from, insert: tokens[i].open + " " }, { from: range.to, insert: " " + tokens[i].close }];
                })) };
        }
        else if (option != 1 /* CommentOption.Comment */ && comments.some(c => c)) {
            let changes = [];
            for (let i = 0, comment; i < comments.length; i++)
                if (comment = comments[i]) {
                    let token = tokens[i], { open, close } = comment;
                    changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
                }
            return { changes };
        }
        return null;
    }
    // Performs toggle, comment and uncomment of line comments.
    function changeLineComment(option, state, ranges = state.selection.ranges) {
        let lines = [];
        let prevLine = -1;
        for (let { from, to } of ranges) {
            let startI = lines.length, minIndent = 1e9;
            let token = getConfig(state, from).line;
            if (!token)
                continue;
            for (let pos = from; pos <= to;) {
                let line = state.doc.lineAt(pos);
                if (line.from > prevLine && (from == to || to > line.from)) {
                    prevLine = line.from;
                    let indent = /^\s*/.exec(line.text)[0].length;
                    let empty = indent == line.length;
                    let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
                    if (indent < line.text.length && indent < minIndent)
                        minIndent = indent;
                    lines.push({ line, comment, token, indent, empty, single: false });
                }
                pos = line.to + 1;
            }
            if (minIndent < 1e9)
                for (let i = startI; i < lines.length; i++)
                    if (lines[i].indent < lines[i].line.text.length)
                        lines[i].indent = minIndent;
            if (lines.length == startI + 1)
                lines[startI].single = true;
        }
        if (option != 2 /* CommentOption.Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {
            let changes = [];
            for (let { line, token, indent, empty, single } of lines)
                if (single || !empty)
                    changes.push({ from: line.from + indent, insert: token + " " });
            let changeSet = state.changes(changes);
            return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
        }
        else if (option != 1 /* CommentOption.Comment */ && lines.some(l => l.comment >= 0)) {
            let changes = [];
            for (let { line, comment, token } of lines)
                if (comment >= 0) {
                    let from = line.from + comment, to = from + token.length;
                    if (line.text[to - line.from] == " ")
                        to++;
                    changes.push({ from, to });
                }
            return { changes };
        }
        return null;
    }

    const fromHistory = /*@__PURE__*/Annotation.define();
    /**
    Transaction annotation that will prevent that transaction from
    being combined with other transactions in the undo history. Given
    `"before"`, it'll prevent merging with previous transactions. With
    `"after"`, subsequent transactions won't be combined with this
    one. With `"full"`, the transaction is isolated on both sides.
    */
    const isolateHistory = /*@__PURE__*/Annotation.define();
    /**
    This facet provides a way to register functions that, given a
    transaction, provide a set of effects that the history should
    store when inverting the transaction. This can be used to
    integrate some kinds of effects in the history, so that they can
    be undone (and redone again).
    */
    const invertedEffects = /*@__PURE__*/Facet.define();
    const historyConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                minDepth: 100,
                newGroupDelay: 500,
                joinToEvent: (_t, isAdjacent) => isAdjacent,
            }, {
                minDepth: Math.max,
                newGroupDelay: Math.min,
                joinToEvent: (a, b) => (tr, adj) => a(tr, adj) || b(tr, adj)
            });
        }
    });
    const historyField_ = /*@__PURE__*/StateField.define({
        create() {
            return HistoryState.empty;
        },
        update(state, tr) {
            let config = tr.state.facet(historyConfig);
            let fromHist = tr.annotation(fromHistory);
            if (fromHist) {
                let item = HistEvent.fromTransaction(tr, fromHist.selection), from = fromHist.side;
                let other = from == 0 /* BranchName.Done */ ? state.undone : state.done;
                if (item)
                    other = updateBranch(other, other.length, config.minDepth, item);
                else
                    other = addSelection(other, tr.startState.selection);
                return new HistoryState(from == 0 /* BranchName.Done */ ? fromHist.rest : other, from == 0 /* BranchName.Done */ ? other : fromHist.rest);
            }
            let isolate = tr.annotation(isolateHistory);
            if (isolate == "full" || isolate == "before")
                state = state.isolate();
            if (tr.annotation(Transaction.addToHistory) === false)
                return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
            let event = HistEvent.fromTransaction(tr);
            let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
            if (event)
                state = state.addChanges(event, time, userEvent, config, tr);
            else if (tr.selection)
                state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
            if (isolate == "full" || isolate == "after")
                state = state.isolate();
            return state;
        },
        toJSON(value) {
            return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };
        },
        fromJSON(json) {
            return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
        }
    });
    /**
    Create a history extension with the given configuration.
    */
    function history(config = {}) {
        return [
            historyField_,
            historyConfig.of(config),
            EditorView.domEventHandlers({
                beforeinput(e, view) {
                    let command = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
                    if (!command)
                        return false;
                    e.preventDefault();
                    return command(view);
                }
            })
        ];
    }
    function cmd(side, selection) {
        return function ({ state, dispatch }) {
            if (!selection && state.readOnly)
                return false;
            let historyState = state.field(historyField_, false);
            if (!historyState)
                return false;
            let tr = historyState.pop(side, state, selection);
            if (!tr)
                return false;
            dispatch(tr);
            return true;
        };
    }
    /**
    Undo a single group of history events. Returns false if no group
    was available.
    */
    const undo = /*@__PURE__*/cmd(0 /* BranchName.Done */, false);
    /**
    Redo a group of history events. Returns false if no group was
    available.
    */
    const redo = /*@__PURE__*/cmd(1 /* BranchName.Undone */, false);
    /**
    Undo a change or selection change.
    */
    const undoSelection = /*@__PURE__*/cmd(0 /* BranchName.Done */, true);
    /**
    Redo a change or selection change.
    */
    const redoSelection = /*@__PURE__*/cmd(1 /* BranchName.Undone */, true);
    // History events store groups of changes or effects that need to be
    // undone/redone together.
    class HistEvent {
        constructor(
        // The changes in this event. Normal events hold at least one
        // change or effect. But it may be necessary to store selection
        // events before the first change, in which case a special type of
        // instance is created which doesn't hold any changes, with
        // changes == startSelection == undefined
        changes, 
        // The effects associated with this event
        effects, 
        // Accumulated mapping (from addToHistory==false) that should be
        // applied to events below this one.
        mapped, 
        // The selection before this event
        startSelection, 
        // Stores selection changes after this event, to be used for
        // selection undo/redo.
        selectionsAfter) {
            this.changes = changes;
            this.effects = effects;
            this.mapped = mapped;
            this.startSelection = startSelection;
            this.selectionsAfter = selectionsAfter;
        }
        setSelAfter(after) {
            return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
        }
        toJSON() {
            var _a, _b, _c;
            return {
                changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
                mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
                startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
                selectionsAfter: this.selectionsAfter.map(s => s.toJSON())
            };
        }
        static fromJSON(json) {
            return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
        }
        // This does not check `addToHistory` and such, it assumes the
        // transaction needs to be converted to an item. Returns null when
        // there are no changes or effects in the transaction.
        static fromTransaction(tr, selection) {
            let effects = none$1;
            for (let invert of tr.startState.facet(invertedEffects)) {
                let result = invert(tr);
                if (result.length)
                    effects = effects.concat(result);
            }
            if (!effects.length && tr.changes.empty)
                return null;
            return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none$1);
        }
        static selection(selections) {
            return new HistEvent(undefined, none$1, undefined, undefined, selections);
        }
    }
    function updateBranch(branch, to, maxLen, newEvent) {
        let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
        let newBranch = branch.slice(start, to);
        newBranch.push(newEvent);
        return newBranch;
    }
    function isAdjacent(a, b) {
        let ranges = [], isAdjacent = false;
        a.iterChangedRanges((f, t) => ranges.push(f, t));
        b.iterChangedRanges((_f, _t, f, t) => {
            for (let i = 0; i < ranges.length;) {
                let from = ranges[i++], to = ranges[i++];
                if (t >= from && f <= to)
                    isAdjacent = true;
            }
        });
        return isAdjacent;
    }
    function eqSelectionShape(a, b) {
        return a.ranges.length == b.ranges.length &&
            a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
    }
    function conc(a, b) {
        return !a.length ? b : !b.length ? a : a.concat(b);
    }
    const none$1 = [];
    const MaxSelectionsPerEvent = 200;
    function addSelection(branch, selection) {
        if (!branch.length) {
            return [HistEvent.selection([selection])];
        }
        else {
            let lastEvent = branch[branch.length - 1];
            let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
            if (sels.length && sels[sels.length - 1].eq(selection))
                return branch;
            sels.push(selection);
            return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
        }
    }
    // Assumes the top item has one or more selectionAfter values
    function popSelection(branch) {
        let last = branch[branch.length - 1];
        let newBranch = branch.slice();
        newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
        return newBranch;
    }
    // Add a mapping to the top event in the given branch. If this maps
    // away all the changes and effects in that item, drop it and
    // propagate the mapping to the next item.
    function addMappingToBranch(branch, mapping) {
        if (!branch.length)
            return branch;
        let length = branch.length, selections = none$1;
        while (length) {
            let event = mapEvent(branch[length - 1], mapping, selections);
            if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping
                let result = branch.slice(0, length);
                result[length - 1] = event;
                return result;
            }
            else { // Drop this event, since there's no changes or effects left
                mapping = event.mapped;
                length--;
                selections = event.selectionsAfter;
            }
        }
        return selections.length ? [HistEvent.selection(selections)] : none$1;
    }
    function mapEvent(event, mapping, extraSelections) {
        let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none$1, extraSelections);
        // Change-less events don't store mappings (they are always the last event in a branch)
        if (!event.changes)
            return HistEvent.selection(selections);
        let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
        let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
        return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
    }
    const joinableUserEvent = /^(input\.type|delete)($|\.)/;
    class HistoryState {
        constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {
            this.done = done;
            this.undone = undone;
            this.prevTime = prevTime;
            this.prevUserEvent = prevUserEvent;
        }
        isolate() {
            return this.prevTime ? new HistoryState(this.done, this.undone) : this;
        }
        addChanges(event, time, userEvent, config, tr) {
            let done = this.done, lastEvent = done[done.length - 1];
            if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&
                (!userEvent || joinableUserEvent.test(userEvent)) &&
                ((!lastEvent.selectionsAfter.length &&
                    time - this.prevTime < config.newGroupDelay &&
                    config.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes))) ||
                    // For compose (but not compose.start) events, always join with previous event
                    userEvent == "input.type.compose")) {
                done = updateBranch(done, done.length - 1, config.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(StateEffect.mapEffects(event.effects, lastEvent.changes), lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none$1));
            }
            else {
                done = updateBranch(done, done.length, config.minDepth, event);
            }
            return new HistoryState(done, none$1, time, userEvent);
        }
        addSelection(selection, time, userEvent, newGroupDelay) {
            let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none$1;
            if (last.length > 0 &&
                time - this.prevTime < newGroupDelay &&
                userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) &&
                eqSelectionShape(last[last.length - 1], selection))
                return this;
            return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
        }
        addMapping(mapping) {
            return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
        }
        pop(side, state, onlySelection) {
            let branch = side == 0 /* BranchName.Done */ ? this.done : this.undone;
            if (branch.length == 0)
                return null;
            let event = branch[branch.length - 1], selection = event.selectionsAfter[0] || state.selection;
            if (onlySelection && event.selectionsAfter.length) {
                return state.update({
                    selection: event.selectionsAfter[event.selectionsAfter.length - 1],
                    annotations: fromHistory.of({ side, rest: popSelection(branch), selection }),
                    userEvent: side == 0 /* BranchName.Done */ ? "select.undo" : "select.redo",
                    scrollIntoView: true
                });
            }
            else if (!event.changes) {
                return null;
            }
            else {
                let rest = branch.length == 1 ? none$1 : branch.slice(0, branch.length - 1);
                if (event.mapped)
                    rest = addMappingToBranch(rest, event.mapped);
                return state.update({
                    changes: event.changes,
                    selection: event.startSelection,
                    effects: event.effects,
                    annotations: fromHistory.of({ side, rest, selection }),
                    filter: false,
                    userEvent: side == 0 /* BranchName.Done */ ? "undo" : "redo",
                    scrollIntoView: true
                });
            }
        }
    }
    HistoryState.empty = /*@__PURE__*/new HistoryState(none$1, none$1);
    /**
    Default key bindings for the undo history.

    - Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).
    - Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).
    - Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).
    - Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).
    */
    const historyKeymap = [
        { key: "Mod-z", run: undo, preventDefault: true },
        { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
        { linux: "Ctrl-Shift-z", run: redo, preventDefault: true },
        { key: "Mod-u", run: undoSelection, preventDefault: true },
        { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
    ];

    function updateSel(sel, by) {
        return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
    }
    function setSel(state, selection) {
        return state.update({ selection, scrollIntoView: true, userEvent: "select" });
    }
    function moveSel({ state, dispatch }, how) {
        let selection = updateSel(state.selection, how);
        if (selection.eq(state.selection, true))
            return false;
        dispatch(setSel(state, selection));
        return true;
    }
    function rangeEnd(range, forward) {
        return EditorSelection.cursor(forward ? range.to : range.from);
    }
    function cursorByChar(view, forward) {
        return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
    }
    function ltrAtCursor(view) {
        return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
    }
    /**
    Move the selection one character to the left (which is backward in
    left-to-right text, forward in right-to-left text).
    */
    const cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));
    /**
    Move the selection one character to the right.
    */
    const cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));
    function cursorByGroup(view, forward) {
        return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
    }
    /**
    Move the selection to the left across one group of word or
    non-word (but also non-space) characters.
    */
    const cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));
    /**
    Move the selection one group to the right.
    */
    const cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));
    function interestingNode(state, node, bracketProp) {
        if (node.type.prop(bracketProp))
            return true;
        let len = node.to - node.from;
        return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
    }
    function moveBySyntax(state, start, forward) {
        let pos = syntaxTree(state).resolveInner(start.head);
        let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
        // Scan forward through child nodes to see if there's an interesting
        // node ahead.
        for (let at = start.head;;) {
            let next = forward ? pos.childAfter(at) : pos.childBefore(at);
            if (!next)
                break;
            if (interestingNode(state, next, bracketProp))
                pos = next;
            else
                at = forward ? next.to : next.from;
        }
        let bracket = pos.type.prop(bracketProp), match, newPos;
        if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
            newPos = forward ? match.end.to : match.end.from;
        else
            newPos = forward ? pos.to : pos.from;
        return EditorSelection.cursor(newPos, forward ? -1 : 1);
    }
    /**
    Move the cursor over the next syntactic element to the left.
    */
    const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
    /**
    Move the cursor over the next syntactic element to the right.
    */
    const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
    function cursorByLine(view, forward) {
        return moveSel(view, range => {
            if (!range.empty)
                return rangeEnd(range, forward);
            let moved = view.moveVertically(range, forward);
            return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
        });
    }
    /**
    Move the selection one line up.
    */
    const cursorLineUp = view => cursorByLine(view, false);
    /**
    Move the selection one line down.
    */
    const cursorLineDown = view => cursorByLine(view, true);
    function pageInfo(view) {
        let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
        let marginTop = 0, marginBottom = 0, height;
        if (selfScroll) {
            for (let source of view.state.facet(EditorView.scrollMargins)) {
                let margins = source(view);
                if (margins === null || margins === void 0 ? void 0 : margins.top)
                    marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
                if (margins === null || margins === void 0 ? void 0 : margins.bottom)
                    marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
            }
            height = view.scrollDOM.clientHeight - marginTop - marginBottom;
        }
        else {
            height = (view.dom.ownerDocument.defaultView || window).innerHeight;
        }
        return { marginTop, marginBottom, selfScroll,
            height: Math.max(view.defaultLineHeight, height - 5) };
    }
    function cursorByPage(view, forward) {
        let page = pageInfo(view);
        let { state } = view, selection = updateSel(state.selection, range => {
            return range.empty ? view.moveVertically(range, forward, page.height)
                : rangeEnd(range, forward);
        });
        if (selection.eq(state.selection))
            return false;
        let effect;
        if (page.selfScroll) {
            let startPos = view.coordsAtPos(state.selection.main.head);
            let scrollRect = view.scrollDOM.getBoundingClientRect();
            let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
            if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
                effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollTop });
        }
        view.dispatch(setSel(state, selection), { effects: effect });
        return true;
    }
    /**
    Move the selection one page up.
    */
    const cursorPageUp = view => cursorByPage(view, false);
    /**
    Move the selection one page down.
    */
    const cursorPageDown = view => cursorByPage(view, true);
    function moveByLineBoundary(view, start, forward) {
        let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
        if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
            moved = view.moveToLineBoundary(start, forward, false);
        if (!forward && moved.head == line.from && line.length) {
            let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
            if (space && start.head != line.from + space)
                moved = EditorSelection.cursor(line.from + space);
        }
        return moved;
    }
    /**
    Move the selection to the next line wrap point, or to the end of
    the line if there isn't one left on this line.
    */
    const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
    /**
    Move the selection to previous line wrap point, or failing that to
    the start of the line. If the line is indented, and the cursor
    isn't already at the end of the indentation, this will move to the
    end of the indentation instead of the start of the line.
    */
    const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
    /**
    Move the selection one line wrap point to the left.
    */
    const cursorLineBoundaryLeft = view => moveSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
    /**
    Move the selection one line wrap point to the right.
    */
    const cursorLineBoundaryRight = view => moveSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
    /**
    Move the selection to the start of the line.
    */
    const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
    /**
    Move the selection to the end of the line.
    */
    const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
    function toMatchingBracket(state, dispatch, extend) {
        let found = false, selection = updateSel(state.selection, range => {
            let matching = matchBrackets(state, range.head, -1)
                || matchBrackets(state, range.head, 1)
                || (range.head > 0 && matchBrackets(state, range.head - 1, 1))
                || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));
            if (!matching || !matching.end)
                return range;
            found = true;
            let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
            return EditorSelection.cursor(head);
        });
        if (!found)
            return false;
        dispatch(setSel(state, selection));
        return true;
    }
    /**
    Move the selection to the bracket matching the one it is currently
    on, if any.
    */
    const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch);
    function extendSel(target, how) {
        let selection = updateSel(target.state.selection, range => {
            let head = how(range);
            return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);
        });
        if (selection.eq(target.state.selection))
            return false;
        target.dispatch(setSel(target.state, selection));
        return true;
    }
    function selectByChar(view, forward) {
        return extendSel(view, range => view.moveByChar(range, forward));
    }
    /**
    Move the selection head one character to the left, while leaving
    the anchor in place.
    */
    const selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));
    /**
    Move the selection head one character to the right.
    */
    const selectCharRight = view => selectByChar(view, ltrAtCursor(view));
    function selectByGroup(view, forward) {
        return extendSel(view, range => view.moveByGroup(range, forward));
    }
    /**
    Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
    the left.
    */
    const selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));
    /**
    Move the selection head one group to the right.
    */
    const selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));
    /**
    Move the selection head over the next syntactic element to the left.
    */
    const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
    /**
    Move the selection head over the next syntactic element to the right.
    */
    const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
    function selectByLine(view, forward) {
        return extendSel(view, range => view.moveVertically(range, forward));
    }
    /**
    Move the selection head one line up.
    */
    const selectLineUp = view => selectByLine(view, false);
    /**
    Move the selection head one line down.
    */
    const selectLineDown = view => selectByLine(view, true);
    function selectByPage(view, forward) {
        return extendSel(view, range => view.moveVertically(range, forward, pageInfo(view).height));
    }
    /**
    Move the selection head one page up.
    */
    const selectPageUp = view => selectByPage(view, false);
    /**
    Move the selection head one page down.
    */
    const selectPageDown = view => selectByPage(view, true);
    /**
    Move the selection head to the next line boundary.
    */
    const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
    /**
    Move the selection head to the previous line boundary.
    */
    const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
    /**
    Move the selection head one line boundary to the left.
    */
    const selectLineBoundaryLeft = view => extendSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
    /**
    Move the selection head one line boundary to the right.
    */
    const selectLineBoundaryRight = view => extendSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
    /**
    Move the selection head to the start of the line.
    */
    const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from));
    /**
    Move the selection head to the end of the line.
    */
    const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to));
    /**
    Move the selection to the start of the document.
    */
    const cursorDocStart = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: 0 }));
        return true;
    };
    /**
    Move the selection to the end of the document.
    */
    const cursorDocEnd = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.doc.length }));
        return true;
    };
    /**
    Move the selection head to the start of the document.
    */
    const selectDocStart = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
        return true;
    };
    /**
    Move the selection head to the end of the document.
    */
    const selectDocEnd = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
        return true;
    };
    /**
    Select the entire document.
    */
    const selectAll = ({ state, dispatch }) => {
        dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
        return true;
    };
    /**
    Expand the selection to cover entire lines.
    */
    const selectLine = ({ state, dispatch }) => {
        let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
        dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
        return true;
    };
    /**
    Select the next syntactic construct that is larger than the
    selection. Note that this will only work insofar as the language
    [provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
    syntax tree.
    */
    const selectParentSyntax = ({ state, dispatch }) => {
        let selection = updateSel(state.selection, range => {
            let tree = syntaxTree(state), stack = tree.resolveStack(range.from, 1);
            if (range.empty) {
                let stackBefore = tree.resolveStack(range.from, -1);
                if (stackBefore.node.from >= stack.node.from && stackBefore.node.to <= stack.node.to)
                    stack = stackBefore;
            }
            for (let cur = stack; cur; cur = cur.next) {
                let { node } = cur;
                if (((node.from < range.from && node.to >= range.to) ||
                    (node.to > range.to && node.from <= range.from)) &&
                    cur.next)
                    return EditorSelection.range(node.to, node.from);
            }
            return range;
        });
        if (selection.eq(state.selection))
            return false;
        dispatch(setSel(state, selection));
        return true;
    };
    /**
    Simplify the current selection. When multiple ranges are selected,
    reduce it to its main range. Otherwise, if the selection is
    non-empty, convert it to a cursor selection.
    */
    const simplifySelection = ({ state, dispatch }) => {
        let cur = state.selection, selection = null;
        if (cur.ranges.length > 1)
            selection = EditorSelection.create([cur.main]);
        else if (!cur.main.empty)
            selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
        if (!selection)
            return false;
        dispatch(setSel(state, selection));
        return true;
    };
    function deleteBy(target, by) {
        if (target.state.readOnly)
            return false;
        let event = "delete.selection", { state } = target;
        let changes = state.changeByRange(range => {
            let { from, to } = range;
            if (from == to) {
                let towards = by(range);
                if (towards < from) {
                    event = "delete.backward";
                    towards = skipAtomic(target, towards, false);
                }
                else if (towards > from) {
                    event = "delete.forward";
                    towards = skipAtomic(target, towards, true);
                }
                from = Math.min(from, towards);
                to = Math.max(to, towards);
            }
            else {
                from = skipAtomic(target, from, false);
                to = skipAtomic(target, to, true);
            }
            return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from, from < range.head ? -1 : 1) };
        });
        if (changes.changes.empty)
            return false;
        target.dispatch(state.update(changes, {
            scrollIntoView: true,
            userEvent: event,
            effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : undefined
        }));
        return true;
    }
    function skipAtomic(target, pos, forward) {
        if (target instanceof EditorView)
            for (let ranges of target.state.facet(EditorView.atomicRanges).map(f => f(target)))
                ranges.between(pos, pos, (from, to) => {
                    if (from < pos && to > pos)
                        pos = forward ? to : from;
                });
        return pos;
    }
    const deleteByChar = (target, forward, byIndentUnit) => deleteBy(target, range => {
        let pos = range.from, { state } = target, line = state.doc.lineAt(pos), before, targetPos;
        if (byIndentUnit && !forward && pos > line.from && pos < line.from + 200 &&
            !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
            if (before[before.length - 1] == "\t")
                return pos - 1;
            let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
            for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
                pos--;
            targetPos = pos;
        }
        else {
            targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
            if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
                targetPos += forward ? 1 : -1;
            else if (!forward && /[\ufe00-\ufe0f]/.test(line.text.slice(targetPos - line.from, pos - line.from)))
                targetPos = findClusterBreak(line.text, targetPos - line.from, false, false) + line.from;
        }
        return targetPos;
    });
    /**
    Delete the selection, or, for cursor selections, the character or
    indentation unit before the cursor.
    */
    const deleteCharBackward = view => deleteByChar(view, false, true);
    /**
    Delete the selection or the character after the cursor.
    */
    const deleteCharForward = view => deleteByChar(view, true, false);
    const deleteByGroup = (target, forward) => deleteBy(target, range => {
        let pos = range.head, { state } = target, line = state.doc.lineAt(pos);
        let categorize = state.charCategorizer(pos);
        for (let cat = null;;) {
            if (pos == (forward ? line.to : line.from)) {
                if (pos == range.head && line.number != (forward ? state.doc.lines : 1))
                    pos += forward ? 1 : -1;
                break;
            }
            let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
            let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
            let nextCat = categorize(nextChar);
            if (cat != null && nextCat != cat)
                break;
            if (nextChar != " " || pos != range.head)
                cat = nextCat;
            pos = next;
        }
        return pos;
    });
    /**
    Delete the selection or backward until the end of the next
    [group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
    whitespace when they consist of a single space.
    */
    const deleteGroupBackward = target => deleteByGroup(target, false);
    /**
    Delete the selection or forward until the end of the next group.
    */
    const deleteGroupForward = target => deleteByGroup(target, true);
    /**
    Delete the selection, or, if it is a cursor selection, delete to
    the end of the line. If the cursor is directly at the end of the
    line, delete the line break after it.
    */
    const deleteToLineEnd = view => deleteBy(view, range => {
        let lineEnd = view.lineBlockAt(range.head).to;
        return range.head < lineEnd ? lineEnd : Math.min(view.state.doc.length, range.head + 1);
    });
    /**
    Delete the selection, or, if it is a cursor selection, delete to
    the start of the line or the next line wrap before the cursor.
    */
    const deleteLineBoundaryBackward = view => deleteBy(view, range => {
        let lineStart = view.moveToLineBoundary(range, false).head;
        return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
    });
    /**
    Delete the selection, or, if it is a cursor selection, delete to
    the end of the line or the next line wrap after the cursor.
    */
    const deleteLineBoundaryForward = view => deleteBy(view, range => {
        let lineStart = view.moveToLineBoundary(range, true).head;
        return range.head < lineStart ? lineStart : Math.min(view.state.doc.length, range.head + 1);
    });
    /**
    Replace each selection range with a line break, leaving the cursor
    on the line before the break.
    */
    const splitLine = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let changes = state.changeByRange(range => {
            return { changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
                range: EditorSelection.cursor(range.from) };
        });
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
        return true;
    };
    /**
    Flip the characters before and after the cursor(s).
    */
    const transposeChars = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let changes = state.changeByRange(range => {
            if (!range.empty || range.from == 0 || range.from == state.doc.length)
                return { range };
            let pos = range.from, line = state.doc.lineAt(pos);
            let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
            let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
            return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
                range: EditorSelection.cursor(to) };
        });
        if (changes.changes.empty)
            return false;
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
        return true;
    };
    function selectedLineBlocks(state) {
        let blocks = [], upto = -1;
        for (let range of state.selection.ranges) {
            let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
            if (!range.empty && range.to == endLine.from)
                endLine = state.doc.lineAt(range.to - 1);
            if (upto >= startLine.number) {
                let prev = blocks[blocks.length - 1];
                prev.to = endLine.to;
                prev.ranges.push(range);
            }
            else {
                blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
            }
            upto = endLine.number + 1;
        }
        return blocks;
    }
    function moveLine(state, dispatch, forward) {
        if (state.readOnly)
            return false;
        let changes = [], ranges = [];
        for (let block of selectedLineBlocks(state)) {
            if (forward ? block.to == state.doc.length : block.from == 0)
                continue;
            let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
            let size = nextLine.length + 1;
            if (forward) {
                changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
                for (let r of block.ranges)
                    ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
            }
            else {
                changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
                for (let r of block.ranges)
                    ranges.push(EditorSelection.range(r.anchor - size, r.head - size));
            }
        }
        if (!changes.length)
            return false;
        dispatch(state.update({
            changes,
            scrollIntoView: true,
            selection: EditorSelection.create(ranges, state.selection.mainIndex),
            userEvent: "move.line"
        }));
        return true;
    }
    /**
    Move the selected lines up one line.
    */
    const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
    /**
    Move the selected lines down one line.
    */
    const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
    function copyLine(state, dispatch, forward) {
        if (state.readOnly)
            return false;
        let changes = [];
        for (let block of selectedLineBlocks(state)) {
            if (forward)
                changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
            else
                changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
        }
        dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
        return true;
    }
    /**
    Create a copy of the selected lines. Keep the selection in the top copy.
    */
    const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
    /**
    Create a copy of the selected lines. Keep the selection in the bottom copy.
    */
    const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
    /**
    Delete selected lines.
    */
    const deleteLine = view => {
        if (view.state.readOnly)
            return false;
        let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
            if (from > 0)
                from--;
            else if (to < state.doc.length)
                to++;
            return { from, to };
        }));
        let selection = updateSel(state.selection, range => {
            let dist = undefined;
            if (view.lineWrapping) {
                let block = view.lineBlockAt(range.head), pos = view.coordsAtPos(range.head, range.assoc || 1);
                if (pos)
                    dist = (block.bottom + view.documentTop) - pos.bottom + view.defaultLineHeight / 2;
            }
            return view.moveVertically(range, true, dist);
        }).map(changes);
        view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
        return true;
    };
    /**
    Replace the selection with a newline and the same amount of
    indentation as the line above.
    */
    const insertNewlineKeepIndent = ({ state, dispatch }) => {
        dispatch(state.update(state.changeByRange(range => {
            let indent = /^\s*/.exec(state.doc.lineAt(range.from).text)[0];
            return {
                changes: { from: range.from, to: range.to, insert: state.lineBreak + indent },
                range: EditorSelection.cursor(range.from + indent.length + 1)
            };
        }), { scrollIntoView: true, userEvent: "input" }));
        return true;
    };
    function isBetweenBrackets(state, pos) {
        if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
            return { from: pos, to: pos };
        let context = syntaxTree(state).resolveInner(pos);
        let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
        if (before && after && before.to <= pos && after.from >= pos &&
            (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&
            state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from &&
            !/\S/.test(state.sliceDoc(before.to, after.from)))
            return { from: before.to, to: after.from };
        return null;
    }
    /**
    Replace the selection with a newline and indent the newly created
    line(s). If the current line consists only of whitespace, this
    will also delete that whitespace. When the cursor is between
    matching brackets, an additional newline will be inserted after
    the cursor.
    */
    const insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
    /**
    Create a blank, indented line below the current line.
    */
    const insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
    function newlineAndIndent(atEof) {
        return ({ state, dispatch }) => {
            if (state.readOnly)
                return false;
            let changes = state.changeByRange(range => {
                let { from, to } = range, line = state.doc.lineAt(from);
                let explode = !atEof && from == to && isBetweenBrackets(state, from);
                if (atEof)
                    from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
                let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
                let indent = getIndentation(cx, from);
                if (indent == null)
                    indent = countColumn(/^\s*/.exec(state.doc.lineAt(from).text)[0], state.tabSize);
                while (to < line.to && /\s/.test(line.text[to - line.from]))
                    to++;
                if (explode)
                    ({ from, to } = explode);
                else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
                    from = line.from;
                let insert = ["", indentString(state, indent)];
                if (explode)
                    insert.push(indentString(state, cx.lineIndent(line.from, -1)));
                return { changes: { from, to, insert: Text.of(insert) },
                    range: EditorSelection.cursor(from + 1 + insert[1].length) };
            });
            dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
            return true;
        };
    }
    function changeBySelectedLine(state, f) {
        let atLine = -1;
        return state.changeByRange(range => {
            let changes = [];
            for (let pos = range.from; pos <= range.to;) {
                let line = state.doc.lineAt(pos);
                if (line.number > atLine && (range.empty || range.to > line.from)) {
                    f(line, changes, range);
                    atLine = line.number;
                }
                pos = line.to + 1;
            }
            let changeSet = state.changes(changes);
            return { changes,
                range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };
        });
    }
    /**
    Auto-indent the selected lines. This uses the [indentation service
    facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
    information.
    */
    const indentSelection = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let updated = Object.create(null);
        let context = new IndentContext(state, { overrideIndentation: start => {
                let found = updated[start];
                return found == null ? -1 : found;
            } });
        let changes = changeBySelectedLine(state, (line, changes, range) => {
            let indent = getIndentation(context, line.from);
            if (indent == null)
                return;
            if (!/\S/.test(line.text))
                indent = 0;
            let cur = /^\s*/.exec(line.text)[0];
            let norm = indentString(state, indent);
            if (cur != norm || range.from < line.from + cur.length) {
                updated[line.from] = indent;
                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
            }
        });
        if (!changes.changes.empty)
            dispatch(state.update(changes, { userEvent: "indent" }));
        return true;
    };
    /**
    Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
    lines.
    */
    const indentMore = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
            changes.push({ from: line.from, insert: state.facet(indentUnit) });
        }), { userEvent: "input.indent" }));
        return true;
    };
    /**
    Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
    selected lines.
    */
    const indentLess = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
            let space = /^\s*/.exec(line.text)[0];
            if (!space)
                return;
            let col = countColumn(space, state.tabSize), keep = 0;
            let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
            while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
                keep++;
            changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });
        }), { userEvent: "delete.dedent" }));
        return true;
    };
    /**
    Enables or disables
    [tab-focus mode](https://codemirror.net/6/docs/ref/#view.EditorView.setTabFocusMode). While on, this
    prevents the editor's key bindings from capturing Tab or
    Shift-Tab, making it possible for the user to move focus out of
    the editor with the keyboard.
    */
    const toggleTabFocusMode = view => {
        view.setTabFocusMode();
        return true;
    };
    /**
    Array of key bindings containing the Emacs-style bindings that are
    available on macOS by default.

     - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
     - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
     - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
     - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
     - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
     - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
     - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
     - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
     - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
     - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
     - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
     - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
     - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
     - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
    */
    const emacsStyleKeymap = [
        { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
        { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
        { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
        { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
        { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
        { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
        { key: "Ctrl-d", run: deleteCharForward },
        { key: "Ctrl-h", run: deleteCharBackward },
        { key: "Ctrl-k", run: deleteToLineEnd },
        { key: "Ctrl-Alt-h", run: deleteGroupBackward },
        { key: "Ctrl-o", run: splitLine },
        { key: "Ctrl-t", run: transposeChars },
        { key: "Ctrl-v", run: cursorPageDown },
    ];
    /**
    An array of key bindings closely sticking to platform-standard or
    widely used bindings. (This includes the bindings from
    [`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
    property changed to `mac`.)

     - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
     - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
     - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
     - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
     - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
     - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
     - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
     - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
     - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
     - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
     - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
     - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
     - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
     - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
     - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
     - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
     - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
     - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
     - Enter and Shift-Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
     - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
     - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
     - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
     - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
     - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
     - Cmd-Backspace (macOS): [`deleteLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryBackward).
     - Cmd-Delete (macOS): [`deleteLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryForward).
    */
    const standardKeymap = /*@__PURE__*/[
        { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
        { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
        { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
        { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
        { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
        { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
        { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
        { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
        { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
        { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
        { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
        { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
        { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
        { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
        { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
        { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
        { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
        { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
        { key: "Enter", run: insertNewlineAndIndent, shift: insertNewlineAndIndent },
        { key: "Mod-a", run: selectAll },
        { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
        { key: "Delete", run: deleteCharForward },
        { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
        { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
        { mac: "Mod-Backspace", run: deleteLineBoundaryBackward },
        { mac: "Mod-Delete", run: deleteLineBoundaryForward }
    ].concat(/*@__PURE__*/emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));
    /**
    The default keymap. Includes all bindings from
    [`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

    - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
    - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
    - Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
    - Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
    - Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
    - Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
    - Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
    - Ctrl-Enter (Cmd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
    - Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
    - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
    - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
    - Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
    - Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
    - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
    - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
    - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
    - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
    - Ctrl-m (Alt-Shift-m on macOS): [`toggleTabFocusMode`](https://codemirror.net/6/docs/ref/#commands.toggleTabFocusMode).
    */
    const defaultKeymap = /*@__PURE__*/[
        { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
        { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
        { key: "Alt-ArrowUp", run: moveLineUp },
        { key: "Shift-Alt-ArrowUp", run: copyLineUp },
        { key: "Alt-ArrowDown", run: moveLineDown },
        { key: "Shift-Alt-ArrowDown", run: copyLineDown },
        { key: "Escape", run: simplifySelection },
        { key: "Mod-Enter", run: insertBlankLine },
        { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
        { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
        { key: "Mod-[", run: indentLess },
        { key: "Mod-]", run: indentMore },
        { key: "Mod-Alt-\\", run: indentSelection },
        { key: "Shift-Mod-k", run: deleteLine },
        { key: "Shift-Mod-\\", run: cursorMatchingBracket },
        { key: "Mod-/", run: toggleComment },
        { key: "Alt-A", run: toggleBlockComment },
        { key: "Ctrl-m", mac: "Shift-Alt-m", run: toggleTabFocusMode },
    ].concat(standardKeymap);
    /**
    A binding that binds Tab to [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) and
    Shift-Tab to [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess).
    Please see the [Tab example](../../examples/tab/) before using
    this.
    */
    const indentWithTab = { key: "Tab", run: indentMore, shift: indentLess };

    const basicNormalize = typeof String.prototype.normalize == "function"
        ? x => x.normalize("NFKD") : x => x;
    /**
    A search cursor provides an iterator over text matches in a
    document.
    */
    class SearchCursor {
        /**
        Create a text cursor. The query is the search string, `from` to
        `to` provides the region to search.
        
        When `normalize` is given, it will be called, on both the query
        string and the content it is matched against, before comparing.
        You can, for example, create a case-insensitive search by
        passing `s => s.toLowerCase()`.
        
        Text is always normalized with
        [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
        (when supported).
        */
        constructor(text, query, from = 0, to = text.length, normalize, test) {
            this.test = test;
            /**
            The current match (only holds a meaningful value after
            [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when
            `done` is false).
            */
            this.value = { from: 0, to: 0 };
            /**
            Whether the end of the iterated region has been reached.
            */
            this.done = false;
            this.matches = [];
            this.buffer = "";
            this.bufferPos = 0;
            this.iter = text.iterRange(from, to);
            this.bufferStart = from;
            this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;
            this.query = this.normalize(query);
        }
        peek() {
            if (this.bufferPos == this.buffer.length) {
                this.bufferStart += this.buffer.length;
                this.iter.next();
                if (this.iter.done)
                    return -1;
                this.bufferPos = 0;
                this.buffer = this.iter.value;
            }
            return codePointAt(this.buffer, this.bufferPos);
        }
        /**
        Look for the next match. Updates the iterator's
        [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
        [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
        at least once before using the cursor.
        */
        next() {
            while (this.matches.length)
                this.matches.pop();
            return this.nextOverlapping();
        }
        /**
        The `next` method will ignore matches that partially overlap a
        previous match. This method behaves like `next`, but includes
        such matches.
        */
        nextOverlapping() {
            for (;;) {
                let next = this.peek();
                if (next < 0) {
                    this.done = true;
                    return this;
                }
                let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;
                this.bufferPos += codePointSize(next);
                let norm = this.normalize(str);
                if (norm.length)
                    for (let i = 0, pos = start;; i++) {
                        let code = norm.charCodeAt(i);
                        let match = this.match(code, pos, this.bufferPos + this.bufferStart);
                        if (i == norm.length - 1) {
                            if (match) {
                                this.value = match;
                                return this;
                            }
                            break;
                        }
                        if (pos == start && i < str.length && str.charCodeAt(i) == code)
                            pos++;
                    }
            }
        }
        match(code, pos, end) {
            let match = null;
            for (let i = 0; i < this.matches.length; i += 2) {
                let index = this.matches[i], keep = false;
                if (this.query.charCodeAt(index) == code) {
                    if (index == this.query.length - 1) {
                        match = { from: this.matches[i + 1], to: end };
                    }
                    else {
                        this.matches[i]++;
                        keep = true;
                    }
                }
                if (!keep) {
                    this.matches.splice(i, 2);
                    i -= 2;
                }
            }
            if (this.query.charCodeAt(0) == code) {
                if (this.query.length == 1)
                    match = { from: pos, to: end };
                else
                    this.matches.push(1, pos);
            }
            if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferStart))
                match = null;
            return match;
        }
    }
    if (typeof Symbol != "undefined")
        SearchCursor.prototype[Symbol.iterator] = function () { return this; };

    const empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec("") };
    const baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
    /**
    This class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)
    but searches for a regular expression pattern instead of a plain
    string.
    */
    class RegExpCursor {
        /**
        Create a cursor that will search the given range in the given
        document. `query` should be the raw pattern (as you'd pass it to
        `new RegExp`).
        */
        constructor(text, query, options, from = 0, to = text.length) {
            this.text = text;
            this.to = to;
            this.curLine = "";
            /**
            Set to `true` when the cursor has reached the end of the search
            range.
            */
            this.done = false;
            /**
            Will contain an object with the extent of the match and the
            match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)
            sucessfully finds a match.
            */
            this.value = empty;
            if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
                return new MultilineRegExpCursor(text, query, options, from, to);
            this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
            this.test = options === null || options === void 0 ? void 0 : options.test;
            this.iter = text.iter();
            let startLine = text.lineAt(from);
            this.curLineStart = startLine.from;
            this.matchPos = toCharEnd(text, from);
            this.getLine(this.curLineStart);
        }
        getLine(skip) {
            this.iter.next(skip);
            if (this.iter.lineBreak) {
                this.curLine = "";
            }
            else {
                this.curLine = this.iter.value;
                if (this.curLineStart + this.curLine.length > this.to)
                    this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
                this.iter.next();
            }
        }
        nextLine() {
            this.curLineStart = this.curLineStart + this.curLine.length + 1;
            if (this.curLineStart > this.to)
                this.curLine = "";
            else
                this.getLine(0);
        }
        /**
        Move to the next match, if there is one.
        */
        next() {
            for (let off = this.matchPos - this.curLineStart;;) {
                this.re.lastIndex = off;
                let match = this.matchPos <= this.to && this.re.exec(this.curLine);
                if (match) {
                    let from = this.curLineStart + match.index, to = from + match[0].length;
                    this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
                    if (from == this.curLineStart + this.curLine.length)
                        this.nextLine();
                    if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {
                        this.value = { from, to, match };
                        return this;
                    }
                    off = this.matchPos - this.curLineStart;
                }
                else if (this.curLineStart + this.curLine.length < this.to) {
                    this.nextLine();
                    off = 0;
                }
                else {
                    this.done = true;
                    return this;
                }
            }
        }
    }
    const flattened = /*@__PURE__*/new WeakMap();
    // Reusable (partially) flattened document strings
    class FlattenedDoc {
        constructor(from, text) {
            this.from = from;
            this.text = text;
        }
        get to() { return this.from + this.text.length; }
        static get(doc, from, to) {
            let cached = flattened.get(doc);
            if (!cached || cached.from >= to || cached.to <= from) {
                let flat = new FlattenedDoc(from, doc.sliceString(from, to));
                flattened.set(doc, flat);
                return flat;
            }
            if (cached.from == from && cached.to == to)
                return cached;
            let { text, from: cachedFrom } = cached;
            if (cachedFrom > from) {
                text = doc.sliceString(from, cachedFrom) + text;
                cachedFrom = from;
            }
            if (cached.to < to)
                text += doc.sliceString(cached.to, to);
            flattened.set(doc, new FlattenedDoc(cachedFrom, text));
            return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
        }
    }
    class MultilineRegExpCursor {
        constructor(text, query, options, from, to) {
            this.text = text;
            this.to = to;
            this.done = false;
            this.value = empty;
            this.matchPos = toCharEnd(text, from);
            this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
            this.test = options === null || options === void 0 ? void 0 : options.test;
            this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Chunk.Base */));
        }
        chunkEnd(pos) {
            return pos >= this.to ? this.to : this.text.lineAt(pos).to;
        }
        next() {
            for (;;) {
                let off = this.re.lastIndex = this.matchPos - this.flat.from;
                let match = this.re.exec(this.flat.text);
                // Skip empty matches directly after the last match
                if (match && !match[0] && match.index == off) {
                    this.re.lastIndex = off + 1;
                    match = this.re.exec(this.flat.text);
                }
                if (match) {
                    let from = this.flat.from + match.index, to = from + match[0].length;
                    // If a match goes almost to the end of a noncomplete chunk, try
                    // again, since it'll likely be able to match more
                    if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) &&
                        (!this.test || this.test(from, to, match))) {
                        this.value = { from, to, match };
                        this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
                        return this;
                    }
                }
                if (this.flat.to == this.to) {
                    this.done = true;
                    return this;
                }
                // Grow the flattened doc
                this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
            }
        }
    }
    if (typeof Symbol != "undefined") {
        RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =
            function () { return this; };
    }
    function validRegExp(source) {
        try {
            new RegExp(source, baseFlags);
            return true;
        }
        catch (_a) {
            return false;
        }
    }
    function toCharEnd(text, pos) {
        if (pos >= text.length)
            return pos;
        let line = text.lineAt(pos), next;
        while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000)
            pos++;
        return pos;
    }

    function createLineDialog(view) {
        let line = String(view.state.doc.lineAt(view.state.selection.main.head).number);
        let input = crelt("input", { class: "cm-textfield", name: "line", value: line });
        let dom = crelt("form", {
            class: "cm-gotoLine",
            onkeydown: (event) => {
                if (event.keyCode == 27) { // Escape
                    event.preventDefault();
                    view.dispatch({ effects: dialogEffect.of(false) });
                    view.focus();
                }
                else if (event.keyCode == 13) { // Enter
                    event.preventDefault();
                    go();
                }
            },
            onsubmit: (event) => {
                event.preventDefault();
                go();
            }
        }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", { class: "cm-button", type: "submit" }, view.state.phrase("go")), crelt("button", {
            name: "close",
            onclick: () => {
                view.dispatch({ effects: dialogEffect.of(false) });
                view.focus();
            },
            "aria-label": view.state.phrase("close"),
            type: "button"
        }, ["×"]));
        function go() {
            let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
            if (!match)
                return;
            let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);
            let [, sign, ln, cl, percent] = match;
            let col = cl ? +cl.slice(1) : 0;
            let line = ln ? +ln : startLine.number;
            if (ln && percent) {
                let pc = line / 100;
                if (sign)
                    pc = pc * (sign == "-" ? -1 : 1) + (startLine.number / state.doc.lines);
                line = Math.round(state.doc.lines * pc);
            }
            else if (ln && sign) {
                line = line * (sign == "-" ? -1 : 1) + startLine.number;
            }
            let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));
            let selection = EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length)));
            view.dispatch({
                effects: [dialogEffect.of(false), EditorView.scrollIntoView(selection.from, { y: 'center' })],
                selection,
            });
            view.focus();
        }
        return { dom };
    }
    const dialogEffect = /*@__PURE__*/StateEffect.define();
    const dialogField = /*@__PURE__*/StateField.define({
        create() { return true; },
        update(value, tr) {
            for (let e of tr.effects)
                if (e.is(dialogEffect))
                    value = e.value;
            return value;
        },
        provide: f => showPanel.from(f, val => val ? createLineDialog : null)
    });
    /**
    Command that shows a dialog asking the user for a line number, and
    when a valid position is provided, moves the cursor to that line.

    Supports line numbers, relative line offsets prefixed with `+` or
    `-`, document percentages suffixed with `%`, and an optional
    column position by adding `:` and a second number after the line
    number.
    */
    const gotoLine = view => {
        let panel = getPanel(view, createLineDialog);
        if (!panel) {
            let effects = [dialogEffect.of(true)];
            if (view.state.field(dialogField, false) == null)
                effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1$1]));
            view.dispatch({ effects });
            panel = getPanel(view, createLineDialog);
        }
        if (panel)
            panel.dom.querySelector("input").select();
        return true;
    };
    const baseTheme$1$1 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-panel.cm-gotoLine": {
            padding: "2px 6px 4px",
            position: "relative",
            "& label": { fontSize: "80%" },
            "& [name=close]": {
                position: "absolute",
                top: "0", bottom: "0",
                right: "4px",
                backgroundColor: "inherit",
                border: "none",
                font: "inherit",
                padding: "0"
            }
        }
    });

    const defaultHighlightOptions = {
        highlightWordAroundCursor: false,
        minSelectionLength: 1,
        maxMatches: 100,
        wholeWords: false
    };
    const highlightConfig = /*@__PURE__*/Facet.define({
        combine(options) {
            return combineConfig(options, defaultHighlightOptions, {
                highlightWordAroundCursor: (a, b) => a || b,
                minSelectionLength: Math.min,
                maxMatches: Math.min
            });
        }
    });
    /**
    This extension highlights text that matches the selection. It uses
    the `"cm-selectionMatch"` class for the highlighting. When
    `highlightWordAroundCursor` is enabled, the word at the cursor
    itself will be highlighted with `"cm-selectionMatch-main"`.
    */
    function highlightSelectionMatches(options) {
        let ext = [defaultTheme, matchHighlighter];
        return ext;
    }
    const matchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch" });
    const mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
    // Whether the characters directly outside the given positions are non-word characters
    function insideWordBoundaries(check, state, from, to) {
        return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&
            (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);
    }
    // Whether the characters directly at the given positions are word characters
    function insideWord(check, state, from, to) {
        return check(state.sliceDoc(from, from + 1)) == CharCategory.Word
            && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;
    }
    const matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.decorations = this.getDeco(view);
        }
        update(update) {
            if (update.selectionSet || update.docChanged || update.viewportChanged)
                this.decorations = this.getDeco(update.view);
        }
        getDeco(view) {
            let conf = view.state.facet(highlightConfig);
            let { state } = view, sel = state.selection;
            if (sel.ranges.length > 1)
                return Decoration.none;
            let range = sel.main, query, check = null;
            if (range.empty) {
                if (!conf.highlightWordAroundCursor)
                    return Decoration.none;
                let word = state.wordAt(range.head);
                if (!word)
                    return Decoration.none;
                check = state.charCategorizer(range.head);
                query = state.sliceDoc(word.from, word.to);
            }
            else {
                let len = range.to - range.from;
                if (len < conf.minSelectionLength || len > 200)
                    return Decoration.none;
                if (conf.wholeWords) {
                    query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?
                    check = state.charCategorizer(range.head);
                    if (!(insideWordBoundaries(check, state, range.from, range.to) &&
                        insideWord(check, state, range.from, range.to)))
                        return Decoration.none;
                }
                else {
                    query = state.sliceDoc(range.from, range.to);
                    if (!query)
                        return Decoration.none;
                }
            }
            let deco = [];
            for (let part of view.visibleRanges) {
                let cursor = new SearchCursor(state.doc, query, part.from, part.to);
                while (!cursor.next().done) {
                    let { from, to } = cursor.value;
                    if (!check || insideWordBoundaries(check, state, from, to)) {
                        if (range.empty && from <= range.from && to >= range.to)
                            deco.push(mainMatchDeco.range(from, to));
                        else if (from >= range.to || to <= range.from)
                            deco.push(matchDeco.range(from, to));
                        if (deco.length > conf.maxMatches)
                            return Decoration.none;
                    }
                }
            }
            return Decoration.set(deco);
        }
    }, {
        decorations: v => v.decorations
    });
    const defaultTheme = /*@__PURE__*/EditorView.baseTheme({
        ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
        ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
    });
    // Select the words around the cursors.
    const selectWord = ({ state, dispatch }) => {
        let { selection } = state;
        let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);
        if (newSel.eq(selection))
            return false;
        dispatch(state.update({ selection: newSel }));
        return true;
    };
    // Find next occurrence of query relative to last cursor. Wrap around
    // the document if there are no more matches.
    function findNextOccurrence(state, query) {
        let { main, ranges } = state.selection;
        let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
        for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {
            cursor.next();
            if (cursor.done) {
                if (cycled)
                    return null;
                cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
                cycled = true;
            }
            else {
                if (cycled && ranges.some(r => r.from == cursor.value.from))
                    continue;
                if (fullWord) {
                    let word = state.wordAt(cursor.value.from);
                    if (!word || word.from != cursor.value.from || word.to != cursor.value.to)
                        continue;
                }
                return cursor.value;
            }
        }
    }
    /**
    Select next occurrence of the current selection. Expand selection
    to the surrounding word when the selection is empty.
    */
    const selectNextOccurrence = ({ state, dispatch }) => {
        let { ranges } = state.selection;
        if (ranges.some(sel => sel.from === sel.to))
            return selectWord({ state, dispatch });
        let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
        if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))
            return false;
        let range = findNextOccurrence(state, searchedText);
        if (!range)
            return false;
        dispatch(state.update({
            selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
            effects: EditorView.scrollIntoView(range.to)
        }));
        return true;
    };

    const searchConfigFacet = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                top: false,
                caseSensitive: false,
                literal: false,
                regexp: false,
                wholeWord: false,
                createPanel: view => new SearchPanel(view),
                scrollToMatch: range => EditorView.scrollIntoView(range)
            });
        }
    });
    /**
    A search query. Part of the editor's search state.
    */
    class SearchQuery {
        /**
        Create a query object.
        */
        constructor(config) {
            this.search = config.search;
            this.caseSensitive = !!config.caseSensitive;
            this.literal = !!config.literal;
            this.regexp = !!config.regexp;
            this.replace = config.replace || "";
            this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
            this.unquoted = this.unquote(this.search);
            this.wholeWord = !!config.wholeWord;
        }
        /**
        @internal
        */
        unquote(text) {
            return this.literal ? text :
                text.replace(/\\([nrt\\])/g, (_, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "\t" : "\\");
        }
        /**
        Compare this query to another query.
        */
        eq(other) {
            return this.search == other.search && this.replace == other.replace &&
                this.caseSensitive == other.caseSensitive && this.regexp == other.regexp &&
                this.wholeWord == other.wholeWord;
        }
        /**
        @internal
        */
        create() {
            return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
        }
        /**
        Get a search cursor for this query, searching through the given
        range in the given state.
        */
        getCursor(state, from = 0, to) {
            let st = state.doc ? state : EditorState.create({ doc: state });
            if (to == null)
                to = st.doc.length;
            return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);
        }
    }
    class QueryType {
        constructor(spec) {
            this.spec = spec;
        }
    }
    function stringCursor(spec, state, from, to) {
        return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);
    }
    function stringWordTest(doc, categorizer) {
        return (from, to, buf, bufPos) => {
            if (bufPos > from || bufPos + buf.length < to) {
                bufPos = Math.max(0, from - 2);
                buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));
            }
            return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word ||
                categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) &&
                (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word ||
                    categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);
        };
    }
    class StringQuery extends QueryType {
        constructor(spec) {
            super(spec);
        }
        nextMatch(state, curFrom, curTo) {
            let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();
            if (cursor.done) {
                let end = Math.min(state.doc.length, curFrom + this.spec.unquoted.length);
                cursor = stringCursor(this.spec, state, 0, end).nextOverlapping();
            }
            return cursor.done || cursor.value.from == curFrom && cursor.value.to == curTo ? null : cursor.value;
        }
        // Searching in reverse is, rather than implementing an inverted search
        // cursor, done by scanning chunk after chunk forward.
        prevMatchInRange(state, from, to) {
            for (let pos = to;;) {
                let start = Math.max(from, pos - 10000 /* FindPrev.ChunkSize */ - this.spec.unquoted.length);
                let cursor = stringCursor(this.spec, state, start, pos), range = null;
                while (!cursor.nextOverlapping().done)
                    range = cursor.value;
                if (range)
                    return range;
                if (start == from)
                    return null;
                pos -= 10000 /* FindPrev.ChunkSize */;
            }
        }
        prevMatch(state, curFrom, curTo) {
            let found = this.prevMatchInRange(state, 0, curFrom);
            if (!found)
                found = this.prevMatchInRange(state, Math.max(0, curTo - this.spec.unquoted.length), state.doc.length);
            return found && (found.from != curFrom || found.to != curTo) ? found : null;
        }
        getReplacement(_result) { return this.spec.unquote(this.spec.replace); }
        matchAll(state, limit) {
            let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];
            while (!cursor.next().done) {
                if (ranges.length >= limit)
                    return null;
                ranges.push(cursor.value);
            }
            return ranges;
        }
        highlight(state, from, to, add) {
            let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));
            while (!cursor.next().done)
                add(cursor.value.from, cursor.value.to);
        }
    }
    function regexpCursor(spec, state, from, to) {
        return new RegExpCursor(state.doc, spec.search, {
            ignoreCase: !spec.caseSensitive,
            test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined
        }, from, to);
    }
    function charBefore(str, index) {
        return str.slice(findClusterBreak(str, index, false), index);
    }
    function charAfter(str, index) {
        return str.slice(index, findClusterBreak(str, index));
    }
    function regexpWordTest(categorizer) {
        return (_from, _to, match) => !match[0].length ||
            (categorizer(charBefore(match.input, match.index)) != CharCategory.Word ||
                categorizer(charAfter(match.input, match.index)) != CharCategory.Word) &&
                (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word ||
                    categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);
    }
    class RegExpQuery extends QueryType {
        nextMatch(state, curFrom, curTo) {
            let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();
            if (cursor.done)
                cursor = regexpCursor(this.spec, state, 0, curFrom).next();
            return cursor.done ? null : cursor.value;
        }
        prevMatchInRange(state, from, to) {
            for (let size = 1;; size++) {
                let start = Math.max(from, to - size * 10000 /* FindPrev.ChunkSize */);
                let cursor = regexpCursor(this.spec, state, start, to), range = null;
                while (!cursor.next().done)
                    range = cursor.value;
                if (range && (start == from || range.from > start + 10))
                    return range;
                if (start == from)
                    return null;
            }
        }
        prevMatch(state, curFrom, curTo) {
            return this.prevMatchInRange(state, 0, curFrom) ||
                this.prevMatchInRange(state, curTo, state.doc.length);
        }
        getReplacement(result) {
            return this.spec.unquote(this.spec.replace).replace(/\$([$&]|\d+)/g, (m, i) => {
                if (i == "&")
                    return result.match[0];
                if (i == "$")
                    return "$";
                for (let l = i.length; l > 0; l--) {
                    let n = +i.slice(0, l);
                    if (n > 0 && n < result.match.length)
                        return result.match[n] + i.slice(l);
                }
                return m;
            });
        }
        matchAll(state, limit) {
            let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];
            while (!cursor.next().done) {
                if (ranges.length >= limit)
                    return null;
                ranges.push(cursor.value);
            }
            return ranges;
        }
        highlight(state, from, to, add) {
            let cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* RegExp.HighlightMargin */), Math.min(to + 250 /* RegExp.HighlightMargin */, state.doc.length));
            while (!cursor.next().done)
                add(cursor.value.from, cursor.value.to);
        }
    }
    /**
    A state effect that updates the current search query. Note that
    this only has an effect if the search state has been initialized
    (by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or
    by running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least
    once).
    */
    const setSearchQuery = /*@__PURE__*/StateEffect.define();
    const togglePanel$1 = /*@__PURE__*/StateEffect.define();
    const searchState = /*@__PURE__*/StateField.define({
        create(state) {
            return new SearchState(defaultQuery(state).create(), null);
        },
        update(value, tr) {
            for (let effect of tr.effects) {
                if (effect.is(setSearchQuery))
                    value = new SearchState(effect.value.create(), value.panel);
                else if (effect.is(togglePanel$1))
                    value = new SearchState(value.query, effect.value ? createSearchPanel : null);
            }
            return value;
        },
        provide: f => showPanel.from(f, val => val.panel)
    });
    class SearchState {
        constructor(query, panel) {
            this.query = query;
            this.panel = panel;
        }
    }
    const matchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
    const searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.decorations = this.highlight(view.state.field(searchState));
        }
        update(update) {
            let state = update.state.field(searchState);
            if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)
                this.decorations = this.highlight(state);
        }
        highlight({ query, panel }) {
            if (!panel || !query.spec.valid)
                return Decoration.none;
            let { view } = this;
            let builder = new RangeSetBuilder();
            for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {
                let { from, to } = ranges[i];
                while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* RegExp.HighlightMargin */)
                    to = ranges[++i].to;
                query.highlight(view.state, from, to, (from, to) => {
                    let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);
                    builder.add(from, to, selected ? selectedMatchMark : matchMark);
                });
            }
            return builder.finish();
        }
    }, {
        decorations: v => v.decorations
    });
    function searchCommand(f) {
        return view => {
            let state = view.state.field(searchState, false);
            return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);
        };
    }
    /**
    Open the search panel if it isn't already open, and move the
    selection to the first match after the current main selection.
    Will wrap around to the start of the document when it reaches the
    end.
    */
    const findNext = /*@__PURE__*/searchCommand((view, { query }) => {
        let { to } = view.state.selection.main;
        let next = query.nextMatch(view.state, to, to);
        if (!next)
            return false;
        let selection = EditorSelection.single(next.from, next.to);
        let config = view.state.facet(searchConfigFacet);
        view.dispatch({
            selection,
            effects: [announceMatch(view, next), config.scrollToMatch(selection.main, view)],
            userEvent: "select.search"
        });
        selectSearchInput(view);
        return true;
    });
    /**
    Move the selection to the previous instance of the search query,
    before the current main selection. Will wrap past the start
    of the document to start searching at the end again.
    */
    const findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {
        let { state } = view, { from } = state.selection.main;
        let prev = query.prevMatch(state, from, from);
        if (!prev)
            return false;
        let selection = EditorSelection.single(prev.from, prev.to);
        let config = view.state.facet(searchConfigFacet);
        view.dispatch({
            selection,
            effects: [announceMatch(view, prev), config.scrollToMatch(selection.main, view)],
            userEvent: "select.search"
        });
        selectSearchInput(view);
        return true;
    });
    /**
    Select all instances of the search query.
    */
    const selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {
        let ranges = query.matchAll(view.state, 1000);
        if (!ranges || !ranges.length)
            return false;
        view.dispatch({
            selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),
            userEvent: "select.search.matches"
        });
        return true;
    });
    /**
    Select all instances of the currently selected text.
    */
    const selectSelectionMatches = ({ state, dispatch }) => {
        let sel = state.selection;
        if (sel.ranges.length > 1 || sel.main.empty)
            return false;
        let { from, to } = sel.main;
        let ranges = [], main = 0;
        for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {
            if (ranges.length > 1000)
                return false;
            if (cur.value.from == from)
                main = ranges.length;
            ranges.push(EditorSelection.range(cur.value.from, cur.value.to));
        }
        dispatch(state.update({
            selection: EditorSelection.create(ranges, main),
            userEvent: "select.search.matches"
        }));
        return true;
    };
    /**
    Replace the current match of the search query.
    */
    const replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {
        let { state } = view, { from, to } = state.selection.main;
        if (state.readOnly)
            return false;
        let match = query.nextMatch(state, from, from);
        if (!match)
            return false;
        let next = match;
        let changes = [], selection, replacement;
        let effects = [];
        if (next.from == from && next.to == to) {
            replacement = state.toText(query.getReplacement(next));
            changes.push({ from: next.from, to: next.to, insert: replacement });
            next = query.nextMatch(state, next.from, next.to);
            effects.push(EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from).number) + "."));
        }
        let changeSet = view.state.changes(changes);
        if (next) {
            selection = EditorSelection.single(next.from, next.to).map(changeSet);
            effects.push(announceMatch(view, next));
            effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));
        }
        view.dispatch({
            changes: changeSet,
            selection,
            effects,
            userEvent: "input.replace"
        });
        return true;
    });
    /**
    Replace all instances of the search query with the given
    replacement.
    */
    const replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {
        if (view.state.readOnly)
            return false;
        let changes = query.matchAll(view.state, 1e9).map(match => {
            let { from, to } = match;
            return { from, to, insert: query.getReplacement(match) };
        });
        if (!changes.length)
            return false;
        let announceText = view.state.phrase("replaced $ matches", changes.length) + ".";
        view.dispatch({
            changes,
            effects: EditorView.announce.of(announceText),
            userEvent: "input.replace.all"
        });
        return true;
    });
    function createSearchPanel(view) {
        return view.state.facet(searchConfigFacet).createPanel(view);
    }
    function defaultQuery(state, fallback) {
        var _a, _b, _c, _d, _e;
        let sel = state.selection.main;
        let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
        if (fallback && !selText)
            return fallback;
        let config = state.facet(searchConfigFacet);
        return new SearchQuery({
            search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\n/g, "\\n"),
            caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,
            literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,
            regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config.regexp,
            wholeWord: (_e = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e !== void 0 ? _e : config.wholeWord
        });
    }
    function getSearchInput(view) {
        let panel = getPanel(view, createSearchPanel);
        return panel && panel.dom.querySelector("[main-field]");
    }
    function selectSearchInput(view) {
        let input = getSearchInput(view);
        if (input && input == view.root.activeElement)
            input.select();
    }
    /**
    Make sure the search panel is open and focused.
    */
    const openSearchPanel = view => {
        let state = view.state.field(searchState, false);
        if (state && state.panel) {
            let searchInput = getSearchInput(view);
            if (searchInput && searchInput != view.root.activeElement) {
                let query = defaultQuery(view.state, state.query.spec);
                if (query.valid)
                    view.dispatch({ effects: setSearchQuery.of(query) });
                searchInput.focus();
                searchInput.select();
            }
        }
        else {
            view.dispatch({ effects: [
                    togglePanel$1.of(true),
                    state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)
                ] });
        }
        return true;
    };
    /**
    Close the search panel.
    */
    const closeSearchPanel = view => {
        let state = view.state.field(searchState, false);
        if (!state || !state.panel)
            return false;
        let panel = getPanel(view, createSearchPanel);
        if (panel && panel.dom.contains(view.root.activeElement))
            view.focus();
        view.dispatch({ effects: togglePanel$1.of(false) });
        return true;
    };
    /**
    Default search-related key bindings.

     - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)
     - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)
     - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)
     - Mod-Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)
     - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)
    */
    const searchKeymap = [
        { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
        { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
        { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
        { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
        { key: "Mod-Shift-l", run: selectSelectionMatches },
        { key: "Mod-Alt-g", run: gotoLine },
        { key: "Mod-d", run: selectNextOccurrence, preventDefault: true },
    ];
    class SearchPanel {
        constructor(view) {
            this.view = view;
            let query = this.query = view.state.field(searchState).query.spec;
            this.commit = this.commit.bind(this);
            this.searchField = crelt("input", {
                value: query.search,
                placeholder: phrase(view, "Find"),
                "aria-label": phrase(view, "Find"),
                class: "cm-textfield",
                name: "search",
                form: "",
                "main-field": "true",
                onchange: this.commit,
                onkeyup: this.commit
            });
            this.replaceField = crelt("input", {
                value: query.replace,
                placeholder: phrase(view, "Replace"),
                "aria-label": phrase(view, "Replace"),
                class: "cm-textfield",
                name: "replace",
                form: "",
                onchange: this.commit,
                onkeyup: this.commit
            });
            this.caseField = crelt("input", {
                type: "checkbox",
                name: "case",
                form: "",
                checked: query.caseSensitive,
                onchange: this.commit
            });
            this.reField = crelt("input", {
                type: "checkbox",
                name: "re",
                form: "",
                checked: query.regexp,
                onchange: this.commit
            });
            this.wordField = crelt("input", {
                type: "checkbox",
                name: "word",
                form: "",
                checked: query.wholeWord,
                onchange: this.commit
            });
            function button(name, onclick, content) {
                return crelt("button", { class: "cm-button", name, onclick, type: "button" }, content);
            }
            this.dom = crelt("div", { onkeydown: (e) => this.keydown(e), class: "cm-search" }, [
                this.searchField,
                button("next", () => findNext(view), [phrase(view, "next")]),
                button("prev", () => findPrevious(view), [phrase(view, "previous")]),
                button("select", () => selectMatches(view), [phrase(view, "all")]),
                crelt("label", null, [this.caseField, phrase(view, "match case")]),
                crelt("label", null, [this.reField, phrase(view, "regexp")]),
                crelt("label", null, [this.wordField, phrase(view, "by word")]),
                ...view.state.readOnly ? [] : [
                    crelt("br"),
                    this.replaceField,
                    button("replace", () => replaceNext(view), [phrase(view, "replace")]),
                    button("replaceAll", () => replaceAll(view), [phrase(view, "replace all")])
                ],
                crelt("button", {
                    name: "close",
                    onclick: () => closeSearchPanel(view),
                    "aria-label": phrase(view, "close"),
                    type: "button"
                }, ["×"])
            ]);
        }
        commit() {
            let query = new SearchQuery({
                search: this.searchField.value,
                caseSensitive: this.caseField.checked,
                regexp: this.reField.checked,
                wholeWord: this.wordField.checked,
                replace: this.replaceField.value,
            });
            if (!query.eq(this.query)) {
                this.query = query;
                this.view.dispatch({ effects: setSearchQuery.of(query) });
            }
        }
        keydown(e) {
            if (runScopeHandlers(this.view, e, "search-panel")) {
                e.preventDefault();
            }
            else if (e.keyCode == 13 && e.target == this.searchField) {
                e.preventDefault();
                (e.shiftKey ? findPrevious : findNext)(this.view);
            }
            else if (e.keyCode == 13 && e.target == this.replaceField) {
                e.preventDefault();
                replaceNext(this.view);
            }
        }
        update(update) {
            for (let tr of update.transactions)
                for (let effect of tr.effects) {
                    if (effect.is(setSearchQuery) && !effect.value.eq(this.query))
                        this.setQuery(effect.value);
                }
        }
        setQuery(query) {
            this.query = query;
            this.searchField.value = query.search;
            this.replaceField.value = query.replace;
            this.caseField.checked = query.caseSensitive;
            this.reField.checked = query.regexp;
            this.wordField.checked = query.wholeWord;
        }
        mount() {
            this.searchField.select();
        }
        get pos() { return 80; }
        get top() { return this.view.state.facet(searchConfigFacet).top; }
    }
    function phrase(view, phrase) { return view.state.phrase(phrase); }
    const AnnounceMargin = 30;
    const Break = /[\s\.,:;?!]/;
    function announceMatch(view, { from, to }) {
        let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;
        let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
        let text = view.state.sliceDoc(start, end);
        if (start != line.from) {
            for (let i = 0; i < AnnounceMargin; i++)
                if (!Break.test(text[i + 1]) && Break.test(text[i])) {
                    text = text.slice(i);
                    break;
                }
        }
        if (end != lineEnd) {
            for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)
                if (!Break.test(text[i - 1]) && Break.test(text[i])) {
                    text = text.slice(0, i);
                    break;
                }
        }
        return EditorView.announce.of(`${view.state.phrase("current match")}. ${text} ${view.state.phrase("on line")} ${line.number}.`);
    }
    const baseTheme$2 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-panel.cm-search": {
            padding: "2px 6px 4px",
            position: "relative",
            "& [name=close]": {
                position: "absolute",
                top: "0",
                right: "4px",
                backgroundColor: "inherit",
                border: "none",
                font: "inherit",
                padding: 0,
                margin: 0
            },
            "& input, & button, & label": {
                margin: ".2em .6em .2em 0"
            },
            "& input[type=checkbox]": {
                marginRight: ".2em"
            },
            "& label": {
                fontSize: "80%",
                whiteSpace: "pre"
            }
        },
        "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
        "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
        "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
        "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
    });
    const searchExtensions = [
        searchState,
        /*@__PURE__*/Prec.low(searchHighlighter),
        baseTheme$2
    ];

    /**
    An instance of this is passed to completion source functions.
    */
    class CompletionContext {
        /**
        Create a new completion context. (Mostly useful for testing
        completion sources—in the editor, the extension will create
        these for you.)
        */
        constructor(
        /**
        The editor state that the completion happens in.
        */
        state, 
        /**
        The position at which the completion is happening.
        */
        pos, 
        /**
        Indicates whether completion was activated explicitly, or
        implicitly by typing. The usual way to respond to this is to
        only return completions when either there is part of a
        completable entity before the cursor, or `explicit` is true.
        */
        explicit, 
        /**
        The editor view. May be undefined if the context was created
        in a situation where there is no such view available, such as
        in synchronous updates via
        [`CompletionResult.update`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.update)
        or when called by test code.
        */
        view) {
            this.state = state;
            this.pos = pos;
            this.explicit = explicit;
            this.view = view;
            /**
            @internal
            */
            this.abortListeners = [];
            /**
            @internal
            */
            this.abortOnDocChange = false;
        }
        /**
        Get the extent, content, and (if there is a token) type of the
        token before `this.pos`.
        */
        tokenBefore(types) {
            let token = syntaxTree(this.state).resolveInner(this.pos, -1);
            while (token && types.indexOf(token.name) < 0)
                token = token.parent;
            return token ? { from: token.from, to: this.pos,
                text: this.state.sliceDoc(token.from, this.pos),
                type: token.type } : null;
        }
        /**
        Get the match of the given expression directly before the
        cursor.
        */
        matchBefore(expr) {
            let line = this.state.doc.lineAt(this.pos);
            let start = Math.max(line.from, this.pos - 250);
            let str = line.text.slice(start - line.from, this.pos - line.from);
            let found = str.search(ensureAnchor(expr, false));
            return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
        }
        /**
        Yields true when the query has been aborted. Can be useful in
        asynchronous queries to avoid doing work that will be ignored.
        */
        get aborted() { return this.abortListeners == null; }
        /**
        Allows you to register abort handlers, which will be called when
        the query is
        [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
        
        By default, running queries will not be aborted for regular
        typing or backspacing, on the assumption that they are likely to
        return a result with a
        [`validFor`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.validFor) field that
        allows the result to be used after all. Passing `onDocChange:
        true` will cause this query to be aborted for any document
        change.
        */
        addEventListener(type, listener, options) {
            if (type == "abort" && this.abortListeners) {
                this.abortListeners.push(listener);
                if (options && options.onDocChange)
                    this.abortOnDocChange = true;
            }
        }
    }
    function toSet(chars) {
        let flat = Object.keys(chars).join("");
        let words = /\w/.test(flat);
        if (words)
            flat = flat.replace(/\w/g, "");
        return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
    }
    function prefixMatch(options) {
        let first = Object.create(null), rest = Object.create(null);
        for (let { label } of options) {
            first[label[0]] = true;
            for (let i = 1; i < label.length; i++)
                rest[label[i]] = true;
        }
        let source = toSet(first) + toSet(rest) + "*$";
        return [new RegExp("^" + source), new RegExp(source)];
    }
    /**
    Given a a fixed array of options, return an autocompleter that
    completes them.
    */
    function completeFromList(list) {
        let options = list.map(o => typeof o == "string" ? { label: o } : o);
        let [validFor, match] = options.every(o => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
        return (context) => {
            let token = context.matchBefore(match);
            return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;
        };
    }
    /**
    Wrap the given completion source so that it will not fire when the
    cursor is in a syntax node with one of the given names.
    */
    function ifNotIn(nodes, source) {
        return (context) => {
            for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
                if (nodes.indexOf(pos.name) > -1)
                    return null;
                if (pos.type.isTop)
                    break;
            }
            return source(context);
        };
    }
    class Option {
        constructor(completion, source, match, score) {
            this.completion = completion;
            this.source = source;
            this.match = match;
            this.score = score;
        }
    }
    function cur(state) { return state.selection.main.from; }
    // Make sure the given regexp has a $ at its end and, if `start` is
    // true, a ^ at its start.
    function ensureAnchor(expr, start) {
        var _a;
        let { source } = expr;
        let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
        if (!addStart && !addEnd)
            return expr;
        return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? "i" : ""));
    }
    /**
    This annotation is added to transactions that are produced by
    picking a completion.
    */
    const pickedCompletion = /*@__PURE__*/Annotation.define();
    /**
    Helper function that returns a transaction spec which inserts a
    completion's text in the main selection range, and any other
    selection range that has the same text in front of it.
    */
    function insertCompletionText(state, text, from, to) {
        let { main } = state.selection, fromOff = from - main.from, toOff = to - main.from;
        return Object.assign(Object.assign({}, state.changeByRange(range => {
            if (range != main && from != to &&
                state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to))
                return { range };
            let lines = state.toText(text);
            return {
                changes: { from: range.from + fromOff, to: to == main.from ? range.to : range.from + toOff, insert: lines },
                range: EditorSelection.cursor(range.from + fromOff + lines.length)
            };
        })), { scrollIntoView: true, userEvent: "input.complete" });
    }
    const SourceCache = /*@__PURE__*/new WeakMap();
    function asSource(source) {
        if (!Array.isArray(source))
            return source;
        let known = SourceCache.get(source);
        if (!known)
            SourceCache.set(source, known = completeFromList(source));
        return known;
    }
    const startCompletionEffect = /*@__PURE__*/StateEffect.define();
    const closeCompletionEffect = /*@__PURE__*/StateEffect.define();

    // A pattern matcher for fuzzy completion matching. Create an instance
    // once for a pattern, and then use that to match any number of
    // completions.
    class FuzzyMatcher {
        constructor(pattern) {
            this.pattern = pattern;
            this.chars = [];
            this.folded = [];
            // Buffers reused by calls to `match` to track matched character
            // positions.
            this.any = [];
            this.precise = [];
            this.byWord = [];
            this.score = 0;
            this.matched = [];
            for (let p = 0; p < pattern.length;) {
                let char = codePointAt(pattern, p), size = codePointSize(char);
                this.chars.push(char);
                let part = pattern.slice(p, p + size), upper = part.toUpperCase();
                this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
                p += size;
            }
            this.astral = pattern.length != this.chars.length;
        }
        ret(score, matched) {
            this.score = score;
            this.matched = matched;
            return this;
        }
        // Matches a given word (completion) against the pattern (input).
        // Will return a boolean indicating whether there was a match and,
        // on success, set `this.score` to the score, `this.matched` to an
        // array of `from, to` pairs indicating the matched parts of `word`.
        //
        // The score is a number that is more negative the worse the match
        // is. See `Penalty` above.
        match(word) {
            if (this.pattern.length == 0)
                return this.ret(-100 /* Penalty.NotFull */, []);
            if (word.length < this.pattern.length)
                return null;
            let { chars, folded, any, precise, byWord } = this;
            // For single-character queries, only match when they occur right
            // at the start
            if (chars.length == 1) {
                let first = codePointAt(word, 0), firstSize = codePointSize(first);
                let score = firstSize == word.length ? 0 : -100 /* Penalty.NotFull */;
                if (first == chars[0]) ;
                else if (first == folded[0])
                    score += -200 /* Penalty.CaseFold */;
                else
                    return null;
                return this.ret(score, [0, firstSize]);
            }
            let direct = word.indexOf(this.pattern);
            if (direct == 0)
                return this.ret(word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */, [0, this.pattern.length]);
            let len = chars.length, anyTo = 0;
            if (direct < 0) {
                for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
                    let next = codePointAt(word, i);
                    if (next == chars[anyTo] || next == folded[anyTo])
                        any[anyTo++] = i;
                    i += codePointSize(next);
                }
                // No match, exit immediately
                if (anyTo < len)
                    return null;
            }
            // This tracks the extent of the precise (non-folded, not
            // necessarily adjacent) match
            let preciseTo = 0;
            // Tracks whether there is a match that hits only characters that
            // appear to be starting words. `byWordFolded` is set to true when
            // a case folded character is encountered in such a match
            let byWordTo = 0, byWordFolded = false;
            // If we've found a partial adjacent match, these track its state
            let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
            let hasLower = /[a-z]/.test(word), wordAdjacent = true;
            // Go over the option's text, scanning for the various kinds of matches
            for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* Tp.NonWord */; i < e && byWordTo < len;) {
                let next = codePointAt(word, i);
                if (direct < 0) {
                    if (preciseTo < len && next == chars[preciseTo])
                        precise[preciseTo++] = i;
                    if (adjacentTo < len) {
                        if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
                            if (adjacentTo == 0)
                                adjacentStart = i;
                            adjacentEnd = i + 1;
                            adjacentTo++;
                        }
                        else {
                            adjacentTo = 0;
                        }
                    }
                }
                let ch, type = next < 0xff
                    ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Tp.Lower */ : next >= 65 && next <= 90 ? 1 /* Tp.Upper */ : 0 /* Tp.NonWord */)
                    : ((ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 /* Tp.Upper */ : ch != ch.toUpperCase() ? 2 /* Tp.Lower */ : 0 /* Tp.NonWord */);
                if (!i || type == 1 /* Tp.Upper */ && hasLower || prevType == 0 /* Tp.NonWord */ && type != 0 /* Tp.NonWord */) {
                    if (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true)))
                        byWord[byWordTo++] = i;
                    else if (byWord.length)
                        wordAdjacent = false;
                }
                prevType = type;
                i += codePointSize(next);
            }
            if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
                return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0), byWord, word);
            if (adjacentTo == len && adjacentStart == 0)
                return this.ret(-200 /* Penalty.CaseFold */ - word.length + (adjacentEnd == word.length ? 0 : -100 /* Penalty.NotFull */), [0, adjacentEnd]);
            if (direct > -1)
                return this.ret(-700 /* Penalty.NotStart */ - word.length, [direct, direct + this.pattern.length]);
            if (adjacentTo == len)
                return this.ret(-200 /* Penalty.CaseFold */ + -700 /* Penalty.NotStart */ - word.length, [adjacentStart, adjacentEnd]);
            if (byWordTo == len)
                return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0) + -700 /* Penalty.NotStart */ +
                    (wordAdjacent ? 0 : -1100 /* Penalty.Gap */), byWord, word);
            return chars.length == 2 ? null
                : this.result((any[0] ? -700 /* Penalty.NotStart */ : 0) + -200 /* Penalty.CaseFold */ + -1100 /* Penalty.Gap */, any, word);
        }
        result(score, positions, word) {
            let result = [], i = 0;
            for (let pos of positions) {
                let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
                if (i && result[i - 1] == pos)
                    result[i - 1] = to;
                else {
                    result[i++] = pos;
                    result[i++] = to;
                }
            }
            return this.ret(score - word.length, result);
        }
    }
    class StrictMatcher {
        constructor(pattern) {
            this.pattern = pattern;
            this.matched = [];
            this.score = 0;
            this.folded = pattern.toLowerCase();
        }
        match(word) {
            if (word.length < this.pattern.length)
                return null;
            let start = word.slice(0, this.pattern.length);
            let match = start == this.pattern ? 0 : start.toLowerCase() == this.folded ? -200 /* Penalty.CaseFold */ : null;
            if (match == null)
                return null;
            this.matched = [0, start.length];
            this.score = match + (word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */);
            return this;
        }
    }

    const completionConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                activateOnTyping: true,
                activateOnCompletion: () => false,
                activateOnTypingDelay: 100,
                selectOnOpen: true,
                override: null,
                closeOnBlur: true,
                maxRenderedOptions: 100,
                defaultKeymap: true,
                tooltipClass: () => "",
                optionClass: () => "",
                aboveCursor: false,
                icons: true,
                addToOptions: [],
                positionInfo: defaultPositionInfo,
                filterStrict: false,
                compareCompletions: (a, b) => a.label.localeCompare(b.label),
                interactionDelay: 75,
                updateSyncTime: 100
            }, {
                defaultKeymap: (a, b) => a && b,
                closeOnBlur: (a, b) => a && b,
                icons: (a, b) => a && b,
                tooltipClass: (a, b) => c => joinClass(a(c), b(c)),
                optionClass: (a, b) => c => joinClass(a(c), b(c)),
                addToOptions: (a, b) => a.concat(b),
                filterStrict: (a, b) => a || b,
            });
        }
    });
    function joinClass(a, b) {
        return a ? b ? a + " " + b : a : b;
    }
    function defaultPositionInfo(view, list, option, info, space, tooltip) {
        let rtl = view.textDirection == Direction.RTL, left = rtl, narrow = false;
        let side = "top", offset, maxWidth;
        let spaceLeft = list.left - space.left, spaceRight = space.right - list.right;
        let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;
        if (left && spaceLeft < Math.min(infoWidth, spaceRight))
            left = false;
        else if (!left && spaceRight < Math.min(infoWidth, spaceLeft))
            left = true;
        if (infoWidth <= (left ? spaceLeft : spaceRight)) {
            offset = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list.top;
            maxWidth = Math.min(400 /* Info.Width */, left ? spaceLeft : spaceRight);
        }
        else {
            narrow = true;
            maxWidth = Math.min(400 /* Info.Width */, (rtl ? list.right : space.right - list.left) - 30 /* Info.Margin */);
            let spaceBelow = space.bottom - list.bottom;
            if (spaceBelow >= infoHeight || spaceBelow > list.top) { // Below the completion
                offset = option.bottom - list.top;
            }
            else { // Above it
                side = "bottom";
                offset = list.bottom - option.top;
            }
        }
        let scaleY = (list.bottom - list.top) / tooltip.offsetHeight;
        let scaleX = (list.right - list.left) / tooltip.offsetWidth;
        return {
            style: `${side}: ${offset / scaleY}px; max-width: ${maxWidth / scaleX}px`,
            class: "cm-completionInfo-" + (narrow ? (rtl ? "left-narrow" : "right-narrow") : left ? "left" : "right")
        };
    }

    function optionContent(config) {
        let content = config.addToOptions.slice();
        if (config.icons)
            content.push({
                render(completion) {
                    let icon = document.createElement("div");
                    icon.classList.add("cm-completionIcon");
                    if (completion.type)
                        icon.classList.add(...completion.type.split(/\s+/g).map(cls => "cm-completionIcon-" + cls));
                    icon.setAttribute("aria-hidden", "true");
                    return icon;
                },
                position: 20
            });
        content.push({
            render(completion, _s, _v, match) {
                let labelElt = document.createElement("span");
                labelElt.className = "cm-completionLabel";
                let label = completion.displayLabel || completion.label, off = 0;
                for (let j = 0; j < match.length;) {
                    let from = match[j++], to = match[j++];
                    if (from > off)
                        labelElt.appendChild(document.createTextNode(label.slice(off, from)));
                    let span = labelElt.appendChild(document.createElement("span"));
                    span.appendChild(document.createTextNode(label.slice(from, to)));
                    span.className = "cm-completionMatchedText";
                    off = to;
                }
                if (off < label.length)
                    labelElt.appendChild(document.createTextNode(label.slice(off)));
                return labelElt;
            },
            position: 50
        }, {
            render(completion) {
                if (!completion.detail)
                    return null;
                let detailElt = document.createElement("span");
                detailElt.className = "cm-completionDetail";
                detailElt.textContent = completion.detail;
                return detailElt;
            },
            position: 80
        });
        return content.sort((a, b) => a.position - b.position).map(a => a.render);
    }
    function rangeAroundSelected(total, selected, max) {
        if (total <= max)
            return { from: 0, to: total };
        if (selected < 0)
            selected = 0;
        if (selected <= (total >> 1)) {
            let off = Math.floor(selected / max);
            return { from: off * max, to: (off + 1) * max };
        }
        let off = Math.floor((total - selected) / max);
        return { from: total - (off + 1) * max, to: total - off * max };
    }
    class CompletionTooltip {
        constructor(view, stateField, applyCompletion) {
            this.view = view;
            this.stateField = stateField;
            this.applyCompletion = applyCompletion;
            this.info = null;
            this.infoDestroy = null;
            this.placeInfoReq = {
                read: () => this.measureInfo(),
                write: (pos) => this.placeInfo(pos),
                key: this
            };
            this.space = null;
            this.currentClass = "";
            let cState = view.state.field(stateField);
            let { options, selected } = cState.open;
            let config = view.state.facet(completionConfig);
            this.optionContent = optionContent(config);
            this.optionClass = config.optionClass;
            this.tooltipClass = config.tooltipClass;
            this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
            this.dom = document.createElement("div");
            this.dom.className = "cm-tooltip-autocomplete";
            this.updateTooltipClass(view.state);
            this.dom.addEventListener("mousedown", (e) => {
                let { options } = view.state.field(stateField).open;
                for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
                    if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
                        this.applyCompletion(view, options[+match[1]]);
                        e.preventDefault();
                        return;
                    }
                }
            });
            this.dom.addEventListener("focusout", (e) => {
                let state = view.state.field(this.stateField, false);
                if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur &&
                    e.relatedTarget != view.contentDOM)
                    view.dispatch({ effects: closeCompletionEffect.of(null) });
            });
            this.showOptions(options, cState.id);
        }
        mount() { this.updateSel(); }
        showOptions(options, id) {
            if (this.list)
                this.list.remove();
            this.list = this.dom.appendChild(this.createListBox(options, id, this.range));
            this.list.addEventListener("scroll", () => {
                if (this.info)
                    this.view.requestMeasure(this.placeInfoReq);
            });
        }
        update(update) {
            var _a;
            let cState = update.state.field(this.stateField);
            let prevState = update.startState.field(this.stateField);
            this.updateTooltipClass(update.state);
            if (cState != prevState) {
                let { options, selected, disabled } = cState.open;
                if (!prevState.open || prevState.open.options != options) {
                    this.range = rangeAroundSelected(options.length, selected, update.state.facet(completionConfig).maxRenderedOptions);
                    this.showOptions(options, cState.id);
                }
                this.updateSel();
                if (disabled != ((_a = prevState.open) === null || _a === void 0 ? void 0 : _a.disabled))
                    this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!disabled);
            }
        }
        updateTooltipClass(state) {
            let cls = this.tooltipClass(state);
            if (cls != this.currentClass) {
                for (let c of this.currentClass.split(" "))
                    if (c)
                        this.dom.classList.remove(c);
                for (let c of cls.split(" "))
                    if (c)
                        this.dom.classList.add(c);
                this.currentClass = cls;
            }
        }
        positioned(space) {
            this.space = space;
            if (this.info)
                this.view.requestMeasure(this.placeInfoReq);
        }
        updateSel() {
            let cState = this.view.state.field(this.stateField), open = cState.open;
            if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
                this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
                this.showOptions(open.options, cState.id);
            }
            if (this.updateSelectedOption(open.selected)) {
                this.destroyInfo();
                let { completion } = open.options[open.selected];
                let { info } = completion;
                if (!info)
                    return;
                let infoResult = typeof info === "string" ? document.createTextNode(info) : info(completion);
                if (!infoResult)
                    return;
                if ("then" in infoResult) {
                    infoResult.then(obj => {
                        if (obj && this.view.state.field(this.stateField, false) == cState)
                            this.addInfoPane(obj, completion);
                    }).catch(e => logException(this.view.state, e, "completion info"));
                }
                else {
                    this.addInfoPane(infoResult, completion);
                }
            }
        }
        addInfoPane(content, completion) {
            this.destroyInfo();
            let wrap = this.info = document.createElement("div");
            wrap.className = "cm-tooltip cm-completionInfo";
            if (content.nodeType != null) {
                wrap.appendChild(content);
                this.infoDestroy = null;
            }
            else {
                let { dom, destroy } = content;
                wrap.appendChild(dom);
                this.infoDestroy = destroy || null;
            }
            this.dom.appendChild(wrap);
            this.view.requestMeasure(this.placeInfoReq);
        }
        updateSelectedOption(selected) {
            let set = null;
            for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
                if (opt.nodeName != "LI" || !opt.id) {
                    i--; // A section header
                }
                else if (i == selected) {
                    if (!opt.hasAttribute("aria-selected")) {
                        opt.setAttribute("aria-selected", "true");
                        set = opt;
                    }
                }
                else {
                    if (opt.hasAttribute("aria-selected"))
                        opt.removeAttribute("aria-selected");
                }
            }
            if (set)
                scrollIntoView(this.list, set);
            return set;
        }
        measureInfo() {
            let sel = this.dom.querySelector("[aria-selected]");
            if (!sel || !this.info)
                return null;
            let listRect = this.dom.getBoundingClientRect();
            let infoRect = this.info.getBoundingClientRect();
            let selRect = sel.getBoundingClientRect();
            let space = this.space;
            if (!space) {
                let docElt = this.dom.ownerDocument.documentElement;
                space = { left: 0, top: 0, right: docElt.clientWidth, bottom: docElt.clientHeight };
            }
            if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 ||
                selRect.bottom < Math.max(space.top, listRect.top) + 10)
                return null;
            return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space, this.dom);
        }
        placeInfo(pos) {
            if (this.info) {
                if (pos) {
                    if (pos.style)
                        this.info.style.cssText = pos.style;
                    this.info.className = "cm-tooltip cm-completionInfo " + (pos.class || "");
                }
                else {
                    this.info.style.cssText = "top: -1e6px";
                }
            }
        }
        createListBox(options, id, range) {
            const ul = document.createElement("ul");
            ul.id = id;
            ul.setAttribute("role", "listbox");
            ul.setAttribute("aria-expanded", "true");
            ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
            ul.addEventListener("mousedown", e => {
                // Prevent focus change when clicking the scrollbar
                if (e.target == ul)
                    e.preventDefault();
            });
            let curSection = null;
            for (let i = range.from; i < range.to; i++) {
                let { completion, match } = options[i], { section } = completion;
                if (section) {
                    let name = typeof section == "string" ? section : section.name;
                    if (name != curSection && (i > range.from || range.from == 0)) {
                        curSection = name;
                        if (typeof section != "string" && section.header) {
                            ul.appendChild(section.header(section));
                        }
                        else {
                            let header = ul.appendChild(document.createElement("completion-section"));
                            header.textContent = name;
                        }
                    }
                }
                const li = ul.appendChild(document.createElement("li"));
                li.id = id + "-" + i;
                li.setAttribute("role", "option");
                let cls = this.optionClass(completion);
                if (cls)
                    li.className = cls;
                for (let source of this.optionContent) {
                    let node = source(completion, this.view.state, this.view, match);
                    if (node)
                        li.appendChild(node);
                }
            }
            if (range.from)
                ul.classList.add("cm-completionListIncompleteTop");
            if (range.to < options.length)
                ul.classList.add("cm-completionListIncompleteBottom");
            return ul;
        }
        destroyInfo() {
            if (this.info) {
                if (this.infoDestroy)
                    this.infoDestroy();
                this.info.remove();
                this.info = null;
            }
        }
        destroy() {
            this.destroyInfo();
        }
    }
    function completionTooltip(stateField, applyCompletion) {
        return (view) => new CompletionTooltip(view, stateField, applyCompletion);
    }
    function scrollIntoView(container, element) {
        let parent = container.getBoundingClientRect();
        let self = element.getBoundingClientRect();
        let scaleY = parent.height / container.offsetHeight;
        if (self.top < parent.top)
            container.scrollTop -= (parent.top - self.top) / scaleY;
        else if (self.bottom > parent.bottom)
            container.scrollTop += (self.bottom - parent.bottom) / scaleY;
    }

    // Used to pick a preferred option when two options with the same
    // label occur in the result.
    function score(option) {
        return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +
            (option.type ? 1 : 0);
    }
    function sortOptions(active, state) {
        let options = [];
        let sections = null;
        let addOption = (option) => {
            options.push(option);
            let { section } = option.completion;
            if (section) {
                if (!sections)
                    sections = [];
                let name = typeof section == "string" ? section : section.name;
                if (!sections.some(s => s.name == name))
                    sections.push(typeof section == "string" ? { name } : section);
            }
        };
        let conf = state.facet(completionConfig);
        for (let a of active)
            if (a.hasResult()) {
                let getMatch = a.result.getMatch;
                if (a.result.filter === false) {
                    for (let option of a.result.options) {
                        addOption(new Option(option, a.source, getMatch ? getMatch(option) : [], 1e9 - options.length));
                    }
                }
                else {
                    let pattern = state.sliceDoc(a.from, a.to), match;
                    let matcher = conf.filterStrict ? new StrictMatcher(pattern) : new FuzzyMatcher(pattern);
                    for (let option of a.result.options)
                        if (match = matcher.match(option.label)) {
                            let matched = !option.displayLabel ? match.matched : getMatch ? getMatch(option, match.matched) : [];
                            addOption(new Option(option, a.source, matched, match.score + (option.boost || 0)));
                        }
                }
            }
        if (sections) {
            let sectionOrder = Object.create(null), pos = 0;
            let cmp = (a, b) => { var _a, _b; return ((_a = a.rank) !== null && _a !== void 0 ? _a : 1e9) - ((_b = b.rank) !== null && _b !== void 0 ? _b : 1e9) || (a.name < b.name ? -1 : 1); };
            for (let s of sections.sort(cmp)) {
                pos -= 1e5;
                sectionOrder[s.name] = pos;
            }
            for (let option of options) {
                let { section } = option.completion;
                if (section)
                    option.score += sectionOrder[typeof section == "string" ? section : section.name];
            }
        }
        let result = [], prev = null;
        let compare = conf.compareCompletions;
        for (let opt of options.sort((a, b) => (b.score - a.score) || compare(a.completion, b.completion))) {
            let cur = opt.completion;
            if (!prev || prev.label != cur.label || prev.detail != cur.detail ||
                (prev.type != null && cur.type != null && prev.type != cur.type) ||
                prev.apply != cur.apply || prev.boost != cur.boost)
                result.push(opt);
            else if (score(opt.completion) > score(prev))
                result[result.length - 1] = opt;
            prev = opt.completion;
        }
        return result;
    }
    class CompletionDialog {
        constructor(options, attrs, tooltip, timestamp, selected, disabled) {
            this.options = options;
            this.attrs = attrs;
            this.tooltip = tooltip;
            this.timestamp = timestamp;
            this.selected = selected;
            this.disabled = disabled;
        }
        setSelected(selected, id) {
            return selected == this.selected || selected >= this.options.length ? this
                : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);
        }
        static build(active, state, id, prev, conf, didSetActive) {
            if (prev && !didSetActive && active.some(s => s.isPending))
                return prev.setDisabled();
            let options = sortOptions(active, state);
            if (!options.length)
                return prev && active.some(a => a.isPending) ? prev.setDisabled() : null;
            let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
            if (prev && prev.selected != selected && prev.selected != -1) {
                let selectedValue = prev.options[prev.selected].completion;
                for (let i = 0; i < options.length; i++)
                    if (options[i].completion == selectedValue) {
                        selected = i;
                        break;
                    }
            }
            return new CompletionDialog(options, makeAttrs(id, selected), {
                pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
                create: createTooltip,
                above: conf.aboveCursor,
            }, prev ? prev.timestamp : Date.now(), selected, false);
        }
        map(changes) {
            return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
        }
        setDisabled() {
            return new CompletionDialog(this.options, this.attrs, this.tooltip, this.timestamp, this.selected, true);
        }
    }
    class CompletionState {
        constructor(active, id, open) {
            this.active = active;
            this.id = id;
            this.open = open;
        }
        static start() {
            return new CompletionState(none, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
        }
        update(tr) {
            let { state } = tr, conf = state.facet(completionConfig);
            let sources = conf.override ||
                state.languageDataAt("autocomplete", cur(state)).map(asSource);
            let active = sources.map(source => {
                let value = this.active.find(s => s.source == source) ||
                    new ActiveSource(source, this.active.some(a => a.state != 0 /* State.Inactive */) ? 1 /* State.Pending */ : 0 /* State.Inactive */);
                return value.update(tr, conf);
            });
            if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))
                active = this.active;
            let open = this.open, didSet = tr.effects.some(e => e.is(setActiveEffect));
            if (open && tr.docChanged)
                open = open.map(tr.changes);
            if (tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||
                !sameResults(active, this.active) || didSet)
                open = CompletionDialog.build(active, state, this.id, open, conf, didSet);
            else if (open && open.disabled && !active.some(a => a.isPending))
                open = null;
            if (!open && active.every(a => !a.isPending) && active.some(a => a.hasResult()))
                active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* State.Inactive */) : a);
            for (let effect of tr.effects)
                if (effect.is(setSelectedEffect))
                    open = open && open.setSelected(effect.value, this.id);
            return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
        }
        get tooltip() { return this.open ? this.open.tooltip : null; }
        get attrs() { return this.open ? this.open.attrs : this.active.length ? baseAttrs : noAttrs; }
    }
    function sameResults(a, b) {
        if (a == b)
            return true;
        for (let iA = 0, iB = 0;;) {
            while (iA < a.length && !a[iA].hasResult())
                iA++;
            while (iB < b.length && !b[iB].hasResult())
                iB++;
            let endA = iA == a.length, endB = iB == b.length;
            if (endA || endB)
                return endA == endB;
            if (a[iA++].result != b[iB++].result)
                return false;
        }
    }
    const baseAttrs = {
        "aria-autocomplete": "list"
    };
    const noAttrs = {};
    function makeAttrs(id, selected) {
        let result = {
            "aria-autocomplete": "list",
            "aria-haspopup": "listbox",
            "aria-controls": id
        };
        if (selected > -1)
            result["aria-activedescendant"] = id + "-" + selected;
        return result;
    }
    const none = [];
    function getUpdateType(tr, conf) {
        if (tr.isUserEvent("input.complete")) {
            let completion = tr.annotation(pickedCompletion);
            if (completion && conf.activateOnCompletion(completion))
                return 4 /* UpdateType.Activate */ | 8 /* UpdateType.Reset */;
        }
        let typing = tr.isUserEvent("input.type");
        return typing && conf.activateOnTyping ? 4 /* UpdateType.Activate */ | 1 /* UpdateType.Typing */
            : typing ? 1 /* UpdateType.Typing */
                : tr.isUserEvent("delete.backward") ? 2 /* UpdateType.Backspacing */
                    : tr.selection ? 8 /* UpdateType.Reset */
                        : tr.docChanged ? 16 /* UpdateType.ResetIfTouching */ : 0 /* UpdateType.None */;
    }
    class ActiveSource {
        constructor(source, state, explicit = false) {
            this.source = source;
            this.state = state;
            this.explicit = explicit;
        }
        hasResult() { return false; }
        get isPending() { return this.state == 1 /* State.Pending */; }
        update(tr, conf) {
            let type = getUpdateType(tr, conf), value = this;
            if ((type & 8 /* UpdateType.Reset */) || (type & 16 /* UpdateType.ResetIfTouching */) && this.touches(tr))
                value = new ActiveSource(value.source, 0 /* State.Inactive */);
            if ((type & 4 /* UpdateType.Activate */) && value.state == 0 /* State.Inactive */)
                value = new ActiveSource(this.source, 1 /* State.Pending */);
            value = value.updateFor(tr, type);
            for (let effect of tr.effects) {
                if (effect.is(startCompletionEffect))
                    value = new ActiveSource(value.source, 1 /* State.Pending */, effect.value);
                else if (effect.is(closeCompletionEffect))
                    value = new ActiveSource(value.source, 0 /* State.Inactive */);
                else if (effect.is(setActiveEffect))
                    for (let active of effect.value)
                        if (active.source == value.source)
                            value = active;
            }
            return value;
        }
        updateFor(tr, type) { return this.map(tr.changes); }
        map(changes) { return this; }
        touches(tr) {
            return tr.changes.touchesRange(cur(tr.state));
        }
    }
    class ActiveResult extends ActiveSource {
        constructor(source, explicit, limit, result, from, to) {
            super(source, 3 /* State.Result */, explicit);
            this.limit = limit;
            this.result = result;
            this.from = from;
            this.to = to;
        }
        hasResult() { return true; }
        updateFor(tr, type) {
            var _a;
            if (!(type & 3 /* UpdateType.SimpleInteraction */))
                return this.map(tr.changes);
            let result = this.result;
            if (result.map && !tr.changes.empty)
                result = result.map(result, tr.changes);
            let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
            let pos = cur(tr.state);
            if (pos > to || !result ||
                (type & 2 /* UpdateType.Backspacing */) && (cur(tr.startState) == this.from || pos < this.limit))
                return new ActiveSource(this.source, type & 4 /* UpdateType.Activate */ ? 1 /* State.Pending */ : 0 /* State.Inactive */);
            let limit = tr.changes.mapPos(this.limit);
            if (checkValid(result.validFor, tr.state, from, to))
                return new ActiveResult(this.source, this.explicit, limit, result, from, to);
            if (result.update &&
                (result = result.update(result, from, to, new CompletionContext(tr.state, pos, false))))
                return new ActiveResult(this.source, this.explicit, limit, result, result.from, (_a = result.to) !== null && _a !== void 0 ? _a : cur(tr.state));
            return new ActiveSource(this.source, 1 /* State.Pending */, this.explicit);
        }
        map(mapping) {
            if (mapping.empty)
                return this;
            let result = this.result.map ? this.result.map(this.result, mapping) : this.result;
            if (!result)
                return new ActiveSource(this.source, 0 /* State.Inactive */);
            return new ActiveResult(this.source, this.explicit, mapping.mapPos(this.limit), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
        }
        touches(tr) {
            return tr.changes.touchesRange(this.from, this.to);
        }
    }
    function checkValid(validFor, state, from, to) {
        if (!validFor)
            return false;
        let text = state.sliceDoc(from, to);
        return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
    }
    const setActiveEffect = /*@__PURE__*/StateEffect.define({
        map(sources, mapping) { return sources.map(s => s.map(mapping)); }
    });
    const setSelectedEffect = /*@__PURE__*/StateEffect.define();
    const completionState = /*@__PURE__*/StateField.define({
        create() { return CompletionState.start(); },
        update(value, tr) { return value.update(tr); },
        provide: f => [
            showTooltip.from(f, val => val.tooltip),
            EditorView.contentAttributes.from(f, state => state.attrs)
        ]
    });
    function applyCompletion(view, option) {
        const apply = option.completion.apply || option.completion.label;
        let result = view.state.field(completionState).active.find(a => a.source == option.source);
        if (!(result instanceof ActiveResult))
            return false;
        if (typeof apply == "string")
            view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));
        else
            apply(view, option.completion, result.from, result.to);
        return true;
    }
    const createTooltip = /*@__PURE__*/completionTooltip(completionState, applyCompletion);

    /**
    Returns a command that moves the completion selection forward or
    backward by the given amount.
    */
    function moveCompletionSelection(forward, by = "option") {
        return (view) => {
            let cState = view.state.field(completionState, false);
            if (!cState || !cState.open || cState.open.disabled ||
                Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
                return false;
            let step = 1, tooltip;
            if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip)))
                step = Math.max(2, Math.floor(tooltip.dom.offsetHeight /
                    tooltip.dom.querySelector("li").offsetHeight) - 1);
            let { length } = cState.open.options;
            let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
            if (selected < 0)
                selected = by == "page" ? 0 : length - 1;
            else if (selected >= length)
                selected = by == "page" ? length - 1 : 0;
            view.dispatch({ effects: setSelectedEffect.of(selected) });
            return true;
        };
    }
    /**
    Accept the current completion.
    */
    const acceptCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled ||
            Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
            return false;
        return applyCompletion(view, cState.open.options[cState.open.selected]);
    };
    /**
    Explicitly start autocompletion.
    */
    const startCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (!cState)
            return false;
        view.dispatch({ effects: startCompletionEffect.of(true) });
        return true;
    };
    /**
    Close the currently active completion.
    */
    const closeCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (!cState || !cState.active.some(a => a.state != 0 /* State.Inactive */))
            return false;
        view.dispatch({ effects: closeCompletionEffect.of(null) });
        return true;
    };
    class RunningQuery {
        constructor(active, context) {
            this.active = active;
            this.context = context;
            this.time = Date.now();
            this.updates = [];
            // Note that 'undefined' means 'not done yet', whereas 'null' means
            // 'query returned null'.
            this.done = undefined;
        }
    }
    const MaxUpdateCount = 50, MinAbortTime = 1000;
    const completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.debounceUpdate = -1;
            this.running = [];
            this.debounceAccept = -1;
            this.pendingStart = false;
            this.composing = 0 /* CompositionState.None */;
            for (let active of view.state.field(completionState).active)
                if (active.isPending)
                    this.startQuery(active);
        }
        update(update) {
            let cState = update.state.field(completionState);
            let conf = update.state.facet(completionConfig);
            if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
                return;
            let doesReset = update.transactions.some(tr => {
                let type = getUpdateType(tr, conf);
                return (type & 8 /* UpdateType.Reset */) || (tr.selection || tr.docChanged) && !(type & 3 /* UpdateType.SimpleInteraction */);
            });
            for (let i = 0; i < this.running.length; i++) {
                let query = this.running[i];
                if (doesReset ||
                    query.context.abortOnDocChange && update.docChanged ||
                    query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
                    for (let handler of query.context.abortListeners) {
                        try {
                            handler();
                        }
                        catch (e) {
                            logException(this.view.state, e);
                        }
                    }
                    query.context.abortListeners = null;
                    this.running.splice(i--, 1);
                }
                else {
                    query.updates.push(...update.transactions);
                }
            }
            if (this.debounceUpdate > -1)
                clearTimeout(this.debounceUpdate);
            if (update.transactions.some(tr => tr.effects.some(e => e.is(startCompletionEffect))))
                this.pendingStart = true;
            let delay = this.pendingStart ? 50 : conf.activateOnTypingDelay;
            this.debounceUpdate = cState.active.some(a => a.isPending && !this.running.some(q => q.active.source == a.source))
                ? setTimeout(() => this.startUpdate(), delay) : -1;
            if (this.composing != 0 /* CompositionState.None */)
                for (let tr of update.transactions) {
                    if (tr.isUserEvent("input.type"))
                        this.composing = 2 /* CompositionState.Changed */;
                    else if (this.composing == 2 /* CompositionState.Changed */ && tr.selection)
                        this.composing = 3 /* CompositionState.ChangedAndMoved */;
                }
        }
        startUpdate() {
            this.debounceUpdate = -1;
            this.pendingStart = false;
            let { state } = this.view, cState = state.field(completionState);
            for (let active of cState.active) {
                if (active.isPending && !this.running.some(r => r.active.source == active.source))
                    this.startQuery(active);
            }
            if (this.running.length && cState.open && cState.open.disabled)
                this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
        }
        startQuery(active) {
            let { state } = this.view, pos = cur(state);
            let context = new CompletionContext(state, pos, active.explicit, this.view);
            let pending = new RunningQuery(active, context);
            this.running.push(pending);
            Promise.resolve(active.source(context)).then(result => {
                if (!pending.context.aborted) {
                    pending.done = result || null;
                    this.scheduleAccept();
                }
            }, err => {
                this.view.dispatch({ effects: closeCompletionEffect.of(null) });
                logException(this.view.state, err);
            });
        }
        scheduleAccept() {
            if (this.running.every(q => q.done !== undefined))
                this.accept();
            else if (this.debounceAccept < 0)
                this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
        }
        // For each finished query in this.running, try to create a result
        // or, if appropriate, restart the query.
        accept() {
            var _a;
            if (this.debounceAccept > -1)
                clearTimeout(this.debounceAccept);
            this.debounceAccept = -1;
            let updated = [];
            let conf = this.view.state.facet(completionConfig), cState = this.view.state.field(completionState);
            for (let i = 0; i < this.running.length; i++) {
                let query = this.running[i];
                if (query.done === undefined)
                    continue;
                this.running.splice(i--, 1);
                if (query.done) {
                    let pos = cur(query.updates.length ? query.updates[0].startState : this.view.state);
                    let limit = Math.min(pos, query.done.from + (query.active.explicit ? 0 : 1));
                    let active = new ActiveResult(query.active.source, query.active.explicit, limit, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : pos);
                    // Replay the transactions that happened since the start of
                    // the request and see if that preserves the result
                    for (let tr of query.updates)
                        active = active.update(tr, conf);
                    if (active.hasResult()) {
                        updated.push(active);
                        continue;
                    }
                }
                let current = cState.active.find(a => a.source == query.active.source);
                if (current && current.isPending) {
                    if (query.done == null) {
                        // Explicitly failed. Should clear the pending status if it
                        // hasn't been re-set in the meantime.
                        let active = new ActiveSource(query.active.source, 0 /* State.Inactive */);
                        for (let tr of query.updates)
                            active = active.update(tr, conf);
                        if (!active.isPending)
                            updated.push(active);
                    }
                    else {
                        // Cleared by subsequent transactions. Restart.
                        this.startQuery(current);
                    }
                }
            }
            if (updated.length || cState.open && cState.open.disabled)
                this.view.dispatch({ effects: setActiveEffect.of(updated) });
        }
    }, {
        eventHandlers: {
            blur(event) {
                let state = this.view.state.field(completionState, false);
                if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
                    let dialog = state.open && getTooltip(this.view, state.open.tooltip);
                    if (!dialog || !dialog.dom.contains(event.relatedTarget))
                        setTimeout(() => this.view.dispatch({ effects: closeCompletionEffect.of(null) }), 10);
                }
            },
            compositionstart() {
                this.composing = 1 /* CompositionState.Started */;
            },
            compositionend() {
                if (this.composing == 3 /* CompositionState.ChangedAndMoved */) {
                    // Safari fires compositionend events synchronously, possibly
                    // from inside an update, so dispatch asynchronously to avoid reentrancy
                    setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
                }
                this.composing = 0 /* CompositionState.None */;
            }
        }
    });
    const windows = typeof navigator == "object" && /*@__PURE__*//Win/.test(navigator.platform);
    const commitCharacters = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.domEventHandlers({
        keydown(event, view) {
            let field = view.state.field(completionState, false);
            if (!field || !field.open || field.open.disabled || field.open.selected < 0 ||
                event.key.length > 1 || event.ctrlKey && !(windows && event.altKey) || event.metaKey)
                return false;
            let option = field.open.options[field.open.selected];
            let result = field.active.find(a => a.source == option.source);
            let commitChars = option.completion.commitCharacters || result.result.commitCharacters;
            if (commitChars && commitChars.indexOf(event.key) > -1)
                applyCompletion(view, option);
            return false;
        }
    }));

    const baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-tooltip.cm-tooltip-autocomplete": {
            "& > ul": {
                fontFamily: "monospace",
                whiteSpace: "nowrap",
                overflow: "hidden auto",
                maxWidth_fallback: "700px",
                maxWidth: "min(700px, 95vw)",
                minWidth: "250px",
                maxHeight: "10em",
                height: "100%",
                listStyle: "none",
                margin: 0,
                padding: 0,
                "& > li, & > completion-section": {
                    padding: "1px 3px",
                    lineHeight: 1.2
                },
                "& > li": {
                    overflowX: "hidden",
                    textOverflow: "ellipsis",
                    cursor: "pointer"
                },
                "& > completion-section": {
                    display: "list-item",
                    borderBottom: "1px solid silver",
                    paddingLeft: "0.5em",
                    opacity: 0.7
                }
            }
        },
        "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
            background: "#17c",
            color: "white",
        },
        "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
            background: "#777",
        },
        "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
            background: "#347",
            color: "white",
        },
        "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
            background: "#444",
        },
        ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
            content: '"···"',
            opacity: 0.5,
            display: "block",
            textAlign: "center"
        },
        ".cm-tooltip.cm-completionInfo": {
            position: "absolute",
            padding: "3px 9px",
            width: "max-content",
            maxWidth: `${400 /* Info.Width */}px`,
            boxSizing: "border-box",
            whiteSpace: "pre-line"
        },
        ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
        ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
        ".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30 /* Info.Margin */}px` },
        ".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30 /* Info.Margin */}px` },
        "&light .cm-snippetField": { backgroundColor: "#00000022" },
        "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
        ".cm-snippetFieldPosition": {
            verticalAlign: "text-top",
            width: 0,
            height: "1.15em",
            display: "inline-block",
            margin: "0 -0.7px -.7em",
            borderLeft: "1.4px dotted #888"
        },
        ".cm-completionMatchedText": {
            textDecoration: "underline"
        },
        ".cm-completionDetail": {
            marginLeft: "0.5em",
            fontStyle: "italic"
        },
        ".cm-completionIcon": {
            fontSize: "90%",
            width: ".8em",
            display: "inline-block",
            textAlign: "center",
            paddingRight: ".6em",
            opacity: "0.6",
            boxSizing: "content-box"
        },
        ".cm-completionIcon-function, .cm-completionIcon-method": {
            "&:after": { content: "'ƒ'" }
        },
        ".cm-completionIcon-class": {
            "&:after": { content: "'○'" }
        },
        ".cm-completionIcon-interface": {
            "&:after": { content: "'◌'" }
        },
        ".cm-completionIcon-variable": {
            "&:after": { content: "'𝑥'" }
        },
        ".cm-completionIcon-constant": {
            "&:after": { content: "'𝐶'" }
        },
        ".cm-completionIcon-type": {
            "&:after": { content: "'𝑡'" }
        },
        ".cm-completionIcon-enum": {
            "&:after": { content: "'∪'" }
        },
        ".cm-completionIcon-property": {
            "&:after": { content: "'□'" }
        },
        ".cm-completionIcon-keyword": {
            "&:after": { content: "'🔑\uFE0E'" } // Disable emoji rendering
        },
        ".cm-completionIcon-namespace": {
            "&:after": { content: "'▢'" }
        },
        ".cm-completionIcon-text": {
            "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
        }
    });

    class FieldPos {
        constructor(field, line, from, to) {
            this.field = field;
            this.line = line;
            this.from = from;
            this.to = to;
        }
    }
    class FieldRange {
        constructor(field, from, to) {
            this.field = field;
            this.from = from;
            this.to = to;
        }
        map(changes) {
            let from = changes.mapPos(this.from, -1, MapMode.TrackDel);
            let to = changes.mapPos(this.to, 1, MapMode.TrackDel);
            return from == null || to == null ? null : new FieldRange(this.field, from, to);
        }
    }
    class Snippet {
        constructor(lines, fieldPositions) {
            this.lines = lines;
            this.fieldPositions = fieldPositions;
        }
        instantiate(state, pos) {
            let text = [], lineStart = [pos];
            let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
            for (let line of this.lines) {
                if (text.length) {
                    let indent = baseIndent, tabs = /^\t*/.exec(line)[0].length;
                    for (let i = 0; i < tabs; i++)
                        indent += state.facet(indentUnit);
                    lineStart.push(pos + indent.length - tabs);
                    line = indent + line.slice(tabs);
                }
                text.push(line);
                pos += line.length + 1;
            }
            let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));
            return { text, ranges };
        }
        static parse(template) {
            let fields = [];
            let lines = [], positions = [], m;
            for (let line of template.split(/\r\n?|\n/)) {
                while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(line)) {
                    let seq = m[1] ? +m[1] : null, rawName = m[2] || m[3] || "", found = -1;
                    let name = rawName.replace(/\\[{}]/g, m => m[1]);
                    for (let i = 0; i < fields.length; i++) {
                        if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false)
                            found = i;
                    }
                    if (found < 0) {
                        let i = 0;
                        while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))
                            i++;
                        fields.splice(i, 0, { seq, name });
                        found = i;
                        for (let pos of positions)
                            if (pos.field >= found)
                                pos.field++;
                    }
                    positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
                    line = line.slice(0, m.index) + rawName + line.slice(m.index + m[0].length);
                }
                line = line.replace(/\\([{}])/g, (_, brace, index) => {
                    for (let pos of positions)
                        if (pos.line == lines.length && pos.from > index) {
                            pos.from--;
                            pos.to--;
                        }
                    return brace;
                });
                lines.push(line);
            }
            return new Snippet(lines, positions);
        }
    }
    let fieldMarker = /*@__PURE__*/Decoration.widget({ widget: /*@__PURE__*/new class extends WidgetType {
            toDOM() {
                let span = document.createElement("span");
                span.className = "cm-snippetFieldPosition";
                return span;
            }
            ignoreEvent() { return false; }
        } });
    let fieldRange = /*@__PURE__*/Decoration.mark({ class: "cm-snippetField" });
    class ActiveSnippet {
        constructor(ranges, active) {
            this.ranges = ranges;
            this.active = active;
            this.deco = Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));
        }
        map(changes) {
            let ranges = [];
            for (let r of this.ranges) {
                let mapped = r.map(changes);
                if (!mapped)
                    return null;
                ranges.push(mapped);
            }
            return new ActiveSnippet(ranges, this.active);
        }
        selectionInsideField(sel) {
            return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));
        }
    }
    const setActive = /*@__PURE__*/StateEffect.define({
        map(value, changes) { return value && value.map(changes); }
    });
    const moveToField = /*@__PURE__*/StateEffect.define();
    const snippetState = /*@__PURE__*/StateField.define({
        create() { return null; },
        update(value, tr) {
            for (let effect of tr.effects) {
                if (effect.is(setActive))
                    return effect.value;
                if (effect.is(moveToField) && value)
                    return new ActiveSnippet(value.ranges, effect.value);
            }
            if (value && tr.docChanged)
                value = value.map(tr.changes);
            if (value && tr.selection && !value.selectionInsideField(tr.selection))
                value = null;
            return value;
        },
        provide: f => EditorView.decorations.from(f, val => val ? val.deco : Decoration.none)
    });
    function fieldSelection(ranges, field) {
        return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));
    }
    /**
    Convert a snippet template to a function that can
    [apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written
    using syntax like this:

        "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"

    Each `${}` placeholder (you may also use `#{}`) indicates a field
    that the user can fill in. Its name, if any, will be the default
    content for the field.

    When the snippet is activated by calling the returned function,
    the code is inserted at the given position. Newlines in the
    template are indented by the indentation of the start line, plus
    one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
    the newline.

    On activation, (all instances of) the first field are selected.
    The user can move between fields with Tab and Shift-Tab as long as
    the fields are active. Moving to the last field or moving the
    cursor out of the current field deactivates the fields.

    The order of fields defaults to textual order, but you can add
    numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
    a custom order.

    To include a literal `{` or `}` in your template, put a backslash
    in front of it. This will be removed and the brace will not be
    interpreted as indicating a placeholder.
    */
    function snippet(template) {
        let snippet = Snippet.parse(template);
        return (editor, completion, from, to) => {
            let { text, ranges } = snippet.instantiate(editor.state, from);
            let { main } = editor.state.selection;
            let spec = {
                changes: { from, to: to == main.from ? main.to : to, insert: Text.of(text) },
                scrollIntoView: true,
                annotations: completion ? [pickedCompletion.of(completion), Transaction.userEvent.of("input.complete")] : undefined
            };
            if (ranges.length)
                spec.selection = fieldSelection(ranges, 0);
            if (ranges.some(r => r.field > 0)) {
                let active = new ActiveSnippet(ranges, 0);
                let effects = spec.effects = [setActive.of(active)];
                if (editor.state.field(snippetState, false) === undefined)
                    effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme$1]));
            }
            editor.dispatch(editor.state.update(spec));
        };
    }
    function moveField(dir) {
        return ({ state, dispatch }) => {
            let active = state.field(snippetState, false);
            if (!active || dir < 0 && active.active == 0)
                return false;
            let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);
            dispatch(state.update({
                selection: fieldSelection(active.ranges, next),
                effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next)),
                scrollIntoView: true
            }));
            return true;
        };
    }
    /**
    A command that clears the active snippet, if any.
    */
    const clearSnippet = ({ state, dispatch }) => {
        let active = state.field(snippetState, false);
        if (!active)
            return false;
        dispatch(state.update({ effects: setActive.of(null) }));
        return true;
    };
    /**
    Move to the next snippet field, if available.
    */
    const nextSnippetField = /*@__PURE__*/moveField(1);
    /**
    Move to the previous snippet field, if available.
    */
    const prevSnippetField = /*@__PURE__*/moveField(-1);
    const defaultSnippetKeymap = [
        { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
        { key: "Escape", run: clearSnippet }
    ];
    /**
    A facet that can be used to configure the key bindings used by
    snippets. The default binds Tab to
    [`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
    [`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
    to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
    */
    const snippetKeymap = /*@__PURE__*/Facet.define({
        combine(maps) { return maps.length ? maps[0] : defaultSnippetKeymap; }
    });
    const addSnippetKeymap = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));
    /**
    Create a completion from a snippet. Returns an object with the
    properties from `completion`, plus an `apply` function that
    applies the snippet.
    */
    function snippetCompletion(template, completion) {
        return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
    }
    const snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({
        mousedown(event, view) {
            let active = view.state.field(snippetState, false), pos;
            if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
                return false;
            let match = active.ranges.find(r => r.from <= pos && r.to >= pos);
            if (!match || match.field == active.active)
                return false;
            view.dispatch({
                selection: fieldSelection(active.ranges, match.field),
                effects: setActive.of(active.ranges.some(r => r.field > match.field)
                    ? new ActiveSnippet(active.ranges, match.field) : null),
                scrollIntoView: true
            });
            return true;
        }
    });

    const defaults = {
        brackets: ["(", "[", "{", "'", '"'],
        before: ")]}:;>",
        stringPrefixes: []
    };
    const closeBracketEffect = /*@__PURE__*/StateEffect.define({
        map(value, mapping) {
            let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
            return mapped == null ? undefined : mapped;
        }
    });
    const closedBracket = /*@__PURE__*/new class extends RangeValue {
    };
    closedBracket.startSide = 1;
    closedBracket.endSide = -1;
    const bracketState = /*@__PURE__*/StateField.define({
        create() { return RangeSet.empty; },
        update(value, tr) {
            value = value.map(tr.changes);
            if (tr.selection) {
                let line = tr.state.doc.lineAt(tr.selection.main.head);
                value = value.update({ filter: from => from >= line.from && from <= line.to });
            }
            for (let effect of tr.effects)
                if (effect.is(closeBracketEffect))
                    value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
            return value;
        }
    });
    /**
    Extension to enable bracket-closing behavior. When a closeable
    bracket is typed, its closing bracket is immediately inserted
    after the cursor. When closing a bracket directly in front of a
    closing bracket inserted by the extension, the cursor moves over
    that bracket.
    */
    function closeBrackets() {
        return [inputHandler, bracketState];
    }
    const definedClosing = "()[]{}<>«»»«［］｛｝";
    function closing(ch) {
        for (let i = 0; i < definedClosing.length; i += 2)
            if (definedClosing.charCodeAt(i) == ch)
                return definedClosing.charAt(i + 1);
        return fromCodePoint(ch < 128 ? ch : ch + 1);
    }
    function config(state, pos) {
        return state.languageDataAt("closeBrackets", pos)[0] || defaults;
    }
    const android = typeof navigator == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
    const inputHandler = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, insert) => {
        if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)
            return false;
        let sel = view.state.selection.main;
        if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||
            from != sel.from || to != sel.to)
            return false;
        let tr = insertBracket(view.state, insert);
        if (!tr)
            return false;
        view.dispatch(tr);
        return true;
    });
    /**
    Command that implements deleting a pair of matching brackets when
    the cursor is between them.
    */
    const deleteBracketPair = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let conf = config(state, state.selection.main.head);
        let tokens = conf.brackets || defaults.brackets;
        let dont = null, changes = state.changeByRange(range => {
            if (range.empty) {
                let before = prevChar(state.doc, range.head);
                for (let token of tokens) {
                    if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0)))
                        return { changes: { from: range.head - token.length, to: range.head + token.length },
                            range: EditorSelection.cursor(range.head - token.length) };
                }
            }
            return { range: dont = range };
        });
        if (!dont)
            dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete.backward" }));
        return !dont;
    };
    /**
    Close-brackets related key bindings. Binds Backspace to
    [`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).
    */
    const closeBracketsKeymap = [
        { key: "Backspace", run: deleteBracketPair }
    ];
    /**
    Implements the extension's behavior on text insertion. If the
    given string counts as a bracket in the language around the
    selection, and replacing the selection with it requires custom
    behavior (inserting a closing version or skipping past a
    previously-closed bracket), this function returns a transaction
    representing that custom behavior. (You only need this if you want
    to programmatically insert brackets—the
    [`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will
    take care of running this for user input.)
    */
    function insertBracket(state, bracket) {
        let conf = config(state, state.selection.main.head);
        let tokens = conf.brackets || defaults.brackets;
        for (let tok of tokens) {
            let closed = closing(codePointAt(tok, 0));
            if (bracket == tok)
                return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf)
                    : handleOpen(state, tok, closed, conf.before || defaults.before);
            if (bracket == closed && closedBracketAt(state, state.selection.main.from))
                return handleClose(state, tok, closed);
        }
        return null;
    }
    function closedBracketAt(state, pos) {
        let found = false;
        state.field(bracketState).between(0, state.doc.length, from => {
            if (from == pos)
                found = true;
        });
        return found;
    }
    function nextChar(doc, pos) {
        let next = doc.sliceString(pos, pos + 2);
        return next.slice(0, codePointSize(codePointAt(next, 0)));
    }
    function prevChar(doc, pos) {
        let prev = doc.sliceString(pos - 2, pos);
        return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
    }
    function handleOpen(state, open, close, closeBefore) {
        let dont = null, changes = state.changeByRange(range => {
            if (!range.empty)
                return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
                    effects: closeBracketEffect.of(range.to + open.length),
                    range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };
            let next = nextChar(state.doc, range.head);
            if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
                return { changes: { insert: open + close, from: range.head },
                    effects: closeBracketEffect.of(range.head + open.length),
                    range: EditorSelection.cursor(range.head + open.length) };
            return { range: dont = range };
        });
        return dont ? null : state.update(changes, {
            scrollIntoView: true,
            userEvent: "input.type"
        });
    }
    function handleClose(state, _open, close) {
        let dont = null, changes = state.changeByRange(range => {
            if (range.empty && nextChar(state.doc, range.head) == close)
                return { changes: { from: range.head, to: range.head + close.length, insert: close },
                    range: EditorSelection.cursor(range.head + close.length) };
            return dont = { range };
        });
        return dont ? null : state.update(changes, {
            scrollIntoView: true,
            userEvent: "input.type"
        });
    }
    // Handles cases where the open and close token are the same, and
    // possibly triple quotes (as in `"""abc"""`-style quoting).
    function handleSame(state, token, allowTriple, config) {
        let stringPrefixes = config.stringPrefixes || defaults.stringPrefixes;
        let dont = null, changes = state.changeByRange(range => {
            if (!range.empty)
                return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
                    effects: closeBracketEffect.of(range.to + token.length),
                    range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };
            let pos = range.head, next = nextChar(state.doc, pos), start;
            if (next == token) {
                if (nodeStart(state, pos)) {
                    return { changes: { insert: token + token, from: pos },
                        effects: closeBracketEffect.of(pos + token.length),
                        range: EditorSelection.cursor(pos + token.length) };
                }
                else if (closedBracketAt(state, pos)) {
                    let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
                    let content = isTriple ? token + token + token : token;
                    return { changes: { from: pos, to: pos + content.length, insert: content },
                        range: EditorSelection.cursor(pos + content.length) };
                }
            }
            else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&
                (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 &&
                nodeStart(state, start)) {
                return { changes: { insert: token + token + token + token, from: pos },
                    effects: closeBracketEffect.of(pos + token.length),
                    range: EditorSelection.cursor(pos + token.length) };
            }
            else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
                if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes))
                    return { changes: { insert: token + token, from: pos },
                        effects: closeBracketEffect.of(pos + token.length),
                        range: EditorSelection.cursor(pos + token.length) };
            }
            return { range: dont = range };
        });
        return dont ? null : state.update(changes, {
            scrollIntoView: true,
            userEvent: "input.type"
        });
    }
    function nodeStart(state, pos) {
        let tree = syntaxTree(state).resolveInner(pos + 1);
        return tree.parent && tree.from == pos;
    }
    function probablyInString(state, pos, quoteToken, prefixes) {
        let node = syntaxTree(state).resolveInner(pos, -1);
        let maxPrefix = prefixes.reduce((m, p) => Math.max(m, p.length), 0);
        for (let i = 0; i < 5; i++) {
            let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
            let quotePos = start.indexOf(quoteToken);
            if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
                let first = node.firstChild;
                while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
                    if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)
                        return false;
                    first = first.firstChild;
                }
                return true;
            }
            let parent = node.to == pos && node.parent;
            if (!parent)
                break;
            node = parent;
        }
        return false;
    }
    function canStartStringAt(state, pos, prefixes) {
        let charCat = state.charCategorizer(pos);
        if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)
            return pos;
        for (let prefix of prefixes) {
            let start = pos - prefix.length;
            if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word)
                return start;
        }
        return -1;
    }

    /**
    Returns an extension that enables autocompletion.
    */
    function autocompletion(config = {}) {
        return [
            commitCharacters,
            completionState,
            completionConfig.of(config),
            completionPlugin,
            completionKeymapExt,
            baseTheme$1
        ];
    }
    /**
    Basic keybindings for autocompletion.

     - Ctrl-Space (and Alt-\` on macOS): [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
     - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
     - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
     - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
     - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
     - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
     - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
    */
    const completionKeymap = [
        { key: "Ctrl-Space", run: startCompletion },
        { mac: "Alt-`", run: startCompletion },
        { key: "Escape", run: closeCompletion },
        { key: "ArrowDown", run: /*@__PURE__*/moveCompletionSelection(true) },
        { key: "ArrowUp", run: /*@__PURE__*/moveCompletionSelection(false) },
        { key: "PageDown", run: /*@__PURE__*/moveCompletionSelection(true, "page") },
        { key: "PageUp", run: /*@__PURE__*/moveCompletionSelection(false, "page") },
        { key: "Enter", run: acceptCompletion }
    ];
    const completionKeymapExt = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));

    class SelectedDiagnostic {
        constructor(from, to, diagnostic) {
            this.from = from;
            this.to = to;
            this.diagnostic = diagnostic;
        }
    }
    class LintState {
        constructor(diagnostics, panel, selected) {
            this.diagnostics = diagnostics;
            this.panel = panel;
            this.selected = selected;
        }
        static init(diagnostics, panel, state) {
            // Filter the list of diagnostics for which to create markers
            let diagnosticFilter = state.facet(lintConfig).markerFilter;
            if (diagnosticFilter)
                diagnostics = diagnosticFilter(diagnostics, state);
            let sorted = diagnostics.slice().sort((a, b) => a.from - b.from || a.to - b.to);
            let deco = new RangeSetBuilder(), active = [], pos = 0;
            for (let i = 0;;) {
                let next = i == sorted.length ? null : sorted[i];
                if (!next && !active.length)
                    break;
                let from, to;
                if (active.length) {
                    from = pos;
                    to = active.reduce((p, d) => Math.min(p, d.to), next && next.from > from ? next.from : 1e8);
                }
                else {
                    from = next.from;
                    to = next.to;
                    active.push(next);
                    i++;
                }
                while (i < sorted.length) {
                    let next = sorted[i];
                    if (next.from == from && (next.to > next.from || next.to == from)) {
                        active.push(next);
                        i++;
                        to = Math.min(next.to, to);
                    }
                    else {
                        to = Math.min(next.from, to);
                        break;
                    }
                }
                let sev = maxSeverity(active);
                if (active.some(d => d.from == d.to || (d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from))) {
                    deco.add(from, from, Decoration.widget({
                        widget: new DiagnosticWidget(sev),
                        diagnostics: active.slice()
                    }));
                }
                else {
                    let markClass = active.reduce((c, d) => d.markClass ? c + " " + d.markClass : c, "");
                    deco.add(from, to, Decoration.mark({
                        class: "cm-lintRange cm-lintRange-" + sev + markClass,
                        diagnostics: active.slice(),
                        inclusiveEnd: active.some(a => a.to > to)
                    }));
                }
                pos = to;
                for (let i = 0; i < active.length; i++)
                    if (active[i].to <= pos)
                        active.splice(i--, 1);
            }
            let set = deco.finish();
            return new LintState(set, panel, findDiagnostic(set));
        }
    }
    function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
        let found = null;
        diagnostics.between(after, 1e9, (from, to, { spec }) => {
            if (diagnostic && spec.diagnostics.indexOf(diagnostic) < 0)
                return;
            if (!found)
                found = new SelectedDiagnostic(from, to, diagnostic || spec.diagnostics[0]);
            else if (spec.diagnostics.indexOf(found.diagnostic) < 0)
                return false;
            else
                found = new SelectedDiagnostic(found.from, to, found.diagnostic);
        });
        return found;
    }
    function hideTooltip(tr, tooltip) {
        let from = tooltip.pos, to = tooltip.end || from;
        let result = tr.state.facet(lintConfig).hideOn(tr, from, to);
        if (result != null)
            return result;
        let line = tr.startState.doc.lineAt(tooltip.pos);
        return !!(tr.effects.some(e => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(line.from, Math.max(line.to, to)));
    }
    function maybeEnableLint(state, effects) {
        return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));
    }
    /**
    The state effect that updates the set of active diagnostics. Can
    be useful when writing an extension that needs to track these.
    */
    const setDiagnosticsEffect = /*@__PURE__*/StateEffect.define();
    const togglePanel = /*@__PURE__*/StateEffect.define();
    const movePanelSelection = /*@__PURE__*/StateEffect.define();
    const lintState = /*@__PURE__*/StateField.define({
        create() {
            return new LintState(Decoration.none, null, null);
        },
        update(value, tr) {
            if (tr.docChanged && value.diagnostics.size) {
                let mapped = value.diagnostics.map(tr.changes), selected = null, panel = value.panel;
                if (value.selected) {
                    let selPos = tr.changes.mapPos(value.selected.from, 1);
                    selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
                }
                if (!mapped.size && panel && tr.state.facet(lintConfig).autoPanel)
                    panel = null;
                value = new LintState(mapped, panel, selected);
            }
            for (let effect of tr.effects) {
                if (effect.is(setDiagnosticsEffect)) {
                    let panel = !tr.state.facet(lintConfig).autoPanel ? value.panel : effect.value.length ? LintPanel.open : null;
                    value = LintState.init(effect.value, panel, tr.state);
                }
                else if (effect.is(togglePanel)) {
                    value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
                }
                else if (effect.is(movePanelSelection)) {
                    value = new LintState(value.diagnostics, value.panel, effect.value);
                }
            }
            return value;
        },
        provide: f => [showPanel.from(f, val => val.panel),
            EditorView.decorations.from(f, s => s.diagnostics)]
    });
    const activeMark = /*@__PURE__*/Decoration.mark({ class: "cm-lintRange cm-lintRange-active" });
    function lintTooltip(view, pos, side) {
        let { diagnostics } = view.state.field(lintState);
        let found, start = -1, end = -1;
        diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {
            if (pos >= from && pos <= to &&
                (from == to || ((pos > from || side > 0) && (pos < to || side < 0)))) {
                found = spec.diagnostics;
                start = from;
                end = to;
                return false;
            }
        });
        let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
        if (found && diagnosticFilter)
            found = diagnosticFilter(found, view.state);
        if (!found)
            return null;
        return {
            pos: start,
            end: end,
            above: view.state.doc.lineAt(start).to < end,
            create() {
                return { dom: diagnosticsTooltip(view, found) };
            }
        };
    }
    function diagnosticsTooltip(view, diagnostics) {
        return crelt("ul", { class: "cm-tooltip-lint" }, diagnostics.map(d => renderDiagnostic(view, d, false)));
    }
    /**
    Command to open and focus the lint panel.
    */
    const openLintPanel = (view) => {
        let field = view.state.field(lintState, false);
        if (!field || !field.panel)
            view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel.of(true)]) });
        let panel = getPanel(view, LintPanel.open);
        if (panel)
            panel.dom.querySelector(".cm-panel-lint ul").focus();
        return true;
    };
    /**
    Command to close the lint panel, when open.
    */
    const closeLintPanel = (view) => {
        let field = view.state.field(lintState, false);
        if (!field || !field.panel)
            return false;
        view.dispatch({ effects: togglePanel.of(false) });
        return true;
    };
    /**
    Move the selection to the next diagnostic.
    */
    const nextDiagnostic = (view) => {
        let field = view.state.field(lintState, false);
        if (!field)
            return false;
        let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);
        if (!next.value) {
            next = field.diagnostics.iter(0);
            if (!next.value || next.from == sel.from && next.to == sel.to)
                return false;
        }
        view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });
        return true;
    };
    /**
    A set of default key bindings for the lint functionality.

    - Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)
    - F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)
    */
    const lintKeymap = [
        { key: "Mod-Shift-m", run: openLintPanel, preventDefault: true },
        { key: "F8", run: nextDiagnostic }
    ];
    const lintConfig = /*@__PURE__*/Facet.define({
        combine(input) {
            return Object.assign({ sources: input.map(i => i.source).filter(x => x != null) }, combineConfig(input.map(i => i.config), {
                delay: 750,
                markerFilter: null,
                tooltipFilter: null,
                needsRefresh: null,
                hideOn: () => null,
            }, {
                needsRefresh: (a, b) => !a ? b : !b ? a : u => a(u) || b(u)
            }));
        }
    });
    function assignKeys(actions) {
        let assigned = [];
        if (actions)
            actions: for (let { name } of actions) {
                for (let i = 0; i < name.length; i++) {
                    let ch = name[i];
                    if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {
                        assigned.push(ch);
                        continue actions;
                    }
                }
                assigned.push("");
            }
        return assigned;
    }
    function renderDiagnostic(view, diagnostic, inPanel) {
        var _a;
        let keys = inPanel ? assignKeys(diagnostic.actions) : [];
        return crelt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, crelt("span", { class: "cm-diagnosticText" }, diagnostic.renderMessage ? diagnostic.renderMessage(view) : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {
            let fired = false, click = (e) => {
                e.preventDefault();
                if (fired)
                    return;
                fired = true;
                let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
                if (found)
                    action.apply(view, found.from, found.to);
            };
            let { name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
            let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex),
                crelt("u", name.slice(keyIndex, keyIndex + 1)),
                name.slice(keyIndex + 1)];
            return crelt("button", {
                type: "button",
                class: "cm-diagnosticAction",
                onclick: click,
                onmousedown: click,
                "aria-label": ` Action: ${name}${keyIndex < 0 ? "" : ` (access key "${keys[i]})"`}.`
            }, nameElt);
        }), diagnostic.source && crelt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
    }
    class DiagnosticWidget extends WidgetType {
        constructor(sev) {
            super();
            this.sev = sev;
        }
        eq(other) { return other.sev == this.sev; }
        toDOM() {
            return crelt("span", { class: "cm-lintPoint cm-lintPoint-" + this.sev });
        }
    }
    class PanelItem {
        constructor(view, diagnostic) {
            this.diagnostic = diagnostic;
            this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
            this.dom = renderDiagnostic(view, diagnostic, true);
            this.dom.id = this.id;
            this.dom.setAttribute("role", "option");
        }
    }
    class LintPanel {
        constructor(view) {
            this.view = view;
            this.items = [];
            let onkeydown = (event) => {
                if (event.keyCode == 27) { // Escape
                    closeLintPanel(this.view);
                    this.view.focus();
                }
                else if (event.keyCode == 38 || event.keyCode == 33) { // ArrowUp, PageUp
                    this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
                }
                else if (event.keyCode == 40 || event.keyCode == 34) { // ArrowDown, PageDown
                    this.moveSelection((this.selectedIndex + 1) % this.items.length);
                }
                else if (event.keyCode == 36) { // Home
                    this.moveSelection(0);
                }
                else if (event.keyCode == 35) { // End
                    this.moveSelection(this.items.length - 1);
                }
                else if (event.keyCode == 13) { // Enter
                    this.view.focus();
                }
                else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) { // A-Z
                    let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);
                    for (let i = 0; i < keys.length; i++)
                        if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {
                            let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
                            if (found)
                                diagnostic.actions[i].apply(view, found.from, found.to);
                        }
                }
                else {
                    return;
                }
                event.preventDefault();
            };
            let onclick = (event) => {
                for (let i = 0; i < this.items.length; i++) {
                    if (this.items[i].dom.contains(event.target))
                        this.moveSelection(i);
                }
            };
            this.list = crelt("ul", {
                tabIndex: 0,
                role: "listbox",
                "aria-label": this.view.state.phrase("Diagnostics"),
                onkeydown,
                onclick
            });
            this.dom = crelt("div", { class: "cm-panel-lint" }, this.list, crelt("button", {
                type: "button",
                name: "close",
                "aria-label": this.view.state.phrase("close"),
                onclick: () => closeLintPanel(this.view)
            }, "×"));
            this.update();
        }
        get selectedIndex() {
            let selected = this.view.state.field(lintState).selected;
            if (!selected)
                return -1;
            for (let i = 0; i < this.items.length; i++)
                if (this.items[i].diagnostic == selected.diagnostic)
                    return i;
            return -1;
        }
        update() {
            let { diagnostics, selected } = this.view.state.field(lintState);
            let i = 0, needsSync = false, newSelectedItem = null;
            let seen = new Set();
            diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
                for (let diagnostic of spec.diagnostics) {
                    if (seen.has(diagnostic))
                        continue;
                    seen.add(diagnostic);
                    let found = -1, item;
                    for (let j = i; j < this.items.length; j++)
                        if (this.items[j].diagnostic == diagnostic) {
                            found = j;
                            break;
                        }
                    if (found < 0) {
                        item = new PanelItem(this.view, diagnostic);
                        this.items.splice(i, 0, item);
                        needsSync = true;
                    }
                    else {
                        item = this.items[found];
                        if (found > i) {
                            this.items.splice(i, found - i);
                            needsSync = true;
                        }
                    }
                    if (selected && item.diagnostic == selected.diagnostic) {
                        if (!item.dom.hasAttribute("aria-selected")) {
                            item.dom.setAttribute("aria-selected", "true");
                            newSelectedItem = item;
                        }
                    }
                    else if (item.dom.hasAttribute("aria-selected")) {
                        item.dom.removeAttribute("aria-selected");
                    }
                    i++;
                }
            });
            while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
                needsSync = true;
                this.items.pop();
            }
            if (this.items.length == 0) {
                this.items.push(new PanelItem(this.view, {
                    from: -1, to: -1,
                    severity: "info",
                    message: this.view.state.phrase("No diagnostics")
                }));
                needsSync = true;
            }
            if (newSelectedItem) {
                this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
                this.view.requestMeasure({
                    key: this,
                    read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
                    write: ({ sel, panel }) => {
                        let scaleY = panel.height / this.list.offsetHeight;
                        if (sel.top < panel.top)
                            this.list.scrollTop -= (panel.top - sel.top) / scaleY;
                        else if (sel.bottom > panel.bottom)
                            this.list.scrollTop += (sel.bottom - panel.bottom) / scaleY;
                    }
                });
            }
            else if (this.selectedIndex < 0) {
                this.list.removeAttribute("aria-activedescendant");
            }
            if (needsSync)
                this.sync();
        }
        sync() {
            let domPos = this.list.firstChild;
            function rm() {
                let prev = domPos;
                domPos = prev.nextSibling;
                prev.remove();
            }
            for (let item of this.items) {
                if (item.dom.parentNode == this.list) {
                    while (domPos != item.dom)
                        rm();
                    domPos = item.dom.nextSibling;
                }
                else {
                    this.list.insertBefore(item.dom, domPos);
                }
            }
            while (domPos)
                rm();
        }
        moveSelection(selectedIndex) {
            if (this.selectedIndex < 0)
                return;
            let field = this.view.state.field(lintState);
            let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
            if (!selection)
                return;
            this.view.dispatch({
                selection: { anchor: selection.from, head: selection.to },
                scrollIntoView: true,
                effects: movePanelSelection.of(selection)
            });
        }
        static open(view) { return new LintPanel(view); }
    }
    function svg(content, attrs = `viewBox="0 0 40 40"`) {
        return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content)}</svg>')`;
    }
    function underline(color) {
        return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
    }
    const baseTheme = /*@__PURE__*/EditorView.baseTheme({
        ".cm-diagnostic": {
            padding: "3px 6px 3px 8px",
            marginLeft: "-1px",
            display: "block",
            whiteSpace: "pre-wrap"
        },
        ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
        ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
        ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
        ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
        ".cm-diagnosticAction": {
            font: "inherit",
            border: "none",
            padding: "2px 4px",
            backgroundColor: "#444",
            color: "white",
            borderRadius: "3px",
            marginLeft: "8px",
            cursor: "pointer"
        },
        ".cm-diagnosticSource": {
            fontSize: "70%",
            opacity: .7
        },
        ".cm-lintRange": {
            backgroundPosition: "left bottom",
            backgroundRepeat: "repeat-x",
            paddingBottom: "0.7px",
        },
        ".cm-lintRange-error": { backgroundImage: /*@__PURE__*/underline("#d11") },
        ".cm-lintRange-warning": { backgroundImage: /*@__PURE__*/underline("orange") },
        ".cm-lintRange-info": { backgroundImage: /*@__PURE__*/underline("#999") },
        ".cm-lintRange-hint": { backgroundImage: /*@__PURE__*/underline("#66d") },
        ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
        ".cm-tooltip-lint": {
            padding: 0,
            margin: 0
        },
        ".cm-lintPoint": {
            position: "relative",
            "&:after": {
                content: '""',
                position: "absolute",
                bottom: 0,
                left: "-2px",
                borderLeft: "3px solid transparent",
                borderRight: "3px solid transparent",
                borderBottom: "4px solid #d11"
            }
        },
        ".cm-lintPoint-warning": {
            "&:after": { borderBottomColor: "orange" }
        },
        ".cm-lintPoint-info": {
            "&:after": { borderBottomColor: "#999" }
        },
        ".cm-lintPoint-hint": {
            "&:after": { borderBottomColor: "#66d" }
        },
        ".cm-panel.cm-panel-lint": {
            position: "relative",
            "& ul": {
                maxHeight: "100px",
                overflowY: "auto",
                "& [aria-selected]": {
                    backgroundColor: "#ddd",
                    "& u": { textDecoration: "underline" }
                },
                "&:focus [aria-selected]": {
                    background_fallback: "#bdf",
                    backgroundColor: "Highlight",
                    color_fallback: "white",
                    color: "HighlightText"
                },
                "& u": { textDecoration: "none" },
                padding: 0,
                margin: 0
            },
            "& [name=close]": {
                position: "absolute",
                top: "0",
                right: "2px",
                background: "inherit",
                border: "none",
                font: "inherit",
                padding: 0,
                margin: 0
            }
        }
    });
    function severityWeight(sev) {
        return sev == "error" ? 4 : sev == "warning" ? 3 : sev == "info" ? 2 : 1;
    }
    function maxSeverity(diagnostics) {
        let sev = "hint", weight = 1;
        for (let d of diagnostics) {
            let w = severityWeight(d.severity);
            if (w > weight) {
                weight = w;
                sev = d.severity;
            }
        }
        return sev;
    }
    const lintExtensions = [
        lintState,
        /*@__PURE__*/EditorView.decorations.compute([lintState], state => {
            let { selected, panel } = state.field(lintState);
            return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([
                activeMark.range(selected.from, selected.to)
            ]);
        }),
        /*@__PURE__*/hoverTooltip(lintTooltip, { hideOn: hideTooltip }),
        baseTheme
    ];

    // (The superfluous function calls around the list of extensions work
    // around current limitations in tree-shaking software.)
    /**
    This is an extension value that just pulls together a number of
    extensions that you might want in a basic editor. It is meant as a
    convenient helper to quickly set up CodeMirror without installing
    and importing a lot of separate packages.

    Specifically, it includes...

     - [the default command bindings](https://codemirror.net/6/docs/ref/#commands.defaultKeymap)
     - [line numbers](https://codemirror.net/6/docs/ref/#view.lineNumbers)
     - [special character highlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars)
     - [the undo history](https://codemirror.net/6/docs/ref/#commands.history)
     - [a fold gutter](https://codemirror.net/6/docs/ref/#language.foldGutter)
     - [custom selection drawing](https://codemirror.net/6/docs/ref/#view.drawSelection)
     - [drop cursor](https://codemirror.net/6/docs/ref/#view.dropCursor)
     - [multiple selections](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
     - [reindentation on input](https://codemirror.net/6/docs/ref/#language.indentOnInput)
     - [the default highlight style](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle) (as fallback)
     - [bracket matching](https://codemirror.net/6/docs/ref/#language.bracketMatching)
     - [bracket closing](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets)
     - [autocompletion](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion)
     - [rectangular selection](https://codemirror.net/6/docs/ref/#view.rectangularSelection) and [crosshair cursor](https://codemirror.net/6/docs/ref/#view.crosshairCursor)
     - [active line highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLine)
     - [active line gutter highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLineGutter)
     - [selection match highlighting](https://codemirror.net/6/docs/ref/#search.highlightSelectionMatches)
     - [search](https://codemirror.net/6/docs/ref/#search.searchKeymap)
     - [linting](https://codemirror.net/6/docs/ref/#lint.lintKeymap)

    (You'll probably want to add some language package to your setup
    too.)

    This extension does not allow customization. The idea is that,
    once you decide you want to configure your editor more precisely,
    you take this package's source (which is just a bunch of imports
    and an array literal), copy it into your own code, and adjust it
    as desired.
    */
    const basicSetup = /*@__PURE__*/(() => [
        lineNumbers(),
        highlightActiveLineGutter(),
        highlightSpecialChars(),
        history(),
        foldGutter(),
        drawSelection(),
        dropCursor(),
        EditorState.allowMultipleSelections.of(true),
        indentOnInput(),
        syntaxHighlighting(defaultHighlightStyle, { fallback: true }),
        bracketMatching(),
        closeBrackets(),
        autocompletion(),
        rectangularSelection(),
        crosshairCursor(),
        highlightActiveLine(),
        highlightSelectionMatches(),
        keymap.of([
            ...closeBracketsKeymap,
            ...defaultKeymap,
            ...searchKeymap,
            ...historyKeymap,
            ...foldKeymap,
            ...completionKeymap,
            ...lintKeymap
        ])
    ])();

    /**
    A parse stack. These are used internally by the parser to track
    parsing progress. They also provide some properties and methods
    that external code such as a tokenizer can use to get information
    about the parse state.
    */
    class Stack {
        /**
        @internal
        */
        constructor(
        /**
        The parse that this stack is part of @internal
        */
        p, 
        /**
        Holds state, input pos, buffer index triplets for all but the
        top state @internal
        */
        stack, 
        /**
        The current parse state @internal
        */
        state, 
        // The position at which the next reduce should take place. This
        // can be less than `this.pos` when skipped expressions have been
        // added to the stack (which should be moved outside of the next
        // reduction)
        /**
        @internal
        */
        reducePos, 
        /**
        The input position up to which this stack has parsed.
        */
        pos, 
        /**
        The dynamic score of the stack, including dynamic precedence
        and error-recovery penalties
        @internal
        */
        score, 
        // The output buffer. Holds (type, start, end, size) quads
        // representing nodes created by the parser, where `size` is
        // amount of buffer array entries covered by this node.
        /**
        @internal
        */
        buffer, 
        // The base offset of the buffer. When stacks are split, the split
        // instance shared the buffer history with its parent up to
        // `bufferBase`, which is the absolute offset (including the
        // offset of previous splits) into the buffer at which this stack
        // starts writing.
        /**
        @internal
        */
        bufferBase, 
        /**
        @internal
        */
        curContext, 
        /**
        @internal
        */
        lookAhead = 0, 
        // A parent stack from which this was split off, if any. This is
        // set up so that it always points to a stack that has some
        // additional buffer content, never to a stack with an equal
        // `bufferBase`.
        /**
        @internal
        */
        parent) {
            this.p = p;
            this.stack = stack;
            this.state = state;
            this.reducePos = reducePos;
            this.pos = pos;
            this.score = score;
            this.buffer = buffer;
            this.bufferBase = bufferBase;
            this.curContext = curContext;
            this.lookAhead = lookAhead;
            this.parent = parent;
        }
        /**
        @internal
        */
        toString() {
            return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
        }
        // Start an empty stack
        /**
        @internal
        */
        static start(p, state, pos = 0) {
            let cx = p.parser.context;
            return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
        }
        /**
        The stack's current [context](#lr.ContextTracker) value, if
        any. Its type will depend on the context tracker's type
        parameter, or it will be `null` if there is no context
        tracker.
        */
        get context() { return this.curContext ? this.curContext.context : null; }
        // Push a state onto the stack, tracking its start position as well
        // as the buffer base at that point.
        /**
        @internal
        */
        pushState(state, start) {
            this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
            this.state = state;
        }
        // Apply a reduce action
        /**
        @internal
        */
        reduce(action) {
            var _a;
            let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;
            let { parser } = this.p;
            let lookaheadRecord = this.reducePos < this.pos - 25 /* Lookahead.Margin */;
            if (lookaheadRecord)
                this.setLookAhead(this.pos);
            let dPrec = parser.dynamicPrecedence(type);
            if (dPrec)
                this.score += dPrec;
            if (depth == 0) {
                this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
                // Zero-depth reductions are a special case—they add stuff to
                // the stack without popping anything off.
                if (type < parser.minRepeatTerm)
                    this.storeNode(type, this.reducePos, this.reducePos, lookaheadRecord ? 8 : 4, true);
                this.reduceContext(type, this.reducePos);
                return;
            }
            // Find the base index into `this.stack`, content after which will
            // be dropped. Note that with `StayFlag` reductions we need to
            // consume two extra frames (the dummy parent node for the skipped
            // expression and the state that we'll be staying in, which should
            // be moved to `this.state`).
            let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);
            let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;
            // This is a kludge to try and detect overly deep left-associative
            // trees, which will not increase the parse stack depth and thus
            // won't be caught by the regular stack-depth limit check.
            if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {
                if (start == this.p.lastBigReductionStart) {
                    this.p.bigReductionCount++;
                    this.p.lastBigReductionSize = size;
                }
                else if (this.p.lastBigReductionSize < size) {
                    this.p.bigReductionCount = 1;
                    this.p.lastBigReductionStart = start;
                    this.p.lastBigReductionSize = size;
                }
            }
            let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;
            // Store normal terms or `R -> R R` repeat reductions
            if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {
                let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;
                this.storeNode(type, start, pos, count + 4, true);
            }
            if (action & 262144 /* Action.StayFlag */) {
                this.state = this.stack[base];
            }
            else {
                let baseStateID = this.stack[base - 3];
                this.state = parser.getGoto(baseStateID, type, true);
            }
            while (this.stack.length > base)
                this.stack.pop();
            this.reduceContext(type, start);
        }
        // Shift a value into the buffer
        /**
        @internal
        */
        storeNode(term, start, end, size = 4, mustSink = false) {
            if (term == 0 /* Term.Err */ &&
                (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
                // Try to omit/merge adjacent error nodes
                let cur = this, top = this.buffer.length;
                if (top == 0 && cur.parent) {
                    top = cur.bufferBase - cur.parent.bufferBase;
                    cur = cur.parent;
                }
                if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {
                    if (start == end)
                        return;
                    if (cur.buffer[top - 2] >= start) {
                        cur.buffer[top - 2] = end;
                        return;
                    }
                }
            }
            if (!mustSink || this.pos == end) { // Simple case, just append
                this.buffer.push(term, start, end, size);
            }
            else { // There may be skipped nodes that have to be moved forward
                let index = this.buffer.length;
                if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */) {
                    let mustMove = false;
                    for (let scan = index; scan > 0 && this.buffer[scan - 2] > end; scan -= 4) {
                        if (this.buffer[scan - 1] >= 0) {
                            mustMove = true;
                            break;
                        }
                    }
                    if (mustMove)
                        while (index > 0 && this.buffer[index - 2] > end) {
                            // Move this record forward
                            this.buffer[index] = this.buffer[index - 4];
                            this.buffer[index + 1] = this.buffer[index - 3];
                            this.buffer[index + 2] = this.buffer[index - 2];
                            this.buffer[index + 3] = this.buffer[index - 1];
                            index -= 4;
                            if (size > 4)
                                size -= 4;
                        }
                }
                this.buffer[index] = term;
                this.buffer[index + 1] = start;
                this.buffer[index + 2] = end;
                this.buffer[index + 3] = size;
            }
        }
        // Apply a shift action
        /**
        @internal
        */
        shift(action, type, start, end) {
            if (action & 131072 /* Action.GotoFlag */) {
                this.pushState(action & 65535 /* Action.ValueMask */, this.pos);
            }
            else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift
                let nextState = action, { parser } = this.p;
                if (end > this.pos || type <= parser.maxNode) {
                    this.pos = end;
                    if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))
                        this.reducePos = end;
                }
                this.pushState(nextState, start);
                this.shiftContext(type, start);
                if (type <= parser.maxNode)
                    this.buffer.push(type, start, end, 4);
            }
            else { // Shift-and-stay, which means this is a skipped token
                this.pos = end;
                this.shiftContext(type, start);
                if (type <= this.p.parser.maxNode)
                    this.buffer.push(type, start, end, 4);
            }
        }
        // Apply an action
        /**
        @internal
        */
        apply(action, next, nextStart, nextEnd) {
            if (action & 65536 /* Action.ReduceFlag */)
                this.reduce(action);
            else
                this.shift(action, next, nextStart, nextEnd);
        }
        // Add a prebuilt (reused) node into the buffer.
        /**
        @internal
        */
        useNode(value, next) {
            let index = this.p.reused.length - 1;
            if (index < 0 || this.p.reused[index] != value) {
                this.p.reused.push(value);
                index++;
            }
            let start = this.pos;
            this.reducePos = this.pos = start + value.length;
            this.pushState(next, start);
            this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
            if (this.curContext)
                this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
        }
        // Split the stack. Due to the buffer sharing and the fact
        // that `this.stack` tends to stay quite shallow, this isn't very
        // expensive.
        /**
        @internal
        */
        split() {
            let parent = this;
            let off = parent.buffer.length;
            // Because the top of the buffer (after this.pos) may be mutated
            // to reorder reductions and skipped tokens, and shared buffers
            // should be immutable, this copies any outstanding skipped tokens
            // to the new buffer, and puts the base pointer before them.
            while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
                off -= 4;
            let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
            // Make sure parent points to an actual parent with content, if there is such a parent.
            while (parent && base == parent.bufferBase)
                parent = parent.parent;
            return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
        }
        // Try to recover from an error by 'deleting' (ignoring) one token.
        /**
        @internal
        */
        recoverByDelete(next, nextEnd) {
            let isNode = next <= this.p.parser.maxNode;
            if (isNode)
                this.storeNode(next, this.pos, nextEnd, 4);
            this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);
            this.pos = this.reducePos = nextEnd;
            this.score -= 190 /* Recover.Delete */;
        }
        /**
        Check if the given term would be able to be shifted (optionally
        after some reductions) on this stack. This can be useful for
        external tokenizers that want to make sure they only provide a
        given token when it applies.
        */
        canShift(term) {
            for (let sim = new SimulatedStack(this);;) {
                let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
                if (action == 0)
                    return false;
                if ((action & 65536 /* Action.ReduceFlag */) == 0)
                    return true;
                sim.reduce(action);
            }
        }
        // Apply up to Recover.MaxNext recovery actions that conceptually
        // inserts some missing token or rule.
        /**
        @internal
        */
        recoverByInsert(next) {
            if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)
                return [];
            let nextStates = this.p.parser.nextStates(this.state);
            if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {
                let best = [];
                for (let i = 0, s; i < nextStates.length; i += 2) {
                    if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
                        best.push(nextStates[i], s);
                }
                if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)
                    for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {
                        let s = nextStates[i + 1];
                        if (!best.some((v, i) => (i & 1) && v == s))
                            best.push(nextStates[i], s);
                    }
                nextStates = best;
            }
            let result = [];
            for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {
                let s = nextStates[i + 1];
                if (s == this.state)
                    continue;
                let stack = this.split();
                stack.pushState(s, this.pos);
                stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);
                stack.shiftContext(nextStates[i], this.pos);
                stack.reducePos = this.pos;
                stack.score -= 200 /* Recover.Insert */;
                result.push(stack);
            }
            return result;
        }
        // Force a reduce, if possible. Return false if that can't
        // be done.
        /**
        @internal
        */
        forceReduce() {
            let { parser } = this.p;
            let reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);
            if ((reduce & 65536 /* Action.ReduceFlag */) == 0)
                return false;
            if (!parser.validAction(this.state, reduce)) {
                let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;
                let target = this.stack.length - depth * 3;
                if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {
                    let backup = this.findForcedReduction();
                    if (backup == null)
                        return false;
                    reduce = backup;
                }
                this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
                this.score -= 100 /* Recover.Reduce */;
            }
            this.reducePos = this.pos;
            this.reduce(reduce);
            return true;
        }
        /**
        Try to scan through the automaton to find some kind of reduction
        that can be applied. Used when the regular ForcedReduce field
        isn't a valid action. @internal
        */
        findForcedReduction() {
            let { parser } = this.p, seen = [];
            let explore = (state, depth) => {
                if (seen.includes(state))
                    return;
                seen.push(state);
                return parser.allActions(state, (action) => {
                    if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;
                    else if (action & 65536 /* Action.ReduceFlag */) {
                        let rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;
                        if (rDepth > 1) {
                            let term = action & 65535 /* Action.ValueMask */, target = this.stack.length - rDepth * 3;
                            if (target >= 0 && parser.getGoto(this.stack[target], term, false) >= 0)
                                return (rDepth << 19 /* Action.ReduceDepthShift */) | 65536 /* Action.ReduceFlag */ | term;
                        }
                    }
                    else {
                        let found = explore(action, depth + 1);
                        if (found != null)
                            return found;
                    }
                });
            };
            return explore(this.state, 0);
        }
        /**
        @internal
        */
        forceAll() {
            while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {
                if (!this.forceReduce()) {
                    this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
                    break;
                }
            }
            return this;
        }
        /**
        Check whether this state has no further actions (assumed to be a direct descendant of the
        top state, since any other states must be able to continue
        somehow). @internal
        */
        get deadEnd() {
            if (this.stack.length != 3)
                return false;
            let { parser } = this.p;
            return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&
                !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);
        }
        /**
        Restart the stack (put it back in its start state). Only safe
        when this.stack.length == 3 (state is directly below the top
        state). @internal
        */
        restart() {
            this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
            this.state = this.stack[0];
            this.stack.length = 0;
        }
        /**
        @internal
        */
        sameState(other) {
            if (this.state != other.state || this.stack.length != other.stack.length)
                return false;
            for (let i = 0; i < this.stack.length; i += 3)
                if (this.stack[i] != other.stack[i])
                    return false;
            return true;
        }
        /**
        Get the parser used by this stack.
        */
        get parser() { return this.p.parser; }
        /**
        Test whether a given dialect (by numeric ID, as exported from
        the terms file) is enabled.
        */
        dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }
        shiftContext(term, start) {
            if (this.curContext)
                this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
        }
        reduceContext(term, start) {
            if (this.curContext)
                this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
        }
        /**
        @internal
        */
        emitContext() {
            let last = this.buffer.length - 1;
            if (last < 0 || this.buffer[last] != -3)
                this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
        }
        /**
        @internal
        */
        emitLookAhead() {
            let last = this.buffer.length - 1;
            if (last < 0 || this.buffer[last] != -4)
                this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
        }
        updateContext(context) {
            if (context != this.curContext.context) {
                let newCx = new StackContext(this.curContext.tracker, context);
                if (newCx.hash != this.curContext.hash)
                    this.emitContext();
                this.curContext = newCx;
            }
        }
        /**
        @internal
        */
        setLookAhead(lookAhead) {
            if (lookAhead > this.lookAhead) {
                this.emitLookAhead();
                this.lookAhead = lookAhead;
            }
        }
        /**
        @internal
        */
        close() {
            if (this.curContext && this.curContext.tracker.strict)
                this.emitContext();
            if (this.lookAhead > 0)
                this.emitLookAhead();
        }
    }
    class StackContext {
        constructor(tracker, context) {
            this.tracker = tracker;
            this.context = context;
            this.hash = tracker.strict ? tracker.hash(context) : 0;
        }
    }
    // Used to cheaply run some reductions to scan ahead without mutating
    // an entire stack
    class SimulatedStack {
        constructor(start) {
            this.start = start;
            this.state = start.state;
            this.stack = start.stack;
            this.base = this.stack.length;
        }
        reduce(action) {
            let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;
            if (depth == 0) {
                if (this.stack == this.start.stack)
                    this.stack = this.stack.slice();
                this.stack.push(this.state, 0, 0);
                this.base += 3;
            }
            else {
                this.base -= (depth - 1) * 3;
            }
            let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
            this.state = goto;
        }
    }
    // This is given to `Tree.build` to build a buffer, and encapsulates
    // the parent-stack-walking necessary to read the nodes.
    class StackBufferCursor {
        constructor(stack, pos, index) {
            this.stack = stack;
            this.pos = pos;
            this.index = index;
            this.buffer = stack.buffer;
            if (this.index == 0)
                this.maybeNext();
        }
        static create(stack, pos = stack.bufferBase + stack.buffer.length) {
            return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
        }
        maybeNext() {
            let next = this.stack.parent;
            if (next != null) {
                this.index = this.stack.bufferBase - next.bufferBase;
                this.stack = next;
                this.buffer = next.buffer;
            }
        }
        get id() { return this.buffer[this.index - 4]; }
        get start() { return this.buffer[this.index - 3]; }
        get end() { return this.buffer[this.index - 2]; }
        get size() { return this.buffer[this.index - 1]; }
        next() {
            this.index -= 4;
            this.pos -= 4;
            if (this.index == 0)
                this.maybeNext();
        }
        fork() {
            return new StackBufferCursor(this.stack, this.pos, this.index);
        }
    }

    // See lezer-generator/src/encode.ts for comments about the encoding
    // used here
    function decodeArray(input, Type = Uint16Array) {
        if (typeof input != "string")
            return input;
        let array = null;
        for (let pos = 0, out = 0; pos < input.length;) {
            let value = 0;
            for (;;) {
                let next = input.charCodeAt(pos++), stop = false;
                if (next == 126 /* Encode.BigValCode */) {
                    value = 65535 /* Encode.BigVal */;
                    break;
                }
                if (next >= 92 /* Encode.Gap2 */)
                    next--;
                if (next >= 34 /* Encode.Gap1 */)
                    next--;
                let digit = next - 32 /* Encode.Start */;
                if (digit >= 46 /* Encode.Base */) {
                    digit -= 46 /* Encode.Base */;
                    stop = true;
                }
                value += digit;
                if (stop)
                    break;
                value *= 46 /* Encode.Base */;
            }
            if (array)
                array[out++] = value;
            else
                array = new Type(value);
        }
        return array;
    }

    class CachedToken {
        constructor() {
            this.start = -1;
            this.value = -1;
            this.end = -1;
            this.extended = -1;
            this.lookAhead = 0;
            this.mask = 0;
            this.context = 0;
        }
    }
    const nullToken = new CachedToken;
    /**
    [Tokenizers](#lr.ExternalTokenizer) interact with the input
    through this interface. It presents the input as a stream of
    characters, tracking lookahead and hiding the complexity of
    [ranges](#common.Parser.parse^ranges) from tokenizer code.
    */
    class InputStream {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        input, 
        /**
        @internal
        */
        ranges) {
            this.input = input;
            this.ranges = ranges;
            /**
            @internal
            */
            this.chunk = "";
            /**
            @internal
            */
            this.chunkOff = 0;
            /**
            Backup chunk
            */
            this.chunk2 = "";
            this.chunk2Pos = 0;
            /**
            The character code of the next code unit in the input, or -1
            when the stream is at the end of the input.
            */
            this.next = -1;
            /**
            @internal
            */
            this.token = nullToken;
            this.rangeIndex = 0;
            this.pos = this.chunkPos = ranges[0].from;
            this.range = ranges[0];
            this.end = ranges[ranges.length - 1].to;
            this.readNext();
        }
        /**
        @internal
        */
        resolveOffset(offset, assoc) {
            let range = this.range, index = this.rangeIndex;
            let pos = this.pos + offset;
            while (pos < range.from) {
                if (!index)
                    return null;
                let next = this.ranges[--index];
                pos -= range.from - next.to;
                range = next;
            }
            while (assoc < 0 ? pos > range.to : pos >= range.to) {
                if (index == this.ranges.length - 1)
                    return null;
                let next = this.ranges[++index];
                pos += next.from - range.to;
                range = next;
            }
            return pos;
        }
        /**
        @internal
        */
        clipPos(pos) {
            if (pos >= this.range.from && pos < this.range.to)
                return pos;
            for (let range of this.ranges)
                if (range.to > pos)
                    return Math.max(pos, range.from);
            return this.end;
        }
        /**
        Look at a code unit near the stream position. `.peek(0)` equals
        `.next`, `.peek(-1)` gives you the previous character, and so
        on.
        
        Note that looking around during tokenizing creates dependencies
        on potentially far-away content, which may reduce the
        effectiveness incremental parsing—when looking forward—or even
        cause invalid reparses when looking backward more than 25 code
        units, since the library does not track lookbehind.
        */
        peek(offset) {
            let idx = this.chunkOff + offset, pos, result;
            if (idx >= 0 && idx < this.chunk.length) {
                pos = this.pos + offset;
                result = this.chunk.charCodeAt(idx);
            }
            else {
                let resolved = this.resolveOffset(offset, 1);
                if (resolved == null)
                    return -1;
                pos = resolved;
                if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
                    result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
                }
                else {
                    let i = this.rangeIndex, range = this.range;
                    while (range.to <= pos)
                        range = this.ranges[++i];
                    this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
                    if (pos + this.chunk2.length > range.to)
                        this.chunk2 = this.chunk2.slice(0, range.to - pos);
                    result = this.chunk2.charCodeAt(0);
                }
            }
            if (pos >= this.token.lookAhead)
                this.token.lookAhead = pos + 1;
            return result;
        }
        /**
        Accept a token. By default, the end of the token is set to the
        current stream position, but you can pass an offset (relative to
        the stream position) to change that.
        */
        acceptToken(token, endOffset = 0) {
            let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
            if (end == null || end < this.token.start)
                throw new RangeError("Token end out of bounds");
            this.token.value = token;
            this.token.end = end;
        }
        /**
        Accept a token ending at a specific given position.
        */
        acceptTokenTo(token, endPos) {
            this.token.value = token;
            this.token.end = endPos;
        }
        getChunk() {
            if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
                let { chunk, chunkPos } = this;
                this.chunk = this.chunk2;
                this.chunkPos = this.chunk2Pos;
                this.chunk2 = chunk;
                this.chunk2Pos = chunkPos;
                this.chunkOff = this.pos - this.chunkPos;
            }
            else {
                this.chunk2 = this.chunk;
                this.chunk2Pos = this.chunkPos;
                let nextChunk = this.input.chunk(this.pos);
                let end = this.pos + nextChunk.length;
                this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
                this.chunkPos = this.pos;
                this.chunkOff = 0;
            }
        }
        readNext() {
            if (this.chunkOff >= this.chunk.length) {
                this.getChunk();
                if (this.chunkOff == this.chunk.length)
                    return this.next = -1;
            }
            return this.next = this.chunk.charCodeAt(this.chunkOff);
        }
        /**
        Move the stream forward N (defaults to 1) code units. Returns
        the new value of [`next`](#lr.InputStream.next).
        */
        advance(n = 1) {
            this.chunkOff += n;
            while (this.pos + n >= this.range.to) {
                if (this.rangeIndex == this.ranges.length - 1)
                    return this.setDone();
                n -= this.range.to - this.pos;
                this.range = this.ranges[++this.rangeIndex];
                this.pos = this.range.from;
            }
            this.pos += n;
            if (this.pos >= this.token.lookAhead)
                this.token.lookAhead = this.pos + 1;
            return this.readNext();
        }
        setDone() {
            this.pos = this.chunkPos = this.end;
            this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
            this.chunk = "";
            return this.next = -1;
        }
        /**
        @internal
        */
        reset(pos, token) {
            if (token) {
                this.token = token;
                token.start = pos;
                token.lookAhead = pos + 1;
                token.value = token.extended = -1;
            }
            else {
                this.token = nullToken;
            }
            if (this.pos != pos) {
                this.pos = pos;
                if (pos == this.end) {
                    this.setDone();
                    return this;
                }
                while (pos < this.range.from)
                    this.range = this.ranges[--this.rangeIndex];
                while (pos >= this.range.to)
                    this.range = this.ranges[++this.rangeIndex];
                if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
                    this.chunkOff = pos - this.chunkPos;
                }
                else {
                    this.chunk = "";
                    this.chunkOff = 0;
                }
                this.readNext();
            }
            return this;
        }
        /**
        @internal
        */
        read(from, to) {
            if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
                return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
            if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
                return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
            if (from >= this.range.from && to <= this.range.to)
                return this.input.read(from, to);
            let result = "";
            for (let r of this.ranges) {
                if (r.from >= to)
                    break;
                if (r.to > from)
                    result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
            }
            return result;
        }
    }
    /**
    @internal
    */
    class TokenGroup {
        constructor(data, id) {
            this.data = data;
            this.id = id;
        }
        token(input, stack) {
            let { parser } = stack.p;
            readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);
        }
    }
    TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
    TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
    /**
    `@external tokens` declarations in the grammar should resolve to
    an instance of this class.
    */
    class ExternalTokenizer {
        /**
        Create a tokenizer. The first argument is the function that,
        given an input stream, scans for the types of tokens it
        recognizes at the stream's position, and calls
        [`acceptToken`](#lr.InputStream.acceptToken) when it finds
        one.
        */
        constructor(
        /**
        @internal
        */
        token, options = {}) {
            this.token = token;
            this.contextual = !!options.contextual;
            this.fallback = !!options.fallback;
            this.extend = !!options.extend;
        }
    }
    // Tokenizer data is stored a big uint16 array containing, for each
    // state:
    //
    //  - A group bitmask, indicating what token groups are reachable from
    //    this state, so that paths that can only lead to tokens not in
    //    any of the current groups can be cut off early.
    //
    //  - The position of the end of the state's sequence of accepting
    //    tokens
    //
    //  - The number of outgoing edges for the state
    //
    //  - The accepting tokens, as (token id, group mask) pairs
    //
    //  - The outgoing edges, as (start character, end character, state
    //    index) triples, with end character being exclusive
    //
    // This function interprets that data, running through a stream as
    // long as new states with the a matching group mask can be reached,
    // and updating `input.token` when it matches a token.
    function readToken(data, input, stack, group, precTable, precOffset) {
        let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;
        scan: for (;;) {
            if ((groupMask & data[state]) == 0)
                break;
            let accEnd = data[state + 1];
            // Check whether this state can lead to a token in the current group
            // Accept tokens in this state, possibly overwriting
            // lower-precedence / shorter tokens
            for (let i = state + 3; i < accEnd; i += 2)
                if ((data[i + 1] & groupMask) > 0) {
                    let term = data[i];
                    if (dialect.allows(term) &&
                        (input.token.value == -1 || input.token.value == term ||
                            overrides(term, input.token.value, precTable, precOffset))) {
                        input.acceptToken(term);
                        break;
                    }
                }
            let next = input.next, low = 0, high = data[state + 2];
            // Special case for EOF
            if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {
                state = data[accEnd + high * 3 - 1];
                continue scan;
            }
            // Do a binary search on the state's edges
            for (; low < high;) {
                let mid = (low + high) >> 1;
                let index = accEnd + mid + (mid << 1);
                let from = data[index], to = data[index + 1] || 0x10000;
                if (next < from)
                    high = mid;
                else if (next >= to)
                    low = mid + 1;
                else {
                    state = data[index + 2];
                    input.advance();
                    continue scan;
                }
            }
            break;
        }
    }
    function findOffset(data, start, term) {
        for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)
            if (next == term)
                return i - start;
        return -1;
    }
    function overrides(token, prev, tableData, tableOffset) {
        let iPrev = findOffset(tableData, tableOffset, prev);
        return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
    }

    // Environment variable used to control console output
    const verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
    let stackIDs = null;
    function cutAt(tree, pos, side) {
        let cursor = tree.cursor(IterMode.IncludeAnonymous);
        cursor.moveTo(pos);
        for (;;) {
            if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
                for (;;) {
                    if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
                        return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Lookahead.Margin */))
                            : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Lookahead.Margin */));
                    if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
                        break;
                    if (!cursor.parent())
                        return side < 0 ? 0 : tree.length;
                }
        }
    }
    class FragmentCursor {
        constructor(fragments, nodeSet) {
            this.fragments = fragments;
            this.nodeSet = nodeSet;
            this.i = 0;
            this.fragment = null;
            this.safeFrom = -1;
            this.safeTo = -1;
            this.trees = [];
            this.start = [];
            this.index = [];
            this.nextFragment();
        }
        nextFragment() {
            let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
            if (fr) {
                this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
                this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
                while (this.trees.length) {
                    this.trees.pop();
                    this.start.pop();
                    this.index.pop();
                }
                this.trees.push(fr.tree);
                this.start.push(-fr.offset);
                this.index.push(0);
                this.nextStart = this.safeFrom;
            }
            else {
                this.nextStart = 1e9;
            }
        }
        // `pos` must be >= any previously given `pos` for this cursor
        nodeAt(pos) {
            if (pos < this.nextStart)
                return null;
            while (this.fragment && this.safeTo <= pos)
                this.nextFragment();
            if (!this.fragment)
                return null;
            for (;;) {
                let last = this.trees.length - 1;
                if (last < 0) { // End of tree
                    this.nextFragment();
                    return null;
                }
                let top = this.trees[last], index = this.index[last];
                if (index == top.children.length) {
                    this.trees.pop();
                    this.start.pop();
                    this.index.pop();
                    continue;
                }
                let next = top.children[index];
                let start = this.start[last] + top.positions[index];
                if (start > pos) {
                    this.nextStart = start;
                    return null;
                }
                if (next instanceof Tree) {
                    if (start == pos) {
                        if (start < this.safeFrom)
                            return null;
                        let end = start + next.length;
                        if (end <= this.safeTo) {
                            let lookAhead = next.prop(NodeProp.lookAhead);
                            if (!lookAhead || end + lookAhead < this.fragment.to)
                                return next;
                        }
                    }
                    this.index[last]++;
                    if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node
                        this.trees.push(next);
                        this.start.push(start);
                        this.index.push(0);
                    }
                }
                else {
                    this.index[last]++;
                    this.nextStart = start + next.length;
                }
            }
        }
    }
    class TokenCache {
        constructor(parser, stream) {
            this.stream = stream;
            this.tokens = [];
            this.mainToken = null;
            this.actions = [];
            this.tokens = parser.tokenizers.map(_ => new CachedToken);
        }
        getActions(stack) {
            let actionIndex = 0;
            let main = null;
            let { parser } = stack.p, { tokenizers } = parser;
            let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);
            let context = stack.curContext ? stack.curContext.hash : 0;
            let lookAhead = 0;
            for (let i = 0; i < tokenizers.length; i++) {
                if (((1 << i) & mask) == 0)
                    continue;
                let tokenizer = tokenizers[i], token = this.tokens[i];
                if (main && !tokenizer.fallback)
                    continue;
                if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
                    this.updateCachedToken(token, tokenizer, stack);
                    token.mask = mask;
                    token.context = context;
                }
                if (token.lookAhead > token.end + 25 /* Lookahead.Margin */)
                    lookAhead = Math.max(token.lookAhead, lookAhead);
                if (token.value != 0 /* Term.Err */) {
                    let startIndex = actionIndex;
                    if (token.extended > -1)
                        actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                    actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
                    if (!tokenizer.extend) {
                        main = token;
                        if (actionIndex > startIndex)
                            break;
                    }
                }
            }
            while (this.actions.length > actionIndex)
                this.actions.pop();
            if (lookAhead)
                stack.setLookAhead(lookAhead);
            if (!main && stack.pos == this.stream.end) {
                main = new CachedToken;
                main.value = stack.p.parser.eofTerm;
                main.start = main.end = stack.pos;
                actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
            }
            this.mainToken = main;
            return this.actions;
        }
        getMainToken(stack) {
            if (this.mainToken)
                return this.mainToken;
            let main = new CachedToken, { pos, p } = stack;
            main.start = pos;
            main.end = Math.min(pos + 1, p.stream.end);
            main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;
            return main;
        }
        updateCachedToken(token, tokenizer, stack) {
            let start = this.stream.clipPos(stack.pos);
            tokenizer.token(this.stream.reset(start, token), stack);
            if (token.value > -1) {
                let { parser } = stack.p;
                for (let i = 0; i < parser.specialized.length; i++)
                    if (parser.specialized[i] == token.value) {
                        let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
                        if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                            if ((result & 1) == 0 /* Specialize.Specialize */)
                                token.value = result >> 1;
                            else
                                token.extended = result >> 1;
                            break;
                        }
                    }
            }
            else {
                token.value = 0 /* Term.Err */;
                token.end = this.stream.clipPos(start + 1);
            }
        }
        putAction(action, token, end, index) {
            // Don't add duplicate actions
            for (let i = 0; i < index; i += 3)
                if (this.actions[i] == action)
                    return index;
            this.actions[index++] = action;
            this.actions[index++] = token;
            this.actions[index++] = end;
            return index;
        }
        addActions(stack, token, end, index) {
            let { state } = stack, { parser } = stack.p, { data } = parser;
            for (let set = 0; set < 2; set++) {
                for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {
                    if (data[i] == 65535 /* Seq.End */) {
                        if (data[i + 1] == 1 /* Seq.Next */) {
                            i = pair(data, i + 2);
                        }
                        else {
                            if (index == 0 && data[i + 1] == 2 /* Seq.Other */)
                                index = this.putAction(pair(data, i + 2), token, end, index);
                            break;
                        }
                    }
                    if (data[i] == token)
                        index = this.putAction(pair(data, i + 1), token, end, index);
                }
            }
            return index;
        }
    }
    class Parse {
        constructor(parser, input, fragments, ranges) {
            this.parser = parser;
            this.input = input;
            this.ranges = ranges;
            this.recovering = 0;
            this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧
            this.minStackPos = 0;
            this.reused = [];
            this.stoppedAt = null;
            this.lastBigReductionStart = -1;
            this.lastBigReductionSize = 0;
            this.bigReductionCount = 0;
            this.stream = new InputStream(input, ranges);
            this.tokens = new TokenCache(parser, this.stream);
            this.topTerm = parser.top[1];
            let { from } = ranges[0];
            this.stacks = [Stack.start(this, parser.top[0], from)];
            this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4
                ? new FragmentCursor(fragments, parser.nodeSet) : null;
        }
        get parsedPos() {
            return this.minStackPos;
        }
        // Move the parser forward. This will process all parse stacks at
        // `this.pos` and try to advance them to a further position. If no
        // stack for such a position is found, it'll start error-recovery.
        //
        // When the parse is finished, this will return a syntax tree. When
        // not, it returns `null`.
        advance() {
            let stacks = this.stacks, pos = this.minStackPos;
            // This will hold stacks beyond `pos`.
            let newStacks = this.stacks = [];
            let stopped, stoppedTokens;
            // If a large amount of reductions happened with the same start
            // position, force the stack out of that production in order to
            // avoid creating a tree too deep to recurse through.
            // (This is an ugly kludge, because unfortunately there is no
            // straightforward, cheap way to check for this happening, due to
            // the history of reductions only being available in an
            // expensive-to-access format in the stack buffers.)
            if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {
                let [s] = stacks;
                while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }
                this.bigReductionCount = this.lastBigReductionSize = 0;
            }
            // Keep advancing any stacks at `pos` until they either move
            // forward or can't be advanced. Gather stacks that can't be
            // advanced further in `stopped`.
            for (let i = 0; i < stacks.length; i++) {
                let stack = stacks[i];
                for (;;) {
                    this.tokens.mainToken = null;
                    if (stack.pos > pos) {
                        newStacks.push(stack);
                    }
                    else if (this.advanceStack(stack, newStacks, stacks)) {
                        continue;
                    }
                    else {
                        if (!stopped) {
                            stopped = [];
                            stoppedTokens = [];
                        }
                        stopped.push(stack);
                        let tok = this.tokens.getMainToken(stack);
                        stoppedTokens.push(tok.value, tok.end);
                    }
                    break;
                }
            }
            if (!newStacks.length) {
                let finished = stopped && findFinished(stopped);
                if (finished) {
                    if (verbose)
                        console.log("Finish with " + this.stackID(finished));
                    return this.stackToTree(finished);
                }
                if (this.parser.strict) {
                    if (verbose && stopped)
                        console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
                    throw new SyntaxError("No parse at " + pos);
                }
                if (!this.recovering)
                    this.recovering = 5 /* Rec.Distance */;
            }
            if (this.recovering && stopped) {
                let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]
                    : this.runRecovery(stopped, stoppedTokens, newStacks);
                if (finished) {
                    if (verbose)
                        console.log("Force-finish " + this.stackID(finished));
                    return this.stackToTree(finished.forceAll());
                }
            }
            if (this.recovering) {
                let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;
                if (newStacks.length > maxRemaining) {
                    newStacks.sort((a, b) => b.score - a.score);
                    while (newStacks.length > maxRemaining)
                        newStacks.pop();
                }
                if (newStacks.some(s => s.reducePos > pos))
                    this.recovering--;
            }
            else if (newStacks.length > 1) {
                // Prune stacks that are in the same state, or that have been
                // running without splitting for a while, to avoid getting stuck
                // with multiple successful stacks running endlessly on.
                outer: for (let i = 0; i < newStacks.length - 1; i++) {
                    let stack = newStacks[i];
                    for (let j = i + 1; j < newStacks.length; j++) {
                        let other = newStacks[j];
                        if (stack.sameState(other) ||
                            stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {
                            if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
                                newStacks.splice(j--, 1);
                            }
                            else {
                                newStacks.splice(i--, 1);
                                continue outer;
                            }
                        }
                    }
                }
                if (newStacks.length > 12 /* Rec.MaxStackCount */)
                    newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);
            }
            this.minStackPos = newStacks[0].pos;
            for (let i = 1; i < newStacks.length; i++)
                if (newStacks[i].pos < this.minStackPos)
                    this.minStackPos = newStacks[i].pos;
            return null;
        }
        stopAt(pos) {
            if (this.stoppedAt != null && this.stoppedAt < pos)
                throw new RangeError("Can't move stoppedAt forward");
            this.stoppedAt = pos;
        }
        // Returns an updated version of the given stack, or null if the
        // stack can't advance normally. When `split` and `stacks` are
        // given, stacks split off by ambiguous operations will be pushed to
        // `split`, or added to `stacks` if they move `pos` forward.
        advanceStack(stack, stacks, split) {
            let start = stack.pos, { parser } = this;
            let base = verbose ? this.stackID(stack) + " -> " : "";
            if (this.stoppedAt != null && start > this.stoppedAt)
                return stack.forceReduce() ? stack : null;
            if (this.fragments) {
                let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
                for (let cached = this.fragments.nodeAt(start); cached;) {
                    let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
                    if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
                        stack.useNode(cached, match);
                        if (verbose)
                            console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
                        return true;
                    }
                    if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                        break;
                    let inner = cached.children[0];
                    if (inner instanceof Tree && cached.positions[0] == 0)
                        cached = inner;
                    else
                        break;
                }
            }
            let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);
            if (defaultReduce > 0) {
                stack.reduce(defaultReduce);
                if (verbose)
                    console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);
                return true;
            }
            if (stack.stack.length >= 8400 /* Rec.CutDepth */) {
                while (stack.stack.length > 6000 /* Rec.CutTo */ && stack.forceReduce()) { }
            }
            let actions = this.tokens.getActions(stack);
            for (let i = 0; i < actions.length;) {
                let action = actions[i++], term = actions[i++], end = actions[i++];
                let last = i == actions.length || !split;
                let localStack = last ? stack : stack.split();
                let main = this.tokens.mainToken;
                localStack.apply(action, term, main ? main.start : localStack.pos, end);
                if (verbose)
                    console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? "shift"
                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
                if (last)
                    return true;
                else if (localStack.pos > start)
                    stacks.push(localStack);
                else
                    split.push(localStack);
            }
            return false;
        }
        // Advance a given stack forward as far as it will go. Returns the
        // (possibly updated) stack if it got stuck, or null if it moved
        // forward and was given to `pushStackDedup`.
        advanceFully(stack, newStacks) {
            let pos = stack.pos;
            for (;;) {
                if (!this.advanceStack(stack, null, null))
                    return false;
                if (stack.pos > pos) {
                    pushStackDedup(stack, newStacks);
                    return true;
                }
            }
        }
        runRecovery(stacks, tokens, newStacks) {
            let finished = null, restarted = false;
            for (let i = 0; i < stacks.length; i++) {
                let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
                let base = verbose ? this.stackID(stack) + " -> " : "";
                if (stack.deadEnd) {
                    if (restarted)
                        continue;
                    restarted = true;
                    stack.restart();
                    if (verbose)
                        console.log(base + this.stackID(stack) + " (restarted)");
                    let done = this.advanceFully(stack, newStacks);
                    if (done)
                        continue;
                }
                let force = stack.split(), forceBase = base;
                for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {
                    if (verbose)
                        console.log(forceBase + this.stackID(force) + " (via force-reduce)");
                    let done = this.advanceFully(force, newStacks);
                    if (done)
                        break;
                    if (verbose)
                        forceBase = this.stackID(force) + " -> ";
                }
                for (let insert of stack.recoverByInsert(token)) {
                    if (verbose)
                        console.log(base + this.stackID(insert) + " (via recover-insert)");
                    this.advanceFully(insert, newStacks);
                }
                if (this.stream.end > stack.pos) {
                    if (tokenEnd == stack.pos) {
                        tokenEnd++;
                        token = 0 /* Term.Err */;
                    }
                    stack.recoverByDelete(token, tokenEnd);
                    if (verbose)
                        console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
                    pushStackDedup(stack, newStacks);
                }
                else if (!finished || finished.score < stack.score) {
                    finished = stack;
                }
            }
            return finished;
        }
        // Convert the stack's buffer to a syntax tree.
        stackToTree(stack) {
            stack.close();
            return Tree.build({ buffer: StackBufferCursor.create(stack),
                nodeSet: this.parser.nodeSet,
                topID: this.topTerm,
                maxBufferLength: this.parser.bufferLength,
                reused: this.reused,
                start: this.ranges[0].from,
                length: stack.pos - this.ranges[0].from,
                minRepeatType: this.parser.minRepeatTerm });
        }
        stackID(stack) {
            let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
            if (!id)
                stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
            return id + stack;
        }
    }
    function pushStackDedup(stack, newStacks) {
        for (let i = 0; i < newStacks.length; i++) {
            let other = newStacks[i];
            if (other.pos == stack.pos && other.sameState(stack)) {
                if (newStacks[i].score < stack.score)
                    newStacks[i] = stack;
                return;
            }
        }
        newStacks.push(stack);
    }
    class Dialect {
        constructor(source, flags, disabled) {
            this.source = source;
            this.flags = flags;
            this.disabled = disabled;
        }
        allows(term) { return !this.disabled || this.disabled[term] == 0; }
    }
    const id = x => x;
    /**
    Context trackers are used to track stateful context (such as
    indentation in the Python grammar, or parent elements in the XML
    grammar) needed by external tokenizers. You declare them in a
    grammar file as `@context exportName from "module"`.

    Context values should be immutable, and can be updated (replaced)
    on shift or reduce actions.

    The export used in a `@context` declaration should be of this
    type.
    */
    class ContextTracker {
        /**
        Define a context tracker.
        */
        constructor(spec) {
            this.start = spec.start;
            this.shift = spec.shift || id;
            this.reduce = spec.reduce || id;
            this.reuse = spec.reuse || id;
            this.hash = spec.hash || (() => 0);
            this.strict = spec.strict !== false;
        }
    }
    /**
    Holds the parse tables for a given grammar, as generated by
    `lezer-generator`, and provides [methods](#common.Parser) to parse
    content with.
    */
    class LRParser extends Parser {
        /**
        @internal
        */
        constructor(spec) {
            super();
            /**
            @internal
            */
            this.wrappers = [];
            if (spec.version != 14 /* File.Version */)
                throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);
            let nodeNames = spec.nodeNames.split(" ");
            this.minRepeatTerm = nodeNames.length;
            for (let i = 0; i < spec.repeatNodeCount; i++)
                nodeNames.push("");
            let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
            let nodeProps = [];
            for (let i = 0; i < nodeNames.length; i++)
                nodeProps.push([]);
            function setProp(nodeID, prop, value) {
                nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
            }
            if (spec.nodeProps)
                for (let propSpec of spec.nodeProps) {
                    let prop = propSpec[0];
                    if (typeof prop == "string")
                        prop = NodeProp[prop];
                    for (let i = 1; i < propSpec.length;) {
                        let next = propSpec[i++];
                        if (next >= 0) {
                            setProp(next, prop, propSpec[i++]);
                        }
                        else {
                            let value = propSpec[i + -next];
                            for (let j = -next; j > 0; j--)
                                setProp(propSpec[i++], prop, value);
                            i++;
                        }
                    }
                }
            this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({
                name: i >= this.minRepeatTerm ? undefined : name,
                id: i,
                props: nodeProps[i],
                top: topTerms.indexOf(i) > -1,
                error: i == 0,
                skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
            })));
            if (spec.propSources)
                this.nodeSet = this.nodeSet.extend(...spec.propSources);
            this.strict = false;
            this.bufferLength = DefaultBufferLength;
            let tokenArray = decodeArray(spec.tokenData);
            this.context = spec.context;
            this.specializerSpecs = spec.specialized || [];
            this.specialized = new Uint16Array(this.specializerSpecs.length);
            for (let i = 0; i < this.specializerSpecs.length; i++)
                this.specialized[i] = this.specializerSpecs[i].term;
            this.specializers = this.specializerSpecs.map(getSpecializer);
            this.states = decodeArray(spec.states, Uint32Array);
            this.data = decodeArray(spec.stateData);
            this.goto = decodeArray(spec.goto);
            this.maxTerm = spec.maxTerm;
            this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
            this.topRules = spec.topRules;
            this.dialects = spec.dialects || {};
            this.dynamicPrecedences = spec.dynamicPrecedences || null;
            this.tokenPrecTable = spec.tokenPrec;
            this.termNames = spec.termNames || null;
            this.maxNode = this.nodeSet.types.length - 1;
            this.dialect = this.parseDialect();
            this.top = this.topRules[Object.keys(this.topRules)[0]];
        }
        createParse(input, fragments, ranges) {
            let parse = new Parse(this, input, fragments, ranges);
            for (let w of this.wrappers)
                parse = w(parse, input, fragments, ranges);
            return parse;
        }
        /**
        Get a goto table entry @internal
        */
        getGoto(state, term, loose = false) {
            let table = this.goto;
            if (term >= table[0])
                return -1;
            for (let pos = table[term + 1];;) {
                let groupTag = table[pos++], last = groupTag & 1;
                let target = table[pos++];
                if (last && loose)
                    return target;
                for (let end = pos + (groupTag >> 1); pos < end; pos++)
                    if (table[pos] == state)
                        return target;
                if (last)
                    return -1;
            }
        }
        /**
        Check if this state has an action for a given terminal @internal
        */
        hasAction(state, terminal) {
            let data = this.data;
            for (let set = 0; set < 2; set++) {
                for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {
                    if ((next = data[i]) == 65535 /* Seq.End */) {
                        if (data[i + 1] == 1 /* Seq.Next */)
                            next = data[i = pair(data, i + 2)];
                        else if (data[i + 1] == 2 /* Seq.Other */)
                            return pair(data, i + 2);
                        else
                            break;
                    }
                    if (next == terminal || next == 0 /* Term.Err */)
                        return pair(data, i + 1);
                }
            }
            return 0;
        }
        /**
        @internal
        */
        stateSlot(state, slot) {
            return this.states[(state * 6 /* ParseState.Size */) + slot];
        }
        /**
        @internal
        */
        stateFlag(state, flag) {
            return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;
        }
        /**
        @internal
        */
        validAction(state, action) {
            return !!this.allActions(state, a => a == action ? true : null);
        }
        /**
        @internal
        */
        allActions(state, action) {
            let deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);
            let result = deflt ? action(deflt) : undefined;
            for (let i = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; i += 3) {
                if (this.data[i] == 65535 /* Seq.End */) {
                    if (this.data[i + 1] == 1 /* Seq.Next */)
                        i = pair(this.data, i + 2);
                    else
                        break;
                }
                result = action(pair(this.data, i + 1));
            }
            return result;
        }
        /**
        Get the states that can follow this one through shift actions or
        goto jumps. @internal
        */
        nextStates(state) {
            let result = [];
            for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {
                if (this.data[i] == 65535 /* Seq.End */) {
                    if (this.data[i + 1] == 1 /* Seq.Next */)
                        i = pair(this.data, i + 2);
                    else
                        break;
                }
                if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {
                    let value = this.data[i + 1];
                    if (!result.some((v, i) => (i & 1) && v == value))
                        result.push(this.data[i], value);
                }
            }
            return result;
        }
        /**
        Configure the parser. Returns a new parser instance that has the
        given settings modified. Settings not provided in `config` are
        kept from the original parser.
        */
        configure(config) {
            // Hideous reflection-based kludge to make it easy to create a
            // slightly modified copy of a parser.
            let copy = Object.assign(Object.create(LRParser.prototype), this);
            if (config.props)
                copy.nodeSet = this.nodeSet.extend(...config.props);
            if (config.top) {
                let info = this.topRules[config.top];
                if (!info)
                    throw new RangeError(`Invalid top rule name ${config.top}`);
                copy.top = info;
            }
            if (config.tokenizers)
                copy.tokenizers = this.tokenizers.map(t => {
                    let found = config.tokenizers.find(r => r.from == t);
                    return found ? found.to : t;
                });
            if (config.specializers) {
                copy.specializers = this.specializers.slice();
                copy.specializerSpecs = this.specializerSpecs.map((s, i) => {
                    let found = config.specializers.find(r => r.from == s.external);
                    if (!found)
                        return s;
                    let spec = Object.assign(Object.assign({}, s), { external: found.to });
                    copy.specializers[i] = getSpecializer(spec);
                    return spec;
                });
            }
            if (config.contextTracker)
                copy.context = config.contextTracker;
            if (config.dialect)
                copy.dialect = this.parseDialect(config.dialect);
            if (config.strict != null)
                copy.strict = config.strict;
            if (config.wrap)
                copy.wrappers = copy.wrappers.concat(config.wrap);
            if (config.bufferLength != null)
                copy.bufferLength = config.bufferLength;
            return copy;
        }
        /**
        Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
        are registered for this parser.
        */
        hasWrappers() {
            return this.wrappers.length > 0;
        }
        /**
        Returns the name associated with a given term. This will only
        work for all terms when the parser was generated with the
        `--names` option. By default, only the names of tagged terms are
        stored.
        */
        getName(term) {
            return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
        }
        /**
        The eof term id is always allocated directly after the node
        types. @internal
        */
        get eofTerm() { return this.maxNode + 1; }
        /**
        The type of top node produced by the parser.
        */
        get topNode() { return this.nodeSet.types[this.top[1]]; }
        /**
        @internal
        */
        dynamicPrecedence(term) {
            let prec = this.dynamicPrecedences;
            return prec == null ? 0 : prec[term] || 0;
        }
        /**
        @internal
        */
        parseDialect(dialect) {
            let values = Object.keys(this.dialects), flags = values.map(() => false);
            if (dialect)
                for (let part of dialect.split(" ")) {
                    let id = values.indexOf(part);
                    if (id >= 0)
                        flags[id] = true;
                }
            let disabled = null;
            for (let i = 0; i < values.length; i++)
                if (!flags[i]) {
                    for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)
                        (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
                }
            return new Dialect(dialect, flags, disabled);
        }
        /**
        Used by the output of the parser generator. Not available to
        user code. @hide
        */
        static deserialize(spec) {
            return new LRParser(spec);
        }
    }
    function pair(data, off) { return data[off] | (data[off + 1] << 16); }
    function findFinished(stacks) {
        let best = null;
        for (let stack of stacks) {
            let stopped = stack.p.stoppedAt;
            if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&
                stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&
                (!best || best.score < stack.score))
                best = stack;
        }
        return best;
    }
    function getSpecializer(spec) {
        if (spec.external) {
            let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;
            return (value, stack) => (spec.external(value, stack) << 1) | mask;
        }
        return spec.get;
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const printKeyword = 1,
      indent = 194,
      dedent = 195,
      newline$1 = 196,
      blankLineStart = 197,
      newlineBracketed = 198,
      eof = 199,
      stringContent = 200,
      Escape = 2,
      replacementStart = 3,
      stringEnd = 201,
      ParenL = 24,
      ParenthesizedExpression = 25,
      TupleExpression = 49,
      ComprehensionExpression = 50,
      BracketL = 55,
      ArrayExpression = 56,
      ArrayComprehensionExpression = 57,
      BraceL = 59,
      DictionaryExpression = 60,
      DictionaryComprehensionExpression = 61,
      SetExpression = 62,
      SetComprehensionExpression = 63,
      ArgList = 65,
      subscript = 238,
      String$1 = 71,
      stringStart = 241,
      stringStartD = 242,
      stringStartL = 243,
      stringStartLD = 244,
      stringStartR = 245,
      stringStartRD = 246,
      stringStartRL = 247,
      stringStartRLD = 248,
      FormatString = 72,
      stringStartF = 249,
      stringStartFD = 250,
      stringStartFL = 251,
      stringStartFLD = 252,
      stringStartFR = 253,
      stringStartFRD = 254,
      stringStartFRL = 255,
      stringStartFRLD = 256,
      FormatReplacement = 73,
      nestedFormatReplacement = 77,
      importList = 263,
      TypeParamList = 112,
      ParamList = 130,
      SequencePattern = 151,
      MappingPattern = 152,
      PatternArgList = 155;

    const newline = 10, carriageReturn = 13, space = 32, tab = 9, hash = 35, parenOpen = 40, dot = 46,
          braceOpen = 123, braceClose = 125, singleQuote = 39, doubleQuote = 34, backslash = 92,
          letter_o = 111, letter_x = 120, letter_N = 78, letter_u = 117, letter_U = 85;

    const bracketed = new Set([
      ParenthesizedExpression, TupleExpression, ComprehensionExpression, importList, ArgList, ParamList,
      ArrayExpression, ArrayComprehensionExpression, subscript,
      SetExpression, SetComprehensionExpression, FormatString, FormatReplacement, nestedFormatReplacement,
      DictionaryExpression, DictionaryComprehensionExpression,
      SequencePattern, MappingPattern, PatternArgList, TypeParamList
    ]);

    function isLineBreak(ch) {
      return ch == newline || ch == carriageReturn
    }

    function isHex(ch) {
      return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
    }

    const newlines = new ExternalTokenizer((input, stack) => {
      let prev;
      if (input.next < 0) {
        input.acceptToken(eof);
      } else if (stack.context.flags & cx_Bracketed) {
        if (isLineBreak(input.next)) input.acceptToken(newlineBracketed, 1);
      } else if (((prev = input.peek(-1)) < 0 || isLineBreak(prev)) &&
                 stack.canShift(blankLineStart)) {
        let spaces = 0;
        while (input.next == space || input.next == tab) { input.advance(); spaces++; }
        if (input.next == newline || input.next == carriageReturn || input.next == hash)
          input.acceptToken(blankLineStart, -spaces);
      } else if (isLineBreak(input.next)) {
        input.acceptToken(newline$1, 1);
      }
    }, {contextual: true});

    const indentation = new ExternalTokenizer((input, stack) => {
      let context = stack.context;
      if (context.flags) return
      let prev = input.peek(-1);
      if (prev == newline || prev == carriageReturn) {
        let depth = 0, chars = 0;
        for (;;) {
          if (input.next == space) depth++;
          else if (input.next == tab) depth += 8 - (depth % 8);
          else break
          input.advance();
          chars++;
        }
        if (depth != context.indent &&
            input.next != newline && input.next != carriageReturn && input.next != hash) {
          if (depth < context.indent) input.acceptToken(dedent, -chars);
          else input.acceptToken(indent);
        }
      }
    });

    // Flags used in Context objects
    const cx_Bracketed = 1, cx_String = 2, cx_DoubleQuote = 4, cx_Long = 8, cx_Raw = 16, cx_Format = 32;

    function Context(parent, indent, flags) {
      this.parent = parent;
      this.indent = indent;
      this.flags = flags;
      this.hash = (parent ? parent.hash + parent.hash << 8 : 0) + indent + (indent << 4) + flags + (flags << 6);
    }

    const topIndent = new Context(null, 0, 0);

    function countIndent(space) {
      let depth = 0;
      for (let i = 0; i < space.length; i++)
        depth += space.charCodeAt(i) == tab ? 8 - (depth % 8) : 1;
      return depth
    }

    const stringFlags = new Map([
      [stringStart, 0],
      [stringStartD, cx_DoubleQuote],
      [stringStartL, cx_Long],
      [stringStartLD, cx_Long | cx_DoubleQuote],
      [stringStartR, cx_Raw],
      [stringStartRD, cx_Raw | cx_DoubleQuote],
      [stringStartRL, cx_Raw | cx_Long],
      [stringStartRLD, cx_Raw | cx_Long | cx_DoubleQuote],
      [stringStartF, cx_Format],
      [stringStartFD, cx_Format | cx_DoubleQuote],
      [stringStartFL, cx_Format | cx_Long],
      [stringStartFLD, cx_Format | cx_Long | cx_DoubleQuote],
      [stringStartFR, cx_Format | cx_Raw],
      [stringStartFRD, cx_Format | cx_Raw | cx_DoubleQuote],
      [stringStartFRL, cx_Format | cx_Raw | cx_Long],
      [stringStartFRLD, cx_Format | cx_Raw | cx_Long | cx_DoubleQuote]
    ].map(([term, flags]) => [term, flags | cx_String]));

    const trackIndent = new ContextTracker({
      start: topIndent,
      reduce(context, term, _, input) {
        if ((context.flags & cx_Bracketed) && bracketed.has(term) ||
            (term == String$1 || term == FormatString) && (context.flags & cx_String))
          return context.parent
        return context
      },
      shift(context, term, stack, input) {
        if (term == indent)
          return new Context(context, countIndent(input.read(input.pos, stack.pos)), 0)
        if (term == dedent)
          return context.parent
        if (term == ParenL || term == BracketL || term == BraceL || term == replacementStart)
          return new Context(context, 0, cx_Bracketed)
        if (stringFlags.has(term))
          return new Context(context, 0, stringFlags.get(term) | (context.flags & cx_Bracketed))
        return context
      },
      hash(context) { return context.hash }
    });

    const legacyPrint = new ExternalTokenizer(input => {
      for (let i = 0; i < 5; i++) {
        if (input.next != "print".charCodeAt(i)) return
        input.advance();
      }
      if (/\w/.test(String.fromCharCode(input.next))) return
      for (let off = 0;; off++) {
        let next = input.peek(off);
        if (next == space || next == tab) continue
        if (next != parenOpen && next != dot && next != newline && next != carriageReturn && next != hash)
          input.acceptToken(printKeyword);
        return
      }
    });

    const strings = new ExternalTokenizer((input, stack) => {
      let {flags} = stack.context;
      let quote = (flags & cx_DoubleQuote) ? doubleQuote : singleQuote;
      let long = (flags & cx_Long) > 0;
      let escapes = !(flags & cx_Raw);
      let format = (flags & cx_Format) > 0;

      let start = input.pos;
      for (;;) {
        if (input.next < 0) {
          break
        } else if (format && input.next == braceOpen) {
          if (input.peek(1) == braceOpen) {
            input.advance(2);
          } else {
            if (input.pos == start) {
              input.acceptToken(replacementStart, 1);
              return
            }
            break
          }
        } else if (escapes && input.next == backslash) {
          if (input.pos == start) {
            input.advance();
            let escaped = input.next;
            if (escaped >= 0) {
              input.advance();
              skipEscape(input, escaped);
            }
            input.acceptToken(Escape);
            return
          }
          break
        } else if (input.next == backslash && !escapes && input.peek(1) > -1) {
          // Raw strings still ignore escaped quotes, weirdly.
          input.advance(2);
        } else if (input.next == quote && (!long || input.peek(1) == quote && input.peek(2) == quote)) {
          if (input.pos == start) {
            input.acceptToken(stringEnd, long ? 3 : 1);
            return
          }
          break
        } else if (input.next == newline) {
          if (long) {
            input.advance();
          } else if (input.pos == start) {
            input.acceptToken(stringEnd);
            return
          }
          break
        } else {
          input.advance();
        }
      }
      if (input.pos > start) input.acceptToken(stringContent);
    });

    function skipEscape(input, ch) {
      if (ch == letter_o) {
        for (let i = 0; i < 2 && input.next >= 48 && input.next <= 55; i++) input.advance();
      } else if (ch == letter_x) {
        for (let i = 0; i < 2 && isHex(input.next); i++) input.advance();
      } else if (ch == letter_u) {
        for (let i = 0; i < 4 && isHex(input.next); i++) input.advance();
      } else if (ch == letter_U) {
        for (let i = 0; i < 8 && isHex(input.next); i++) input.advance();
      } else if (ch == letter_N) {
        if (input.next == braceOpen) {
          input.advance();
          while (input.next >= 0 && input.next != braceClose && input.next != singleQuote &&
                 input.next != doubleQuote && input.next != newline) input.advance();
          if (input.next == braceClose) input.advance();
        }
      }
    }

    const pythonHighlighting = styleTags({
      "async \"*\" \"**\" FormatConversion FormatSpec": tags.modifier,
      "for while if elif else try except finally return raise break continue with pass assert await yield match case": tags.controlKeyword,
      "in not and or is del": tags.operatorKeyword,
      "from def class global nonlocal lambda": tags.definitionKeyword,
      import: tags.moduleKeyword,
      "with as print": tags.keyword,
      Boolean: tags.bool,
      None: tags.null,
      VariableName: tags.variableName,
      "CallExpression/VariableName": tags.function(tags.variableName),
      "FunctionDefinition/VariableName": tags.function(tags.definition(tags.variableName)),
      "ClassDefinition/VariableName": tags.definition(tags.className),
      PropertyName: tags.propertyName,
      "CallExpression/MemberExpression/PropertyName": tags.function(tags.propertyName),
      Comment: tags.lineComment,
      Number: tags.number,
      String: tags.string,
      FormatString: tags.special(tags.string),
      Escape: tags.escape,
      UpdateOp: tags.updateOperator,
      "ArithOp!": tags.arithmeticOperator,
      BitOp: tags.bitwiseOperator,
      CompareOp: tags.compareOperator,
      AssignOp: tags.definitionOperator,
      Ellipsis: tags.punctuation,
      At: tags.meta,
      "( )": tags.paren,
      "[ ]": tags.squareBracket,
      "{ }": tags.brace,
      ".": tags.derefOperator,
      ", ;": tags.separator
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_identifier = {__proto__:null,await:44, or:54, and:56, in:60, not:62, is:64, if:70, else:72, lambda:76, yield:94, from:96, async:102, for:104, None:162, True:164, False:164, del:178, pass:182, break:186, continue:190, return:194, raise:202, import:206, as:208, global:212, nonlocal:214, assert:218, type:223, elif:236, while:240, try:246, except:248, finally:250, with:254, def:258, class:268, match:279, case:285};
    const parser = LRParser.deserialize({
      version: 14,
      states: "##jO`QeOOP$}OSOOO&WQtO'#HUOOQS'#Co'#CoOOQS'#Cp'#CpO'vQdO'#CnO*UQtO'#HTOOQS'#HU'#HUOOQS'#DU'#DUOOQS'#HT'#HTO*rQdO'#D_O+VQdO'#DfO+gQdO'#DjO+zOWO'#DuO,VOWO'#DvO.[QtO'#GuOOQS'#Gu'#GuO'vQdO'#GtO0ZQtO'#GtOOQS'#Eb'#EbO0rQdO'#EcOOQS'#Gs'#GsO0|QdO'#GrOOQV'#Gr'#GrO1XQdO'#FYOOQS'#G^'#G^O1^QdO'#FXOOQV'#IS'#ISOOQV'#Gq'#GqOOQV'#Fq'#FqQ`QeOOO'vQdO'#CqO1lQdO'#C}O1sQdO'#DRO2RQdO'#HYO2cQtO'#EVO'vQdO'#EWOOQS'#EY'#EYOOQS'#E['#E[OOQS'#E^'#E^O2wQdO'#E`O3_QdO'#EdO3rQdO'#EfO3zQtO'#EfO1XQdO'#EiO0rQdO'#ElO1XQdO'#EnO0rQdO'#EtO0rQdO'#EwO4VQdO'#EyO4^QdO'#FOO4iQdO'#EzO0rQdO'#FOO1XQdO'#FQO1XQdO'#FVO4nQdO'#F[P4uOdO'#GpPOOO)CBd)CBdOOQS'#Ce'#CeOOQS'#Cf'#CfOOQS'#Cg'#CgOOQS'#Ch'#ChOOQS'#Ci'#CiOOQS'#Cj'#CjOOQS'#Cl'#ClO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO5TQdO'#DoOOQS,5:Y,5:YO5hQdO'#HdOOQS,5:],5:]O5uQ!fO,5:]O5zQtO,59YO1lQdO,59bO1lQdO,59bO1lQdO,59bO8jQdO,59bO8oQdO,59bO8vQdO,59jO8}QdO'#HTO:TQdO'#HSOOQS'#HS'#HSOOQS'#D['#D[O:lQdO,59aO'vQdO,59aO:zQdO,59aOOQS,59y,59yO;PQdO,5:RO'vQdO,5:ROOQS,5:Q,5:QO;_QdO,5:QO;dQdO,5:XO'vQdO,5:XO'vQdO,5:VOOQS,5:U,5:UO;uQdO,5:UO;zQdO,5:WOOOW'#Fy'#FyO<POWO,5:aOOQS,5:a,5:aO<[QdO'#HwOOOW'#Dw'#DwOOOW'#Fz'#FzO<lOWO,5:bOOQS,5:b,5:bOOQS'#F}'#F}O<zQtO,5:iO?lQtO,5=`O@VQ#xO,5=`O@vQtO,5=`OOQS,5:},5:}OA_QeO'#GWOBqQdO,5;^OOQV,5=^,5=^OB|QtO'#IPOCkQdO,5;tOOQS-E:[-E:[OOQV,5;s,5;sO4dQdO'#FQOOQV-E9o-E9oOCsQtO,59]OEzQtO,59iOFeQdO'#HVOFpQdO'#HVO1XQdO'#HVOF{QdO'#DTOGTQdO,59mOGYQdO'#HZO'vQdO'#HZO0rQdO,5=tOOQS,5=t,5=tO0rQdO'#EROOQS'#ES'#ESOGwQdO'#GPOHXQdO,58|OHXQdO,58|O*xQdO,5:oOHgQtO'#H]OOQS,5:r,5:rOOQS,5:z,5:zOHzQdO,5;OOI]QdO'#IOO1XQdO'#H}OOQS,5;Q,5;QOOQS'#GT'#GTOIqQtO,5;QOJPQdO,5;QOJUQdO'#IQOOQS,5;T,5;TOJdQdO'#H|OOQS,5;W,5;WOJuQdO,5;YO4iQdO,5;`O4iQdO,5;cOJ}QtO'#ITO'vQdO'#ITOKXQdO,5;eO4VQdO,5;eO0rQdO,5;jO1XQdO,5;lOK^QeO'#EuOLjQgO,5;fO!!kQdO'#IUO4iQdO,5;jO!!vQdO,5;lO!#OQdO,5;qO!#ZQtO,5;vO'vQdO,5;vPOOO,5=[,5=[P!#bOSO,5=[P!#jOdO,5=[O!&bQtO1G.jO!&iQtO1G.jO!)YQtO1G.jO!)dQtO1G.jO!+}QtO1G.jO!,bQtO1G.jO!,uQdO'#HcO!-TQtO'#GuO0rQdO'#HcO!-_QdO'#HbOOQS,5:Z,5:ZO!-gQdO,5:ZO!-lQdO'#HeO!-wQdO'#HeO!.[QdO,5>OOOQS'#Ds'#DsOOQS1G/w1G/wOOQS1G.|1G.|O!/[QtO1G.|O!/cQtO1G.|O1lQdO1G.|O!0OQdO1G/UOOQS'#DZ'#DZO0rQdO,59tOOQS1G.{1G.{O!0VQdO1G/eO!0gQdO1G/eO!0oQdO1G/fO'vQdO'#H[O!0tQdO'#H[O!0yQtO1G.{O!1ZQdO,59iO!2aQdO,5=zO!2qQdO,5=zO!2yQdO1G/mO!3OQtO1G/mOOQS1G/l1G/lO!3`QdO,5=uO!4VQdO,5=uO0rQdO1G/qO!4tQdO1G/sO!4yQtO1G/sO!5ZQtO1G/qOOQS1G/p1G/pOOQS1G/r1G/rOOOW-E9w-E9wOOQS1G/{1G/{O!5kQdO'#HxO0rQdO'#HxO!5|QdO,5>cOOOW-E9x-E9xOOQS1G/|1G/|OOQS-E9{-E9{O!6[Q#xO1G2zO!6{QtO1G2zO'vQdO,5<jOOQS,5<j,5<jOOQS-E9|-E9|OOQS,5<r,5<rOOQS-E:U-E:UOOQV1G0x1G0xO1XQdO'#GRO!7dQtO,5>kOOQS1G1`1G1`O!8RQdO1G1`OOQS'#DV'#DVO0rQdO,5=qOOQS,5=q,5=qO!8WQdO'#FrO!8cQdO,59oO!8kQdO1G/XO!8uQtO,5=uOOQS1G3`1G3`OOQS,5:m,5:mO!9fQdO'#GtOOQS,5<k,5<kOOQS-E9}-E9}O!9wQdO1G.hOOQS1G0Z1G0ZO!:VQdO,5=wO!:gQdO,5=wO0rQdO1G0jO0rQdO1G0jO!:xQdO,5>jO!;ZQdO,5>jO1XQdO,5>jO!;lQdO,5>iOOQS-E:R-E:RO!;qQdO1G0lO!;|QdO1G0lO!<RQdO,5>lO!<aQdO,5>lO!<oQdO,5>hO!=VQdO,5>hO!=hQdO'#EpO0rQdO1G0tO!=sQdO1G0tO!=xQgO1G0zO!AvQgO1G0}O!EqQdO,5>oO!E{QdO,5>oO!FTQtO,5>oO0rQdO1G1PO!F_QdO1G1PO4iQdO1G1UO!!vQdO1G1WOOQV,5;a,5;aO!FdQfO,5;aO!FiQgO1G1QO!JjQdO'#GZO4iQdO1G1QO4iQdO1G1QO!JzQdO,5>pO!KXQdO,5>pO1XQdO,5>pOOQV1G1U1G1UO!KaQdO'#FSO!KrQ!fO1G1WO!KzQdO1G1WOOQV1G1]1G1]O4iQdO1G1]O!LPQdO1G1]O!LXQdO'#F^OOQV1G1b1G1bO!#ZQtO1G1bPOOO1G2v1G2vP!L^OSO1G2vOOQS,5=},5=}OOQS'#Dp'#DpO0rQdO,5=}O!LfQdO,5=|O!LyQdO,5=|OOQS1G/u1G/uO!MRQdO,5>PO!McQdO,5>PO!MkQdO,5>PO!NOQdO,5>PO!N`QdO,5>POOQS1G3j1G3jOOQS7+$h7+$hO!8kQdO7+$pO#!RQdO1G.|O#!YQdO1G.|OOQS1G/`1G/`OOQS,5<`,5<`O'vQdO,5<`OOQS7+%P7+%PO#!aQdO7+%POOQS-E9r-E9rOOQS7+%Q7+%QO#!qQdO,5=vO'vQdO,5=vOOQS7+$g7+$gO#!vQdO7+%PO##OQdO7+%QO##TQdO1G3fOOQS7+%X7+%XO##eQdO1G3fO##mQdO7+%XOOQS,5<_,5<_O'vQdO,5<_O##rQdO1G3aOOQS-E9q-E9qO#$iQdO7+%]OOQS7+%_7+%_O#$wQdO1G3aO#%fQdO7+%_O#%kQdO1G3gO#%{QdO1G3gO#&TQdO7+%]O#&YQdO,5>dO#&sQdO,5>dO#&sQdO,5>dOOQS'#Dx'#DxO#'UO&jO'#DzO#'aO`O'#HyOOOW1G3}1G3}O#'fQdO1G3}O#'nQdO1G3}O#'yQ#xO7+(fO#(jQtO1G2UP#)TQdO'#GOOOQS,5<m,5<mOOQS-E:P-E:POOQS7+&z7+&zOOQS1G3]1G3]OOQS,5<^,5<^OOQS-E9p-E9pOOQS7+$s7+$sO#)bQdO,5=`O#){QdO,5=`O#*^QtO,5<aO#*qQdO1G3cOOQS-E9s-E9sOOQS7+&U7+&UO#+RQdO7+&UO#+aQdO,5<nO#+uQdO1G4UOOQS-E:Q-E:QO#,WQdO1G4UOOQS1G4T1G4TOOQS7+&W7+&WO#,iQdO7+&WOOQS,5<p,5<pO#,tQdO1G4WOOQS-E:S-E:SOOQS,5<l,5<lO#-SQdO1G4SOOQS-E:O-E:OO1XQdO'#EqO#-jQdO'#EqO#-uQdO'#IRO#-}QdO,5;[OOQS7+&`7+&`O0rQdO7+&`O#.SQgO7+&fO!JmQdO'#GXO4iQdO7+&fO4iQdO7+&iO#2QQtO,5<tO'vQdO,5<tO#2[QdO1G4ZOOQS-E:W-E:WO#2fQdO1G4ZO4iQdO7+&kO0rQdO7+&kOOQV7+&p7+&pO!KrQ!fO7+&rO!KzQdO7+&rO`QeO1G0{OOQV-E:X-E:XO4iQdO7+&lO4iQdO7+&lOOQV,5<u,5<uO#2nQdO,5<uO!JmQdO,5<uOOQV7+&l7+&lO#2yQgO7+&lO#6tQdO,5<vO#7PQdO1G4[OOQS-E:Y-E:YO#7^QdO1G4[O#7fQdO'#IWO#7tQdO'#IWO1XQdO'#IWOOQS'#IW'#IWO#8PQdO'#IVOOQS,5;n,5;nO#8XQdO,5;nO0rQdO'#FUOOQV7+&r7+&rO4iQdO7+&rOOQV7+&w7+&wO4iQdO7+&wO#8^QfO,5;xOOQV7+&|7+&|POOO7+(b7+(bO#8cQdO1G3iOOQS,5<c,5<cO#8qQdO1G3hOOQS-E9u-E9uO#9UQdO,5<dO#9aQdO,5<dO#9tQdO1G3kOOQS-E9v-E9vO#:UQdO1G3kO#:^QdO1G3kO#:nQdO1G3kO#:UQdO1G3kOOQS<<H[<<H[O#:yQtO1G1zOOQS<<Hk<<HkP#;WQdO'#FtO8vQdO1G3bO#;eQdO1G3bO#;jQdO<<HkOOQS<<Hl<<HlO#;zQdO7+)QOOQS<<Hs<<HsO#<[QtO1G1yP#<{QdO'#FsO#=YQdO7+)RO#=jQdO7+)RO#=rQdO<<HwO#=wQdO7+({OOQS<<Hy<<HyO#>nQdO,5<bO'vQdO,5<bOOQS-E9t-E9tOOQS<<Hw<<HwOOQS,5<g,5<gO0rQdO,5<gO#>sQdO1G4OOOQS-E9y-E9yO#?^QdO1G4OO<[QdO'#H{OOOO'#D{'#D{OOOO'#F|'#F|O#?oO&jO,5:fOOOW,5>e,5>eOOOW7+)i7+)iO#?zQdO7+)iO#@SQdO1G2zO#@mQdO1G2zP'vQdO'#FuO0rQdO<<IpO1XQdO1G2YP1XQdO'#GSO#AOQdO7+)pO#AaQdO7+)pOOQS<<Ir<<IrP1XQdO'#GUP0rQdO'#GQOOQS,5;],5;]O#ArQdO,5>mO#BQQdO,5>mOOQS1G0v1G0vOOQS<<Iz<<IzOOQV-E:V-E:VO4iQdO<<JQOOQV,5<s,5<sO4iQdO,5<sOOQV<<JQ<<JQOOQV<<JT<<JTO#BYQtO1G2`P#BdQdO'#GYO#BkQdO7+)uO#BuQgO<<JVO4iQdO<<JVOOQV<<J^<<J^O4iQdO<<J^O!KrQ!fO<<J^O#FpQgO7+&gOOQV<<JW<<JWO#FzQgO<<JWOOQV1G2a1G2aO1XQdO1G2aO#JuQdO1G2aO4iQdO<<JWO1XQdO1G2bP0rQdO'#G[O#KQQdO7+)vO#K_QdO7+)vOOQS'#FT'#FTO0rQdO,5>rO#KgQdO,5>rO#KrQdO,5>rO#K}QdO,5>qO#L`QdO,5>qOOQS1G1Y1G1YOOQS,5;p,5;pOOQV<<Jc<<JcO#LhQdO1G1dOOQS7+)T7+)TP#LmQdO'#FwO#L}QdO1G2OO#MbQdO1G2OO#MrQdO1G2OP#M}QdO'#FxO#N[QdO7+)VO#NlQdO7+)VO#NlQdO7+)VO#NtQdO7+)VO$ UQdO7+(|O8vQdO7+(|OOQSAN>VAN>VO$ oQdO<<LmOOQSAN>cAN>cO0rQdO1G1|O$!PQtO1G1|P$!ZQdO'#FvOOQS1G2R1G2RP$!hQdO'#F{O$!uQdO7+)jO$#`QdO,5>gOOOO-E9z-E9zOOOW<<MT<<MTO$#nQdO7+(fOOQSAN?[AN?[OOQS7+'t7+'tO$$XQdO<<M[OOQS,5<q,5<qO$$jQdO1G4XOOQS-E:T-E:TOOQVAN?lAN?lOOQV1G2_1G2_O4iQdOAN?qO$$xQgOAN?qOOQVAN?xAN?xO4iQdOAN?xOOQV<<JR<<JRO4iQdOAN?rO4iQdO7+'{OOQV7+'{7+'{O1XQdO7+'{OOQVAN?rAN?rOOQS7+'|7+'|O$(sQdO<<MbOOQS1G4^1G4^O0rQdO1G4^OOQS,5<w,5<wO$)QQdO1G4]OOQS-E:Z-E:ZOOQU'#G_'#G_O$)cQfO7+'OO$)nQdO'#F_O$*uQdO7+'jO$+VQdO7+'jOOQS7+'j7+'jO$+bQdO<<LqO$+rQdO<<LqO$+rQdO<<LqO$+zQdO'#H^OOQS<<Lh<<LhO$,UQdO<<LhOOQS7+'h7+'hOOQS'#D|'#D|OOOO1G4R1G4RO$,oQdO1G4RO$,wQdO1G4RP!=hQdO'#GVOOQVG25]G25]O4iQdOG25]OOQVG25dG25dOOQVG25^G25^OOQV<<Kg<<KgO4iQdO<<KgOOQS7+)x7+)xP$-SQdO'#G]OOQU-E:]-E:]OOQV<<Jj<<JjO$-vQtO'#FaOOQS'#Fc'#FcO$.WQdO'#FbO$.xQdO'#FbOOQS'#Fb'#FbO$.}QdO'#IYO$)nQdO'#FiO$)nQdO'#FiO$/fQdO'#FjO$)nQdO'#FkO$/mQdO'#IZOOQS'#IZ'#IZO$0[QdO,5;yOOQS<<KU<<KUO$0dQdO<<KUO$0tQdOANB]O$1UQdOANB]O$1^QdO'#H_OOQS'#H_'#H_O1sQdO'#DcO$1wQdO,5=xOOQSANBSANBSOOOO7+)m7+)mO$2`QdO7+)mOOQVLD*wLD*wOOQVANARANARO5uQ!fO'#GaO$2hQtO,5<SO$)nQdO'#FmOOQS,5<W,5<WOOQS'#Fd'#FdO$3YQdO,5;|O$3_QdO,5;|OOQS'#Fg'#FgO$)nQdO'#G`O$4PQdO,5<QO$4kQdO,5>tO$4{QdO,5>tO1XQdO,5<PO$5^QdO,5<TO$5cQdO,5<TO$)nQdO'#I[O$5hQdO'#I[O$5mQdO,5<UOOQS,5<V,5<VO0rQdO'#FpOOQU1G1e1G1eO4iQdO1G1eOOQSAN@pAN@pO$5rQdOG27wO$6SQdO,59}OOQS1G3d1G3dOOOO<<MX<<MXOOQS,5<{,5<{OOQS-E:_-E:_O$6XQtO'#FaO$6`QdO'#I]O$6nQdO'#I]O$6vQdO,5<XOOQS1G1h1G1hO$6{QdO1G1hO$7QQdO,5<zOOQS-E:^-E:^O$7lQdO,5=OO$8TQdO1G4`OOQS-E:b-E:bOOQS1G1k1G1kOOQS1G1o1G1oO$8eQdO,5>vO$)nQdO,5>vOOQS1G1p1G1pOOQS,5<[,5<[OOQU7+'P7+'PO$+zQdO1G/iO$)nQdO,5<YO$8sQdO,5>wO$8zQdO,5>wOOQS1G1s1G1sOOQS7+'S7+'SP$)nQdO'#GdO$9SQdO1G4bO$9^QdO1G4bO$9fQdO1G4bOOQS7+%T7+%TO$9tQdO1G1tO$:SQtO'#FaO$:ZQdO,5<}OOQS,5<},5<}O$:iQdO1G4cOOQS-E:a-E:aO$)nQdO,5<|O$:pQdO,5<|O$:uQdO7+)|OOQS-E:`-E:`O$;PQdO7+)|O$)nQdO,5<ZP$)nQdO'#GcO$;XQdO1G2hO$)nQdO1G2hP$;gQdO'#GbO$;nQdO<<MhO$;xQdO1G1uO$<WQdO7+(SO8vQdO'#C}O8vQdO,59bO8vQdO,59bO8vQdO,59bO$<fQtO,5=`O8vQdO1G.|O0rQdO1G/XO0rQdO7+$pP$<yQdO'#GOO'vQdO'#GtO$=WQdO,59bO$=]QdO,59bO$=dQdO,59mO$=iQdO1G/UO1sQdO'#DRO8vQdO,59j",
      stateData: "$>S~O%cOS%^OSSOS%]PQ~OPdOVaOfoOhYOopOs!POvqO!PrO!Q{O!T!SO!U!RO!XZO!][O!h`O!r`O!s`O!t`O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#l!QO#o!TO#s!UO#u!VO#z!WO#}hO$P!XO%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~O%]!YO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%j![O%k!]O%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aO~Ok%xXl%xXm%xXn%xXo%xXp%xXs%xXz%xX{%xX!x%xX#g%xX%[%xX%_%xX%z%xXg%xX!T%xX!U%xX%{%xX!W%xX![%xX!Q%xX#[%xXt%xX!m%xX~P%SOfoOhYO!XZO!][O!h`O!r`O!s`O!t`O%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~Oz%wX{%wX#g%wX%[%wX%_%wX%z%wX~Ok!pOl!qOm!oOn!oOo!rOp!sOs!tO!x%wX~P)pOV!zOg!|Oo0cOv0qO!PrO~P'vOV#OOo0cOv0qO!W#PO~P'vOV#SOa#TOo0cOv0qO![#UO~P'vOQ#XO%`#XO%a#ZO~OQ#^OR#[O%`#^O%a#`O~OV%iX_%iXa%iXh%iXk%iXl%iXm%iXn%iXo%iXp%iXs%iXz%iX!X%iX!f%iX%j%iX%k%iX%l%iX%m%iX%n%iX%o%iX%p%iX%q%iX%r%iX%s%iXg%iX!T%iX!U%iX~O&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O{%iX!x%iX#g%iX%[%iX%_%iX%z%iX%{%iX!W%iX![%iX!Q%iX#[%iXt%iX!m%iX~P,eOz#dO{%hX!x%hX#g%hX%[%hX%_%hX%z%hX~Oo0cOv0qO~P'vO#g#gO%[#iO%_#iO~O%uWO~O!T#nO#u!VO#z!WO#}hO~OopO~P'vOV#sOa#tO%uWO{wP~OV#xOo0cOv0qO!Q#yO~P'vO{#{O!x$QO%z#|O#g!yX%[!yX%_!yX~OV#xOo0cOv0qO#g#SX%[#SX%_#SX~P'vOo0cOv0qO#g#WX%[#WX%_#WX~P'vOh$WO%uWO~O!f$YO!r$YO%uWO~OV$eO~P'vO!U$gO#s$hO#u$iO~O{$jO~OV$qO~P'vOS$sO%[$rO%_$rO%c$tO~OV$}Oa$}Og%POo0cOv0qO~P'vOo0cOv0qO{%SO~P'vO&Y%UO~Oa!bOh!iO!X!kO!f!mOVba_bakbalbambanbaobapbasbazba{ba!xba#gba%[ba%_ba%jba%kba%lba%mba%nba%oba%pba%qba%rba%sba%zbagba!Tba!Uba%{ba!Wba![ba!Qba#[batba!mba~On%ZO~Oo%ZO~P'vOo0cO~P'vOk0eOl0fOm0dOn0dOo0mOp0nOs0rOg%wX!T%wX!U%wX%{%wX!W%wX![%wX!Q%wX#[%wX!m%wX~P)pO%{%]Og%vXz%vX!T%vX!U%vX!W%vX{%vX~Og%_Oz%`O!T%dO!U%cO~Og%_O~Oz%gO!T%dO!U%cO!W&SX~O!W%kO~Oz%lO{%nO!T%dO!U%cO![%}X~O![%rO~O![%sO~OQ#XO%`#XO%a%uO~OV%wOo0cOv0qO!PrO~P'vOQ#^OR#[O%`#^O%a%zO~OV!qa_!qaa!qah!qak!qal!qam!qan!qao!qap!qas!qaz!qa{!qa!X!qa!f!qa!x!qa#g!qa%[!qa%_!qa%j!qa%k!qa%l!qa%m!qa%n!qa%o!qa%p!qa%q!qa%r!qa%s!qa%z!qag!qa!T!qa!U!qa%{!qa!W!qa![!qa!Q!qa#[!qat!qa!m!qa~P#yOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P%SOV&OOopOvqO{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P'vOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#g$zX%[$zX%_$zX~P'vO#g#gO%[&TO%_&TO~O!f&UOh&sX%[&sXz&sX#[&sX#g&sX%_&sX#Z&sXg&sX~Oh!iO%[&WO~Okealeameaneaoeapeaseazea{ea!xea#gea%[ea%_ea%zeagea!Tea!Uea%{ea!Wea![ea!Qea#[eatea!mea~P%SOsqazqa{qa#gqa%[qa%_qa%zqa~Ok!pOl!qOm!oOn!oOo!rOp!sO!xqa~PEcO%z&YOz%yX{%yX~O%uWOz%yX{%yX~Oz&]O{wX~O{&_O~Oz%lO#g%}X%[%}X%_%}Xg%}X{%}X![%}X!m%}X%z%}X~OV0lOo0cOv0qO!PrO~P'vO%z#|O#gUa%[Ua%_Ua~Oz&hO#g&PX%[&PX%_&PXn&PX~P%SOz&kO!Q&jO#g#Wa%[#Wa%_#Wa~Oz&lO#[&nO#g&rX%[&rX%_&rXg&rX~O!f$YO!r$YO#Z&qO%uWO~O#Z&qO~Oz&sO#g&tX%[&tX%_&tX~Oz&uO#g&pX%[&pX%_&pX{&pX~O!X&wO%z&xO~Oz&|On&wX~P%SOn'PO~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO%['UO~P'vOt'YO#p'WO#q'XOP#naV#naf#nah#nao#nas#nav#na!P#na!Q#na!T#na!U#na!X#na!]#na!h#na!r#na!s#na!t#na!{#na!}#na#P#na#R#na#T#na#X#na#Z#na#^#na#_#na#a#na#c#na#l#na#o#na#s#na#u#na#z#na#}#na$P#na%X#na%o#na%p#na%t#na%u#na&Z#na&[#na&]#na&^#na&_#na&`#na&a#na&b#na&c#na&d#na&e#na&f#na&g#na&h#na&i#na&j#na%Z#na%_#na~Oz'ZO#[']O{&xX~Oh'_O!X&wO~Oh!iO{$jO!X&wO~O{'eO~P%SO%['hO%_'hO~OS'iO%['hO%_'hO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%k!]O~P!#uO%kWi~P!#uOV!aO_!aOa!bOh!iO!X!kO!f!mO%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%m!_O%n!_O~P!&pO%mWi%nWi~P!&pOa!bOh!iO!X!kO!f!mOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%mWi%nWi%oWi%pWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~OV!aO_!aO%q!aO%r!aO%s!aO~P!)nOVWi_Wi%qWi%rWi%sWi~P!)nO!T%dO!U%cOg&VXz&VX~O%z'kO%{'kO~P,eOz'mOg&UX~Og'oO~Oz'pO{'rO!W&XX~Oo0cOv0qOz'pO{'sO!W&XX~P'vO!W'uO~Om!oOn!oOo!rOp!sOkjisjizji{ji!xji#gji%[ji%_ji%zji~Ol!qO~P!.aOlji~P!.aOk0eOl0fOm0dOn0dOo0mOp0nO~Ot'wO~P!/jOV'|Og'}Oo0cOv0qO~P'vOg'}Oz(OO~Og(QO~O!U(SO~Og(TOz(OO!T%dO!U%cO~P%SOk0eOl0fOm0dOn0dOo0mOp0nOgqa!Tqa!Uqa%{qa!Wqa![qa!Qqa#[qatqa!mqa~PEcOV'|Oo0cOv0qO!W&Sa~P'vOz(WO!W&Sa~O!W(XO~Oz(WO!T%dO!U%cO!W&Sa~P%SOV(]Oo0cOv0qO![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~P'vOz(^O![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~O![(aO~Oz(^O!T%dO!U%cO![%}a~P%SOz(dO!T%dO!U%cO![&Ta~P%SOz(gO{&lX![&lX!m&lX%z&lX~O{(kO![(mO!m(nO%z(jO~OV&OOopOvqO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~P'vOz(pO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~O!f&UOh&sa%[&saz&sa#[&sa#g&sa%_&sa#Z&sag&sa~O%[(uO~OV#sOa#tO%uWO~Oz&]O{wa~OopOvqO~P'vOz(^O#g%}a%[%}a%_%}ag%}a{%}a![%}a!m%}a%z%}a~P%SOz(zO#g%hX%[%hX%_%hX%z%hX~O%z#|O#gUi%[Ui%_Ui~O#g&Pa%[&Pa%_&Pan&Pa~P'vOz(}O#g&Pa%[&Pa%_&Pan&Pa~O%uWO#g&ra%[&ra%_&rag&ra~Oz)SO#g&ra%[&ra%_&rag&ra~Og)VO~OV)WOh$WO%uWO~O#Z)XO~O%uWO#g&ta%[&ta%_&ta~Oz)ZO#g&ta%[&ta%_&ta~Oo0cOv0qO#g&pa%[&pa%_&pa{&pa~P'vOz)^O#g&pa%[&pa%_&pa{&pa~OV)`Oa)`O%uWO~O%z)eO~Ot)hO#j)gOP#hiV#hif#hih#hio#his#hiv#hi!P#hi!Q#hi!T#hi!U#hi!X#hi!]#hi!h#hi!r#hi!s#hi!t#hi!{#hi!}#hi#P#hi#R#hi#T#hi#X#hi#Z#hi#^#hi#_#hi#a#hi#c#hi#l#hi#o#hi#s#hi#u#hi#z#hi#}#hi$P#hi%X#hi%o#hi%p#hi%t#hi%u#hi&Z#hi&[#hi&]#hi&^#hi&_#hi&`#hi&a#hi&b#hi&c#hi&d#hi&e#hi&f#hi&g#hi&h#hi&i#hi&j#hi%Z#hi%_#hi~Ot)iOP#kiV#kif#kih#kio#kis#kiv#ki!P#ki!Q#ki!T#ki!U#ki!X#ki!]#ki!h#ki!r#ki!s#ki!t#ki!{#ki!}#ki#P#ki#R#ki#T#ki#X#ki#Z#ki#^#ki#_#ki#a#ki#c#ki#l#ki#o#ki#s#ki#u#ki#z#ki#}#ki$P#ki%X#ki%o#ki%p#ki%t#ki%u#ki&Z#ki&[#ki&]#ki&^#ki&_#ki&`#ki&a#ki&b#ki&c#ki&d#ki&e#ki&f#ki&g#ki&h#ki&i#ki&j#ki%Z#ki%_#ki~OV)kOn&wa~P'vOz)lOn&wa~Oz)lOn&wa~P%SOn)pO~O%Y)tO~Ot)wO#p'WO#q)vOP#niV#nif#nih#nio#nis#niv#ni!P#ni!Q#ni!T#ni!U#ni!X#ni!]#ni!h#ni!r#ni!s#ni!t#ni!{#ni!}#ni#P#ni#R#ni#T#ni#X#ni#Z#ni#^#ni#_#ni#a#ni#c#ni#l#ni#o#ni#s#ni#u#ni#z#ni#}#ni$P#ni%X#ni%o#ni%p#ni%t#ni%u#ni&Z#ni&[#ni&]#ni&^#ni&_#ni&`#ni&a#ni&b#ni&c#ni&d#ni&e#ni&f#ni&g#ni&h#ni&i#ni&j#ni%Z#ni%_#ni~OV)zOo0cOv0qO{$jO~P'vOo0cOv0qO{&xa~P'vOz*OO{&xa~OV*SOa*TOg*WO%q*UO%uWO~O{$jO&{*YO~Oh'_O~Oh!iO{$jO~O%[*_O~O%[*aO%_*aO~OV$}Oa$}Oo0cOv0qOg&Ua~P'vOz*dOg&Ua~Oo0cOv0qO{*gO!W&Xa~P'vOz*hO!W&Xa~Oo0cOv0qOz*hO{*kO!W&Xa~P'vOo0cOv0qOz*hO!W&Xa~P'vOz*hO{*kO!W&Xa~Om0dOn0dOo0mOp0nOgjikjisjizji!Tji!Uji%{ji!Wji{ji![ji#gji%[ji%_ji!Qji#[jitji!mji%zji~Ol0fO~P!NkOlji~P!NkOV'|Og*pOo0cOv0qO~P'vOn*rO~Og*pOz*tO~Og*uO~OV'|Oo0cOv0qO!W&Si~P'vOz*vO!W&Si~O!W*wO~OV(]Oo0cOv0qO![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~P'vOz*zO!T%dO!U%cO![&Ti~Oz*}O![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~O![+OO~Oa+QOo0cOv0qO![&Ti~P'vOz*zO![&Ti~O![+SO~OV+UOo0cOv0qO{&la![&la!m&la%z&la~P'vOz+VO{&la![&la!m&la%z&la~O!]+YO&n+[O![!nX~O![+^O~O{(kO![+_O~O{(kO![+_O!m+`O~OV&OOopOvqO{%hq!x%hq#g%hq%[%hq%_%hq%z%hq~P'vOz$ri{$ri!x$ri#g$ri%[$ri%_$ri%z$ri~P%SOV&OOopOvqO~P'vOV&OOo0cOv0qO#g%ha%[%ha%_%ha%z%ha~P'vOz+aO#g%ha%[%ha%_%ha%z%ha~Oz$ia#g$ia%[$ia%_$ian$ia~P%SO#g&Pi%[&Pi%_&Pin&Pi~P'vOz+dO#g#Wq%[#Wq%_#Wq~O#[+eOz$va#g$va%[$va%_$vag$va~O%uWO#g&ri%[&ri%_&rig&ri~Oz+gO#g&ri%[&ri%_&rig&ri~OV+iOh$WO%uWO~O%uWO#g&ti%[&ti%_&ti~Oo0cOv0qO#g&pi%[&pi%_&pi{&pi~P'vO{#{Oz#eX!W#eX~Oz+mO!W&uX~O!W+oO~Ot+rO#j)gOP#hqV#hqf#hqh#hqo#hqs#hqv#hq!P#hq!Q#hq!T#hq!U#hq!X#hq!]#hq!h#hq!r#hq!s#hq!t#hq!{#hq!}#hq#P#hq#R#hq#T#hq#X#hq#Z#hq#^#hq#_#hq#a#hq#c#hq#l#hq#o#hq#s#hq#u#hq#z#hq#}#hq$P#hq%X#hq%o#hq%p#hq%t#hq%u#hq&Z#hq&[#hq&]#hq&^#hq&_#hq&`#hq&a#hq&b#hq&c#hq&d#hq&e#hq&f#hq&g#hq&h#hq&i#hq&j#hq%Z#hq%_#hq~On$|az$|a~P%SOV)kOn&wi~P'vOz+yOn&wi~Oz,TO{$jO#[,TO~O#q,VOP#nqV#nqf#nqh#nqo#nqs#nqv#nq!P#nq!Q#nq!T#nq!U#nq!X#nq!]#nq!h#nq!r#nq!s#nq!t#nq!{#nq!}#nq#P#nq#R#nq#T#nq#X#nq#Z#nq#^#nq#_#nq#a#nq#c#nq#l#nq#o#nq#s#nq#u#nq#z#nq#}#nq$P#nq%X#nq%o#nq%p#nq%t#nq%u#nq&Z#nq&[#nq&]#nq&^#nq&_#nq&`#nq&a#nq&b#nq&c#nq&d#nq&e#nq&f#nq&g#nq&h#nq&i#nq&j#nq%Z#nq%_#nq~O#[,WOz%Oa{%Oa~Oo0cOv0qO{&xi~P'vOz,YO{&xi~O{#{O%z,[Og&zXz&zX~O%uWOg&zXz&zX~Oz,`Og&yX~Og,bO~O%Y,eO~O!T%dO!U%cOg&Viz&Vi~OV$}Oa$}Oo0cOv0qOg&Ui~P'vO{,hOz$la!W$la~Oo0cOv0qO{,iOz$la!W$la~P'vOo0cOv0qO{*gO!W&Xi~P'vOz,lO!W&Xi~Oo0cOv0qOz,lO!W&Xi~P'vOz,lO{,oO!W&Xi~Og$hiz$hi!W$hi~P%SOV'|Oo0cOv0qO~P'vOn,qO~OV'|Og,rOo0cOv0qO~P'vOV'|Oo0cOv0qO!W&Sq~P'vOz$gi![$gi#g$gi%[$gi%_$gig$gi{$gi!m$gi%z$gi~P%SOV(]Oo0cOv0qO~P'vOa+QOo0cOv0qO![&Tq~P'vOz,sO![&Tq~O![,tO~OV(]Oo0cOv0qO![%}q#g%}q%[%}q%_%}qg%}q{%}q!m%}q%z%}q~P'vO{,uO~OV+UOo0cOv0qO{&li![&li!m&li%z&li~P'vOz,zO{&li![&li!m&li%z&li~O!]+YO&n+[O![!na~O{(kO![,}O~OV&OOo0cOv0qO#g%hi%[%hi%_%hi%z%hi~P'vOz-OO#g%hi%[%hi%_%hi%z%hi~O%uWO#g&rq%[&rq%_&rqg&rq~Oz-RO#g&rq%[&rq%_&rqg&rq~OV)`Oa)`O%uWO!W&ua~Oz-TO!W&ua~On$|iz$|i~P%SOV)kO~P'vOV)kOn&wq~P'vOt-XOP#myV#myf#myh#myo#mys#myv#my!P#my!Q#my!T#my!U#my!X#my!]#my!h#my!r#my!s#my!t#my!{#my!}#my#P#my#R#my#T#my#X#my#Z#my#^#my#_#my#a#my#c#my#l#my#o#my#s#my#u#my#z#my#}#my$P#my%X#my%o#my%p#my%t#my%u#my&Z#my&[#my&]#my&^#my&_#my&`#my&a#my&b#my&c#my&d#my&e#my&f#my&g#my&h#my&i#my&j#my%Z#my%_#my~O%Z-]O%_-]O~P`O#q-^OP#nyV#nyf#nyh#nyo#nys#nyv#ny!P#ny!Q#ny!T#ny!U#ny!X#ny!]#ny!h#ny!r#ny!s#ny!t#ny!{#ny!}#ny#P#ny#R#ny#T#ny#X#ny#Z#ny#^#ny#_#ny#a#ny#c#ny#l#ny#o#ny#s#ny#u#ny#z#ny#}#ny$P#ny%X#ny%o#ny%p#ny%t#ny%u#ny&Z#ny&[#ny&]#ny&^#ny&_#ny&`#ny&a#ny&b#ny&c#ny&d#ny&e#ny&f#ny&g#ny&h#ny&i#ny&j#ny%Z#ny%_#ny~Oz-aO{$jO#[-aO~Oo0cOv0qO{&xq~P'vOz-dO{&xq~O%z,[Og&zaz&za~O{#{Og&zaz&za~OV*SOa*TO%q*UO%uWOg&ya~Oz-hOg&ya~O$S-lO~OV$}Oa$}Oo0cOv0qO~P'vOo0cOv0qO{-mOz$li!W$li~P'vOo0cOv0qOz$li!W$li~P'vO{-mOz$li!W$li~Oo0cOv0qO{*gO~P'vOo0cOv0qO{*gO!W&Xq~P'vOz-pO!W&Xq~Oo0cOv0qOz-pO!W&Xq~P'vOs-sO!T%dO!U%cOg&Oq!W&Oq![&Oqz&Oq~P!/jOa+QOo0cOv0qO![&Ty~P'vOz$ji![$ji~P%SOa+QOo0cOv0qO~P'vOV+UOo0cOv0qO~P'vOV+UOo0cOv0qO{&lq![&lq!m&lq%z&lq~P'vO{(kO![-xO!m-yO%z-wO~OV&OOo0cOv0qO#g%hq%[%hq%_%hq%z%hq~P'vO%uWO#g&ry%[&ry%_&ryg&ry~OV)`Oa)`O%uWO!W&ui~Ot-}OP#m!RV#m!Rf#m!Rh#m!Ro#m!Rs#m!Rv#m!R!P#m!R!Q#m!R!T#m!R!U#m!R!X#m!R!]#m!R!h#m!R!r#m!R!s#m!R!t#m!R!{#m!R!}#m!R#P#m!R#R#m!R#T#m!R#X#m!R#Z#m!R#^#m!R#_#m!R#a#m!R#c#m!R#l#m!R#o#m!R#s#m!R#u#m!R#z#m!R#}#m!R$P#m!R%X#m!R%o#m!R%p#m!R%t#m!R%u#m!R&Z#m!R&[#m!R&]#m!R&^#m!R&_#m!R&`#m!R&a#m!R&b#m!R&c#m!R&d#m!R&e#m!R&f#m!R&g#m!R&h#m!R&i#m!R&j#m!R%Z#m!R%_#m!R~Oo0cOv0qO{&xy~P'vOV*SOa*TO%q*UO%uWOg&yi~O$S-lO%Z.VO%_.VO~OV.aOh._O!X.^O!].`O!h.YO!s.[O!t.[O%p.XO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O~Oo0cOv0qOz$lq!W$lq~P'vO{.fOz$lq!W$lq~Oo0cOv0qO{*gO!W&Xy~P'vOz.gO!W&Xy~Oo0cOv.kO~P'vOs-sO!T%dO!U%cOg&Oy!W&Oy![&Oyz&Oy~P!/jO{(kO![.nO~O{(kO![.nO!m.oO~OV*SOa*TO%q*UO%uWO~Oh.tO!f.rOz$TX#[$TX%j$TXg$TX~Os$TX{$TX!W$TX![$TX~P$-bO%o.vO%p.vOs$UXz$UX{$UX#[$UX%j$UX!W$UXg$UX![$UX~O!h.xO~Oz.|O#[/OO%j.yOs&|X{&|X!W&|Xg&|X~Oa/RO~P$)zOh.tOs&}Xz&}X{&}X#[&}X%j&}X!W&}Xg&}X![&}X~Os/VO{$jO~Oo0cOv0qOz$ly!W$ly~P'vOo0cOv0qO{*gO!W&X!R~P'vOz/ZO!W&X!R~Og&RXs&RX!T&RX!U&RX!W&RX![&RXz&RX~P!/jOs-sO!T%dO!U%cOg&Qa!W&Qa![&Qaz&Qa~O{(kO![/^O~O!f.rOh$[as$[az$[a{$[a#[$[a%j$[a!W$[ag$[a![$[a~O!h/eO~O%o.vO%p.vOs$Uaz$Ua{$Ua#[$Ua%j$Ua!W$Uag$Ua![$Ua~O%j.yOs$Yaz$Ya{$Ya#[$Ya!W$Yag$Ya![$Ya~Os&|a{&|a!W&|ag&|a~P$)nOz/jOs&|a{&|a!W&|ag&|a~O!W/mO~Og/mO~O{/oO~O![/pO~Oo0cOv0qO{*gO!W&X!Z~P'vO{/sO~O%z/tO~P$-bOz/uO#[/OO%j.yOg'PX~Oz/uOg'PX~Og/wO~O!h/xO~O#[/OOs%Saz%Sa{%Sa%j%Sa!W%Sag%Sa![%Sa~O#[/OO%j.yOs%Waz%Wa{%Wa!W%Wag%Wa~Os&|i{&|i!W&|ig&|i~P$)nOz/zO#[/OO%j.yO!['Oa~Og'Pa~P$)nOz0SOg'Pa~Oa0UO!['Oi~P$)zOz0WO!['Oi~Oz0WO#[/OO%j.yO!['Oi~O#[/OO%j.yOg$biz$bi~O%z0ZO~P$-bO#[/OO%j.yOg%Vaz%Va~Og'Pi~P$)nO{0^O~Oa0UO!['Oq~P$)zOz0`O!['Oq~O#[/OO%j.yOz%Ui![%Ui~Oa0UO~P$)zOa0UO!['Oy~P$)zO#[/OO%j.yOg$ciz$ci~O#[/OO%j.yOz%Uq![%Uq~Oz+aO#g%ha%[%ha%_%ha%z%ha~P%SOV&OOo0cOv0qO~P'vOn0hO~Oo0hO~P'vO{0iO~Ot0jO~P!/jO&]&Z&j&h&i&g&f&d&e&c&b&`&a&_&^&[%u~",
      goto: "!=j'QPPPPPP'RP'Z*s+[+t,_,y-fP.SP'Z.r.r'ZPPP'Z2[PPPPPP2[5PPP5PP7b7k=sPP=v>h>kPP'Z'ZPP>zPP'Z'ZPP'Z'Z'Z'Z'Z?O?w'ZP?zP@QDXGuGyPG|HWH['ZPPPH_Hk'RP'R'RP'RP'RP'RP'RP'R'R'RP'RPP'RPP'RP'RPHqH}IVPI^IdPI^PI^I^PPPI^PKrPK{LVL]KrPI^LfPI^PLmLsPLwM]MzNeLwLwNkNxLwLwLwLw! ^! d! g! l! o! y!!P!!]!!o!!u!#P!#V!#s!#y!$P!$Z!$a!$g!$y!%T!%Z!%a!%k!%q!%w!%}!&T!&Z!&e!&k!&u!&{!'U!'[!'k!'s!'}!(UPPPPPPPPPPP!([!(_!(e!(n!(x!)TPPPPPPPPPPPP!-u!/Z!3^!6oPP!6w!7W!7a!8Y!8P!8c!8i!8l!8o!8r!8z!9jPPPPPPPPPPPPPPPPP!9m!9q!9wP!:]!:a!:m!:v!;S!;j!;m!;p!;v!;|!<S!<VP!<_!<h!=d!=g]eOn#g$j)t,P'}`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r{!cQ#c#p$R$d$p%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g}!dQ#c#p$R$d$p$u%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!P!eQ#c#p$R$d$p$u$v%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!R!fQ#c#p$R$d$p$u$v$w%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!T!gQ#c#p$R$d$p$u$v$w$x%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!V!hQ#c#p$R$d$p$u$v$w$x$y%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!Z!hQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g'}TOTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r&eVOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0n0r%oXOYZ[dnrxy}!P!Q!U!i!k#[#d#g#y#{#}$Q$h$j$}%S%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/V/Z0i0j0kQ#vqQ/[.kR0o0q't`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rh#jhz{$W$Z&l&q)S)X+f+g-RW#rq&].k0qQ$]|Q$a!OQ$n!VQ$o!WW$|!i'm*d,gS&[#s#tQ'S$iQ(s&UQ)U&nU)Y&s)Z+jW)a&w+m-T-{Q*Q']W*R'_,`-h.TQ+l)`S,_*S*TQ-Q+eQ-_,TQ-c,WQ.R-al.W-l.^._.a.z.|/R/j/o/t/y0U0Z0^Q/S.`Q/a.tQ/l/OU0P/u0S0[X0V/z0W0_0`R&Z#r!_!wYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZR%^!vQ!{YQ%x#[Q&d#}Q&g$QR,{+YT.j-s/s!Y!jQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0gQ&X#kQ'c$oR*^'dR'l$|Q%V!mR/_.r'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rS#a_#b!P.[-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rT#a_#bT#^^#_R(o%xa(l%x(n(o+`,{-y-z.oT+[(k+]R-z,{Q$PsQ+l)aQ,^*RR-e,_X#}s$O$P&fQ&y$aQ'a$nQ'd$oR)s'SQ)b&wV-S+m-T-{ZgOn$j)t,PXkOn)t,PQ$k!TQ&z$bQ&{$cQ'^$mQ'b$oQ)q'RQ)x'WQ){'XQ)|'YQ*Z'`S*]'c'dQ+s)gQ+u)hQ+v)iQ+z)oS+|)r*[Q,Q)vQ,R)wS,S)y)zQ,d*^Q-V+rQ-W+tQ-Y+{S-Z+},OQ-`,UQ-b,VQ-|-XQ.O-[Q.P-^Q.Q-_Q.p-}Q.q.RQ/W.dR/r/XWkOn)t,PR#mjQ'`$nS)r'S'aR,O)sQ,]*RR-f,^Q*['`Q+})rR-[,OZiOjn)t,PQ'f$pR*`'gT-j,e-ku.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^t.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^Q/S.`X0V/z0W0_0`!P.Z-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`Q.w.YR/f.xg.z.].{/b/i/n/|0O0Q0]0a0bu.b-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^X.u.W.b/a0PR/c.tV0R/u0S0[R/X.dQnOS#on,PR,P)tQ&^#uR(x&^S%m#R#wS(_%m(bT(b%p&`Q%a!yQ%h!}W(P%a%h(U(YQ(U%eR(Y%jQ&i$RR)O&iQ(e%qQ*{(`T+R(e*{Q'n%OR*e'nS'q%R%SY*i'q*j,m-q.hU*j'r's'tU,m*k*l*mS-q,n,oR.h-rQ#Y]R%t#YQ#_^R%y#_Q(h%vS+W(h+XR+X(iQ+](kR,|+]Q#b_R%{#bQ#ebQ%}#cW&Q#e%}({+bQ({&cR+b0gQ$OsS&e$O&fR&f$PQ&v$_R)_&vQ&V#jR(t&VQ&m$VS)T&m+hR+h)UQ$Z{R&p$ZQ&t$]R)[&tQ+n)bR-U+nQ#hfR&S#hQ)f&zR+q)fQ&}$dS)m&})nR)n'OQ'V$kR)u'VQ'[$lS*P'[,ZR,Z*QQ,a*VR-i,aWjOn)t,PR#ljQ-k,eR.U-kd.{.]/b/i/n/|0O0Q0]0a0bR/h.{U.s.W/a0PR/`.sQ/{/nS0X/{0YR0Y/|S/v/b/cR0T/vQ.}.]R/k.}R!ZPXmOn)t,PWlOn)t,PR'T$jYfOn$j)t,PR&R#g[sOn#g$j)t,PR&d#}&dQOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0n0rQ!nTQ#caQ#poU$Rt%c(SS$d!R$gQ$p!XQ$u!cQ$v!dQ$w!eQ$x!fQ$y!gQ$z!hQ%e!zQ%j#OQ%p#SQ%q#TQ&`#xQ'O$eQ'g$qQ(q&OU(|&h(}+cW)j&|)l+x+yQ*o'|Q*x(]Q+w)kQ,v+QR0g0lQ!yYQ!}ZQ$b!PQ$c!QQ%R!kQ't%S^'{%`%g(O(W*q*t*v^*f'p*h,k,l-p.g/ZQ*l'rQ*m'sQ+t)gQ,j*gQ,n*kQ-n,hQ-o,iQ-r,oQ.e-mR/Y.f[bOn#g$j)t,P!^!vYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZQ#R[Q#fdS#wrxQ$UyW$_}$Q'P)pS$l!U$hW${!i'm*d,gS%v#[+Y`&P#d%|(p(r(z+a-O0kQ&a#yQ&b#{Q&c#}Q'j$}Q'z%^W([%l(^*y*}Q(`%nQ(i%wQ(v&ZS(y&_0iQ)P&jQ)Q&kU)]&u)^+kQ)d&xQ)y'WY)}'Z*O,X,Y-dQ*b'lS*n'w0jW+P(d*z,s,wW+T(g+V,y,zQ+p)eQ,U)zQ,c*YQ,x+UQ-P+dQ-e,]Q-v,uQ.S-fR/q/VhUOn#d#g$j%|&_'w(p(r)t,P%U!uYZ[drxy}!P!Q!U!i!k#[#y#{#}$Q$h$}%S%^%`%g%l%n%w&Z&j&k&u&x'P'W'Z'l'm'p'r's(O(W(^(d(g(z)^)e)g)p)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/V/Z0i0j0kQ#qpW%W!o!s0d0nQ%X!pQ%Y!qQ%[!tQ%f0cS'v%Z0hQ'x0eQ'y0fQ,p*rQ-u,qS.i-s/sR0p0rU#uq.k0qR(w&][cOn#g$j)t,PZ!xY#[#}$Q+YQ#W[Q#zrR$TxQ%b!yQ%i!}Q%o#RQ'j${Q(V%eQ(Z%jQ(c%pQ(f%qQ*|(`Q,f*bQ-t,pQ.m-uR/].lQ$StQ(R%cR*s(SQ.l-sR/}/sR#QZR#V[R%Q!iQ%O!iV*c'm*d,g!Z!lQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0gR%T!kT#]^#_Q%x#[R,{+YQ(m%xS+_(n(oQ,}+`Q-x,{S.n-y-zR/^.oT+Z(k+]Q$`}Q&g$QQ)o'PR+{)pQ$XzQ)W&qR+i)XQ$XzQ&o$WQ)W&qR+i)XQ#khW$Vz$W&q)XQ$[{Q&r$ZZ)R&l)S+f+g-RR$^|R)c&wXlOn)t,PQ$f!RR'Q$gQ$m!UR'R$hR*X'_Q*V'_V-g,`-h.TQ.d-lQ/P.^R/Q._U.]-l.^._Q/U.aQ/b.tQ/g.zU/i.|/j/yQ/n/RQ/|/oQ0O/tU0Q/u0S0[Q0]0UQ0a0ZR0b0^R/T.`R/d.t",
      nodeNames: "⚠ print Escape { Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ) ( ParenthesizedExpression BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from TupleExpression ComprehensionExpression async for LambdaExpression ] [ ArrayExpression ArrayComprehensionExpression } { DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatSelfDoc FormatConversion FormatSpec FormatReplacement FormatSelfDoc ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert TypeDefinition type TypeParamList TypeParam StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At MatchStatement match MatchBody MatchClause case CapturePattern LiteralPattern ArithOp ArithOp AsPattern OrPattern LogicOp AttributePattern SequencePattern MappingPattern StarPattern ClassPattern PatternArgList KeywordPattern KeywordPattern Guard",
      maxTerm: 277,
      context: trackIndent,
      nodeProps: [
        ["isolate", -5,4,71,72,73,77,""],
        ["group", -15,6,85,87,88,90,92,94,96,98,99,100,102,105,108,110,"Statement Statement",-22,8,18,21,25,40,49,50,56,57,60,61,62,63,64,67,70,71,72,79,80,81,82,"Expression",-10,114,116,119,121,122,126,128,133,135,138,"Statement",-9,143,144,147,148,150,151,152,153,154,"Pattern"],
        ["openedBy", 23,"(",54,"[",58,"{"],
        ["closedBy", 24,")",55,"]",59,"}"]
      ],
      propSources: [pythonHighlighting],
      skippedNodes: [0,4],
      repeatNodeCount: 34,
      tokenData: "!2|~R!`OX%TXY%oY[%T[]%o]p%Tpq%oqr'ars)Yst*xtu%Tuv,dvw-hwx.Uxy/tyz0[z{0r{|2S|}2p}!O3W!O!P4_!P!Q:Z!Q!R;k!R![>_![!]Do!]!^Es!^!_FZ!_!`Gk!`!aHX!a!b%T!b!cIf!c!dJU!d!eK^!e!hJU!h!i!#f!i!tJU!t!u!,|!u!wJU!w!x!.t!x!}JU!}#O!0S#O#P&o#P#Q!0j#Q#R!1Q#R#SJU#S#T%T#T#UJU#U#VK^#V#YJU#Y#Z!#f#Z#fJU#f#g!,|#g#iJU#i#j!.t#j#oJU#o#p!1n#p#q!1s#q#r!2a#r#s!2f#s$g%T$g;'SJU;'S;=`KW<%lOJU`%YT&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T`%lP;=`<%l%To%v]&n`%c_OX%TXY%oY[%T[]%o]p%Tpq%oq#O%T#O#P&o#P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To&tX&n`OY%TYZ%oZ]%T]^%o^#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc'f[&n`O!_%T!_!`([!`#T%T#T#U(r#U#f%T#f#g(r#g#h(r#h#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(cTmR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(yT!mR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk)aV&n`&[ZOr%Trs)vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk){V&n`Or%Trs*bs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk*iT&n`&^ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To+PZS_&n`OY*xYZ%TZ]*x]^%T^#o*x#o#p+r#p#q*x#q#r+r#r;'S*x;'S;=`,^<%lO*x_+wTS_OY+rZ]+r^;'S+r;'S;=`,W<%lO+r_,ZP;=`<%l+ro,aP;=`<%l*xj,kV%rQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-XT!xY&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-oV%lQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.]V&n`&ZZOw%Twx.rx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.wV&n`Ow%Twx/^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/eT&n`&]ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/{ThZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc0cTgR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk0yXVZ&n`Oz%Tz{1f{!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk1mVaR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk2ZV%oZ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc2wTzR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To3_W%pZ&n`O!_%T!_!`-Q!`!a3w!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Td4OT&{S&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk4fX!fQ&n`O!O%T!O!P5R!P!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5WV&n`O!O%T!O!P5m!P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5tT!rZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti6[a!hX&n`O!Q%T!Q![6T![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S6T#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti7fZ&n`O{%T{|8X|}%T}!O8X!O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8^V&n`O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8z]!hX&n`O!Q%T!Q![8s![!l%T!l!m9s!m#R%T#R#S8s#S#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti9zT!hX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk:bX%qR&n`O!P%T!P!Q:}!Q!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj;UV%sQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti;ro!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!d%T!d!e?q!e!g%T!g!h7a!h!l%T!l!m9s!m!q%T!q!rA]!r!z%T!z!{Bq!{#R%T#R#S>_#S#U%T#U#V?q#V#X%T#X#Y7a#Y#^%T#^#_9s#_#c%T#c#dA]#d#l%T#l#mBq#m#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti=xV&n`O!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti>fc!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S>_#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti?vY&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti@mY!hX&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiAbX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBUX!hX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBv]&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiCv]!hX&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToDvV{_&n`O!_%T!_!`E]!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TcEdT%{R&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkEzT#gZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkFbXmR&n`O!^%T!^!_F}!_!`([!`!a([!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjGUV%mQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkGrV%zZ&n`O!_%T!_!`([!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkH`WmR&n`O!_%T!_!`([!`!aHx!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjIPV%nQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkIoV_Q#}P&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToJ_]&n`&YS%uZO!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoKZP;=`<%lJUoKge&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!tJU!t!uLx!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#gLx#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoMRa&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUkN_V&n`&`ZOr%TrsNts#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkNyV&n`Or%Trs! `s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! gT&n`&bZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! }V&n`&_ZOw%Twx!!dx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!!iV&n`Ow%Twx!#Ox#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!#VT&n`&aZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!#oe&n`&YS%uZOr%Trs!%Qsw%Twx!&px!Q%T!Q![JU![!c%T!c!tJU!t!u!(`!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#g!(`#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!%XV&n`&dZOr%Trs!%ns#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!%sV&n`Or%Trs!&Ys#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&aT&n`&fZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&wV&n`&cZOw%Twx!'^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!'cV&n`Ow%Twx!'xx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!(PT&n`&eZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!(ia&n`&YS%uZOr%Trs!)nsw%Twx!+^x!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!)uV&n`&hZOr%Trs!*[s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*aV&n`Or%Trs!*vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*}T&n`&jZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!+eV&n`&gZOw%Twx!+zx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,PV&n`Ow%Twx!,fx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,mT&n`&iZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!-Vi&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!dJU!d!eLx!e!hJU!h!i!(`!i!}JU!}#R%T#R#SJU#S#T%T#T#UJU#U#VLx#V#YJU#Y#Z!(`#Z#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUo!.}a&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!0ZT!XZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc!0qT!WR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj!1XV%kQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!1sO!]~k!1zV%jR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!2fO![~i!2mT%tX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T",
      tokenizers: [legacyPrint, indentation, newlines, strings, 0, 1, 2, 3, 4],
      topRules: {"Script":[0,5]},
      specialized: [{term: 221, get: (value) => spec_identifier[value] || -1}],
      tokenPrec: 7668
    });

    const cache = /*@__PURE__*/new NodeWeakMap();
    const ScopeNodes = /*@__PURE__*/new Set([
        "Script", "Body",
        "FunctionDefinition", "ClassDefinition", "LambdaExpression",
        "ForStatement", "MatchClause"
    ]);
    function defID(type) {
        return (node, def, outer) => {
            if (outer)
                return false;
            let id = node.node.getChild("VariableName");
            if (id)
                def(id, type);
            return true;
        };
    }
    const gatherCompletions = {
        FunctionDefinition: /*@__PURE__*/defID("function"),
        ClassDefinition: /*@__PURE__*/defID("class"),
        ForStatement(node, def, outer) {
            if (outer)
                for (let child = node.node.firstChild; child; child = child.nextSibling) {
                    if (child.name == "VariableName")
                        def(child, "variable");
                    else if (child.name == "in")
                        break;
                }
        },
        ImportStatement(_node, def) {
            var _a, _b;
            let { node } = _node;
            let isFrom = ((_a = node.firstChild) === null || _a === void 0 ? void 0 : _a.name) == "from";
            for (let ch = node.getChild("import"); ch; ch = ch.nextSibling) {
                if (ch.name == "VariableName" && ((_b = ch.nextSibling) === null || _b === void 0 ? void 0 : _b.name) != "as")
                    def(ch, isFrom ? "variable" : "namespace");
            }
        },
        AssignStatement(node, def) {
            for (let child = node.node.firstChild; child; child = child.nextSibling) {
                if (child.name == "VariableName")
                    def(child, "variable");
                else if (child.name == ":" || child.name == "AssignOp")
                    break;
            }
        },
        ParamList(node, def) {
            for (let prev = null, child = node.node.firstChild; child; child = child.nextSibling) {
                if (child.name == "VariableName" && (!prev || !/\*|AssignOp/.test(prev.name)))
                    def(child, "variable");
                prev = child;
            }
        },
        CapturePattern: /*@__PURE__*/defID("variable"),
        AsPattern: /*@__PURE__*/defID("variable"),
        __proto__: null
    };
    function getScope(doc, node) {
        let cached = cache.get(node);
        if (cached)
            return cached;
        let completions = [], top = true;
        function def(node, type) {
            let name = doc.sliceString(node.from, node.to);
            completions.push({ label: name, type });
        }
        node.cursor(IterMode.IncludeAnonymous).iterate(node => {
            if (node.name) {
                let gather = gatherCompletions[node.name];
                if (gather && gather(node, def, top) || !top && ScopeNodes.has(node.name))
                    return false;
                top = false;
            }
            else if (node.to - node.from > 8192) {
                // Allow caching for bigger internal nodes
                for (let c of getScope(doc, node.node))
                    completions.push(c);
                return false;
            }
        });
        cache.set(node, completions);
        return completions;
    }
    const Identifier = /^[\w\xa1-\uffff][\w\d\xa1-\uffff]*$/;
    const dontComplete = ["String", "FormatString", "Comment", "PropertyName"];
    /**
    Completion source that looks up locally defined names in
    Python code.
    */
    function localCompletionSource(context) {
        let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
        if (dontComplete.indexOf(inner.name) > -1)
            return null;
        let isWord = inner.name == "VariableName" ||
            inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));
        if (!isWord && !context.explicit)
            return null;
        let options = [];
        for (let pos = inner; pos; pos = pos.parent) {
            if (ScopeNodes.has(pos.name))
                options = options.concat(getScope(context.state.doc, pos));
        }
        return {
            options,
            from: isWord ? inner.from : context.pos,
            validFor: Identifier
        };
    }
    const globals$1 = /*@__PURE__*/[
        "__annotations__", "__builtins__", "__debug__", "__doc__", "__import__", "__name__",
        "__loader__", "__package__", "__spec__",
        "False", "None", "True"
    ].map(n => ({ label: n, type: "constant" })).concat(/*@__PURE__*/[
        "ArithmeticError", "AssertionError", "AttributeError", "BaseException", "BlockingIOError",
        "BrokenPipeError", "BufferError", "BytesWarning", "ChildProcessError", "ConnectionAbortedError",
        "ConnectionError", "ConnectionRefusedError", "ConnectionResetError", "DeprecationWarning",
        "EOFError", "Ellipsis", "EncodingWarning", "EnvironmentError", "Exception", "FileExistsError",
        "FileNotFoundError", "FloatingPointError", "FutureWarning", "GeneratorExit", "IOError",
        "ImportError", "ImportWarning", "IndentationError", "IndexError", "InterruptedError",
        "IsADirectoryError", "KeyError", "KeyboardInterrupt", "LookupError", "MemoryError",
        "ModuleNotFoundError", "NameError", "NotADirectoryError", "NotImplemented", "NotImplementedError",
        "OSError", "OverflowError", "PendingDeprecationWarning", "PermissionError", "ProcessLookupError",
        "RecursionError", "ReferenceError", "ResourceWarning", "RuntimeError", "RuntimeWarning",
        "StopAsyncIteration", "StopIteration", "SyntaxError", "SyntaxWarning", "SystemError",
        "SystemExit", "TabError", "TimeoutError", "TypeError", "UnboundLocalError", "UnicodeDecodeError",
        "UnicodeEncodeError", "UnicodeError", "UnicodeTranslateError", "UnicodeWarning", "UserWarning",
        "ValueError", "Warning", "ZeroDivisionError"
    ].map(n => ({ label: n, type: "type" }))).concat(/*@__PURE__*/[
        "bool", "bytearray", "bytes", "classmethod", "complex", "float", "frozenset", "int", "list",
        "map", "memoryview", "object", "range", "set", "staticmethod", "str", "super", "tuple", "type"
    ].map(n => ({ label: n, type: "class" }))).concat(/*@__PURE__*/[
        "abs", "aiter", "all", "anext", "any", "ascii", "bin", "breakpoint", "callable", "chr",
        "compile", "delattr", "dict", "dir", "divmod", "enumerate", "eval", "exec", "exit", "filter",
        "format", "getattr", "globals", "hasattr", "hash", "help", "hex", "id", "input", "isinstance",
        "issubclass", "iter", "len", "license", "locals", "max", "min", "next", "oct", "open",
        "ord", "pow", "print", "property", "quit", "repr", "reversed", "round", "setattr", "slice",
        "sorted", "sum", "vars", "zip"
    ].map(n => ({ label: n, type: "function" })));
    const snippets$1 = [
        /*@__PURE__*/snippetCompletion("def ${name}(${params}):\n\t${}", {
            label: "def",
            detail: "function",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("for ${name} in ${collection}:\n\t${}", {
            label: "for",
            detail: "loop",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("while ${}:\n\t${}", {
            label: "while",
            detail: "loop",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("try:\n\t${}\nexcept ${error}:\n\t${}", {
            label: "try",
            detail: "/ except block",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("if ${}:\n\t\n", {
            label: "if",
            detail: "block",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("if ${}:\n\t${}\nelse:\n\t${}", {
            label: "if",
            detail: "/ else block",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("class ${name}:\n\tdef __init__(self, ${params}):\n\t\t\t${}", {
            label: "class",
            detail: "definition",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("import ${module}", {
            label: "import",
            detail: "statement",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("from ${module} import ${names}", {
            label: "from",
            detail: "import",
            type: "keyword"
        })
    ];
    /**
    Autocompletion for built-in Python globals and keywords.
    */
    const globalCompletion$1 = /*@__PURE__*/ifNotIn(dontComplete, /*@__PURE__*/completeFromList(/*@__PURE__*/globals$1.concat(snippets$1)));

    function innerBody(context) {
        let { node, pos } = context;
        let lineIndent = context.lineIndent(pos, -1);
        let found = null;
        for (;;) {
            let before = node.childBefore(pos);
            if (!before) {
                break;
            }
            else if (before.name == "Comment") {
                pos = before.from;
            }
            else if (before.name == "Body" || before.name == "MatchBody") {
                if (context.baseIndentFor(before) + context.unit <= lineIndent)
                    found = before;
                node = before;
            }
            else if (before.name == "MatchClause") {
                node = before;
            }
            else if (before.type.is("Statement")) {
                node = before;
            }
            else {
                break;
            }
        }
        return found;
    }
    function indentBody(context, node) {
        let base = context.baseIndentFor(node);
        let line = context.lineAt(context.pos, -1), to = line.from + line.text.length;
        // Don't consider blank, deindented lines at the end of the
        // block part of the block
        if (/^\s*($|#)/.test(line.text) &&
            context.node.to < to + 100 &&
            !/\S/.test(context.state.sliceDoc(to, context.node.to)) &&
            context.lineIndent(context.pos, -1) <= base)
            return null;
        // A normally deindenting keyword that appears at a higher
        // indentation than the block should probably be handled by the next
        // level
        if (/^\s*(else:|elif |except |finally:|case\s+[^=:]+:)/.test(context.textAfter) && context.lineIndent(context.pos, -1) > base)
            return null;
        return base + context.unit;
    }
    /**
    A language provider based on the [Lezer Python
    parser](https://github.com/lezer-parser/python), extended with
    highlighting and indentation information.
    */
    const pythonLanguage = /*@__PURE__*/LRLanguage.define({
        name: "python",
        parser: /*@__PURE__*/parser.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    Body: context => {
                        var _a;
                        let body = /^\s*(#|$)/.test(context.textAfter) && innerBody(context) || context.node;
                        return (_a = indentBody(context, body)) !== null && _a !== void 0 ? _a : context.continue();
                    },
                    MatchBody: context => {
                        var _a;
                        let inner = innerBody(context);
                        return (_a = indentBody(context, inner || context.node)) !== null && _a !== void 0 ? _a : context.continue();
                    },
                    IfStatement: cx => /^\s*(else:|elif )/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),
                    "ForStatement WhileStatement": cx => /^\s*else:/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),
                    TryStatement: cx => /^\s*(except[ :]|finally:|else:)/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),
                    MatchStatement: cx => {
                        if (/^\s*case /.test(cx.textAfter))
                            return cx.baseIndent + cx.unit;
                        return cx.continue();
                    },
                    "TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression": /*@__PURE__*/delimitedIndent({ closing: ")" }),
                    "DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression": /*@__PURE__*/delimitedIndent({ closing: "}" }),
                    "ArrayExpression ArrayComprehensionExpression": /*@__PURE__*/delimitedIndent({ closing: "]" }),
                    MemberExpression: cx => cx.baseIndent + cx.unit,
                    "String FormatString": () => null,
                    Script: context => {
                        var _a;
                        let inner = innerBody(context);
                        return (_a = (inner && indentBody(context, inner))) !== null && _a !== void 0 ? _a : context.continue();
                    },
                }),
                /*@__PURE__*/foldNodeProp.add({
                    "ArrayExpression DictionaryExpression SetExpression TupleExpression": foldInside,
                    Body: (node, state) => ({ from: node.from + 1, to: node.to - (node.to == state.doc.length ? 0 : 1) }),
                    "String FormatString": (node, state) => ({ from: state.doc.lineAt(node.from).to, to: node.to })
                })
            ],
        }),
        languageData: {
            closeBrackets: {
                brackets: ["(", "[", "{", "'", '"', "'''", '"""'],
                stringPrefixes: ["f", "fr", "rf", "r", "u", "b", "br", "rb",
                    "F", "FR", "RF", "R", "U", "B", "BR", "RB"]
            },
            commentTokens: { line: "#" },
            // Indent logic logic are triggered upon below input patterns
            indentOnInput: /^\s*([\}\]\)]|else:|elif |except |finally:|case\s+[^:]*:?)$/,
        }
    });
    /**
    Python language support.
    */
    function python() {
        return new LanguageSupport(pythonLanguage, [
            pythonLanguage.data.of({ autocomplete: localCompletionSource }),
            pythonLanguage.data.of({ autocomplete: globalCompletion$1 }),
        ]);
    }

    // Colors from https://www.nordtheme.com/docs/colors-and-palettes
    // Polar Night
    const base00 = '#2e3440', // black
    base01 = '#3b4252', // dark grey
    base02 = '#434c5e', base03 = '#4c566a'; // grey
    // Snow Storm
    const //base04 = '#d8dee9', // grey
    base05 = '#e5e9f0', // off white
    base06 = '#eceff4'; // white
    // Frost
    const base07 = '#8fbcbb', // moss green
    base08 = '#88c0d0'; // ice blue
     // deep blue
    // Aurora
    const base0D = '#ebcb8b', // yellow
    base0F = '#b48ead'; // purple
    const invalid = '#d30102', darkBackground = base06, highlightBackground = darkBackground, background = 'transparent', tooltipBackground = base05, selection = darkBackground, cursor = base01;
    // tunepad light
    const tbase = '#111b27';
    const tkeyword = 'rgb(133, 57, 216)';
    const tvariable = tbase;
    const tnumber = '#7d6600';
    const tboolean = '#7d6600';
    const tstring = '#237800';
    const tfuncname = '#8600c6';
    const tclassname = '#005c99';
    const toperator = tbase; //'rgb(133, 57, 216)'; //'#aa4d00';
    const tpunctuation = tbase;
    const tcomment = 'rgb(130, 134, 139)';
    /// The editor theme styles for Basic Light.
    const basicLightTheme = EditorView.theme({
        '&': {
            color: base00,
            backgroundColor: background
        },
        '.cm-content': {
            caretColor: cursor
        },
        '.cm-cursor, .cm-dropCursor': {
            borderLeftColor: cursor,
            borderLeftWidth: '2px'
        },
        '&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection': { backgroundColor: selection },
        '.cm-panels': { backgroundColor: darkBackground, color: base03 },
        '.cm-panels.cm-panels-top': { borderBottom: '2px solid black' },
        '.cm-panels.cm-panels-bottom': { borderTop: '2px solid black' },
        '.cm-searchMatch': {
            backgroundColor: '#72a1ff59',
            outline: `1px solid ${base03}`
        },
        '.cm-searchMatch.cm-searchMatch-selected': {
            backgroundColor: base05
        },
        '.cm-activeLine': {
            outline: 'none',
            backgroundColor: '#fff'
        },
        '.cm-selectionMatch': { backgroundColor: 'pink' },
        '&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket': {
            //outline: `1px solid ${base03}`
            backgroundColor: '#fff6'
        },
        '&.cm-focused .cm-matchingBracket': {
            backgroundColor: base06
        },
        '.cm-gutters': {
            backgroundColor: 'rgb(237, 241, 251)',
            paddingLeft: '5px',
            color: '#898989',
            border: 'none',
            borderRight: '1px solid #aaa'
        },
        '.cm-activeLineGutter': {
            backgroundColor: 'transparent' //'#0001'
        },
        '.cm-foldPlaceholder': {
            backgroundColor: 'transparent',
            border: 'none',
            color: '#ddd'
        },
        '.cm-tooltip': {
            border: 'none',
            backgroundColor: tooltipBackground
        },
        '.cm-tooltip .cm-tooltip-arrow:before': {
            borderTopColor: 'transparent',
            borderBottomColor: 'transparent'
        },
        '.cm-tooltip .cm-tooltip-arrow:after': {
            borderTopColor: tooltipBackground,
            borderBottomColor: tooltipBackground
        },
        '.cm-tooltip-autocomplete': {
            '& > ul > li[aria-selected]': {
                backgroundColor: highlightBackground,
                color: base03
            }
        }
    }, { dark: false });
    /// The highlighting style for code in the Basic Light theme.
    const tunePadLightHighlightStyle = HighlightStyle.define([
        { tag: tags.keyword, color: tkeyword },
        {
            tag: [tags.name, tags.deleted, tags.character, tags.propertyName, tags.macroName],
            color: tbase
        },
        { tag: [tags.variableName], color: tvariable },
        { tag: [tags.function(tags.variableName)], color: tvariable },
        { tag: [tags.labelName], color: tvariable },
        {
            tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
            color: tnumber
        },
        { tag: [tags.definition(tags.name), tags.separator], color: tfuncname },
        { tag: [tags.brace], color: tpunctuation },
        {
            tag: [tags.annotation],
            color: invalid
        },
        {
            tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
            color: tnumber
        },
        {
            tag: [tags.typeName, tags.className],
            color: tclassname
        },
        {
            tag: [tags.operator, tags.operatorKeyword],
            color: toperator
        },
        {
            tag: [tags.tagName],
            color: base0F
        },
        {
            tag: [tags.squareBracket],
            color: tpunctuation
        },
        {
            tag: [tags.angleBracket],
            color: tpunctuation
        },
        {
            tag: [tags.attributeName],
            color: base0D
        },
        {
            tag: [tags.regexp],
            color: tstring
        },
        {
            tag: [tags.quote],
            color: tstring
        },
        { tag: [tags.string], color: tstring },
        {
            tag: tags.link,
            color: base07,
            textDecoration: 'underline',
            textUnderlinePosition: 'under'
        },
        {
            tag: [tags.url, tags.escape, tags.special(tags.string)],
            color: tstring
        },
        { tag: [tags.meta], color: base08 },
        { tag: [tags.comment], color: tcomment, fontStyle: 'italic' },
        { tag: tags.strong, fontWeight: 'bold', color: tbase },
        { tag: tags.emphasis, fontStyle: 'italic', color: tbase },
        { tag: tags.strikethrough, textDecoration: 'line-through' },
        { tag: tags.heading, fontWeight: 'bold', color: tbase },
        { tag: tags.special(tags.heading1), fontWeight: 'bold', color: tbase },
        { tag: tags.heading1, fontWeight: 'bold', color: tbase },
        {
            tag: [tags.heading2, tags.heading3, tags.heading4],
            fontWeight: 'bold',
            color: tbase
        },
        {
            tag: [tags.heading5, tags.heading6],
            color: tbase
        },
        { tag: [tags.atom, tags.bool, tags.special(tags.variableName)], color: tboolean },
        {
            tag: [tags.processingInstruction, tags.inserted],
            color: base07
        },
        {
            tag: [tags.contentSeparator],
            color: tbase
        },
        { tag: tags.invalid, color: base02, borderBottom: `1px dotted ${invalid}` }
    ]);
    /// Extension to enable the Basic Light theme (both the editor theme and
    /// the highlight style).
    const tunePadLight = [
        basicLightTheme,
        syntaxHighlighting(tunePadLightHighlightStyle)
    ];

    const coral = "#e06c75";
    const invalid$1 = "#ffffff";
    const ivory = "#abb2bf";
    const stone = "#7d8799";
    const violet = "#f6b";
    const darkBackground$1 = "#21252b";
    const background$1 = "transparent"; //"#2E303F"
    const tooltipBackground$1 = "transparent"; //"#353a42"
    const selection$1 = "rgb(56 69 99)";
    const cursor$1 = "#528bff";
    const tunePadDarkTheme = EditorView.theme({
        "&": {
            color: ivory,
            backgroundColor: background$1
        },
        ".cm-content": {
            caretColor: cursor$1
        },
        ".cm-cursor, .cm-dropCursor": { borderLeftColor: cursor$1 },
        "&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": { backgroundColor: selection$1 },
        ".cm-panels": { backgroundColor: darkBackground$1, color: ivory },
        ".cm-panels.cm-panels-top": { borderBottom: "2px solid black" },
        ".cm-panels.cm-panels-bottom": { borderTop: "2px solid black" },
        ".cm-searchMatch": {
            backgroundColor: "#72a1ff59",
            outline: "1px solid #457dff"
        },
        ".cm-searchMatch.cm-searchMatch-selected": {
            backgroundColor: "#6199ff2f"
        },
        ".cm-activeLine": { backgroundColor: selection$1 },
        ".cm-selectionMatch": { backgroundColor: "#aafe661a" },
        "&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
            backgroundColor: "#bad0f847"
        },
        ".cm-gutters": {
            backgroundColor: 'rgba(255, 255, 255, 0.05)',
            color: stone,
            paddingLeft: '5px',
            border: "none",
            borderRight: '1px solid #fff2'
        },
        ".cm-activeLineGutter": {
            backgroundColor: 'transparent'
        },
        ".cm-foldPlaceholder": {
            backgroundColor: "transparent",
            border: "none",
            color: "#ddd"
        },
        ".cm-tooltip": {
            border: "none",
            backgroundColor: tooltipBackground$1,
            color: "#222"
        },
        ".cm-tooltip .cm-tooltip-arrow:before": {
            borderTopColor: "transparent",
            borderBottomColor: "transparent"
        },
        ".cm-tooltip .cm-tooltip-arrow:after": {
            borderTopColor: tooltipBackground$1,
            borderBottomColor: tooltipBackground$1
        },
        ".cm-tooltip-autocomplete": {
            "& > ul > li[aria-selected]": {
                backgroundColor: "#d9def5", //highlightBackground$1,
                color: "#222" //ivory
            }
        }
    }, { dark: true });
    /**
    The highlighting style for code in the One Dark theme.
    */
    const tunePadDarkHighlightStyle = HighlightStyle.define([
        {
            tag: tags.keyword,
            color: violet
        },
        {
            tag: [tags.name, tags.deleted, tags.character, tags.propertyName, tags.macroName],
            color: coral
        },
        {
            tag: [/*@__PURE__*/ tags.function(tags.variableName), tags.labelName],
            color: '#2f9ff7' // malibu
        },
        {
            tag: [tags.color, /*@__PURE__*/ tags.constant(tags.name), /*@__PURE__*/ tags.standard(tags.name)],
            color: '#2f9ff7' //whiskey
        },
        {
            tag: [/*@__PURE__*/ tags.definition(tags.name), tags.separator],
            color: 'rgba(233, 237, 237, 1)' //ivory
        },
        {
            tag: [tags.typeName, tags.className, tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
            color: '#e3595f' //chalky
        },
        {
            tag: [tags.operator, tags.operatorKeyword, tags.url, tags.escape, tags.regexp, tags.link, /*@__PURE__*/ tags.special(tags.string)],
            color: '#fff' //cyan
        },
        {
            tag: [tags.meta, tags.comment],
            color: '#9797a7' //stone
        },
        {
            tag: tags.strong,
            fontWeight: "bold"
        },
        {
            tag: tags.emphasis,
            fontStyle: "italic"
        },
        {
            tag: tags.strikethrough,
            textDecoration: "line-through"
        },
        {
            tag: tags.link,
            color: stone,
            textDecoration: "underline"
        },
        {
            tag: tags.heading,
            fontWeight: "bold",
            color: coral
        },
        {
            tag: [tags.atom, tags.bool, /*@__PURE__*/ tags.special(tags.variableName)],
            color: '#e3595f' //whiskey
        },
        {
            tag: [tags.processingInstruction, tags.string, tags.inserted],
            color: '#C3E88D' //sage
        },
        {
            tag: tags.invalid,
            color: invalid$1
        },
    ]);
    /**
    Extension to enable the One Dark theme (both the editor theme and
    the highlight style).
    */
    const tunePadDark = [tunePadDarkTheme, syntaxHighlighting(tunePadDarkHighlightStyle)];

    const globals = [
        /*
        "__annotations__", "__builtins__", "__debug__", "__doc__", "__import__", "__name__",
        "__loader__", "__package__", "__spec__",
        */
        "False", "None", "True"
    ].map(n => ({ label: n, type: "constant" })).concat([
        /*
          "ArithmeticError", "AssertionError", "AttributeError", "BaseException", "BlockingIOError",
          "BrokenPipeError", "BufferError", "BytesWarning", "ChildProcessError", "ConnectionAbortedError",
          "ConnectionError", "ConnectionRefusedError", "ConnectionResetError", "DeprecationWarning",
          "EOFError", "Ellipsis", "EncodingWarning", "EnvironmentError", "Exception", "FileExistsError",
          "FileNotFoundError", "FloatingPointError", "FutureWarning", "GeneratorExit", "IOError",
          "ImportError", "ImportWarning", "IndentationError", "IndexError", "InterruptedError",
          "IsADirectoryError", "KeyError", "KeyboardInterrupt", "LookupError", "MemoryError",
          "ModuleNotFoundError", "NameError", "NotADirectoryError", "NotImplemented", "NotImplementedError",
          "OSError", "OverflowError", "PendingDeprecationWarning", "PermissionError", "ProcessLookupError",
          "RecursionError", "ReferenceError", "ResourceWarning", "RuntimeError", "RuntimeWarning",
          "StopAsyncIteration", "StopIteration", "SyntaxError", "SyntaxWarning", "SystemError",
          "SystemExit", "TabError", "TimeoutError", "TypeError", "UnboundLocalError", "UnicodeDecodeError",
          "UnicodeEncodeError", "UnicodeError", "UnicodeTranslateError", "UnicodeWarning", "UserWarning",
          "ValueError", "Warning", "ZeroDivisionError"
        ].map(n => ({label: n, type: "type"}))).concat([
        */
        "bool", "bytearray", "bytes", "complex", "float", "int", "list",
        "map", "object", "range", "set", "str", "super", "tuple", "type"
    ].map(n => ({ label: n, type: "class" }))).concat([
        /*
          "bool", "bytearray", "bytes", "classmethod", "complex", "float", "frozenset", "int", "list",
          "map", "memoryview", "object", "range", "set", "staticmethod", "str", "super", "tuple", "type"
        ].map(n => ({label: n, type: "class"}))).concat([
        */
        "abs", "any", "all", "any", "bin", "chr", "callable", "delattr", "dict", "dir",
        "divmod", "enumerate", "eval", "exec", "exit", "filter",
        "format", "getattr", "globals", "hasattr", "hash", "hex", "id", "isinstance",
        "iter", "len", "locals", "max", "min", "next", "oct", "open",
        "ord", "pow", "print", "property", "repr", "reversed", "round", "setattr", "slice",
        "sorted", "sum", "vars", "zip"
        /*
        ].map(n => ({label: n, type: "class"}))).concat([
          "abs", "aiter", "all", "anext", "any", "ascii", "bin", "breakpoint", "callable", "chr",
          "compile", "delattr", "dict", "dir", "divmod", "enumerate", "eval", "exec", "exit", "filter",
          "format", "getattr", "globals", "hasattr", "hash", "help", "hex", "id", "input", "isinstance",
          "issubclass", "iter", "len", "license", "locals", "max", "min", "next", "oct", "open",
          "ord", "pow", "print", "property", "quit", "repr", "reversed", "round", "setattr", "slice",
          "sorted", "sum", "vars", "zip"
        */
    ].map(n => ({ label: n, type: "function" })));
    const snippets = [
        snippetCompletion("def ${name}(${params}):\n\t${}", {
            label: "def",
            detail: "function",
            type: "keyword"
        }),
        snippetCompletion("for i in range(${count}):\n\t${}", {
            label: "for",
            detail: "counting loop",
            type: "keyword"
        }),
        snippetCompletion("for ${name} in ${collection}:\n\t${}", {
            label: "for",
            detail: "loop",
            type: "keyword"
        }),
        snippetCompletion("while ${}:\n\t${}", {
            label: "while",
            detail: "loop",
            type: "keyword"
        }),
        snippetCompletion("try:\n\t${}\nexcept ${error}:\n\t${}", {
            label: "try",
            detail: "/ except block",
            type: "keyword"
        }),
        snippetCompletion("if ${}:\n\t\n", {
            label: "if",
            detail: "block",
            type: "keyword"
        }),
        snippetCompletion("if ${}:\n\t${}\nelse:\n\t${}", {
            label: "if",
            detail: "/ else block",
            type: "keyword"
        }),
        snippetCompletion("class ${name}:\n\tdef __init__(self, ${params}):\n\t\t\t${}", {
            label: "class",
            detail: "definition",
            type: "keyword"
        }),
        snippetCompletion("import ${module}", {
            label: "import",
            detail: "statement",
            type: "keyword"
        }),
        snippetCompletion("from ${module} import ${names}", {
            label: "from",
            detail: "import",
            type: "keyword"
        }),
        snippetCompletion("playNote(${note}, beats=1)", {
            label: "playNote",
            detail: "play a note",
            type: "function"
        }),
        snippetCompletion("playNote([${note1}, ${note2}, ${note3}], beats=1)", {
            label: "playNote",
            detail: "play a chord",
            type: "function"
        }),
        snippetCompletion("playSound(${sound}, beats=1)", {
            label: "playSound",
            detail: "play a pre-recorded sound",
            type: "function"
        }),
        snippetCompletion("rest(${beats})", {
            label: "rest",
            detail: "rest",
            type: "function"
        }),
        snippetCompletion("rewind(${beats})", {
            label: "rewind",
            detail: "rewind the playhead",
            type: "function"
        }),
        snippetCompletion("fastForward(${beats})", {
            label: "fastForward",
            detail: "move playhead forward",
            type: "function"
        }),
        snippetCompletion("moveTo(${beats})", {
            label: "moveTo",
            detail: "move the playhead",
            type: "function"
        }),
        snippetCompletion("getPlayhead()", {
            label: "getPlayhead",
            detail: "get the value of the playhead",
            type: "function"
        }),
        snippetCompletion("getBeat()", {
            label: "getBeat",
            detail: "get the current beat",
            type: "function"
        }),
        snippetCompletion("getMeasure()", {
            label: "getMeasure",
            detail: "get the current measure",
            type: "function"
        }),
        snippetCompletion("with lowpass(${frequency}):\n\t", {
            label: "with lowpass",
            detail: "add a lowpass filter effect",
            type: "block"
        }),
        snippetCompletion("with highpass(${frequency}):\n\t", {
            label: "with highpass",
            detail: "add a highpass filter effect",
            type: "block"
        }),
        snippetCompletion("with transpose(${steps}):\n\t", {
            label: "with transpose",
            detail: "change notes up or down",
            type: "block"
        }),
        snippetCompletion("with bend(${cents}):\n\t", {
            label: "with bend",
            detail: "pitch up or down",
            type: "block"
        }),
        snippetCompletion("with pan(${value}):\n\t", {
            label: "with pan",
            detail: "pan left or right (-1.0 to 1.0)",
            type: "block"
        }),
        snippetCompletion("with gain(${value}):\n\t", {
            label: "with gain",
            detail: "increase or decrease volume",
            type: "block"
        }),
    ];
    /// Autocompletion for built-in Python globals and keywords.
    const globalCompletion = completeFromList(globals.concat(snippets));

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * TunePad python code editor
     *
     * ```html
     * <python-editor
     *    readonly = "{{ true | false }}"
     *    theme = "{{ dark | light }}"
     *    font-size = "14px">
     *
     * # default python code goes here...
     * for i in range(30):
     *     playNote(30)
     * </python-editor>
     * ```
     */
    class PythonEditor extends HTMLElement {
        static DefineElement() {
            if (customElements.get('python-editor') === undefined) {
                customElements.define("python-editor", PythonEditor);
            }
        }
        get code() { return this.view?.state.doc.toString() || ''; }
        set initialContent(s) { this._initialContent = s; }
        constructor() {
            super();
            // color theme ( "dark" | "light" )
            this.theme = "dark";
            this.themeState = new Compartment();
            // readonly?
            this.readonly = false;
            this.readonlyState = new Compartment();
            // font-size
            this.fontSize = "14px";
            this.fontSizeState = new Compartment();
            this.language = python();
            /**
             * Listen for user events that might trigger a recompile
             */
            this._lines = -1;
            this._lineAt = -1;
            this.eventHandlers = EditorView.domEventHandlers({
                keyup: (event, view) => {
                    let fired = false;
                    // Line count changed
                    let lines = view.state.doc.lines;
                    if (this._lines >= 0 && lines > this._lines) {
                        fired = true;
                        this.emitEvent("lines-inserted");
                    }
                    else if (this._lines >= 0 && lines < this._lines) {
                        fired = true;
                        this.emitEvent("lines-removed");
                    }
                    this._lines = lines;
                    // Cursor moved to a different line
                    let pos = view.state.selection.main.head;
                    let lineAt = view.state.doc.lineAt(pos).number;
                    if (this._lineAt >= 0 && this._lineAt !== lineAt && !fired) {
                        this.emitEvent("cursor-moved");
                    }
                    this._lineAt = lineAt;
                },
                pointerup: (event, view) => {
                    // check to see if the cursor moved to a new line
                    let pos = view.state.selection.main.head;
                    let lineAt = view.state.doc.lineAt(pos).number;
                    if (this._lineAt >= 0 && this._lineAt !== lineAt) {
                        this.emitEvent("cursor-moved");
                    }
                    this._lineAt = lineAt;
                },
                // Editor blur
                blur: (event, view) => {
                    this._lines = -1;
                    this._lineAt = -1;
                    this.emitEvent("editor-blur");
                }
            });
            // our set of codemirror exensions
            this.extensions = [
                infoGutter,
                basicSetup,
                this.language,
                keymap.of([indentWithTab]),
                this.eventHandlers,
                EditorView.updateListener.of(update => {
                    if (update.docChanged) {
                        this.emitEvent('content-changed');
                    }
                }),
                indentUnit.of("    "),
                autocompletion({ override: [globalCompletion] })
            ];
            this.root = this.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(sheet$2);
            this.root.innerHTML = html$2;
            this.addClass('.codemirror-wraper', this.theme);
        }
        async connectedCallback() {
            await this.waitForWindowLoad();
            const defaultCode = this.innerHTML
                //.trim()
                .split('\n')
                .map((line) => line.startsWith('/') ? line.substring(1) : line) // ugly markdown hack
                .join('\n')
                .replaceAll('&lt;', '<')
                .replaceAll('&gt;', '>');
            //.concat('\n'.repeat(8));  // end with 8 lines of white space
            const extensions = [
                ...this.extensions,
                this.fontSizeState.of(this.generateFontSizeTheme(this.fontSize)),
                this.readonlyState.of(EditorState.readOnly.of(this.readonly)),
                this.themeState.of(this.theme === 'dark' ? [tunePadDark] : [tunePadLight]),
            ];
            //if (this.yjsBinding) extensions.push(this.yjsBinding);
            this.state = EditorState.create({
                extensions: extensions,
                doc: this._initialContent ?? defaultCode
            });
            const parent = this.root.querySelector('#codemirror-editor');
            this.view = new EditorView({ state: this.state, parent: parent });
        }
        disconnectedCallback() {
            this.view?.destroy();
        }
        attributeChangedCallback(name, oldValue, newValue) {
            if (newValue === oldValue)
                return;
            if (name === 'readonly') {
                this.readonly = (newValue === 'true');
                this.view?.dispatch({
                    effects: this.readonlyState.reconfigure(EditorState.readOnly.of(this.readonly))
                });
            }
            else if (name === 'theme' && ['light', 'dark'].includes(newValue)) {
                this.removeClass('.codemirror-wraper', this.theme);
                this.theme = newValue;
                this.addClass('.codemirror-wraper', this.theme);
                this.view?.dispatch({
                    effects: this.themeState.reconfigure(newValue === 'dark' ? [tunePadDark] : [tunePadLight])
                });
            }
            else if (name === 'font-size') {
                this.fontSize = newValue;
                this.view?.dispatch({
                    effects: this.fontSizeState.reconfigure(this.generateFontSizeTheme(newValue))
                });
            }
        }
        /**
         * Replace all text content
         */
        replaceCode(code) {
            this.view?.dispatch({
                changes: {
                    from: 0,
                    to: this.view.state.doc.length,
                    insert: code
                }
            });
        }
        insertCodeInNewLine(code) {
            if (this.view) {
                let pos = this.view.state.selection.main.head;
                let line = this.view.state.doc.lineAt(pos);
                this.view.dispatch({ selection: { anchor: line.to } });
                insertNewlineAndIndent({
                    state: this.view.state,
                    dispatch: transaction => { this.view.update([transaction]); }
                });
                this.view.dispatch({ changes: { from: this.view.state.selection.main.head, insert: code } });
                cursorLineEnd(this.view);
            }
        }
        /**
         * Turn on collaborative editing by binding to a Y.Text object
         */
        /// Had to change the signature to avoid importing Y.js 
        //public bindCollaboration(ytext : any, awareness : any) {
        bindCollaboration(collab) {
            this.yjsBinding = collab;
        }
        /**
         * Set markers in the gutter. Will first clear existing markers of this type
         */
        setMarkers(marks, type) {
            this.clearMarkers(type);
            marks.forEach((mark) => {
                this.setMarker(mark, type);
            });
        }
        /**
         * Clear all gutter markers of a given type
         */
        clearMarkers(type) {
            this.view?.dispatch({ effects: infoEffect.of({ pos: -1, type: type, message: '' }) });
        }
        /**
         * Add a single gutter marker of a given type
         */
        setMarker(mark, type) {
            if (this.view && mark.line > 0 && mark.line <= this.view.state.doc.lines) {
                const line = this.view?.state.doc.line(mark.line);
                if (line) {
                    this.view?.dispatch({ effects: infoEffect.of({
                            pos: line.from,
                            type: type,
                            message: (mark.message || '')
                        }) });
                }
            }
        }
        /**
         * A list of errors to show below the editor
         */
        set errors(errs) {
            this.setHTML('#errors', '');
            errs.forEach((err) => {
                let m = `<b>${err.name}:</b> ${err.message.replaceAll('<', '&lt;')}`;
                if (err.line > 0)
                    m += ` on line ${err.line}`;
                const el = document.createElement('python-message');
                el.setAttribute('type', 'error');
                if (err.details)
                    el.setAttribute('details', err.details);
                el.innerHTML = m;
                this.root.querySelector('#errors')?.appendChild(el);
            });
            // error markers in the editor gutter
            const markers = errs
                .filter(err => err.line > 0)
                .map((err) => {
                return { line: err.line, message: `${err.name}: ${err.message}` };
            });
            this.setMarkers(markers, 'error');
            this.classList.toggle('errors', errs.length > 0);
        }
        /**
         * A list of warnings to show below the editor
         */
        set warnings(warns) {
            this.setHTML('#warnings', '');
            warns.forEach((warn) => {
                let m = `<b>${warn.name}:</b> ${warn.message}`;
                if (warn.line > 0)
                    m += ` on line ${warn.line}.`;
                if (warn.details)
                    m += `<br>${warn.details}`;
                const el = document.createElement('python-message');
                el.setAttribute('type', 'warning');
                el.innerHTML = m;
                this.root.querySelector('#warnings')?.appendChild(el);
            });
            // warning markers in the editor gutter
            const markers = warns
                .filter(warn => warn.line > 0)
                .map(warn => {
                return { line: warn.line, message: `${warn.name}: ${warn.message}` };
            });
            this.setMarkers(markers, 'warning');
            this.classList.toggle('warnings', warns.length > 0);
        }
        /**
         * A list of unit test results to show below the editor
         */
        set unitTests(tests) {
            this.setHTML('#tests', '');
            tests.forEach((test) => {
                const el = document.createElement('python-message');
                el.setAttribute('type', 'test');
                el.setAttribute('pass', `${test.pass}`);
                el.innerHTML = test.message;
                this.root.querySelector('#tests')?.appendChild(el);
            });
        }
        /**
         * A list of messages to show below the editor
         */
        set messages(msgs) {
            this.setHTML('#messages', '');
            msgs.forEach((msg) => {
                const el = document.createElement('python-message');
                el.setAttribute('type', 'message');
                el.innerHTML = msg;
                this.root.querySelector('#messages')?.appendChild(el);
            });
        }
        /**
         * A list of print outputs to show below the editor
         */
        set output(out) {
            this.setHTML('#output', '');
            if (out.length > 0) {
                const el = document.createElement('python-output');
                el.innerHTML = out.join('\n');
                this.root.querySelector('#output')?.appendChild(el);
            }
        }
        emitEvent(evt) {
            const ce = new CustomEvent("codemirror-event", {
                bubbles: false,
                composed: true,
                detail: { event: evt }
            });
            this.root.host.dispatchEvent(ce);
        }
        blockDropped(pointerX, pointerY, code) {
            const r = this.getBoundingClientRect();
            const inside = pointerX >= r.left && pointerX <= r.right && pointerY >= r.top && pointerY <= r.bottom;
            if (inside) {
                this.insertBlockCode(pointerX, pointerY, code);
                this.emitEvent("lines-inserted");
            }
        }
        insertBlockCode(pointerX, pointerY, code) {
            if (this.view === undefined)
                return;
            const view = this.view;
            const insertPoint = view.posAtCoords({
                x: pointerX,
                y: pointerY
            }, false);
            const line = view.state.doc.lineAt(insertPoint);
            this.view.dispatch({ selection: { anchor: line.to } });
            if (line.text.trim().length > 0) {
                insertNewlineAndIndent({
                    state: view.state,
                    dispatch: transaction => { view.update([transaction]); }
                });
            }
            const lines = code.split('\n');
            for (let i = 0; i < lines.length; i++) {
                let l = lines[i];
                if (l.startsWith('\\t')) {
                    insertNewlineAndIndent({
                        state: view.state,
                        dispatch: transaction => { view.update([transaction]); }
                    });
                    cursorLineEnd(view);
                    l = l.substring(2);
                }
                else if (i > 0) {
                    insertNewlineKeepIndent({
                        state: view.state,
                        dispatch: transaction => { view.update([transaction]); }
                    });
                    cursorLineEnd(view);
                }
                view.dispatch({ changes: { from: view.state.selection.main.head, insert: l } });
                cursorLineEnd(view);
            }
        }
        generateFontSizeTheme(fontSize) {
            return EditorView.theme({
                '&': { fontSize: "16px" },
                ".cm-content": { fontSize },
                ".cm-gutters": { fontSize },
                ".cm-scroller": { fontSize },
            });
        }
        setHTML(selector, html) {
            const e = this.root.querySelector(selector);
            if (e)
                e.innerHTML = html;
        }
        addClass(selector, className) {
            const e = this.root.querySelector(selector);
            if (e)
                e.classList.add(className);
        }
        removeClass(selector, className) {
            const e = this.root.querySelector(selector);
            if (e)
                e.classList.remove(className);
        }
        async waitForWindowLoad() {
            return new Promise((resolve) => {
                if (document.readyState === 'complete') {
                    resolve();
                }
                else {
                    window.addEventListener('load', () => {
                        resolve();
                    });
                }
            });
        }
    }
    PythonEditor.observedAttributes = [
        "readonly", // boolean string, default is false   
        "theme", // "dark" | "light" (default is dark)
        "font-size" // e.g. 14px
    ];
    // Error Gutteer
    class InfoMarker extends GutterMarker {
        constructor(type, message) {
            super();
            this.message = '';
            this.type = '';
            this.message = message;
            this.type = type;
        }
        toDOM() {
            const div = document.createElement("div");
            div.innerText = "⬤";
            if (this.type === "error") {
                div.innerHTML = errorIcon;
                div.className = 'errorMarker';
                div.setAttribute("data-tooltip", this.message);
            }
            else if (this.type === "warning") {
                div.innerHTML = warnIcon;
                div.className = 'warningMarker';
                div.setAttribute("data-tooltip", this.message);
            }
            else if (this.type === "trace") {
                div.innerHTML = traceIcon;
                div.className = 'traceMarker';
            }
            return div;
        }
    }
    const infoEffect = StateEffect.define({
        map: (val, mapping) => ({ pos: mapping.mapPos(val.pos), type: val.type, message: val.message })
    });
    const infoState = StateField.define({
        create() { return RangeSet.empty; },
        update(set, transaction) {
            set = set.map(transaction.changes);
            for (let e of transaction.effects) {
                if (e.is(infoEffect)) {
                    if (e.value.pos < 0) {
                        set = set.update({ filter: (from, to, value) => (value.type !== e.value.type) });
                    }
                    else {
                        const marker = new InfoMarker(e.value.type, e.value.message);
                        set = set.update({ add: [marker.range(e.value.pos)] });
                    }
                }
            }
            return set;
        }
    });
    const infoGutter = [
        infoState,
        gutter({
            class: "cm-info-gutter",
            markers: v => v.state.field(infoState),
            initialSpacer: () => new InfoMarker('', ''),
        })
    ];

    const sheet$1 = new CSSStyleSheet();sheet$1.replaceSync("/*\n * TunePad\n * Northwestern University\n * michael-horn@northwestern.edu\n *\n * This project was funded by the National Science Foundation (grant DRL-1612619).\n * Any opinions, findings and conclusions or recommendations expressed in this\n * material are those of the author(s) and do not necessarily reflect the views\n * of the National Science Foundation (NSF).\n */\n :host {\n    --error-red: #da575d;\n    --error-red-bg: #f9e4e5;\n    --fail-red: #da575d;\n    --fail-red-bg: #f9e4e5;\n    --info-blue: #4b90d7;\n    --pass-green: green;\n    --pass-green-bg: #ded;\n    --warn-yellow: orange;\n    --warn-yellow-bg: #fed;\n    --output-badge-color: #87c44e;\n    --error-badge-color: #da575d;\n    --warn-badge-color: orange;\n }\n.python-message {\n    padding: 10px;\n    font-size: 12px;\n    position: relative;\n    margin: 0;\n}\n\n.python-message.error {\n    background-color: white;\n    border-left: 10px solid var(--error-red);\n    border-top: 0.5px solid var(--error-red);\n    border-bottom: 0.5px solid var(--error-red);\n}\n\n.python-message.message {\n    background-color: white;\n    border-left: 10px solid var(--info-blue);\n    border-top: 0.5px solid var(--info-blue);\n    border-bottom: 0.5px solid var(--info-blue);\n}\n\n.python-message.warning {\n    background-color: white;\n    border-left: 10px solid var(--warn-yellow);\n    border-top: 0.5px solid var(--warn-yellow);\n    border-bottom: 0.5px solid var(--warn-yellow);\n}\n\n.python-message.test {\n    background-color: var(--fail-red-bg);\n    border-left: 10px solid var(--fail-red);\n    border-top: 0.5px solid var(--fail-red);\n    border-bottom: 0.5px solid var(--fail-red);\n}\n\n.python-message.test.pass {\n    background-color: var(--pass-green-bg);\n    border-left: 10px solid var(--pass-green);\n    border-top: 0.5px solid var(--pass-green);\n    border-bottom: 0.5px solid var(--pass-green);\n}\n\n.icon {\n    width: 20px;\n    margin-right: 0.75em;\n    position: relative;\n    top: 2px;\n}\n.error .icon { fill: var(--error-red); }\n.warning .icon { fill: var(--warn-yellow); }\n.test .icon { fill: var(--fail-red); }\n.test.pass .icon { fill: var(--pass-green); }\n.message .icon { fill: var(--info-blue); }\n\n.message-box {\n    color: #444;\n    position: relative;\n    display: flex;\n    flex-wrap: wrap;\n}\n#message { \n    flex: 1; \n    align-content: center;\n    font-size: 14px;\n}\n\n#status {\n    font-size: 70%;\n    border-radius: 8px;\n    background-color: var(--fail-red);\n    padding: 0 1.5em;\n    font-weight: bold;\n    color: white;\n    width: 40px;\n    height: 16px;\n    line-height: 16px;\n    text-align: center;\n    align-self: center;\n    display: none;\n}\n.test #status { display: block;}\n.test.pass #status { background-color: var(--pass-green); }\n\n.details-box {\n    display: flex;\n}\n.details-box.hidden {\n    display: none;\n}\n#details {\n    line-height: 150%;\n    font-size: 11px;\n    margin-left: 2.5em;\n    margin-right: 1em;\n    background-color: var(--error-red-bg);\n    padding: 1em;\n    overflow-x: auto;\n    flex: 1;\n}\n\n.view-btn {\n    outline: none;\n    border: none;\n    background-color: transparent;\n    border-radius: 0.5em;\n    width: 3em;\n    height: 2em;\n    padding: 0 0.9rem;\n    display: none;\n}\n.error .view-btn { display: block; }\n.error .view-btn.hidden { display: none; }\n.view-btn:hover { background-color: #0001; }\n\n\n.infoLinks {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 65px;\n    margin-left: 1rem;\n}\n\n.infoLinks a {\n    width: 22px;\n    filter: grayscale(100%);\n    text-decoration: none;\n}\n.infoLinks a.ggl-search { width: 20px; }\n.infoLinks a:hover { filter: none; }\n");

    var html$1 = "<div class=\"python-message\">\n    <div class=\"message-box\">\n        <div class=\"icon\"></div>\n\n        <div id=\"message\"></div>\n\n        <div id=\"status\">PASSED</div>\n\n        <button id=\"collapse-button\" class=\"view-btn hidden\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                <path d=\"M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160z\"/>\n            </svg>\n        </button>\n        <button id=\"expand-button\" class=\"view-btn\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                <path d=\"M201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z\"/>\n            </svg>\n        </button>\n    </div>\n    <div class=\"details-box hidden\">\n        <pre id=\"details\">No stack trace available.</pre>\n        <div class=\"infoLinks\">\n            <a class=\"ggl-search\" target=\"_blank\" rel=\"noreferrer\" title=\"Search for error on Google\"></a>\n            <a class=\"ddg-search\" target=\"_blank\" rel=\"noreferrer\" title=\"Search for error on DuckDuckGo\"></a>\n            <!--\n             <a className={ styles.ddg }\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href={ \"//duckduckgo.com?q=\" + error?.name + \" \" + error?.message } \n              data-tooltip=\"search for error message on DuckDuckGo\">\n            &nbsp;\n            </a>\n            -->\n        </div>\n    </div>\n</div>";

    var infoIcon = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n    <!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->\n    <path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/>\n</svg>";

    var crossIcon = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n    <!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->\n    <path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z\"/>\n</svg>";

    var checkIcon = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n    <!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->\n    <path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z\"/>\n</svg>";

    var googleLogo = "<svg viewBox=\"0 0 533.5 544.3\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M533.5 278.4c0-18.5-1.5-37.1-4.7-55.3H272.1v104.8h147c-6.1 33.8-25.7 63.7-54.4 82.7v68h87.7c51.5-47.4 81.1-117.4 81.1-200.2z\" fill=\"#4285f4\"/><path d=\"M272.1 544.3c73.4 0 135.3-24.1 180.4-65.7l-87.7-68c-24.4 16.6-55.9 26-92.6 26-71 0-131.2-47.9-152.8-112.3H28.9v70.1c46.2 91.9 140.3 149.9 243.2 149.9z\" fill=\"#34a853\"/><path d=\"M119.3 324.3c-11.4-33.8-11.4-70.4 0-104.2V150H28.9c-38.6 76.9-38.6 167.5 0 244.4l90.4-70.1z\" fill=\"#fbbc04\"/><path d=\"M272.1 107.7c38.8-.6 76.3 14 104.4 40.8l77.7-77.7C405 24.6 339.7-.8 272.1 0 169.2 0 75.1 58 28.9 150l90.4 70.1c21.5-64.5 81.8-112.4 152.8-112.4z\" fill=\"#ea4335\"/></svg>";

    var ddgLogo = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg viewBox=\"0 0 256 255\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" preserveAspectRatio=\"xMidYMid\">\n    <defs>\n        <linearGradient x1=\"71.0046292%\" y1=\"100%\" x2=\"0%\" y2=\"100%\" id=\"linearGradient-1\">\n            <stop stop-color=\"#394A9F\" offset=\"0%\"></stop>\n            <stop stop-color=\"#6176B9\" offset=\"100%\"></stop>\n        </linearGradient>\n    </defs>\n\t<g>\n\t\t<path d=\"M128.145,18.841 C188.147,18.841 236.788,67.482 236.788,127.484 C236.788,187.485 188.147,236.126 128.145,236.126 C68.144,236.126 19.503,187.485 19.503,127.484 C19.503,67.482 68.144,18.841 128.145,18.841\" fill=\"#DE5833\"></path>\n\t\t<path d=\"M128.143,254.922 C198.526,254.922 255.583,197.865 255.583,127.482 C255.583,57.099 198.526,0.042 128.143,0.042 C57.76,0.042 0.703,57.099 0.703,127.482 C0.703,197.865 57.76,254.922 128.143,254.922 L128.143,254.922 Z M128.143,244.302 C63.625,244.302 11.323,192 11.323,127.482 C11.323,62.964 63.625,10.662 128.143,10.662 C192.661,10.662 244.963,62.964 244.963,127.482 C244.963,192 192.661,244.302 128.143,244.302 L128.143,244.302 Z\" fill=\"#DE5833\"></path>\n\t\t<g transform=\"translate(66.000000, 42.000000)\">\n\t\t\t<path d=\"M9.219,12.13 C9.198,10.303 10.525,9.28 12.288,8.563 C11.481,8.695 10.708,8.897 10.012,9.209 C8.174,10.042 6.8,13.196 6.813,14.689 C15.736,13.787 28.931,14.411 38.58,17.291 C39.292,17.191 40.004,17.091 40.727,17.008 C31.103,12.735 19.661,11.085 9.219,12.13\" fill=\"#D5D7D8\"></path>\n\t\t\t<path d=\"M11.048,1.15 C11.249,1.114 11.453,1.089 11.655,1.055 C9.73,1.294 8.715,1.982 7.27,2.219 C8.839,2.358 14.784,5.133 18.52,6.659 C19.044,6.46 19.516,6.239 19.901,5.978 C17.964,5.692 13.151,1.342 11.048,1.15\" fill=\"#D5D7D8\"></path>\n\t\t\t<path d=\"M20.326,22.756 C19.791,22.962 19.283,23.177 18.843,23.408 C4.298,31.071 -2.127,48.97 1.702,70.418 C5.197,89.936 19.522,156.623 26.081,187.989 C27.996,188.662 29.934,189.287 31.896,189.854 C26.055,161.614 10.112,87.614 6.392,66.831 C2.621,45.688 6.29,30.517 20.326,22.756\" fill=\"#D5D7D8\"></path>\n\t\t\t<path d=\"M79.184,176.618 C78.944,176.778 78.658,176.928 78.353,177.074 C78.127,177.95 77.782,178.614 77.279,178.948 C74.275,180.941 65.79,181.945 61.31,180.941 C60.539,180.77 59.955,180.487 59.499,180.098 C51.85,184.345 40.85,189.999 38.616,188.725 C35.126,186.724 34.62,160.274 35.126,153.783 C35.495,148.883 52.707,156.82 61.08,160.983 C62.931,159.254 67.466,158.097 71.48,157.704 C65.415,142.943 60.942,126.059 63.684,114.086 C59.894,111.445 54.871,105.32 55.917,98.927 C56.723,94.061 69.297,84.855 78.2,84.299 C87.123,83.736 89.904,83.863 97.338,82.083 C97.71,81.994 98.119,81.896 98.547,81.793 C103.123,65.706 92.148,37.719 79.906,25.472 C75.915,21.481 69.779,18.969 62.865,17.643 C60.206,13.994 55.917,10.505 49.845,7.274 C38.57,1.288 24.636,-1.149 11.655,1.055 C11.453,1.089 11.249,1.114 11.048,1.15 C13.151,1.342 17.964,5.692 19.901,5.978 C19.516,6.239 19.044,6.46 18.52,6.659 C16.702,7.351 14.231,7.771 12.288,8.563 C10.525,9.28 9.198,10.303 9.219,12.13 C19.661,11.085 31.103,12.735 40.727,17.008 C40.004,17.091 39.292,17.191 38.58,17.291 C31.755,18.251 25.482,20.019 20.95,22.41 C20.737,22.521 20.535,22.641 20.326,22.756 C6.29,30.517 2.621,45.688 6.392,66.831 C10.112,87.614 26.1589994,162.759995 31.9999994,190.999995 C41.6029994,193.778995 50.5819993,195.999995 61.0799993,195.999995 C69.9919993,195.999995 80.7110013,194.024995 89.0000013,191.999995 C86.0890013,186.386995 82.344,180.18 80.036,175.729 C79.728,176.096 79.485,176.417 79.184,176.618 Z M85.057,70.057 C81.253,70.057 78.15,66.963 78.15,63.137 C78.15,59.329 81.253,56.234 85.057,56.234 C88.882,56.234 91.973,59.329 91.973,63.137 C91.973,66.963 88.882,70.057 85.057,70.057 L85.057,70.057 Z M89.218,44.049 C89.218,44.049 84.861,41.56 81.48,41.602 C74.532,41.693 72.64,44.763 72.64,44.763 C72.64,44.763 73.806,37.445 82.691,38.913 C87.508,39.714 89.218,44.049 89.218,44.049 L89.218,44.049 Z M15.963,53.046 C15.963,53.046 12.834,46.073 21.173,42.656 C29.521,39.238 33.586,44.601 33.586,44.601 C33.586,44.601 27.524,41.859 21.63,45.563 C15.746,49.263 15.963,53.046 15.963,53.046 L15.963,53.046 Z M23.253,67.908 C23.253,63.462 26.848,59.864 31.3,59.864 C35.74,59.864 39.34,63.462 39.34,67.908 C39.34,72.355 35.74,75.949 31.3,75.949 C26.848,75.951 23.253,72.355 23.253,67.908 L23.253,67.908 Z\" fill=\"#FFFFFF\"></path>\n\t\t\t<path d=\"M39.34,67.908 C39.34,63.462 35.74,59.864 31.3,59.864 C26.848,59.864 23.253,63.462 23.253,67.908 C23.253,72.355 26.848,75.951 31.3,75.949 C35.74,75.949 39.34,72.355 39.34,67.908 L39.34,67.908 Z M34.862,67.317 C33.72,67.32 32.781,66.381 32.781,65.227 C32.781,64.07 33.717,63.139 34.862,63.139 C36.016,63.139 36.952,64.07 36.952,65.227 C36.952,66.381 36.016,67.317 34.862,67.317 L34.862,67.317 Z\" fill=\"#2D4F8E\"></path>\n\t\t\t<path d=\"M34.862,63.139 C33.717,63.139 32.781,64.07 32.781,65.227 C32.781,66.381 33.72,67.32 34.862,67.317 C36.016,67.317 36.952,66.381 36.952,65.227 C36.952,64.07 36.016,63.139 34.862,63.139\" fill=\"#FFFFFF\"></path>\n\t\t\t<path d=\"M85.057,56.234 C81.253,56.234 78.15,59.329 78.15,63.137 C78.15,66.963 81.253,70.057 85.057,70.057 C88.882,70.057 91.973,66.963 91.973,63.137 C91.973,59.329 88.882,56.234 85.057,56.234 L85.057,56.234 Z M88.124,62.628 C87.149,62.628 86.344,61.835 86.344,60.839 C86.344,59.856 87.149,59.049 88.124,59.049 C89.141,59.049 89.921,59.856 89.921,60.839 C89.921,61.835 89.141,62.628 88.124,62.628 L88.124,62.628 Z\" fill=\"#2D4F8E\"></path>\n\t\t\t<path d=\"M88.124,59.049 C87.149,59.049 86.344,59.856 86.344,60.839 C86.344,61.835 87.149,62.628 88.124,62.628 C89.141,62.628 89.921,61.835 89.921,60.839 C89.921,59.856 89.141,59.049 88.124,59.049\" fill=\"#FFFFFF\"></path>\n\t\t\t<path d=\"M33.586,44.601 C33.586,44.601 29.521,39.238 21.173,42.656 C12.834,46.073 15.963,53.046 15.963,53.046 C15.963,53.046 15.746,49.263 21.63,45.563 C27.524,41.859 33.586,44.601 33.586,44.601\" fill=\"url(#linearGradient-1)\"></path>\n\t\t\t<path d=\"M82.691,38.913 C73.806,37.445 72.64,44.763 72.64,44.763 C72.64,44.763 74.532,41.693 81.48,41.602 C84.861,41.56 89.218,44.049 89.218,44.049 C89.218,44.049 87.508,39.714 82.691,38.913\" fill=\"url(#linearGradient-1)\"></path>\n\t\t\t<path d=\"M78.2,84.299 C69.297,84.855 56.723,94.061 55.917,98.927 C54.871,105.32 59.894,111.445 63.684,114.086 C63.694,114.093 63.705,114.102 63.715,114.109 C67.504,116.745 92.733,125.256 105.25,125.02 C117.781,124.776 138.361,117.102 136.101,110.953 C133.851,104.802 113.412,116.38 92.094,114.404 C76.306,112.937 73.519,105.864 77.015,100.698 C81.412,94.205 89.421,101.93 102.631,97.977 C115.861,94.035 134.363,86.979 141.228,83.137 C157.101,74.288 134.586,70.618 129.268,73.073 C124.227,75.402 106.681,79.83 98.547,81.793 C98.119,81.896 97.71,81.994 97.338,82.083 C89.904,83.863 87.123,83.736 78.2,84.299\" fill=\"#FDD209\"></path>\n\t\t</g>\n\t\t<g transform=\"translate(100.000000, 189.000000)\">\n\t\t\t<path d=\"M24.316,17.97 C24.316,17.049 25.057,16.234 26.233,15.539 C26.266,14.98 26.57,14.46 27.08,13.983 C18.707,9.82 1.495,1.883 1.126,6.783 C0.62,13.274 1.126,39.724 4.616,41.725 C6.85,42.999 17.85,37.345 25.499,33.098 C23.292,31.217 24.316,26.651 24.316,17.97\" fill=\"#65BC46\"></path>\n\t\t\t<path d=\"M45.925,28.686 C45.961,28.7 46,28.715 46.036,28.729 C52.89,31.374 66.534,36.353 69.497,35.266 C73.492,33.739 72.492,1.813 68.008,0.796 C64.416,-0.001 50.665,9.688 45.255,13.635 C46.212,17.676 47.37,25.68 45.925,28.686\" fill=\"#65BC46\"></path>\n\t\t\t<path d=\"M29.214,31.611 C24.719,30.615 26.221,26.118 26.221,15.64 C26.221,15.606 26.231,15.573 26.233,15.539 C25.057,16.234 24.316,17.049 24.316,17.97 C24.316,26.651 23.292,31.217 25.499,33.098 C25.955,33.487 26.539,33.77 27.31,33.941 C31.79,34.945 40.275,33.941 43.279,31.948 C43.782,31.614 44.127,30.95 44.353,30.074 C40.837,31.758 33.329,32.547 29.214,31.611\" fill=\"#43A244\"></path>\n\t\t\t<path d=\"M27.08,13.983 C26.57,14.46 26.266,14.98 26.233,15.539 C26.231,15.573 26.221,15.606 26.221,15.64 C26.221,26.118 24.719,30.615 29.214,31.611 C33.329,32.547 40.837,31.758 44.353,30.074 C44.658,29.928 44.944,29.778 45.184,29.618 C45.485,29.417 45.728,29.096 45.925,28.686 C47.37,25.68 46.212,17.676 45.255,13.635 C45.044,12.746 44.844,12.046 44.683,11.636 C44.27,10.614 41.089,10.351 37.48,10.704 C33.466,11.097 28.931,12.254 27.08,13.983\" fill=\"#65BC46\"></path>\n\t\t</g>\n\t</g>\n</svg>";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * <python-message type="test" pass="true">{ message }</python-message>
     */
    class PythonMessage extends HTMLElement {
        static DefineElement() {
            if (customElements.get('python-message') === undefined) {
                customElements.define("python-message", PythonMessage);
            }
        }
        constructor() {
            super();
            this.pass = false;
            this.type = "message";
            this.message = "";
            this.root = this.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(sheet$1);
            this.root.innerHTML = html$1;
            this.setHTML('.ggl-search', googleLogo);
            this.setHTML('.ddg-search', ddgLogo);
        }
        connectedCallback() {
            this.message = this.root.host.innerHTML.trim();
            this.setFields();
            this.root.querySelector('#expand-button')?.addEventListener('pointerup', (evt) => {
                this.addClass('#expand-button', 'hidden');
                this.removeClass('#collapse-button', 'hidden');
                this.removeClass('.details-box', 'hidden');
            });
            this.root.querySelector('#collapse-button')?.addEventListener('pointerup', (evt) => {
                this.removeClass('#expand-button', 'hidden');
                this.addClass('#collapse-button', 'hidden');
                this.addClass('.details-box', 'hidden');
            });
        }
        disconnectedCallback() { }
        attributeChangedCallback(name, oldValue, newValue) {
            if (newValue === oldValue)
                return;
            if (name === 'type' && ['message', 'error', 'warning', 'test'].includes(newValue)) {
                this.type = newValue;
            }
            else if (name === 'pass') {
                this.pass = (newValue === 'true');
            }
            else if (name === 'details') {
                this.details = newValue;
            }
            this.setFields();
        }
        setFields() {
            this.addClass('.python-message', this.type);
            this.setHTML('#message', this.message);
            this.setHTML('#details', this.details ? this.details : 'No stack trace available.');
            if (this.pass)
                this.addClass('.python-message', 'pass');
            this.setHTML('#status', this.pass ? 'PASSED' : 'FAILED');
            if (this.type === 'message') {
                this.setHTML('.icon', infoIcon);
            }
            else if (this.type === 'warning') {
                this.setHTML('.icon', warnIcon);
            }
            else if (this.type === 'error') {
                this.setHTML('.icon', errorIcon);
            }
            else if (this.type === 'test' && this.pass) {
                this.setHTML('.icon', checkIcon);
            }
            else if (this.type === 'test') {
                this.setHTML('.icon', crossIcon);
            }
            const q = encodeURI(`q=${this.message.replace(/<[^>]*>?/gm, '')}`);
            this.root.querySelector('.ddg-search')?.setAttribute('href', '//duckduckgo.com?' + q);
            this.root.querySelector('.ggl-search')?.setAttribute('href', '//google.com?' + q);
        }
        setHTML(selector, html) {
            const e = this.root.querySelector(selector);
            if (e)
                e.innerHTML = html;
        }
        addClass(selector, className) {
            const e = this.root.querySelector(selector);
            if (e)
                e.classList.add(className);
        }
        removeClass(selector, className) {
            const e = this.root.querySelector(selector);
            if (e)
                e.classList.remove(className);
        }
    }
    PythonMessage.observedAttributes = [
        'type', // "error" | "message" | "warning" | "test" (default is "message")
        'pass', // "true" | "false" (default is "false")
        'details' // stack trace for error message
    ];

    const sheet$3 = new CSSStyleSheet();sheet$3.replaceSync("/*\n * TunePad\n * Northwestern University\n * michael-horn@northwestern.edu\n *\n * This project was funded by the National Science Foundation (grant DRL-1612619).\n * Any opinions, findings and conclusions or recommendations expressed in this\n * material are those of the author(s) and do not necessarily reflect the views\n * of the National Science Foundation (NSF).\n */\n :host {\n    --output-badge-color: #87c44e;\n }\n\n.python-output {\n    background-color: white;\n    color: #444;\n    font-size: 12px;\n    padding: 10px;\n    border-left: 10px solid var(--output-badge-color);\n    border-top: 0.5px solid var(--output-badge-color);\n    border-bottom: 0.5px solid var(--output-badge-color);\n    margin: 0;\n}\n\n.toolbar {\n    font-size: 14px;\n    display: flex;\n    line-height: 2em;\n}\n\n.expander {\n    flex: 1;\n}\n\n.view-btn {\n    outline: none;\n    border: none;\n    background-color: transparent;\n    border-radius: 0.5em;\n    width: 3em;\n    height: 2em;\n    padding: 0 0.9rem;\n    display: block;\n}\n.view-btn:hover { background-color: #0001; }\n.view-btn.hidden { display: none; }\n\n#output-container {\n    max-height: 250px;\n    font-family: monospace;\n    overflow-y: auto;\n    line-height: 140%;\n    padding: 1em;\n    text-wrap: wrap;\n    font-size: 12px;\n    background-color: #eee;\n    display: block;\n    box-shadow: 0 0 3px inset #0003;\n}\n#output-container.hidden { display: none; }\n\n.counter {\n    color: white;\n    background-color: var(--output-badge-color);\n    font-size: 90%;\n    border-radius: 0.65em;\n    margin-right: 1em;\n    text-align: center;\n    height: 20px;\n    min-width: 1.5em;\n    line-height: 20px;\n    padding: 0 0.4em;\n    align-self: center;\n}\n");

    var html$3 = "<div class=\"python-output\">\n    <div class=\"toolbar\">\n        <div class=\"counter\"></div>\n        Python Output\n        <div class=\"expander\"></div>\n        <button id=\"collapse-button\" class=\"view-btn hidden\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                <path d=\"M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160z\"/>\n            </svg>\n        </button>\n        <button id=\"expand-button\" class=\"view-btn\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                <path d=\"M201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z\"/>\n            </svg>\n        </button>\n    </div>\n    <pre id=\"output-container\" class=\"hidden\">Output Uo</pre>\n</div>\n";

    /*
     * TunePad
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * <python-output>{ output }</python-output>
     */
    class PythonOutput extends HTMLElement {
        static DefineElement() {
            if (customElements.get('python-output') === undefined) {
                customElements.define("python-output", PythonOutput);
            }
        }
        constructor() {
            super();
            this.root = this.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(sheet$3);
            this.root.innerHTML = html$3;
        }
        connectedCallback() {
            const output = this.root.host.innerHTML.trim();
            const count = output.split('\n').length;
            this.setHTML('#output-container', output);
            this.setHTML('.counter', `${count}`);
            this.root.querySelector('.toolbar')?.addEventListener('pointerup', (evt) => {
                this.toggleClass('#expand-button', 'hidden');
                this.toggleClass('#collapse-button', 'hidden');
                this.toggleClass('#output-container', 'hidden');
            });
        }
        disconnectedCallback() { }
        setHTML(selector, html) {
            const e = this.root.querySelector(selector);
            if (e)
                e.innerHTML = html;
        }
        toggleClass(selector, className) {
            const e = this.root.querySelector(selector);
            if (e)
                e.classList.toggle(className);
        }
    }
    PythonOutput.observedAttributes = [];

    const sheet = new CSSStyleSheet();sheet.replaceSync("* {\n    box-sizing: border-box;\n}\n\n.outline-menu {\n    background-color: #f1f1f1;\n    user-select: none;\n    border-left: 1px solid #bbb;\n    min-width: 150px;\n    max-width: 150px;\n    overflow-y: auto;\n    height: 100%;\n    position: relative;\n}\n\n#cell-list {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n}\n\n.item {\n    padding: 1rem 0;\n    text-align: center;\n    touch-action: none;\n}\n.item.active { background-color: #0003; }\n.item:hover { background-color: #0001; }\n\n.item .icon {\n    background-color: var(--piano-color);\n    width: 55px;\n    height: 55px;\n    border-radius: 15px;\n    background-size: 35px;\n    background-repeat: no-repeat;\n    background-position: center;\n    margin: 0 auto;\n}\n\n.item:hover .icon, .item:active .icon, .item.active .icon {\n    box-shadow: 0px 3px 5px #0007;\n}\n\n.name {\n    margin-top: 4px;\n    width: 110px;\n    font-family: var(--main-font);\n    font-size: 13px;\n    font-weight: 600;\n    color: rgb(65, 66, 81);\n    text-align: center;\n    background-color: transparent;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    border: 1px solid transparent;\n    border-radius: 5px;\n    padding: 5px;\n}\n\n.item:hover .name {\n    background-color: #fff7;\n    outline: none;\n}\n\n.name:focus-visible {\n    border: 1px solid rgba(0, 0, 0, 0.467);\n    background-color: rgb(247, 247, 247);\n    outline: none;\n}\n\n.name:focus-within {\n    text-align: left;\n}\n\n.item.definitions .icon {\n    background-color: var(--definitions-color);\n    background-image: url(/assets/images/instruments/definitions.svg);\n}\n.item.piano .icon {\n    background-color: var(--piano-color);\n    background-image: url(/assets/images/instruments/synth.svg);\n}\n.item.bass .icon {\n    background-color: var(--bass-color);\n    background-image: url(/assets/images/instruments/bass.svg);\n}\n.item.guitar .icon {\n    background-color: var(--guitar-color);\n    background-image: url(/assets/images/instruments/guitar.svg);\n}\n.item.marimba .icon {\n    background-color: var(--marimba-color);\n    background-image: url(/assets/images/instruments/marimba.svg);\n}\n.item.drums .icon, .item.drumkit .icon {\n    background-color: var(--drum-color);\n    background-image: url(/assets/images/instruments/drumkit.svg);\n}\n.item.sampler .icon {\n    background-color: var(--sound-color);\n    background-image: url(/assets/images/instruments/voxel.svg);\n}\n.item.sound .icon {\n    background-color: var(--sound-color);\n    background-image: url(/assets/images/instruments/sampler.svg);\n}\n\n.add-button {\n    display: block;\n    border: none;\n    outline: none;\n    fill: #555;\n    width: 50px;\n    height: 50px;\n    margin: 1rem auto;\n    padding: 1em;\n    border-radius: 50%;\n    background-color: #ccc;\n}\n\n.add-button .icon { box-sizing: border-box; }\n.add-button:hover { background-color: #aaa; }\n.add-button:active { background-color: #ccc; }\n\n\n.item.dragging {\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 120px;\n    width: 150px;\n    background-color: #f1f1f1;\n    box-shadow: 0px 5px 5px #0003;\n    z-index: 100;\n}\n\n.spacer {\n    background-color: #ccc;\n    box-shadow: inset 0px 0px 5px #0005;\n    height: 90px;\n}");

    var html = "<div class=\"outline-menu\">\n    <ul id=\"cell-list\">\n    </ul>\n\n\n    <button class=\"add-button\" title=\"Add Cell\">\n        <tunepad-icon icon=\"plus\"></tunepad-icon>\n    </button>\n</div>";

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    /**
     * <tunepad-outline></tunepad-outline>
     */
    class ProjectOutline extends HTMLElement {
        constructor() {
            super();
            this.ordering = [];
            this.root = this.attachShadow({ mode: 'open' });
            this.root.adoptedStyleSheets.push(sheet, sheet$c);
            this.root.innerHTML = html;
            this.menu = this.root.querySelector('#cell-list');
            this.observer = new MutationObserver((mutations, observer) => {
                let refresh = false;
                mutations.forEach(mutation => {
                    if (mutation.addedNodes.length > 0 || mutation.removedNodes.length > 0) {
                        refresh = true;
                    }
                    else if (mutation.target.nodeName.toLowerCase() === 'tunepad-cell') {
                        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                            const cell = mutation.target;
                            // highlight changed
                            if (cell.classList.contains('active')) {
                                this.root.querySelectorAll('li').forEach(c => c.classList.remove('active'));
                                this.root.querySelector(`.item[data-cell="${cell.getAttribute('uuid')}"]`)?.classList.add('active');
                            }
                        }
                        else {
                            refresh = true;
                        }
                    }
                });
                if (refresh)
                    this.rebuildMenu();
            });
        }
        async connectedCallback() {
            const project = this.root.host.parentElement?.querySelector('tunepad-cell-list');
            if (project) {
                this.observer.observe(project, { childList: true, subtree: true, attributes: true });
                this.rebuildMenu();
            }
            this.root.querySelector('.add-button')?.addEventListener('click', e => {
                this.dispatchEvent(new CustomEvent("add-cell", { bubbles: false, composed: true }));
            });
        }
        disconnectedCallback() {
            this.observer.disconnect();
        }
        attributeChangedCallback(name, oldValue, newValue) { }
        rebuildMenu() {
            //const project = this.root.host.parentElement?.querySelector('tunepad-cell-list');
            this.menu.innerHTML = '';
            this.ordering = [];
            // create ordered list of <tunepad-cell> elements
            const cells = this.root.host.parentElement.querySelectorAll('tunepad-cell');
            const sorted = [];
            cells.forEach(cell => sorted.push(cell));
            sorted.sort((a, b) => {
                const oa = a.style.order;
                const ob = b.style.order;
                return oa > ob ? 1 : oa < ob ? -1 : 0;
            });
            sorted.forEach(cell => this.addCell(cell));
        }
        addCell(cell) {
            function setName(name) {
                cell.setName(name);
                cell.emitUpdateEvent('name', name);
            }
            // keep track of the current cell ordering
            this.ordering.push(cell.uuid);
            const instrument = cell.hasAttribute('instrument') ? cell.getAttribute('instrument') : 'definitions';
            const li = document.createElement('li');
            li.classList.add('item', instrument);
            li.setAttribute('data-cell', `${cell.uuid}`);
            const icon = document.createElement('div');
            icon.classList.add('icon');
            const name = document.createElement('input');
            name.classList.add('name');
            name.setAttribute('spellcheck', 'false');
            name.value = cell.getAttribute('name') || '[untitled]';
            name.addEventListener('blur', e => setName(name.value));
            name.addEventListener('keypress', e => { if (e.key === "Enter")
                name.blur(); });
            li.append(icon, name);
            this.menu.append(li);
            if (cell.classList.contains('active')) {
                li.classList.add('active');
            }
            //-------------------------------------------------------------------
            // on pointer down we select the given cell
            //-------------------------------------------------------------------
            let isDragging = false;
            let startY = 0;
            let spacer;
            li.addEventListener('pointerdown', (e) => {
                isDragging = true;
                startY = e.clientY; // - li.offsetTop;
                document.querySelectorAll('tunepad-cell').forEach(c => c.classList.remove('active'));
                this.root.querySelectorAll('li').forEach(c => c.classList.remove('active'));
                cell.classList.add('active');
                li.classList.add('active');
                cell.recompile(true);
                li.setPointerCapture(e.pointerId);
            });
            //-------------------------------------------------------------------
            // on pointer drag see if there has been enough of a vertical change to reorder
            //-------------------------------------------------------------------
            li.addEventListener('pointermove', (e) => {
                if (isDragging) {
                    const deltaY = e.clientY - startY;
                    const torn = li.classList.contains('dragging');
                    if (Math.abs(deltaY) > 5 && !torn) {
                        li.classList.add('dragging');
                        spacer = document.createElement('li');
                        spacer.classList.add('spacer');
                        li.after(spacer);
                    }
                    if (torn && spacer) {
                        const y = e.clientY;
                        li.style.top = `${y - 100}px`;
                        this.menu.childNodes.forEach(node => {
                            const child = node;
                            if (child.classList.contains('item')) {
                                const rect = child.getBoundingClientRect();
                                if (child === this.menu.childNodes[0] && y < rect.top + 20) {
                                    spacer?.remove();
                                    child.before(spacer);
                                }
                                else if (y > rect.top + rect.height / 2 && y < rect.bottom) {
                                    spacer?.remove();
                                    child.after(spacer);
                                }
                            }
                        });
                    }
                }
            });
            li.addEventListener('pointerup', (e) => {
                li.classList.remove('dragging');
                spacer?.replaceWith(li);
                spacer?.remove();
                spacer = undefined;
                li.releasePointerCapture(e.pointerId);
                if (isDragging)
                    this.emitReorderEvent();
                isDragging = false;
            });
        }
        emitReorderEvent() {
            function changed(a, b) {
                if (a.length !== b.length)
                    return true;
                return !(a.every((value, i) => value === b[i]));
            }
            const reordering = [];
            this.menu.querySelectorAll('.item').forEach(el => {
                reordering.push(el.getAttribute('data-cell') ?? '');
            });
            if (changed(this.ordering, reordering)) {
                this.ordering = reordering;
                this.dispatchEvent(new CustomEvent("reorder-cells", {
                    bubbles: false,
                    composed: true,
                    detail: { ordering: this.ordering.map(v => p(v)) }
                }));
            }
        }
    }
    ProjectOutline.ELEMENT = "tunepad-outline";
    ProjectOutline.observedAttributes = [];

    /*
     * TunePad
     *
     * Michael S. Horn
     * Northwestern University
     * michael-horn@northwestern.edu
     *
     * This project was funded by the National Science Foundation (grant DRL-1612619).
     * Any opinions, findings and conclusions or recommendations expressed in this
     * material are those of the author(s) and do not necessarily reflect the views
     * of the National Science Foundation (NSF).
     */
    PythonEditor.DefineElement();
    PythonMessage.DefineElement();
    PythonOutput.DefineElement();
    customElements.define(DrumPad.ELEMENT, DrumPad);
    customElements.define(Piano.ELEMENT, Piano);
    customElements.define(Marimba.ELEMENT, Marimba);
    customElements.define(CircleOfFifths.ELEMENT, CircleOfFifths);
    customElements.define(Timeline.ELEMENT, Timeline);
    customElements.define(TimelineMidi.ELEMENT, TimelineMidi);
    customElements.define(TimelineScore.ELEMENT, TimelineScore);
    customElements.define(TimelineWaveform.ELEMENT, TimelineWaveform);
    customElements.define(Block.ELEMENT, Block);
    customElements.define(BlockMenu.ELEMENT, BlockMenu);
    customElements.define(NoteMenu.ELEMENT, NoteMenu);
    customElements.define(TunePadCell.ELEMENT, TunePadCell);
    customElements.define(TunePadProject.ELEMENT, TunePadProject);
    customElements.define(TunePadProjectMenu.ELEMENT, TunePadProjectMenu);
    customElements.define(ProjectOutline.ELEMENT, ProjectOutline);
    customElements.define(TunePadInstrument.ELEMENT, TunePadInstrument);
    customElements.define(ContextMenu.ELEMENT, ContextMenu);
    customElements.define(ContextMenuItem.ELEMENT, ContextMenuItem);
    customElements.define(TunePadIcon.ELEMENT, TunePadIcon);
    customElements.define(Passphrase.ELEMENT, Passphrase, { extends: 'dialog' });
    customElements.define(BPMDialog.ELEMENT, BPMDialog, { extends: 'dialog' });
    customElements.define(TimeSignatureDialog.ELEMENT, TimeSignatureDialog, { extends: 'dialog' });
    customElements.define(KeyDialog.ELEMENT, KeyDialog, { extends: 'dialog' });
    // Firefox bug fix. Audio context won't initialize correctly without a user event
    document.addEventListener('pointerdown', e => {
        q.init();
        q._instance.context = new AudioContext();
    }, { once: true });

})();
//# sourceMappingURL=tunepad.min.js.map
